
These subcommands manage databases that map functions to the testcases that
invoke them.  To support this mapping, a function must invoke Debug::ft and
be captured in a <test>.funcs.txt function trace (usually by having a script
execute >testcase begin <test>, followed by >save funcs &testcase.name).  A
code coverage database is then created as follows:

1. copy all testcase function trace summaries (*.funcs.txt) to OutputPath/
2. >read buildlib         // set up compile environment
3. >parse - win32 $files  // compile the code base (here, for Win32)
4. >check rsc $files      // finds functions that invoke Debug::ft
5. >coverage update       // scans test traces (OutputPath/*.funcs.txt) and
                          // saves the database in InputPath/coverage.db.txt

The database can be loaded later on with >coverage load db1.  It can then be
updated with steps 2 to 5, which finds modified functions and traces from
tests that have been added or re-executed.  The >coverage update subcommand
displays the following:

1. Functions that have been added, changed, or deleted.
2. Testcases that should be rerun to test the functions that were modified.
   The state of these testcases is also set to "reexecute" in the testcase
   database.
3. Functions that were modified but which are not invoked by any testcase.

Finally, >coverage under N lists all functions that are invoked by fewer than
N testcases, and >coverge erase deletes, from the database, a function that
is no longer valid (this should only be necessary after a template function
or a function in a class template has been removed from the code base).