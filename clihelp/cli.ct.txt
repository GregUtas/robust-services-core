Commands in this increment often take an expression as the last parameter.
An expression contains variables and operators.  Variables can be defined
using the >assign command.  The code library also provides the following
variables, which cannot be modified using the >assign command:
   $dirs : directories that have been added to the code base by >import
  $files : all code files (headers and implementations) found in $dirs
   $hdrs : headers in $files
   $cpps : implementations (.c*) in $files
   $exts : headers whose directories were not included by an >import
   $subs : headers that declare a subset of the items in $exts in order
           to make them available during a compile
   $vars : all variables (those above, or user-defined)

An expression is evaluated left to right, but parentheses can be used to
override this.  A variable is a set of either directories or files.  The
following notation is used below:
  <ds> : the name of a directory (from >import) or a set of directories
  <fs> : the name of a specific file or a set of files
   <s> : a <ds> or an <fs>

A list of current operators appears below.  What the operator returns is
on the left; it becomes the input to commands such as >assign and >type.
The type of parameter(s) that the operator expects are shown on the right:
   <s> = <s1> | <s2>    set union of <s1> and <s2> (the '|' is optional)
   <s> = <s1> & <s2>    set intersection of <s1> and <s2>
   <s> = <s1> - <s2>    set difference between <s1> and s2>
  <fs> = f <ds>         the files in <ds>
  <ds> = d <fs>         the directories in <fs>
  <fs> = <fs> fn <str>  files in <fs> with the file name <str>*
  <fs> = <fs> ft <str>  files in <fs> with the file type *.<str>
  <fs> = <fs> ms <str>  files in <fs> that contain <str>
  <fs> = <fs> in <ds>   files in <fs> whose directory is in <ds>
  <fs> = im <fs>        implements: for each item declared in <fs>,
                        add the file that defines it, and vice versa
  <fs> = us <fs>        users: files that #include any in <fs>
  <fs> = ub <fs>        used by: files that any in <fs> #include
  <fs> = as <fs>        affecters: ub <fs>, transitively
  <fs> = ab <fs>        affected by: us <fs>, transitively
  <fs> = ca <fs>        common affecters: (as f1) & (as f2) & ... (as fN)
  <fs> = ns <fs>        needers: files that also need <fs> in a build
                        (im ab <fs>, transitively)
  <fs> = nb <fs>        needed by: files that <fs> also needs in a build
                        (im as <fs>, transitively)

Here is how the last six operators act on the <fs> parameter:
  lower layers     <fs> parameter     higher layers
       |<----ub/as/nb----|----us/ab/ns---->|

The im operator links declarations with definitions, so it requires all
files that affect <fs>, or that are affected by <fs>, to have been parsed.
The ns and nb operators use the im operator, so they also require these
files to have been parsed.  The parsing occurs automatically if required.

Here are some examples of library commands:
  >import nbase "nb" : add NodeBase files to the code base
  >import sbase "sb" : add SessionBase files to the code base
  >type us Thread.h : show all files that #include Thread.h
  >assign h1 f sbase ft cpp : h1 = all SessionBase implementations
  >assign c1 ab Thread.h : c1 = files that could be affected by
    changing Thread.h
  >assign s1 h1 & c1 : s1 = SessionBase .cpps that could be affected
    by changing Thread.h