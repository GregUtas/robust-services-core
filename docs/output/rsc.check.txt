LINE COUNTS
 source code   60524
       blank   34558
          //   14649
separator //    6737
   tagged //     203
     text //   24371
          /*       0
           {   11868
           }   10285
          };    1586
   Debug::ft    3835
     fn_name    3814
    ...split      94
    #include    5119
    #<other>     992
       using     718
       TOTAL  179353

WARNING COUNTS
  W006    75  C-style cast
  W007    52  Functional cast
  W008    81  reinterpret_cast
  W009   517  Cast down the inheritance hierarchy
  W010    36  Cast removes const qualification
  W011     3  Pointer arithmetic
  W015     3  #include not sorted in standard order
  W017   218  Using statement in header
  W019    28  Unused argument
  W020     9  Unused class
  W021    18  Unused data
  W022     1  Unused enum
  W023    20  Unused enumerator
  W026   128  Unused function
  W027     3  Unused typedef
  W030     5  No referent for friend declaration
  W032     9  Member hides inherited name
  W033     1  Class could be namespace
  W036   141  Member could be private
  W037    60  Member could be protected
  W038    11  Typedef of pointer type
  W041    27  Data is init-only
  W042     1  Data is write-only
  W044    24  Data is not private
  W047    76  Data could be const
  W048    15  Data could be const pointer
  W050    42  Default constructor invoked: POD members not initialized
  W051     3  Default constructor invoked
  W052    19  Default copy constructor invoked
  W053    15  Default assignment operator invoked
  W054    65  Base class constructor is public
  W055     1  Single-argument constructor is not explicit
  W056     1  Member not included in member initialization list
  W059    27  Base class virtual destructor is not public
  W069   355  Virtual function is public
  W071   100  Virtual function has no overrides
  W076    76  Adjacent arguments have the same type
  W080    35  Argument could be const
  W082    72  Function could be const
  W084   144  Function could be free
  W091   282  Line contains adjacent spaces
  W094     1  Line length exceeds the standard maximum
  W095     3  Function not sorted in standard order
  W098   467  Function does not invoke Debug::ft
  W099    17  Function does not invoke Debug::ft as first statement
  W101    29  Override of Base.Display not found
  W102    26  Override of Object.Patch not found
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE
W006 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(509):    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1083):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2109):    info_ = (LineInfo*) Memory::Alloc(sizeof(LineInfo) * lines_, MemTemp);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(501):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(533):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(428):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1025):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(346):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1209):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1384):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(161):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(466):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(556):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(957):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1033):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(77):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(220):    if(addr != nullptr) return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(98):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(386):          auto src = (ptr_t) this;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(225):    auto seg = (Segment*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(282):    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(333):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(384):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(238):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(261):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(313):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(350):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(714):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(784):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(809):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(841):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(846):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(889):    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(919):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(142):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(162):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(138):    return CreateThread(
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(345):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(163):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(125):    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(235):    auto addr = (TraceRecord*) &buff_[end_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(428):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(446):             record = (TraceRecord*) buff_;  // case (b)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(450):          record = (TraceRecord*) next;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(459):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(485):       auto record = (TraceRecord*) &buff_[start_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(592):    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(58):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(77):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(71):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(90):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(131):       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(58):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(113):    if(getnameinfo
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(87):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(205):    if(setsockopt(socket_, SOL_SOCKET, SO_RCVBUF,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(212):    if(getsockopt(socket_, SOL_SOCKET, SO_RCVBUF,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(222):    if(setsockopt(socket_, SOL_SOCKET, SO_SNDBUF,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(229):    if(getsockopt(socket_, SOL_SOCKET, SO_SNDBUF,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(43):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(71):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(116):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(224):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(46):       if(getsockopt(Socket(), SOL_SOCKET, SO_MAX_MSG_SIZE,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(75):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(113):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(752):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(771):             else if(((AnalyzeSapEvent*) ogEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) ogEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(176):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(285):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(443):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W007 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(111): ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(275): ipport_t CipUdpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(378): ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(139):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(171):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(556):       stream << setw(12) << LineType(t)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(568):          stream << setw(6) << WarningCode(Warning(w))
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(586):       stream << WarningCode(w) << SPACE << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(260):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(312):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(370):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(376):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(381):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1340):    if(count >= 0) return size_t(count);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(658):    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1306):    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(823):          stream << uint64_t(num_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(155):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(838):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(65):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(125):       stream << int(index_[i]) << SPACE;
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(106):          return RestartLevel(errval_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(484):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(692):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1090):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2441):       auto heap = Memory::Heap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(207):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(97):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(362):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(543):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(158):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp(38):    size_(int16_t(size)),
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3033):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3064):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(87):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(70):    Faction GetFaction() const { return Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(92):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(79):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(701):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(127):    if(msgs->AvailCount() <= size_t(NoIngressMessageCount_)) return true;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(129):    return (WorkQCurrLength(Message::Ingress) >= size_t(NoIngressQueueLength_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(143):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(148):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(462):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(59):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(75):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(54):    Id Stid() const { return Id(stid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(227):       return MsgSize(Memory::Align(size, Log2Align));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(108): ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(342):       if(rows_[row].size() > size_t(end))
W008 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(70):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(71):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(497):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(97):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(134):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(120):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(528):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(61):    auto fake = reinterpret_cast< const CodeDir* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(769):    auto fake = reinterpret_cast< const CodeFile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(272):    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(64):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(118):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(575):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(66):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(133):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(161):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(137):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(75):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(103):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(96):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(64):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(141):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(477):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(116):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(69):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(89):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(81):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(100):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(33):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1170):    auto fake = reinterpret_cast< const Thread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(71):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1179):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1699):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2260):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3494):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(276):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(69):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(206):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), max, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(251):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), len, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(75):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(113):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(88):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(97):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(87):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(578):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(747):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(868):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(956):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(573):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(886):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(202):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(210):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(225):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(124):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(102):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(92):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(77):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(64):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(283):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(77):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(190):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(191):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(119):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(142):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(154):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(66):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(511):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(268):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(70):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(96):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(97):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1466):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(85):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(206):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(89):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(100):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(92):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W009 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(139):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(151):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(172):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(182):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(68):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(114):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(165):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(51):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(53):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(543):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(573):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(885):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(919):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1049):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1448):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1453):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(405):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(920):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(463):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(472):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(504):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(505):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(624):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(782):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(818):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1044):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1049):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(759):    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2394):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2490):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2513):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2708):          auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(77):    auto curr = static_cast< CodeFileSet* >(Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(89):       curr = static_cast< CodeFileSet* >(prev->Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(109):    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(121):       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(367):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(399):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(400):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(512):       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(544):       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(579):    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(64):    auto that = static_cast< CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(100):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(137):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(151):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(209):       if((type == Cxx::Function) && (usingClass->GetTemplate() == this) &&
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(222):          auto args = static_cast< ClassInst* >(usingClass)->GetSpec()->Args();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1052):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1055):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1072):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1843):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1869):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(779):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(849):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(862):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1275):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1283):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1418):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1462):    auto ref = static_cast< CxxNamed* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1586):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(356):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(371):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(416):          return static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(424):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(429):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(440):             item = static_cast< CxxScoped* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(718):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1013):          auto cls = static_cast< Class* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1170):       auto cls = static_cast< Class* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2003):          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2013):       ref = static_cast< Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1293):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1361):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1666):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1712):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2492):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2843):             static_cast< ClassData* >(data)->SetInit(m->get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3043):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4345):       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4346):       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(79):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(271):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(307):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1372):          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1514):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1526):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1564):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1569):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1842):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(383):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(422):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(430):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(438):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(444):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(409):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(435):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(487):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(520):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(549):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(591):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(614):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(710):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1102):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1107):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1132):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1519):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1538):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1633):    auto dtor = static_cast< Class* >
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1682):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1702):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1723):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1747):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1931):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1933):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2271):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2310):       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2333):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1513):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1517):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp(92):    sourcePathCfg_.reset
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(254):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(503):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(577):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(616):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(713):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(714):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(873):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1147):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1253):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1276):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1304):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1498):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1598):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1647):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1653):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1906):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1912):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2041):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2083):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2573):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2620):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2767):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2793):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2875):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2911):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2969):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3173):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3551):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(253):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(94):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(118):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(84):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(217):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(91):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(125):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(189):                   auto last = static_cast< const FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(261):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(300):          curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(368):       curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(421):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(486):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(89):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(66):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(61):    statsFileName_.reset
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(198):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(66):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(156):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(175):    auto svc = static_cast< TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(266):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(412):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(105):    auto svc = static_cast< TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(106):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(240):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(441):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(593):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(654):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(881):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(969):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(763):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(881):          auto pptr = static_cast< TlvMessage* >
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(181):    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(533):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(82):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(80):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(154):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(220):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(277):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(434):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(48):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(48):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(124):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(138):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(819):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(906):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1118):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1350):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1563):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(108):    auto sbbuff = SbIpBufferPtr(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(58):    noIngressQueueLength_.reset
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(70):    noIngressMessageCount_.reset
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(223):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(284):    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(301):       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(355):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(857):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(859):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(888):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(457):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(461):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(462):          icEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(512):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(518):          icEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(519):          modifierInit = static_cast< AnalyzeSapEvent* >
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(771):             else if(((AnalyzeSapEvent*) ogEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) ogEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(877):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(881):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(943):             auto sibling = static_cast< InitiationReqEvent* >
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(984):    auto& initEvent = static_cast< InitiationReqEvent& >(icEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(97):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(73):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(60):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(63):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(100):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(116):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(118):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(138):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(153):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(154):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(169):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(171):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(177):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(198):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(225):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(255):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(272):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(296):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(311):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(325):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(340):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(355):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(357):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(376):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(397):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(412):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(428):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(445):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(446):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(463):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(477):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(479):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(509):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(524):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(525):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(540):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(541):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(562):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(581):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(596):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(598):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(623):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(652):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(667):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(683):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(699):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(701):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(722):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(737):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(753):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(755):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(772):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(798):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(817):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(832):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(851):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(866):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(882):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(884):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(893):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(920):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(921):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(959):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(975):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(991):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(992):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1007):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1008):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1042):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1063):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(73):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(78):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(86):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(90):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(130):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(82):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(82):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(114):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(195):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(197):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(201):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(202):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(265):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(94):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(115):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(105):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(177):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(212):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(203):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(263):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(286):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(302):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(56):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(58):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(56):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(58):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(56):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(58):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(292):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(297):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(299):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(320):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(321):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(373):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(400):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(482):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(484):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(497):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(519):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(533):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(539):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(545):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(579):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(582):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(637):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(644):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(659):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(667):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(685):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(448):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1167):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1204):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1274):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1301):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1315):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1381):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1425):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1974):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1975):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2005):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2020):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2022):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2029):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2126):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2128):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2129):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2130):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2225):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2239):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2253):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2267):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2283):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2298):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2312):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2327):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2342):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2343):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2358):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2359):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2373):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2395):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(290):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(617):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(622):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(623):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(640):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(648):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(686):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(716):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(811):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(813):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(908):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(930):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(961):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(963):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(969):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(993):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1018):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1019):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1039):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1040):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1044):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1063):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1065):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1069):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1109):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1110):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1112):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1157):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(133):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(135):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(83):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(173):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(179):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(196):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(247):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(250):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(362):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(415):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(748):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(751):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(824):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(892):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(999):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1000):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1022):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1053):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1054):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1077):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(54):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(55):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(57):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(90):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(107):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(109):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(173):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(183):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(207):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(225):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(244):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(294):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(312):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(315):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(357):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(360):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(410):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(428):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(446):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(464):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(482):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(515):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(516):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(546):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(565):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(566):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(596):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(616):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(617):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(81):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(255):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(299):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(329):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(191):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(436):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(463):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(470):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(542):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(545):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(605):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(625):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(662):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(667):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(669):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(690):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(691):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(151):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(159):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(712):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(729):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(741):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(758):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(779):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(786):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(947):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(983):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(139):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(69):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(509):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(526):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(580):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(858):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(986):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(987):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1025):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1034):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1045):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1063):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1082):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1083):    auto& tssm = static_cast< TestSsm& >(ssm);
W010 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(501):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(533):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1376):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1839):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(142):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(428):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(464):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(816):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(940):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1348):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2583):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(532):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1025):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2134):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3007):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3400):    func->SetTemplate(const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(346):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1099):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1209):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1384):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1752):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(161):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(466):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(556):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(957):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1033):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(297):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(289):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1517):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(98):       objects[count++] = const_cast< Base* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(138):    return CreateThread(
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(356):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(698):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W011 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(205):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(261):    bytes += hdrSize_;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(29): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(26): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(96): #include "AnModule.h"
W017 Using statement in header
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(36): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(32): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(32): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(49): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(50): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(51): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(54): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(55): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxRoot.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(44): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(32): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(38): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(42): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(30): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(30): using namespace SessionTools;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(41): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(42): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(44): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(29): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(44): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(45): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(30): using namespace NodeTools;
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(44): using namespace SessionBase;
W019 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(81/1):    word AddForward(string& item, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(82/1):    word RemoveForward(string& item, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(83/1):    word RemoveUsing(string& item, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(88/1):    word GetEpilog(string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(580/1):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(584/1):    static void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(52/2): void SE_Handler(uint32_t errval, void* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(354/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(362/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(87/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122/1):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(173/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(302/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(308/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(314/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(52/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(435/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(159/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W020 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(296): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(192): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(54):    class SigAlrm : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(68):    class SigBus : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(96):    class SigQuit : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(110):    class SigSys : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(124):    class SigVtAlrm : public PosixSignal
W021 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(388):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1073): const string SingleRule(COMMENT_STR + string(78, '-'));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(517): extern const Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(518): extern const Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(153):    static const id_t LastNbIndex     = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(82):    static const Bid MaxBid = MaxSegments << ObjectsPerSegmentLog2;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(81):    static const id_t LastNtIndex    = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(105):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(133):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(225):    static const Ind MaxInd         = UINT8_MAX;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(144):    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(57):    static const id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(86):    static const id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const id_t LastSbIndex   = LastNwIndex + 5;
W022 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(87):    enum Location
W023 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(152):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(58):       LowPriority,       // preemptable threads
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(148):    DebugLog,    // only useful to software designers
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):       NotQueued,     // being built by a factory
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(90):       ContextQ,      // has arrived at a context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       PsmIncomingQ,  // has arrived at a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       PsmOutgoingQ,  // has been sent by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(93):       PsmPendingQ    // being built by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(103):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(104):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(105):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(106):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(107):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(108):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(115):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(97):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(99):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(100):       ParameterInvalid,  // parameter not valid for this signal
W026 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(66):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(214):    Digit GetDigit(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(180):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(247):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(318):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(371):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(195):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(434):    bool operator!=(const WarningLog& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(423):    Numeric(NumericType type, size_t width, bool sign)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(126):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(261):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(59):    std::string& Prefix(std::string&& scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(188):    size_t GetCurr() const { return lexer_.Curr(); }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(87):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(120):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(65):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(57):    word GetCurrValue() const { return *curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(90):    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(119):    bool SetVptr(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(126):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(133):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(167):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(113):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(72):    ticks_t TicksPerSec();
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(121):    ticks_t UsecsToTicks(usecs_t usecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(125):    const SysTime& TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(96):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(60):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(61):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(54):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(66):    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h(39):    size_t find(fn_name_arg func, const char* str);
  C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(79):    static bool Verify(MemoryType type, void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(103):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(95):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(107):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(121):    static void* operator new(size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(122):    static void* operator new[](size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(124):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(125):    static void operator delete(void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(126):    static void operator delete[](void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(135):    void MorphTo(Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h(57):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(101):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(106):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(71):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(76):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(122):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(170):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(169):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(96):    static void operator delete(void* addr, void* where) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(77):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(48):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(110):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(129):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(92):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(96):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(101):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(292):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(446):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(133): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(272):    size_t MsgCount(bool priority, bool standard) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(219):    void SetFaction(Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(53):    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(81):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(53):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(196):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(83):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(74):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(138):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(196):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(326):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(86):    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(93):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(106):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(215):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(219):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(360):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(371):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(85):    static void operator delete(void* addr, SbPoolUser user);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(125):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(129):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(134):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(79):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(58):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(60):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(64):    TextTlvMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(70):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(64):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(69):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(78):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(169):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(175):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(189):    TlvParmPtr AddBytes(const byte_t* src, MsgSize size, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(195):    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(251):    byte_t* FindBytes(MsgSize& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(258):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(273):    int ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(72):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(78):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(76):    virtual CliText* CreateText() const override;
W027 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(176): typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(177): typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
W030 No referent for friend declaration
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(56):       friend class Singleton< SigAlrm >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(70):       friend class Singleton< SigBus >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(98):       friend class Singleton< SigQuit >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(112):       friend class Singleton< SigSys >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(126):       friend class Singleton< SigVtAlrm >;
W032 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(316):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(883):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(213):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(69):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(167):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
W033 Class could be namespace
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(34): class Log
W036 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(146):    typedef uint8_t DigitCount;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(183):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(202):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(226):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(234):    virtual void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(238):    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(419):    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1152):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(495):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(45):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(112):    bool IsTemplateHeader() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(117):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(158):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(162):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(348):    Function* FindFuncByRole(FunctionRole role, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(352):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(778):    Namespace* OuterSpace()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(784):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(242):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(282):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(260):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(541):    static size_t GetPos() { return Frame_->GetPos(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(467):    TypeName* Names_back() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(977):    size_t MinArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(982):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1044):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(112):    std::string NextOperator() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(229):    bool ThisCharIs(char c);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(69):    CodeDir* FindDir(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(90):    LibrarySet* FindVar(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(61):    bool IsReadOnly() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(53):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(132):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(170):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(189):    virtual Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(193):    virtual void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(67):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(81):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(60):    const char* Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(75):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(101):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    const char* HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1893):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(70):    typedef uint32_t InstanceId;  // identifies an object within a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(71):    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(191):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(56):    static bool NullifyObjectData() { return NullifyObjectData_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(66):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(57):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(61):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(77):    StatisticsGroup* GetGroup(id_t gid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(81):    void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(85):    static std::string StatsFileName() { return StatsFileName_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(80):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(131):    const char* strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(126):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(130):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(162):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(239):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(178):    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(87):    static void operator delete(void* addr) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(91):    static void* operator new(size_t size, void* where);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3278):    typedef id_t Test;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(163):    virtual void ConcludeTest(CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(95):    virtual bool ExitOnRestart(RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(115):    virtual MsgSize PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(95):    IpPort* Provision(ipport_t port);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(54):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(58):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(106):    bool operator==(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(92):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(190):    void Close();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(84):    word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(124):    word Send(const byte_t* data, size_t len);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(68):    word SendTo(const byte_t* data, size_t len, const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(71):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(70):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(55):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(54):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(133):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(71):    const char* FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(75):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(91):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(59):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(63):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(159):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(163):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(167):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(92):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(63):    static word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(71):    static ptrdiff_t CellDiff2();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(348):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(352):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(118):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(125):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(69):    typedef uint8_t Priority;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(252):    virtual bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(115):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(119):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(97):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(158):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(163):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(184):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(245):    typedef uint16_t Fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(267):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(278):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(282):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(161):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(421):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(45):    typedef uint8_t Id;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(57):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(341):    TestPsm* GetTestPsm() const { return testPsm_; }
W037 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(112):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(77):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(85):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(89):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(735):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(121):    bool IsInternal() const { return decl_.internal; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(261):    void Accessed() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(271):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(275):    std::string strLocation() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(280):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(766):    Cxx::ItemType GetLocale() const { return locale_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(770):    TemplateRole GetTemplateRole() const { return role_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(304):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(308):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(312):    bool WasInited() const { return inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(53):    CodeFile* GetImplFile() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(72):    virtual bool GetScopedName(std::string& name, size_t n) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(94):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(112):    FileRole GetFileRole(const CodeFile* file) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(120):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(140):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(102):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(157):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(177):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(203):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(225):    bool GetFileName(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(237):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(248):    const char* Help() const { return help_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(252):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(48):    typedef uint8_t sel_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(69):    typedef id_t ClassId;         // identifies a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(48):    ticks_t GetTicks() const { return ticks_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(52):    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(56):    SysThreadId Nid() const { return nid_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(70):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(62):    IpPort* Port() const { return port_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(67):    IoThread* GetThread() const { return thread_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(97):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(147):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(256):    MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(70):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(95):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(77):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(86):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(132):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(63):    typedef ServicePortId PortId;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
W038 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(86): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(87): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(103): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(108): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(109): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(59): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(60): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W041 Data is init-only
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(406):    static bool Initialized;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(149):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(133):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(287):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp(307):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(156):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1697):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(130):    static T* Instance_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(482):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(676):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(711):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(258):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(454):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(62):    static bool Registered;
W042 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(227):    LibraryVarSet* varSet_;
W044 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(307):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(269):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(179):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(183):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(89):    std::atomic_uint32_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(93):    std::atomic_uint32_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(97):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(101):    uint32_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(133):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(99):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(104):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(108):    size_t rxSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(112):    size_t txSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(116):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(120):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(124):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(128):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(132):    ticks_t ticks0_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(136):    byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(492):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(496):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(531):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(539):    const EventHandler::Rc rc_;
W047 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(171):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(340):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(356):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h(92):    RegCell did_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(96):    stringVector intIncls_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(364):    RegCell fid_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(523): extern uint8_t Indent_Size;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(293):    CxxToken* via_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(73):    bool const_ : 1;       // type is const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(74):    bool constptr_ : 1;    // pointer is const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(77):    TagCount refs_ : 8;    // number of references
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(210):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(77):    FlagId fid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(93):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(97):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(117):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(93):    Id id_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(105):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(140):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(114):    signal_t value_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(126):    uint8_t severity_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(130):    Flags attrs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(134):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(118):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(122):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(100):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(104):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(53):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(58):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(65):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static ticks_t PrevToCurrTicks;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(96):    DynString name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(108):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(105):    char abbr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(109):    bool safe_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(105):    size_t size_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(78):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1043):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1555):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(179):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(183):    ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(147):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(93):    PotsFeature::Id fid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(97):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(59):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(312):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(336):    Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(214):    Id eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(267):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(120):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(124):    ServiceId aid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(128):    TriggerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(136):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(134):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(160):    static word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(187):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(373):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(118):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(117):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(136):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(148):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(118):    Id tid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(186):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(147):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(161):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(165):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(194):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(198):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(144):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W048 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(143):    const char* default_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(147):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(69):    const char* chars_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(109):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(113):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(331):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(339):    const char* tag_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(110):    const char* text_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(118):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(122):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(187):    IpService* service_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(221):    PotsProfile* profile_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(133):    const char* abbr_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(137):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(271):    const char* name_;
W050 Default constructor invoked: POD members not initialized
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.win.cpp(55):    _finddata_t fileAttrs;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1991):       WarningLog log;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(815):    FileLevel item;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1053):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1355):    DataInitAttrs attrs;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1592):    SymbolView local;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(844):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(840):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2151):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1299):       SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(285):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2317):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(616):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2516):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(665):       IntLiteral::Tags tags;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(712):       FloatLiteral::Tags tags;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(776):    IntLiteral::Tags tags;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1496):    SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(998):             SymbolView view;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(92):    SingletonTuple entry;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(44):    LARGE_INTEGER frequency;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(75):       LARGE_INTEGER now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(81):       _timeb now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    _timeb timebuff;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(43):    tm timeofday;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(52):    in_addr result;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(48):    addrinfo hints;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(105):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(52):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(261):    WSAData wsaData;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(40):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(65):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(113):    sockaddr_in host;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(221):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(66):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(98):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(233):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(360):    MessageEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(193):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(316):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(336):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(397):    ParmIterator locpit;
W051 Default constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2290):    CxxUsageSets symbols;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3178):    CxxUsageSets usages;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(147):    auto list = std::unique_ptr< pollfd[] >(new pollfd[count]);
W052 Default copy constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(159):    arg_(arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1921):    attrs_(Numeric::Nil)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(371):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(407):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(54):    objAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(41): GlobalAddress::GlobalAddress() : sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(52):    sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(66):    sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(80):    sbAddr_(sbAddr)
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(43):    txAddr(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(44):    rxAddr(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(56):    locAddr_(msg.GetReceiver()),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(57):    remAddr_(msg.GetSender()),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(71):    locAddr_(GlobalAddress::NilAddr),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(72):    remAddr_(GlobalAddress::NilAddr),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(597):    locAddr_(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(598):    remAddr_(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(41):    locAddr_(mt.LocAddr()),
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(42):    remAddr_(NilLocalAddress),
W053 Default assignment operator invoked
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(147):       addr = GlobalAddress(peer, PotsCallIpPort, PotsCallFactoryId);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(202):       addr = GlobalAddress(peer, PotsShelfIpPort, PotsShelfFactoryId);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(35): const GlobalAddress GlobalAddress::NilAddr = GlobalAddress();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(204):    peerPort->remAddr_ = peerPrevRemAddr;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(205):    remAddr_ = GlobalAddress::NilAddr;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(317):    peerPrevRemAddr = peerPort->remAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(318):    locAddr_ = GlobalAddress(peerPort->locAddr_, locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(319):    remAddr_ = peerPort->locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(320):    peerPort->remAddr_ = locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(377):       remAddr_ = msg.GetSender();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(382):          locAddr_ = GlobalAddress(msg.RxIpAddr(), locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(421):       locAddr_ = GlobalAddress(txaddr, locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(422):       remAddr_ = msg.GetReceiver();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(481):       peer->remAddr_ = locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(419):       addr = GlobalAddress(addr, dest->EnsurePort()->LocAddr().SbAddr());
W054 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(234):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(const char* help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(43):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(47):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(55):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(68):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(84):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(98):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(114):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(127):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(157):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(173):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(185):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(201):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(219):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(134):    explicit Counter(const std::string& expl, uint32_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(52):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(45):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(57):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(99):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(111):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(125):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(140):    TestcaseAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(159):    explicit TestcaseCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(49):    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(53):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(39):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(54):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(67):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(80):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(93):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(106):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(121):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(134):    NwStatusCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(40):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(44):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(49):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(53):    SysIpL2Addr(const SysIpL2Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(40):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(45):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(51):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(64):    SysIpL3Addr(const SysIpL3Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(41):    PbSizesCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(272):    PotsMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(468):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(513):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(52):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(56):    TlvMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(64):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(69):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(41):    StSizesCommand() { }
W055 Single-argument constructor is not explicit
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(168):    DigitString(Address::DN dn);
W056 Member not included in member initialization list
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(602):       TypeNamePtrVector* names_;  // the names in a qualified name
W059 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(178):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(82):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(107):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(85):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(65):    virtual ~Exception() noexcept;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(146):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(218):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(105):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(281):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(92):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(129):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(176):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(108):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(76):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(189):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(126):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(203):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(93):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(117):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(173):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(136):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(149):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(179):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(169):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(109):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(91):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(99):    virtual ~Trigger();
W069 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1076):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1213):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(472):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(477):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(512):    virtual void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(126):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(133):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(263):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(271):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(276):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(304):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(419):    virtual bool AddAnonymousUnion(ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(436):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(444):    virtual Class* DirectClass() const override { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(803):    virtual CxxScoped* FindItem(const std::string& name) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(242):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(247):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(253):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(282):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(417):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(421):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(430):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(471):    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(63):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(75):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(91):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(107):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(127):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(112):    virtual void SetDecl(CodeFile* file, size_t pos) { decl_.SetLoc(file, pos); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(126):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(134):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(139):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(145):    virtual void SetScope(CxxScope* scope) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(149):    virtual void SetAccess(Cxx::Access access) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(154):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(160):    virtual const TemplateParms* GetTemplateParms() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(168):    virtual Class* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(174):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(180):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(185):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(190):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(194):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(198):    virtual id_t GetDeclFid() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(215):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(225):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(230):    virtual bool FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(234):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(239):    virtual bool Instantiate() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(243):    virtual bool IsInTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(250):    virtual StackArg NameToArg(Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(256):    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(523):    virtual CxxNamed* DirectType() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(568):    virtual bool ResolveTypedef(Typedef* type) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(572):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(585):    virtual void SubclassAccess(Class* cls) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(762):    virtual void SetLocale(Cxx::ItemType locale);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(774):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(785):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(789):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(793):    virtual void SetConst(bool readonly) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(797):    virtual void SetConstPtr(bool constptr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(801):    virtual void SetPtrs(TagCount ptrs) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(805):    virtual void SetRefs(TagCount refs) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(809):    virtual void SetArrayPos(int8_t pos) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(813):    virtual void SetPtrDetached(bool on) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(817):    virtual void SetRefDetached(bool on) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(822):    virtual void SetReferent(CxxNamed* ref, UsingMode mode) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(828):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(834):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(839):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(843):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(847):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(851):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(855):    virtual TypeTags GetTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(860):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(865):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(869):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(875):    virtual void AdjustPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(880):    virtual void RemoveRefs() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(885):    virtual TagCount PtrCount(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(889):    virtual TagCount RefCount() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(893):    virtual TagCount ArrayCount() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(898):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(902):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(906):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(917):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(923):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(928):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(934):    virtual void Instantiating() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(81):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(86):    virtual bool HasUsingFor(const std::string& name, size_t prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(94):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(336):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(404):    virtual void SetDefn(CodeFile* file, size_t pos) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1069):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1073):    virtual void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1158):    virtual void SetDefn(CodeFile* file, size_t pos) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1175):    virtual void WasCalled() override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(72):    virtual bool GetScopedName(std::string& name, size_t n) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(76):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(85):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(104):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(108):    virtual size_t GetDefnPos() const { return std::string::npos; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(116):    virtual void AddFiles(SetOfIds& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(120):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(475):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(838):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1197):    virtual bool ResolveTypedef(Typedef* type) const override { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(79):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(85):    virtual const std::string* Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(89):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(94):    virtual std::string TypeString(bool arg) const { return ERROR_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(98):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(102):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(106):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(111):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(116):    virtual bool IsIndirect() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(120):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(129):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(134):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(139):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(144):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(150):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(155):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(159):    virtual void GetConvertibleTypes(StackArgVector& types) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(164):    virtual CxxNamed* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(170):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(175):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(181):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(185):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(190):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(202):    virtual bool WasWritten(const StackArg* arg, bool passed);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(207):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(212):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(218):    virtual void RecordUsage() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(223):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(227):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(231):    virtual std::string Trace() const { return EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(235):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(240):    virtual void Print(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(245):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(69):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(75):    virtual word Check(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(81):    virtual word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(87):    virtual word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(92):    virtual word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(98):    virtual word List(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(106):    virtual word Parse(std::string& expl, const std::string& opts) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(112):    virtual word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(119):    virtual word Show(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(125):    virtual word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(131):    virtual word Trim(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(140):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(141):    virtual LibrarySet* Assign(LibrarySet* rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(142):    virtual LibrarySet* Intersection(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(143):    virtual LibrarySet* Difference(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(144):    virtual LibrarySet* Union(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(145):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(146):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(147):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(148):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(149):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(64):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(68):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(97):    virtual void GetSubtended(Base* objects[], size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(114):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(132):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(140):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(148):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(64):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(66):    virtual void EventOccurred(Event evt);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(71):    virtual Rc GetTextParmRc
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(65):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(70):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(134):    virtual CliParm* AccessParm(CliCookie& cookie, size_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(142):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(152):    virtual Rc GetIntParmRc(word& i, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(162):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(172):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(182):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(210):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(220):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(230):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(243):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(45):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(64):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(108):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(113):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(177):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(58):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(69):    virtual void DisplayStats(std::ostream& stream, id_t id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(187):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(211):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(56):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(60):    virtual const char* Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(66):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(77):    virtual bool Display(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(91):    virtual IpBuffer* AllocBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(107):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(59):    virtual bool InsertSocket(SysSocket* socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(115):    virtual MsgSize PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(134):    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(88):    virtual SysSocket* CreateAppSocket(size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(123):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(51):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(55):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(60):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(64):    virtual Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(68):    virtual size_t RxSize() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(72):    virtual size_t TxSize() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(77):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(83):    virtual SysSocket* CreateAppSocket() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(91):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(77):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(76):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(80):    virtual void Acquire() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(84):    virtual void Release() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(114):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(39):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(44):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(86):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(50):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(101):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(105):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(109):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(113):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(117):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(121):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(134):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(140):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(88):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(147):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(167):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(172):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(180):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(187):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(191):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(248):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(252):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(277):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(281):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(93):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(102):    virtual CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(131):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(144):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(112):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(58):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(62):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(95):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(99):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(108):    virtual SysSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(118):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(125):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(52):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(44):    virtual bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(111):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(69):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(75):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(102):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(109):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(123):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(129):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(86):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(41):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(78):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(184):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    virtual void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(137):    virtual EventHandler::Rc ApplyTreatment
W071 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(472):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(477):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(70):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(108):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(113):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(211):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(293):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(299):    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(163):    virtual void ConcludeTest(CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(91):    virtual bool ConditionalPause(word percent);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(134):    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(123):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(83):    virtual SysSocket* CreateAppSocket() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(88):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(167):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(172):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(180):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(187):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(191):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(248):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(252):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(281):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(335):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(348):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(352):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(360):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(242):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(297):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(302):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(308):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(314):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(79):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(86):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(78):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(184):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(258):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    virtual void AddFence();
W076 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1217):    BcFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(249):    word Modify(Modification act, std::string& item, std::string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(232):    TypeMatch CalcMatchWith(const StackArg& that, const std::string& thisType,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(278):    TypeMatch MatchWith(const StackArg& that, const std::string& thisType,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(514):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(702):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(917):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(336):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1251):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(40): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(57): size_t RfindScopeOperator(const string& name, size_t begin, size_t end);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(116):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(621):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(125):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(64):    word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(106):    word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(400):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(444):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(50):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(54):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(90):    CfgParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(92):    CfgFileTimeParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(100):    CliCommand(const char* comm, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(58):    CliCommandSet(const char* comm, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(92):    CliIncrement(const char* name, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(237):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(243):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(91):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(72):    static void SwErr
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void Progress(const std::string& s, bool eol, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(57):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(76):    std::string strIndex(int n, int width = 0, bool colon = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(96):    std::string strCenter(const std::string& s, int breadth, int blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(120): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(238):    bool BidToIndices(Bid bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(243):    bool IndicesToBid(size_t i, size_t j, Bid& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(99):    PosixSignal(signal_t value, const char* name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(53):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(72):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(71):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(561):    void DisplaySummary
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(75):    IoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(49):    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(46):    IpPortCfgParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(165):    SysSocket(ipport_t port, IpProtocol proto,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(69):    SysTcpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(51):    SysUdpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(49):    TcpIoThread(Faction faction, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(43):    UdpIoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(103):    PotsFeature(PotsFeature::Id fid, bool deactivation,
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(133):    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(157):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(57):    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(88):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(169):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(129):    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(181):       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(174):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(55):    SsmFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(115):    template< typename T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(70):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(347):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W080 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(176/1):    virtual bool AddAnonymousUnion(ClassPtr& cls) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(273/1):    bool SetAutoTypeOn(FuncData& data) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(252/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(350/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(369/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(401/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(459/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(460/1):    bool GetChar(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(461/1):    bool GetStr(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(471/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(472/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(479/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(483/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(492/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(493/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(494/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(495/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(496/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(497/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(498/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(499/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(567/1):    bool Punt(ExprPtr& expr, size_t end);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(102/1):       (CliThread& cli, const std::string& expl, std::streamsize p = -1) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(79/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(100/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(122/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(157/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(321/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(266/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(106/4):       const Thread* client, size_t size, SysThreadId& nid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(291/1):    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150/1):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(107/2):       (const ServiceSM& parentSsm, Event& icEvent, Event*& ogEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203/1):    virtual void DeleteParm(TlvParmLayout& parm);
W082 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(80):    msecs_t Originate();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1168):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(227):    word Format(std::string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(249):    word Modify(Modification act, std::string& item, std::string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(443):    void Append(const std::string& name, bool space = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(124):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(125):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(126):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(127):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(128):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(129):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(130):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(131):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(132):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(133):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(134):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(139):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(140):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(141):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(149):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(150):    void EraseLocal(const CxxScoped* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(154):    void EraseLocals();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(175):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(74):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(106):    word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(94):    void AddMainArg(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(72):    word Report(word rc, const std::string& expl, col_t indent = 2);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(196):    const CliCommand* ParseCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(115):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(55):    bool Validate(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(141):    DelayRc Delay(msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(147):    bool Interrupt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(118):    bool Interrupt(const Flags& mask = Flags());
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(509):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(517):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(529):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h(112):    void AssociateIds(const Thread& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(113):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(77):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(160):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(75):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(57):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(159):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(148):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(152):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(176):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(184):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(125):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(129):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(240):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(244):    void SetPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(248):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(252):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(377):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(119):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(188):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(238):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(249):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(79):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(86):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
W084 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(167):    static const char* strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(87):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(101):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(117):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(121):    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h(88):    static bool IsCodeFile(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(81):    word AddForward(string& item, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(82):    word RemoveForward(string& item, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(83):    word RemoveUsing(string& item, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(89):    static void InsertInclude(const string& include, stringVector& list);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(90):    static bool EraseInclude(const string& include, stringVector& list);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(468):    static word FindWarning(const WarningLog& log);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(480):    static std::string WarningCode(Warning warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(484):    static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(489):    static bool IsSortedByWarning
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(258):    static void GenerateReport(std::ostream& stream, const SetOfIds& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(112):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(180):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(564):    static size_t CreateCodeError(const std::string& name, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(289):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(584):    static void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1251):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1264):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(278):    static void ShrinkExpression(const ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(474):    static TypeSpecPtr CreateRef();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(610):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(51):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(64):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(62):    static bool IsValidIdentifier(const std::string& id);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(182):    static word Counted(std::string& result, const size_t* count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(187):    static word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(400):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(587):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(65):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(77):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(82):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(87):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(132):    static Rc Exhausted(CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(63):    static void DescendTo(CliCookie& cookie, size_t index);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(322):    static Rc Mismatch(CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(47):    static void Spool(const char* s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(81):    static void Assert(bool condition, debug32_t errval = 0)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void Progress(const std::string& s, bool eol, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(96):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(140):    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(44):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(57):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(62):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(40):    static ostringstreamPtr Create(fixed_string title);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(45):    static void Spool(ostringstreamPtr& log);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(49):    static std::string FileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(151):    static size_t Size();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(44):    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(48):    static size_t Words(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(52):    static void Copy(void* dest, const void* source, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(74):    static void* Realloc(void* addr, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(83):    static MemoryType Type(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(91):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(99):    static SysHeap* EnsureHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(103):    static SysHeap* AccessHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static const char* TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(87):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(757):    static word DisplayHelpFile(CliThread& cli, const string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1893):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(257):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(80):    static void Initiate(reinit_t reason, debug32_t errval);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(52):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(57):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(87):    static void DisplayHeaps(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(37):    static void CreateNativeSignals();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(52):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(112):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(116):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(121):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(125):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(88):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(153):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(88):    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(106):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(220):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(224):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(228):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(439):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(90):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3300):    static void UseBadPointer();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3301):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(164):    static size_t BuffSize(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(65):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(81):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(128):    static bool StartLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(132):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(56):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(72):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(86):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(94):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(188):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(200):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(289):    static const char* strPriority(Priority p);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(187):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(149):    static const char* ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(243):    static std::string OutputId(const std::string& label, id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(60):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(88):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(225):    static MsgSize Pad(MsgSize size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(302):    inline static fn_name TlvMessage_FindType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(304):    inline static fn_name TlvMessage_AddType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(306):    inline static fn_name TlvMessage_CopyType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(308):    inline static fn_name TlvMessage_VerifyParm()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(72):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(455):    static EventHandler::Rc SendFacilityNack
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(137):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(47):    static StTestData* Access(CliThread& cli);
W091 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(81):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(84):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(138):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(183):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(217):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(220):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(540):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(541):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(543):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(572):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(573):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(575):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(576):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(918):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(919):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(920):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(921):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(923):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(924):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1048):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1049):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1050):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1052):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1053):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(425):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(428):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(98):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(99):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(100):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(101):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(102):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(103):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(104):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(105):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(106):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(107):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(108):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(109):    CxxWord("DP",  "-",    "-",  T),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(110):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(111):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(112):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(113):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(114):    CxxWord("P",   "P",    "-",  T),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(115):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(116):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(117):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(118):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(119):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(120):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(121):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(122):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(123):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(124):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(125):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(126):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(127):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(128):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(129):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(130):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(131):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(132):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(133):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(155):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(156):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(157):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(158):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(159):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(160):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(161):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(162):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(163):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(164):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(165):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(167):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(168):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(169):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(170):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(171):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(172):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(173):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(174):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(175):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(176):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(177):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(178):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(179):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(180):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(181):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(182):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(183):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(184):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(185):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(186):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(187):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(188):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(189):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(190):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(191):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(192):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(193):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(194):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(195):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(196):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(197):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(198):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(199):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(200):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(201):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(202):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(203):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(204):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(205):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(206):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(207):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(208):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(209):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(210):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(211):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(212):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(213):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(214):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(215):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(216):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(217):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(218):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(219):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(220):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(93):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(253):    inline static fn_name Array_ctor()     { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(254):    inline static fn_name Array_dtor()     { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(255):    inline static fn_name Array_Init()     { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(256):    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(258):    inline static fn_name Array_Erase()    { return "Array.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(259):    inline static fn_name Array_Replace()  { return "Array.Replace"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(260):    inline static fn_name Array_Extend()   { return "Array.Extend"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(174): typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(95):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(96):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(97):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(98):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(387):    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(394):    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(395):    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(396):    inline static fn_name Q1Way_Count()  { return "Q1Way.Count"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(397):    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(398):    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(360):    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(361):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(362):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(626):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(634):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(635):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(126):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(39): fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(264):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(265):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(266):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(270):    AccumulatorPtr   totUsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(176):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(177):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(179):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(181):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(184):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(187):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(55):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(56):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(60):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(61):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(590):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(591):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(593):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(653):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(654):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(656):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(657):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(759):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(786):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(788):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(880):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(881):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(883):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(884):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(968):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(969):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(971):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(972):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(973):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(974):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(49):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(50):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(53):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(56):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(64):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(65):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(66):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(44):    LocalAddress      txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    LocalAddress      rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool              initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool              final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool              join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool              self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    bool              injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    bool              kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    Message::Route    route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    ProtocolId        protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(56):    SignalId          signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(57):    MsgSize           length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(138):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(244):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(246):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(249):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(312):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(314):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(315):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(317):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(357):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(359):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(360):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(362):    CauseInfo*    cci;
W094 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(300):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
W095 Function not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(286): bool IsUnusedItemWarning(Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char NodeBase::FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp(68): ostream& operator<<(std::ostream& stream, TraceStatus status)
W098 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(98): Faction PotsShelfIpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(111): ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(115): size_t PotsShelfIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(119): size_t PotsShelfIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1387): void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(123): CliParm* CauseParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(109): CliParm* ProgressParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(265): Faction CipUdpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(275): ipport_t CipUdpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(279): size_t CipUdpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(283): size_t CipUdpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(360): Faction CipTcpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(364): size_t CipTcpService::MaxBacklog() const { return 200; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(368): size_t CipTcpService::MaxConns() const { return TcpIoThread::MaxConns; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(378): ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(382): size_t CipTcpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(386): size_t CipTcpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(432): CliText* CipIamSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(446): CliText* CipCpgSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(460): CliText* CipAnmSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(474): CliText* CipRelSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(518): CliParm* CipRouteParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(622): CliParm* CipCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(646): CliParm* CipCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(672): CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(698): CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(169): Digit DigitString::GetDigit(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(118): bool CodeDir::IsSubsDir() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(634): bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(648): bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1722): size_t CodeFile::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1746): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1754): bool CodeFile::GetNthLine(size_t n, string& s) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1854): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1862): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1870): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1879): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1887): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1895): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1903): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1912): Include* CodeFile::InsertInclude(const string& fn)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1930): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1938): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1946): void CodeFile::InsertUsing(UsingPtr& use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(286): bool IsUnusedItemWarning(Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(265): void Class::AccessibilityTo(const CxxScope* scope, SymbolView* view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(374): void Class::AddItem(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1373): Class* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1628): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1635): bool Class::SetCurrAccess(Cxx::Access access)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2308): Function* CxxArea::FoundFunc(Function* func, SymbolView* view, TypeMatch match)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2316): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(47): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(153): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(252): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(259): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(399): void Context::Trace(CxxTrace::Action act)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(407): void Context::Trace(CxxTrace::Action act, const StackArg& arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(415): void Context::Trace(CxxTrace::Action act, word err, const string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(423): void Context::Trace(CxxTrace::Action act, const CodeFile& file)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(431): void Context::Trace(CxxTrace::Action act, const CxxToken* token)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(439): void Context::WasCalled(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(606): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(793): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(148): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(157): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(166): id_t CxxNamed::GetDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(175): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(184): const TemplateParms* CxxNamed::GetTemplateParms() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(193): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(505): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(902): Numeric DataSpec::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(922): CxxScope* DataSpec::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(931): TypeTags DataSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(938): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1081): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1884): CxxNamed* QualName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1939): CxxScoped* QualName::GetForward() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2076): TypeName* QualName::Names_at(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2085): TypeName* QualName::Names_back() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2092): size_t QualName::Names_size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2839): void TypeSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2846): void TypeSpec::AdjustPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2861): TagCount TypeSpec::ArrayCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2869): TagCount TypeSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2877): TypeSpec* TypeSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2899): void TypeSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2906): void TypeSpec::EnteringScope(const CxxScope* scope)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2913): TypeTags TypeSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2923): bool TypeSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2931): void TypeSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2938): bool TypeSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2946): TypeMatch TypeSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2955): TypeMatch TypeSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2986): TagCount TypeSpec::PtrCount(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2994): TagCount TypeSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3002): TagCount TypeSpec::RefCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3010): TagCount TypeSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3018): void TypeSpec::RemoveRefs()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3025): StackArg TypeSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3033): void TypeSpec::SetArrayPos(int8_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3040): void TypeSpec::SetConst(bool readonly)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3047): void TypeSpec::SetConstPtr(bool constptr)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3065): void TypeSpec::SetPtrDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3072): void TypeSpec::SetPtrs(TagCount ptrs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3079): void TypeSpec::SetRefDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3086): void TypeSpec::SetReferent(CxxNamed* ref, UsingMode mode)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3093): void TypeSpec::SetRefs(TagCount refs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(113): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(232): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(240): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(279): bool Block::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(793): id_t CxxScope::GetDistinctDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1389): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1397): bool Data::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1522): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3048): Function* Function::FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3077): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3113): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3123): void Function::GetDefnRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3131): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3630): bool Function::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4008): void Function::SetDefnRange(size_t begin, size_t end)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4367): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4374): void FuncSpec::AdjustPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4388): TagCount FuncSpec::ArrayCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4395): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4402): void FuncSpec::Check() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4410): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4432): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4451): bool FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4459): TypeTags FuncSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4466): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4473): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4480): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4487): void FuncSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4495): bool FuncSpec::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4502): bool FuncSpec::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4509): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4517): TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4527): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4549): TagCount FuncSpec::PtrCount(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4556): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4563): TagCount FuncSpec::RefCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4570): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4577): void FuncSpec::RemoveRefs()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4584): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4591): void FuncSpec::SetArrayPos(int8_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4599): void FuncSpec::SetConst(bool readonly)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4607): void FuncSpec::SetConstPtr(bool constptr)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4615): void FuncSpec::SetPtrDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4623): void FuncSpec::SetPtrs(TagCount ptrs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4631): void FuncSpec::SetRefDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4639): void FuncSpec::SetReferent(CxxNamed* ref, UsingMode mode)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4647): void FuncSpec::SetRefs(TagCount refs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(305): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(406): void CxxScoped::AddFiles(SetOfIds& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(560): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(569): bool CxxScoped::GetScopedName(string& name, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(578): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(587): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(596): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(605): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(613): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(626): bool CxxScoped::IsIndirect() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1141): void Enumerator::RecordAccess(Cxx::Access access) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1205): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1380): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1635): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1644): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1653): CxxNamed* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(270): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(339): bool Do::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(535): bool For::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(629): bool If::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(993): bool While::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(90): template< typename T > void Erase(const CxxScoped* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(188): template< typename T > void ListSymbols(const string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(225): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(232): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(239): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(246): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(253): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(260): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(267): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(296): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(303): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(310): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(317): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(662): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(669): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(676): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(683): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(690): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(697): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(704): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(738): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(745): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(752): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(759): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(342): void CxxUsageSets::AddBase(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(350): void CxxUsageSets::AddDirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(358): void CxxUsageSets::AddForward(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(369): void CxxUsageSets::AddIndirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(377): void CxxUsageSets::AddUsing(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(724): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(785): Numeric IntLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(890): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(915): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(931): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2645): TypeSpec* StrLiteral::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(102): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(75): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(82): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(89): LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(107): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(157): LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(164): LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(171): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(190): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(197): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(204): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(222): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(241): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(248): LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(255): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(262): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(289): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(296): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(303): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(312): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(338): LibrarySet* LibrarySet::OpError() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(454): LibrarySet* LibrarySet::Union(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(461): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(468): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(107): CliParm* MediaParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(259): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(97): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(79): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(128): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(157): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(52): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(70): bool CfgFlagParm::GetCurrValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(72): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(274): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(68): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(79): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(136): size_t CliCookie::Index(size_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(368): CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(135): void Debug::Reset()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(40): int FunctionName::compare(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(47): size_t FunctionName::find(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(56): size_t FunctionName::rfind(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::ImmediateTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(57): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(68): bool InitFlags::TraceWork()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(154): size_t SegmentHeader::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(171): SysHeap* Memory::AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(189): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(255): SysHeap* Memory::EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(309): const SysHeap* Memory::Heap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(403): size_t Memory::Words(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(152): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(74): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(114): word ExplainTraceRc(CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(172): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(45): char NodeBase::BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char NodeBase::FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(71): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(82): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(109): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(277): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(443): bool ObjectPool::BidToIndices(Bid bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(698): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(743): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(750): bool ObjectPool::IndicesToBid(size_t i, size_t j, Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(762): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(769): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(776): ObjectBlock* ObjectPool::Next(Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(795): Pooled* ObjectPool::NextUsed(Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(868): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(877): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(886): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(289): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(48): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(124): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(129): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(134): Flags PS_Exit()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(139): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(144): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(149): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(154): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(159): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(164): Flags PS_NoRecover()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(57): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(90): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(102): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(39): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(39): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(51): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(125): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(117): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(258): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(334): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(147): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(32): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(39): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(48): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(269): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(296): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(121): DWORD64 StackInfo::GetFrame(fn_depth depth)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(137): fn_depth StackInfo::GetFrames()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(145): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(154): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(265): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(71): ticks_t SysTickTimer::TicksNow() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(181): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(191): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(207): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(215): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(245): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(265): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(30): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(29): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(36): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(43): void ThisThread::MakePreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(50): void ThisThread::MakeUnpreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(57): void ThisThread::MemProtect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(64): void ThisThread::MemUnprotect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(71): DelayRc ThisThread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(78): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(85): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(92): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(99): TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(106): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(438): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1151): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1532): main_t Thread::EnterThread(void* arg)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1736): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1833): bool Thread::HasExited() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1896): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1903): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1970): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2095): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2123): DelayRc Thread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2163): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2522): bool Thread::RunningLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2673): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2945): TraceRc Thread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2981): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3044): void Thread::Trace
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3061): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3096): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(287): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(385): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(493): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(209): ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(218): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(117): Tool* ToolRegistry::GetTool(FlagId fid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(111): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(139): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(153): void* TraceBuffer::AddRecord(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(351): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(382): bool TraceBuffer::IsLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(391): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(411): void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(472): void TraceBuffer::PurgeRecords(size_t end)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(540): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(743): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(97): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(60): void FunctionStats::IncrCalls(usecs_t net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1158): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1192): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1221): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1678): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1712): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1741): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2242): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2273): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(205): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(205): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(283): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(78): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(110): SysIpL2Addr SysIpL2Addr::LoopbackAddr()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(149): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(157): bool SysSocket::Trace(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(168): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(428): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(97): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(82): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(79): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(97): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(79): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(517): void PotsCircuit::Trace(const SignalEntry& entry)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(76): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(69): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(84): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(113): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(356): CliText* PotsAlertingSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(370): CliText* PotsDigitsSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(384): CliText* PotsFacilitySignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(398): CliText* PotsFlashSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(412): CliText* PotsLockoutSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(426): CliText* PotsOffhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(440): CliText* PotsOnhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(454): CliText* PotsProgressSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(468): CliText* PotsReleaseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(482): CliText* PotsSuperviseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(525): CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(567): CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(737): CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(858): CliParm* PotsRingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(946): CliParm* PotsScanParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(74): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(85): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(96): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(91): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(87): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(329): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(953): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(963): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(138): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(219): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(226): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(151): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(89): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(698): void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(802): size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(810): msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(818): size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(178): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(113): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(244): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(331): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(366): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(422): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(194): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(135): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(148): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(161): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(173): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(185): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(198): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(79): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(406): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(371): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(79): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(312): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(125): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(157): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(237): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(245): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(60): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(385): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(98): Faction PotsCallIpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(108): ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(112): size_t PotsCallIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(116): size_t PotsCallIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(118): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(200): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(77): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(89): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(56): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W099 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(106):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(151):    Debug::ft(CinThread_GetLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(64):    Debug::ft(Debug_GenerateSwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(45):    Debug::ft(Exception_ctor1);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(38):    Debug::ft(MutexGuard_ctor);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(51):       Debug::ft(MutexGuard_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ft(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp(106):    Debug::ft(SysMutex_Acquire);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(57):    Debug::ft(NodeBase_SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1656):    Debug::ft(Thread_ExitIfSafe);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2467):    Debug::ft(Thread_ResumeLocked);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2645):    Debug::ft(Thread_SignalHandler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2717):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3230):       Debug::ft(Thread_Unlock);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3374):       Debug::ft(RecoveryTestThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3456):       Debug::ft(RecoveryTestThread_LoopForever);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(695):    Debug::ft(Context_ProcessWork);
W101 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(44): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(223): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(296): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(337): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(87): class CxxSymbols: public Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(46): class Interpreter : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(87): class CfgFileTimeParm : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(75): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(88): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(258): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(51): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(63): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(905): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2664): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(49): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(47): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(36): class SysUdpSocket : public SysSocket
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(43): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(57): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(71): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(194): class TimerPool : public ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(115): class SbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(54): class PotsCallIpService : public UdpIpService
W102 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(38): class StatusCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(59): class SetCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(88): class IncludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(118): class ExcludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(147): class QueryCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(177): class SaveCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(205): class ClearCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(36): class PermanentHeap : public SysHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(740): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(43): class NwClearCommand : public ClearCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(71): class NwExcludeCommand : public ExcludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(97): class NwIncludeCommand : public IncludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(116): class NwQueryCommand : public QueryCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(131): class NwStatusCommand : public StatusCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(50): class EventHandler : public Protected
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(42): class SbAnalyzeMessage : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(56): class SbAnalyzeSap : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(70): class SbAnalyzeSnp : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(84): class SbForceTransition : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(98): class SbInitiationReq : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(90): class TimeoutParameter : public TlvParameter
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
    line 35: using namespace SessionBase;
    line 36: using namespace MediaBase;
  W026 Unused function
    line 66:    virtual CliText* CreateText() const override;
  W101 Override of Base.Display not found
    line 44: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp:
  W009 Cast down the inheritance hierarchy
    line 139:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    line 151:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    line 172:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    line 182:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp:
  W008 reinterpret_cast
    line 70:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    line 71:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W009 Cast down the inheritance hierarchy
    line 68:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp:
  W007 Functional cast
    line 111: ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  W098 Function does not invoke Debug::ft
    line 98: Faction PotsShelfIpService::GetFaction() const { return PayloadFaction; }
    line 111: ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
    line 115: size_t PotsShelfIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    line 119: size_t PotsShelfIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp:
  W006 C-style cast
    line 509:    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
    line 1083:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  W008 reinterpret_cast
    line 497:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W047 Data could be const
    line 171:    Q1Link link_;
  W082 Function could be const
    line 80:    msecs_t Originate();
  W084 Function could be free
    line 167:    static const char* strState(State state);
  W098 Function does not invoke Debug::ft
    line 1387: void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  W101 Override of Base.Display not found
    line 223: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
    line 35: using namespace CallBase;
  W084 Function could be free
    line 87:    static void DisplayStateCounts
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp:
  W008 reinterpret_cast
    line 97:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W009 Cast down the inheritance hierarchy
    line 114:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    line 165:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
    line 35: using namespace SessionBase;
  W026 Unused function
    line 214:    Digit GetDigit(DigitCount i) const;
  W036 Member could be private
    line 146:    typedef uint8_t DigitCount;
    line 176:    static bool IsValidDigit(Digit d)
    line 183:    Rc AddDigit(Digit d);
    line 202:    DigitCount Size() const;
    line 226:    bool operator==(const DigitString& that) const;
  W037 Member could be protected
    line 125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W055 Single-argument constructor is not explicit
    line 168:    DigitString(Address::DN dn);
  W084 Function could be free
    line 101:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    line 117:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    line 121:    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
    line 125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    line 176:    static bool IsValidDigit(Digit d)
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp:
  W008 reinterpret_cast
    line 134:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W098 Function does not invoke Debug::ft
    line 123: CliParm* CauseParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
    line 32: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp:
  W009 Cast down the inheritance hierarchy
    line 51:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 53:    auto& bcssm = static_cast< BcSsm& >(ssm);
    line 79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    line 136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    line 139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    line 181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    line 184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    line 215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W091 Line contains adjacent spaces
    line 79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 81:    auto          sid = msg->GetSignal();
    line 82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    line 84:    CauseInfo*    cci;
    line 136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    line 138:    auto       sid = msg->GetSignal();
    line 139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    line 181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    line 183:    auto       sid = msg->GetSignal();
    line 184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    line 215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 217:    auto          sid = msg->GetSignal();
    line 218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    line 220:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp:
  W008 reinterpret_cast
    line 120:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W098 Function does not invoke Debug::ft
    line 109: CliParm* ProgressParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
    line 32: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp:
  W007 Functional cast
    line 275: ipport_t CipUdpService::Port() const { return ipport_t(port_); }
    line 378: ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  W008 reinterpret_cast
    line 528:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W009 Cast down the inheritance hierarchy
    line 543:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    line 573:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    line 885:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    line 919:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    line 1049:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    line 1448:    auto& tmsg = static_cast< const CipMessage& >(msg);
    line 1453:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W091 Line contains adjacent spaces
    line 540:    id_t        idx;
    line 541:    word        fid, rid;
    line 543:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    line 572:    TestRc       rc;
    line 573:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    line 575:    id_t         idx;
    line 576:    word         fid, rid;
    line 918:    auto          state = GetState();
    line 919:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    line 920:    auto          sig = tmsg.GetSignal();
    line 921:    TimeoutInfo*  toi = nullptr;
    line 923:    auto          err = true;
    line 924:    debug64_t     error;
    line 1048:    auto          state = GetState();
    line 1049:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    line 1050:    auto          sig = msg.GetSignal();
    line 1052:    auto          err = true;
    line 1053:    debug64_t     error;
  W098 Function does not invoke Debug::ft
    line 265: Faction CipUdpService::GetFaction() const { return PayloadFaction; }
    line 275: ipport_t CipUdpService::Port() const { return ipport_t(port_); }
    line 279: size_t CipUdpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    line 283: size_t CipUdpService::TxSize() const { return IoThread::MaxTxBuffSize; }
    line 360: Faction CipTcpService::GetFaction() const { return PayloadFaction; }
    line 364: size_t CipTcpService::MaxBacklog() const { return 200; }
    line 368: size_t CipTcpService::MaxConns() const { return TcpIoThread::MaxConns; }
    line 378: ipport_t CipTcpService::Port() const { return ipport_t(port_); }
    line 382: size_t CipTcpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    line 386: size_t CipTcpService::TxSize() const { return IoThread::MaxTxBuffSize; }
    line 432: CliText* CipIamSignal::CreateText() const
    line 446: CliText* CipCpgSignal::CreateText() const
    line 460: CliText* CipAnmSignal::CreateText() const
    line 474: CliText* CipRelSignal::CreateText() const
    line 518: CliParm* CipRouteParameter::CreateCliParm(Usage use) const
    line 622: CliParm* CipCallingParameter::CreateCliParm(Usage use) const
    line 646: CliParm* CipCalledParameter::CreateCliParm(Usage use) const
    line 672: CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
    line 698: CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h:
  W017 Using statement in header
    line 49: using namespace NodeBase;
    line 50: using namespace SessionBase;
    line 51: using namespace MediaBase;
  W020 Unused class
    line 296: class CipUdpService : public UdpIpService
  W026 Unused function
    line 180:    MediaInfo* AddMedia(const MediaInfo& media);
    line 247:    virtual void InjectFinalMsg() override;
    line 318:    virtual CliText* CreateText() const override;
    line 371:    virtual CliText* CreateText() const override;
  W036 Member could be private
    line 234:    virtual void EnsureMediaMsg() override;
    line 238:    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    line 419:    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W101 Override of Base.Display not found
    line 296: class CipUdpService : public UdpIpService
    line 337: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h:
  W017 Using statement in header
    line 31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h:
  W017 Using statement in header
    line 53: using namespace NodeBase;
    line 54: using namespace SessionBase;
    line 55: using namespace MediaBase;
  W032 Member hides inherited name
    line 316:    static const Id NextId = FirstId + 50;
    line 883:    static const Id NextId                 = FirstUn + 7;
  W036 Member could be private
    line 1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    line 1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    line 1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    line 1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    line 1152:    CipPsm* AllocNPsm();
  W037 Member could be protected
    line 1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    line 1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    line 1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W047 Data could be const
    line 340:    Progress::Ind progress_;
    line 356:    Cause::Ind cause_;
  W069 Virtual function is public
    line 1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    line 1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    line 1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    line 1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    line 1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    line 1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    line 1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    line 1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    line 1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    line 1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    line 1020:    virtual EventHandler::Rc RaiseRemoteProgress
    line 1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    line 1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    line 1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    line 1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    line 1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    line 1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    line 1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    line 1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    line 1030:    virtual EventHandler::Rc RaiseLocalProgress
    line 1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    line 1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    line 1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    line 1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    line 1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    line 1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    line 1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    line 1045:    virtual EventHandler::Rc RaiseLocalRelease
    line 1047:    virtual EventHandler::Rc RaiseRemoteRelease
    line 1049:    virtual EventHandler::Rc RaiseReleaseCall
    line 1051:    virtual EventHandler::Rc RaiseApplyTreatment
    line 1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    line 1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    line 1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    line 1076:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    line 1083:    virtual EventHandler::Rc HandleLocalAlerting();
    line 1088:    virtual EventHandler::Rc HandleLocalAnswer();
    line 1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    line 1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    line 1105:    virtual CipMessage* BuildCipIam();
    line 1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    line 1213:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W071 Virtual function has no overrides
    line 1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    line 1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    line 1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    line 1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    line 1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    line 1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    line 1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    line 1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    line 1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    line 1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    line 1020:    virtual EventHandler::Rc RaiseRemoteProgress
    line 1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    line 1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    line 1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    line 1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    line 1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    line 1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    line 1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    line 1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    line 1030:    virtual EventHandler::Rc RaiseLocalProgress
    line 1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    line 1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    line 1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    line 1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    line 1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    line 1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    line 1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    line 1045:    virtual EventHandler::Rc RaiseLocalRelease
    line 1047:    virtual EventHandler::Rc RaiseRemoteRelease
    line 1049:    virtual EventHandler::Rc RaiseReleaseCall
    line 1051:    virtual EventHandler::Rc RaiseApplyTreatment
    line 1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    line 1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    line 1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    line 1083:    virtual EventHandler::Rc HandleLocalAlerting();
    line 1088:    virtual EventHandler::Rc HandleLocalAnswer();
    line 1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    line 1105:    virtual CipMessage* BuildCipIam();
    line 1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  W076 Adjacent arguments have the same type
    line 1217:    BcFactory(Id fid, ProtocolId prid, const char* name);
  W082 Function could be const
    line 1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    line 1168:    CipMessage* BuildCipRel(Cause::Ind cause);
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp:
  W009 Cast down the inheritance hierarchy
    line 405:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    line 920:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W094 Line length exceeds the standard maximum
    line 300:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp:
  W007 Functional cast
    line 139:       auto rc = AddDigit(Digit(ds.digits_[i]));
    line 171:    if(i < Size()) return Digit(digits_[i]);
  W098 Function does not invoke Debug::ft
    line 169: Digit DigitString::GetDigit(DigitCount i) const
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp:
  W009 Cast down the inheritance hierarchy
    line 423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    line 463:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    line 472:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    line 504:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    line 505:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    line 624:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    line 782:          return static_cast< ProxyBcPsm* >(p);
    line 818:          ppsm = static_cast< ProxyBcPsm* >(psm);
    line 1044:    auto& tmsg = static_cast< const CipMessage& >(msg);
    line 1049:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W091 Line contains adjacent spaces
    line 423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 425:    auto          sid = msg->GetSignal();
    line 426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    line 428:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
    line 35: using namespace SessionBase;
  W020 Unused class
    line 192: class ProxyBcDisconnecting : public BcDisconnecting
  W021 Unused data
    line 63:    static const ServicePortId NextPortId = FirstPortId + 1;
    line 219:    static const Id NextId        = FirstId + 4;
    line 303:    static const Id NextId              = FirstId + 7;
    line 388:    static const Id NextId          = FirstId + 3;
  W026 Unused function
    line 195:    explicit ProxyBcDisconnecting(ServiceId sid);
  W032 Member hides inherited name
    line 63:    static const ServicePortId NextPortId = FirstPortId + 1;
    line 213:    static const Id FirstId = BcEvent::NextId;
    line 219:    static const Id NextId        = FirstId + 4;
    line 303:    static const Id NextId              = FirstId + 7;
  W036 Member could be private
    line 495:    ProxyBcPsm* FirstBroadcast() const;
  W069 Virtual function is public
    line 472:    virtual EventHandler::Rc RaiseReleaseUser
    line 474:    virtual EventHandler::Rc RaiseProxyProgress
    line 476:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    line 477:    virtual EventHandler::Rc RaiseProxyRelease
    line 512:    virtual void SetUPsm(MediaPsm& psm) override;
  W071 Virtual function has no overrides
    line 472:    virtual EventHandler::Rc RaiseReleaseUser
    line 474:    virtual EventHandler::Rc RaiseProxyProgress
    line 476:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    line 477:    virtual EventHandler::Rc RaiseProxyRelease
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W036 Member could be private
    line 45:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp:
  W008 reinterpret_cast
    line 61:    auto fake = reinterpret_cast< const CodeDir* >(&local);
  W098 Function does not invoke Debug::ft
    line 118: bool CodeDir::IsSubsDir() const
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W047 Data could be const
    line 92:    RegCell did_;
  W084 Function could be free
    line 88:    static bool IsCodeFile(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.win.cpp:
  W050 Default constructor invoked: POD members not initialized
    line 55:    _finddata_t fileAttrs;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp:
  W006 C-style cast
    line 2109:    info_ = (LineInfo*) Memory::Alloc(sizeof(LineInfo) * lines_, MemTemp);
  W007 Functional cast
    line 556:       stream << setw(12) << LineType(t)
    line 568:          stream << setw(6) << WarningCode(Warning(w))
    line 586:       stream << WarningCode(w) << SPACE << Warning(w) << CRLF;
  W008 reinterpret_cast
    line 769:    auto fake = reinterpret_cast< const CodeFile* >(&local);
  W009 Cast down the inheritance hierarchy
    line 759:    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
    line 2394:          auto base = static_cast< const Class* >(*b);
    line 2490:                auto type = static_cast< const Typedef* >(*item2);
    line 2513:          auto type = static_cast< const Typedef* >(*item1);
    line 2708:          auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  W019 Unused argument
    line 81/1:    word AddForward(string& item, string& expl);
    line 82/1:    word RemoveForward(string& item, string& expl);
    line 83/1:    word RemoveUsing(string& item, string& expl);
    line 88/1:    word GetEpilog(string& expl);
  W021 Unused data
    line 1073: const string SingleRule(COMMENT_STR + string(78, '-'));
  W026 Unused function
    line 434:    bool operator!=(const WarningLog& that) const;
  W047 Data could be const
    line 96:    stringVector intIncls_;
  W050 Default constructor invoked: POD members not initialized
    line 1991:       WarningLog log;
  W051 Default constructor invoked
    line 2290:    CxxUsageSets symbols;
  W084 Function could be free
    line 81:    word AddForward(string& item, string& expl);
    line 82:    word RemoveForward(string& item, string& expl);
    line 83:    word RemoveUsing(string& item, string& expl);
    line 89:    static void InsertInclude(const string& include, stringVector& list);
    line 90:    static bool EraseInclude(const string& include, stringVector& list);
    line 468:    static word FindWarning(const WarningLog& log);
    line 480:    static std::string WarningCode(Warning warning);
    line 484:    static bool IsSortedByFile
    line 489:    static bool IsSortedByWarning
  W098 Function does not invoke Debug::ft
    line 634: bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
    line 648: bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
    line 1722: size_t CodeFile::GetLineNum(size_t pos) const
    line 1746: LineType CodeFile::GetLineType(size_t n) const
    line 1754: bool CodeFile::GetNthLine(size_t n, string& s) const
    line 1854: void CodeFile::InsertClass(Class* cls)
    line 1862: void CodeFile::InsertData(Data* data)
    line 1870: bool CodeFile::InsertDirective(DirectivePtr& dir)
    line 1879: void CodeFile::InsertEnum(Enum* item)
    line 1887: void CodeFile::InsertForw(Forward* forw)
    line 1895: void CodeFile::InsertFunc(Function* func)
    line 1903: void CodeFile::InsertInclude(IncludePtr& incl)
    line 1912: Include* CodeFile::InsertInclude(const string& fn)
    line 1930: void CodeFile::InsertMacro(Macro* macro)
    line 1938: void CodeFile::InsertType(Typedef* type)
    line 1946: void CodeFile::InsertUsing(UsingPtr& use)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h:
  W017 Using statement in header
    line 46: using namespace NodeBase;
  W036 Member could be private
    line 112:    bool IsTemplateHeader() const;
  W047 Data could be const
    line 364:    RegCell fid_;
  W076 Adjacent arguments have the same type
    line 249:    word Modify(Modification act, std::string& item, std::string& expl);
  W082 Function could be const
    line 227:    word Format(std::string& expl);
    line 249:    word Modify(Modification act, std::string& item, std::string& expl);
  W084 Function could be free
    line 258:    static void GenerateReport(std::ostream& stream, const SetOfIds& set);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp:
  W006 C-style cast
    line 501:    LibrarySet* nbSet = (LibrarySet*) this;
    line 533:    LibrarySet* nsSet = (LibrarySet*) this;
  W009 Cast down the inheritance hierarchy
    line 77:    auto curr = static_cast< CodeFileSet* >(Users(true));
    line 89:       curr = static_cast< CodeFileSet* >(prev->Users(true));
    line 109:    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
    line 121:       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
    line 367:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
    line 399:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    line 400:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    line 512:       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
    line 544:       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
    line 579:    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  W010 Cast removes const qualification
    line 501:    LibrarySet* nbSet = (LibrarySet*) this;
    line 533:    LibrarySet* nsSet = (LibrarySet*) this;
  W050 Default constructor invoked: POD members not initialized
    line 815:    FileLevel item;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp:
  W037 Member could be protected
    line 112:    static LibrarySet* Evaluate(CliThread& cli);
  W084 Function could be free
    line 112:    static LibrarySet* Evaluate(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp:
  W009 Cast down the inheritance hierarchy
    line 64:    auto that = static_cast< CodeSet* >(rhs);
    line 100:    auto that = static_cast< const CodeSet* >(rhs);
    line 137:    auto that = static_cast< const CodeSet* >(rhs);
    line 151:    auto that = static_cast< const CodeSet* >(rhs);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp:
  W095 Function not sorted in standard order
    line 286: bool IsUnusedItemWarning(Warning warning)
  W098 Function does not invoke Debug::ft
    line 286: bool IsUnusedItemWarning(Warning warning)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W021 Unused data
    line 517: extern const Flags NoLF_Mask;
    line 518: extern const Flags Last_Mask;
  W047 Data could be const
    line 523: extern uint8_t Indent_Size;
C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp:
  W007 Functional cast
    line 260:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    line 312:          oper = Cxx::Operator(i);
    line 370:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    line 376:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    line 381:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W091 Line contains adjacent spaces
    line 98:    CxxWord("-",   "-",    "D",  F),  // AUTO
    line 99:    CxxWord("-",   "-",    "b",  T),  // BREAK
    line 100:    CxxWord("-",   "-",    "c",  T),  // CASE
    line 101:    CxxWord("C",   "C",    "-",  T),  // CLASS
    line 102:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    line 103:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    line 104:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    line 105:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    line 106:    CxxWord("-",   "-",    "d",  T),  // DO
    line 107:    CxxWord("E",   "E",    "E",  T),  // ENUM
    line 108:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    line 109:    CxxWord("DP",  "-",    "-",  T),  // EXTERN
    line 110:    CxxWord("-",   "-",    "f",  T),  // FOR
    line 111:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    line 112:    CxxWord("H",   "H",    "H",  F),  // HASH
    line 113:    CxxWord("-",   "-",    "i",  T),  // IF
    line 114:    CxxWord("P",   "P",    "-",  T),  // INLINE
    line 115:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    line 116:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    line 117:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    line 118:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    line 119:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    line 120:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    line 121:    CxxWord("-",   "-",    "r",  T),  // RETURN
    line 122:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    line 123:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    line 124:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    line 125:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    line 126:    CxxWord("-",   "-",    "t",  T),  // TRY
    line 127:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    line 128:    CxxWord("C",   "C",    "-",  T),  // UNION
    line 129:    CxxWord("U",   "U",    "U",  T),  // USING
    line 130:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    line 131:    CxxWord("-",   "-",    "w",  T),  // WHILE
    line 132:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    line 133:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    line 155:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    line 156:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    line 157:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    line 158:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    line 159:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    line 160:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    line 161:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    line 162:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    line 163:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    line 164:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    line 165:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    line 167:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    line 168:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    line 169:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    line 170:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    line 171:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    line 172:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    line 173:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    line 174:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    line 175:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    line 176:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    line 177:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    line 178:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    line 179:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    line 180:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    line 181:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    line 182:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    line 183:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    line 184:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    line 185:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    line 186:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    line 187:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    line 188:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    line 189:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    line 190:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    line 191:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    line 192:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    line 193:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    line 194:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    line 195:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    line 196:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    line 197:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    line 198:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    line 199:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    line 200:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    line 201:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    line 202:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    line 203:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    line 204:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    line 205:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    line 206:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    line 207:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    line 208:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    line 209:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    line 210:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    line 211:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    line 212:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    line 213:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    line 214:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    line 215:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    line 216:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    line 217:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    line 218:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    line 219:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    line 220:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h:
  W026 Unused function
    line 423:    Numeric(NumericType type, size_t width, bool sign)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp:
  W009 Cast down the inheritance hierarchy
    line 209:       if((type == Cxx::Function) && (usingClass->GetTemplate() == this) &&
    line 222:          auto args = static_cast< ClassInst* >(usingClass)->GetSpec()->Args();
    line 1052:    auto area = static_cast< CxxArea* >(GetScope());
    line 1055:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    line 1072:          auto c = static_cast< Class* >(*s);
    line 1843:       auto func = static_cast< const Function* >(item);
    line 1869:       auto func = static_cast< const Function* >(item);
  W010 Cast removes const qualification
    line 1376:    return const_cast< Class* >(this);
    line 1839:       return const_cast< ClassInst* >(this);
  W050 Default constructor invoked: POD members not initialized
    line 1053:    SymbolView view;
    line 1355:    DataInitAttrs attrs;
    line 1592:    SymbolView local;
  W098 Function does not invoke Debug::ft
    line 265: void Class::AccessibilityTo(const CxxScope* scope, SymbolView* view) const
    line 374: void Class::AddItem(CxxNamed* item)
    line 1373: Class* Class::GetTemplate() const
    line 1628: Class* Class::OuterClass() const
    line 1635: bool Class::SetCurrAccess(Cxx::Access access)
    line 2308: Function* CxxArea::FoundFunc(Function* func, SymbolView* view, TypeMatch match)
    line 2316: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h:
  W006 C-style cast
    line 428:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W009 Cast down the inheritance hierarchy
    line 779:       const { return static_cast< Namespace* >(GetScope()); }
  W010 Cast removes const qualification
    line 142:       override { return const_cast< CxxArea* >(this); }
    line 428:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    line 464:       override { return const_cast< Class* >(this); }
    line 816:       override { return const_cast< Namespace* >(this); }
  W017 Using statement in header
    line 36: using namespace NodeBase;
  W036 Member could be private
    line 117:    Typedef* FindType(const std::string& name) const;
    line 158:    Enum* FindEnum(const std::string& name) const;
    line 162:    Enumerator* FindEnumerator(const std::string& name) const;
    line 348:    Function* FindFuncByRole(FunctionRole role, bool base) const;
    line 352:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    line 778:    Namespace* OuterSpace()
    line 784:    Namespace* FindNamespace(const std::string& name) const;
  W037 Member could be protected
    line 77:    const ClassPtrVector* Classes() const { return &classes_; }
    line 85:    const EnumPtrVector* Enums() const { return &enums_; }
    line 89:    const ForwardPtrVector* Forws() const { return &forws_; }
  W054 Base class constructor is public
    line 234:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W069 Virtual function is public
    line 126:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    line 133:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    line 263:    virtual ClassInst* EnsureInstance(const TypeName* type);
    line 271:    virtual Class* BaseClass()
    line 276:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    line 304:    virtual bool DerivesFrom(const Class* cls) const;
    line 419:    virtual bool AddAnonymousUnion(ClassPtr& cls) override;
    line 436:    virtual void CheckIfUsed(Warning warning) const override;
    line 444:    virtual Class* DirectClass() const override { return GetClass(); }
    line 803:    virtual CxxScoped* FindItem(const std::string& name) const override;
  W080 Argument could be const
    line 176/1:    virtual bool AddAnonymousUnion(ClassPtr& cls) { return false; }
  W084 Function could be free
    line 180:    static Function* FoundFunc
    line 564:    static size_t CreateCodeError(const std::string& name, debug32_t offset);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp:
  W009 Cast down the inheritance hierarchy
    line 849:       auto macro = static_cast< Macro* >(ref_);
    line 862:       auto macro = static_cast< Macro* >(ref_);
  W050 Default constructor invoked: POD members not initialized
    line 844:    SymbolView view;
  W098 Function does not invoke Debug::ft
    line 47: void AlignLeft(ostream& stream, const string& prefix)
    line 153: CxxToken* Define::AutoType() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h:
  W017 Using statement in header
    line 33: using namespace NodeBase;
  W036 Member could be private
    line 242:    virtual CxxToken* GetValue() const = 0;
    line 282:    virtual CxxToken* RootType() const override { return GetValue(); }
  W037 Member could be protected
    line 735:    const std::string& GetText() const { return text_; }
  W044 Data is not private
    line 307:    size_t refs_ : 16;
  W069 Virtual function is public
    line 242:    virtual CxxToken* GetValue() const = 0;
    line 247:    virtual bool IsDefined() const { return true; }
    line 253:    virtual void SetExpr(ExprPtr& rhs);
    line 282:    virtual CxxToken* RootType() const override { return GetValue(); }
    line 417:    virtual bool AddElif(Elif* e) { return false; }
    line 421:    virtual bool AddElse(const Else* e) { return false; }
    line 430:    virtual bool HasCompiledCode() const { return compile_; }
    line 471:    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp:
  W007 Functional cast
    line 1340:    if(count >= 0) return size_t(count);
  W009 Cast down the inheritance hierarchy
    line 1275:       auto thisClass = static_cast< Class* >(thisRoot);
    line 1283:             auto thatClass = static_cast< Class* >(thatRoot);
    line 1418:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    line 1462:    auto ref = static_cast< CxxNamed* >(item);
    line 1586:          static_cast< Class* >(root)->BlockCopied(this);
  W052 Default copy constructor invoked
    line 159:    arg_(arg)
  W069 Virtual function is public
    line 63:    virtual bool Display(std::ostream& stream) override;
    line 75:    virtual bool Display(std::ostream& stream) override;
    line 91:    virtual bool Display(std::ostream& stream) override;
    line 107:    virtual bool Display(std::ostream& stream) override;
    line 127:    virtual bool Display(std::ostream& stream) override;
  W098 Function does not invoke Debug::ft
    line 252: bool Context::OptionIsOn(char opt)
    line 259: bool Context::ParsingTemplateInstance()
    line 399: void Context::Trace(CxxTrace::Action act)
    line 407: void Context::Trace(CxxTrace::Action act, const StackArg& arg)
    line 415: void Context::Trace(CxxTrace::Action act, word err, const string& expl)
    line 423: void Context::Trace(CxxTrace::Action act, const CodeFile& file)
    line 431: void Context::Trace(CxxTrace::Action act, const CxxToken* token)
    line 439: void Context::WasCalled(Function* func)
    line 606: OptionalCode* ParseFrame::Optional() const
    line 793: CxxScope* ParseFrame::Scope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h:
  W017 Using statement in header
    line 33: using namespace NodeBase;
  W019 Unused argument
    line 580/1:    static void Shutdown(RestartLevel level);
    line 584/1:    static void Startup(RestartLevel level) { }
  W026 Unused function
    line 126:    size_t Arrays() const;
    line 261:    bool operator!=(const StackArg& that) const;
  W036 Member could be private
    line 260:    bool operator==(const StackArg& that) const;
    line 541:    static size_t GetPos() { return Frame_->GetPos(); }
  W044 Data is not private
    line 269:    CxxToken* item;
  W047 Data could be const
    line 293:    CxxToken* via_;
  W076 Adjacent arguments have the same type
    line 232:    TypeMatch CalcMatchWith(const StackArg& that, const std::string& thisType,
    line 278:    TypeMatch MatchWith(const StackArg& that, const std::string& thisType,
  W080 Argument could be const
    line 273/1:    bool SetAutoTypeOn(FuncData& data) const;
  W084 Function could be free
    line 289:    static void ContextFunctionIsNonConst();
    line 584:    static void Startup(RestartLevel level) { }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp:
  W007 Functional cast
    line 658:    if(arrays_ != nullptr) count += TagCount(arrays_->size());
    line 1306:    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  W009 Cast down the inheritance hierarchy
    line 356:          space = static_cast< Namespace* >(item);
    line 371:          cls = static_cast< Class* >(item);
    line 416:          return static_cast< Enum* >(item)->FindEnumerator(name);
    line 424:             auto tdef = static_cast< Typedef* >(item);
    line 429:             item = static_cast< CxxScoped* >(root);
    line 440:             item = static_cast< CxxScoped* >(ref);
    line 718:    return static_cast< Class* >(root);
    line 1013:          auto cls = static_cast< Class* >(ref);
    line 1170:       auto cls = static_cast< Class* >(ref);
    line 2003:          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
    line 2013:       ref = static_cast< Function* >(ref)->FindRootFunc();
  W010 Cast removes const qualification
    line 940:    return const_cast< DataSpec* >(this);
    line 1348:    const_cast< DataSpec* >(this)->FindReferent();
    line 2583:    return const_cast< TypeName* >(this);
  W050 Default constructor invoked: POD members not initialized
    line 840:    SymbolView view;
    line 2151:    SymbolView view;
  W098 Function does not invoke Debug::ft
    line 148: CxxArea* CxxNamed::GetArea() const
    line 157: Class* CxxNamed::GetClass() const
    line 166: id_t CxxNamed::GetDeclFid() const
    line 175: Namespace* CxxNamed::GetSpace() const
    line 184: const TemplateParms* CxxNamed::GetTemplateParms() const
    line 193: bool CxxNamed::IsInTemplateInstance() const
    line 505: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    line 902: Numeric DataSpec::GetNumeric() const
    line 922: CxxScope* DataSpec::GetScope() const
    line 931: TypeTags DataSpec::GetTags() const
    line 938: TypeSpec* DataSpec::GetTypeSpec() const
    line 1081: bool DataSpec::IsAutoDecl() const
    line 1884: CxxNamed* QualName::DirectType() const
    line 1939: CxxScoped* QualName::GetForward() const
    line 2076: TypeName* QualName::Names_at(size_t index) const
    line 2085: TypeName* QualName::Names_back() const
    line 2092: size_t QualName::Names_size() const
    line 2839: void TypeSpec::AddArray(ArraySpecPtr& array)
    line 2846: void TypeSpec::AdjustPtrs(TagCount count)
    line 2861: TagCount TypeSpec::ArrayCount() const
    line 2869: TagCount TypeSpec::Arrays() const
    line 2877: TypeSpec* TypeSpec::Clone() const
    line 2899: void TypeSpec::EnterArrays() const
    line 2906: void TypeSpec::EnteringScope(const CxxScope* scope)
    line 2913: TypeTags TypeSpec::GetTags() const
    line 2923: bool TypeSpec::HasArrayDefn() const
    line 2931: void TypeSpec::Instantiating() const
    line 2938: bool TypeSpec::MatchesExactly(const TypeSpec* that) const
    line 2946: TypeMatch TypeSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    line 2955: TypeMatch TypeSpec::MatchTemplateArg(const TypeSpec* that) const
    line 2986: TagCount TypeSpec::PtrCount(bool arrays) const
    line 2994: TagCount TypeSpec::Ptrs(bool arrays) const
    line 3002: TagCount TypeSpec::RefCount() const
    line 3010: TagCount TypeSpec::Refs() const
    line 3018: void TypeSpec::RemoveRefs()
    line 3025: StackArg TypeSpec::ResultType() const
    line 3033: void TypeSpec::SetArrayPos(int8_t pos)
    line 3040: void TypeSpec::SetConst(bool readonly)
    line 3047: void TypeSpec::SetConstPtr(bool constptr)
    line 3065: void TypeSpec::SetPtrDetached(bool on)
    line 3072: void TypeSpec::SetPtrs(TagCount ptrs)
    line 3079: void TypeSpec::SetRefDetached(bool on)
    line 3086: void TypeSpec::SetReferent(CxxNamed* ref, UsingMode mode)
    line 3093: void TypeSpec::SetRefs(TagCount refs)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h:
  W006 C-style cast
    line 1025:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W010 Cast removes const qualification
    line 532:       override { return const_cast< QualName* >(this); }
    line 1025:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W017 Using statement in header
    line 36: using namespace NodeBase;
  W036 Member could be private
    line 467:    TypeName* Names_back() const;
  W037 Member could be protected
    line 121:    bool IsInternal() const { return decl_.internal; }
    line 261:    void Accessed() const;
    line 271:    void DisplayReferent(std::ostream& stream, bool fq) const;
    line 275:    std::string strLocation() const;
    line 280:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    line 766:    Cxx::ItemType GetLocale() const { return locale_; }
    line 770:    TemplateRole GetTemplateRole() const { return role_; }
  W047 Data could be const
    line 73:    bool const_ : 1;       // type is const
    line 74:    bool constptr_ : 1;    // pointer is const
    line 77:    TagCount refs_ : 8;    // number of references
  W056 Member not included in member initialization list
    line 602:       TypeNamePtrVector* names_;  // the names in a qualified name
  W069 Virtual function is public
    line 112:    virtual void SetDecl(CodeFile* file, size_t pos) { decl_.SetLoc(file, pos); }
    line 126:    virtual bool IsDeclaredInFunction() const { return false; }
    line 134:    virtual bool IsStatic() const { return true; }
    line 139:    virtual CxxScope* GetScope() const { return nullptr; }
    line 145:    virtual void SetScope(CxxScope* scope) const { }
    line 149:    virtual void SetAccess(Cxx::Access access) { }
    line 154:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    line 160:    virtual const TemplateParms* GetTemplateParms() const;
    line 168:    virtual Class* GetTemplate() const { return nullptr; }
    line 174:    virtual std::string QualifiedName(bool scopes, bool templates)
    line 180:    virtual std::string ScopedName(bool templates) const;
    line 185:    virtual CxxArea* GetArea() const;
    line 190:    virtual Function* GetFunction() const { return nullptr; }
    line 194:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    line 198:    virtual id_t GetDeclFid() const;
    line 215:    virtual bool EnterScope() { return true; }
    line 225:    virtual bool IsImplemented() const { return true; }
    line 230:    virtual bool FindReferent();
    line 234:    virtual void SetAsReferent(const CxxNamed* user) { }
    line 239:    virtual bool Instantiate() { return false; }
    line 243:    virtual bool IsInTemplateInstance() const;
    line 250:    virtual StackArg NameToArg(Cxx::Operator op);
    line 256:    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
    line 523:    virtual CxxNamed* DirectType() const override;
    line 568:    virtual bool ResolveTypedef(Typedef* type) const override;
    line 572:    virtual bool ResolveTemplate
    line 585:    virtual void SubclassAccess(Class* cls) const override;
    line 762:    virtual void SetLocale(Cxx::ItemType locale);
    line 774:    virtual Function* GetFuncSpec() const { return nullptr; }
    line 785:    virtual TypeSpec* Clone() const = 0;
    line 789:    virtual void AddArray(ArraySpecPtr& array) = 0;
    line 793:    virtual void SetConst(bool readonly) = 0;
    line 797:    virtual void SetConstPtr(bool constptr) = 0;
    line 801:    virtual void SetPtrs(TagCount ptrs) = 0;
    line 805:    virtual void SetRefs(TagCount refs) = 0;
    line 809:    virtual void SetArrayPos(int8_t pos) = 0;
    line 813:    virtual void SetPtrDetached(bool on) = 0;
    line 817:    virtual void SetRefDetached(bool on) = 0;
    line 822:    virtual void SetReferent(CxxNamed* ref, UsingMode mode) = 0;
    line 828:    virtual TagCount Ptrs(bool arrays) const = 0;
    line 834:    virtual TagCount Refs() const = 0;
    line 839:    virtual TagCount Arrays() const = 0;
    line 843:    virtual bool HasArrayDefn() const = 0;
    line 847:    virtual void EnteringScope(const CxxScope* scope) = 0;
    line 851:    virtual void EnterArrays() const = 0;
    line 855:    virtual TypeTags GetTags() const = 0;
    line 860:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    line 865:    virtual void DisplayTags(std::ostream& stream) const = 0;
    line 869:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    line 875:    virtual void AdjustPtrs(TagCount count) = 0;
    line 880:    virtual void RemoveRefs() = 0;
    line 885:    virtual TagCount PtrCount(bool arrays) const = 0;
    line 889:    virtual TagCount RefCount() const = 0;
    line 893:    virtual TagCount ArrayCount() const = 0;
    line 898:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    line 902:    virtual StackArg ResultType() const = 0;
    line 906:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    line 917:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    line 923:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    line 928:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    line 934:    virtual void Instantiating() const = 0;
  W076 Adjacent arguments have the same type
    line 514:    TypeMatch MatchTemplate(const QualName* that,
    line 702:    TypeMatch MatchTemplate(const TypeName* that,
    line 917:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  W082 Function could be const
    line 443:    void Append(const std::string& name, bool space = false);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxRoot.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp:
  W009 Cast down the inheritance hierarchy
    line 1293:    auto cls = static_cast< Class* >(root);
    line 1361:          auto op = static_cast< Operation* >(expr);
    line 1666:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    line 1712:    auto data = static_cast< FuncData* >(next_.get());
    line 2492:       if(!static_cast< Function* >(item)->virtual_)
    line 2843:             static_cast< ClassData* >(data)->SetInit(m->get());
    line 3043:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    line 4345:       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
    line 4346:       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  W010 Cast removes const qualification
    line 2134:    return FoundFunc(const_cast< Function* >(this), args, match);
    line 3007:    auto prev = const_cast< Function* >(this);
    line 3400:    func->SetTemplate(const_cast< Function* >(this));
  W050 Default constructor invoked: POD members not initialized
    line 1299:       SymbolView view;
  W051 Default constructor invoked
    line 3178:    CxxUsageSets usages;
  W098 Function does not invoke Debug::ft
    line 113: bool Block::CrlfOver(Form form) const
    line 232: CxxToken* Block::FirstStatement() const
    line 240: Function* Block::GetFunction() const
    line 279: bool Block::InLine() const
    line 793: id_t CxxScope::GetDistinctDeclFid() const
    line 1389: bool Data::IsConst() const
    line 1397: bool Data::IsConstPtr() const
    line 1522: bool Data::WasRead()
    line 3048: Function* Function::FoundFunc
    line 3077: FunctionRole Function::FuncRole() const
    line 3113: FunctionType Function::FuncType() const
    line 3123: void Function::GetDefnRange(size_t& begin, size_t& end) const
    line 3131: CxxScope* Function::GetScope() const
    line 3630: bool Function::IsInTemplateInstance() const
    line 4008: void Function::SetDefnRange(size_t begin, size_t end)
    line 4367: void FuncSpec::AddArray(ArraySpecPtr& array)
    line 4374: void FuncSpec::AdjustPtrs(TagCount count)
    line 4388: TagCount FuncSpec::ArrayCount() const
    line 4395: TagCount FuncSpec::Arrays() const
    line 4402: void FuncSpec::Check() const
    line 4410: TypeSpec* FuncSpec::Clone() const
    line 4432: void FuncSpec::EnterArrays() const
    line 4451: bool FuncSpec::FindReferent()
    line 4459: TypeTags FuncSpec::GetTags() const
    line 4466: TypeName* FuncSpec::GetTemplateArgs() const
    line 4473: TypeSpec* FuncSpec::GetTypeSpec() const
    line 4480: bool FuncSpec::HasArrayDefn() const
    line 4487: void FuncSpec::Instantiating() const
    line 4495: bool FuncSpec::IsConst() const
    line 4502: bool FuncSpec::IsConstPtr() const
    line 4509: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    line 4517: TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    line 4527: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    line 4549: TagCount FuncSpec::PtrCount(bool arrays) const
    line 4556: TagCount FuncSpec::Ptrs(bool arrays) const
    line 4563: TagCount FuncSpec::RefCount() const
    line 4570: TagCount FuncSpec::Refs() const
    line 4577: void FuncSpec::RemoveRefs()
    line 4584: StackArg FuncSpec::ResultType() const
    line 4591: void FuncSpec::SetArrayPos(int8_t pos)
    line 4599: void FuncSpec::SetConst(bool readonly)
    line 4607: void FuncSpec::SetConstPtr(bool constptr)
    line 4615: void FuncSpec::SetPtrDetached(bool on)
    line 4623: void FuncSpec::SetPtrs(TagCount ptrs)
    line 4631: void FuncSpec::SetRefDetached(bool on)
    line 4639: void FuncSpec::SetReferent(CxxNamed* ref, UsingMode mode)
    line 4647: void FuncSpec::SetRefs(TagCount refs)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h:
  W006 C-style cast
    line 346:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W010 Cast removes const qualification
    line 346:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    line 1099:       const override { return const_cast< Function* >(this); }
  W023 Unused enumerator
    line 152:       Multiple   // two statements or more
  W036 Member could be private
    line 977:    size_t MinArgs() const;
    line 982:    size_t MaxArgs() const { return args_.size(); }
    line 1044:    bool IsInvokedInBase() const;
  W037 Member could be protected
    line 304:    bool IsExtern() const { return extern_; }
    line 308:    bool IsConstexpr() const { return constexpr_; }
    line 312:    bool WasInited() const { return inited_; }
  W069 Virtual function is public
    line 81:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    line 86:    virtual bool HasUsingFor(const std::string& name, size_t prefix)
    line 94:    virtual void AccessibilityOf
    line 336:    virtual void Promote
    line 404:    virtual void SetDefn(CodeFile* file, size_t pos) override;
    line 1069:    virtual void CheckAccessControl() const override;
    line 1073:    virtual void CheckIfHiding() const override;
    line 1158:    virtual void SetDefn(CodeFile* file, size_t pos) override;
    line 1175:    virtual void WasCalled() override;
  W076 Adjacent arguments have the same type
    line 336:    virtual void Promote
    line 1251:    static TypeMatch MatchTemplate
  W084 Function could be free
    line 1251:    static TypeMatch MatchTemplate
    line 1264:    static Function* InstantiateError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp:
  W006 C-style cast
    line 1209:    return (CxxToken*) this;
    line 1384:    return (CxxToken*) this;
  W009 Cast down the inheritance hierarchy
    line 79:          auto func = static_cast< Function* >(GetScope());
    line 271:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    line 307:    return static_cast< Class* >(name_->GetReferent());
    line 1372:          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
    line 1514:          space = static_cast< Namespace* >(item);
    line 1526:          cls = static_cast< Class* >(item);
    line 1564:             auto tdef = static_cast< Typedef* >(item);
    line 1569:             item = static_cast< CxxScoped* >(root);
    line 1842:       static_cast< CxxArea* >(scope)->AddFunc(func);
  W010 Cast removes const qualification
    line 1209:    return (CxxToken*) this;
    line 1384:    return (CxxToken*) this;
    line 1752:    const_cast< Friend* >(this)->FindReferent();
  W050 Default constructor invoked: POD members not initialized
    line 285:    SymbolView view;
    line 2317:    SymbolView view;
  W052 Default copy constructor invoked
    line 1921:    attrs_(Numeric::Nil)
  W098 Function does not invoke Debug::ft
    line 305: Class* BaseDecl::GetClass() const
    line 406: void CxxScoped::AddFiles(SetOfIds& imSet) const
    line 560: CodeFile* CxxScoped::GetImplFile() const
    line 569: bool CxxScoped::GetScopedName(string& name, size_t n) const
    line 578: bool CxxScoped::IsAuto() const
    line 587: bool CxxScoped::IsConst() const
    line 596: bool CxxScoped::IsConstPtr() const
    line 605: bool CxxScoped::IsDeclaredInFunction() const
    line 613: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    line 626: bool CxxScoped::IsIndirect() const
    line 1141: void Enumerator::RecordAccess(Cxx::Access access) const
    line 1205: CxxToken* Forward::AutoType() const
    line 1380: CxxToken* Friend::AutoType() const
    line 1635: Function* Friend::GetFunction() const
    line 1644: QualName* Friend::GetQualName() const
    line 1653: CxxNamed* Friend::GetReferent() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h:
  W006 C-style cast
    line 161:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    line 466:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    line 556:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    line 957:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    line 1033:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W010 Cast removes const qualification
    line 161:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    line 466:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    line 556:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    line 957:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    line 1033:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W017 Using statement in header
    line 35: using namespace NodeBase;
  W037 Member could be protected
    line 53:    CodeFile* GetImplFile() const;
    line 72:    virtual bool GetScopedName(std::string& name, size_t n) const;
    line 94:    CxxScoped* FindInheritedName() const;
    line 99:    void DisplayFiles(std::ostream& stream) const;
    line 112:    FileRole GetFileRole(const CodeFile* file) const;
    line 120:    virtual bool IsUnused() const { return false; }
  W069 Virtual function is public
    line 72:    virtual bool GetScopedName(std::string& name, size_t n) const;
    line 76:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
    line 85:    virtual void RecordAccess(Cxx::Access access) const;
    line 104:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    line 108:    virtual size_t GetDefnPos() const { return std::string::npos; }
    line 116:    virtual void AddFiles(SetOfIds& imSet) const;
    line 120:    virtual bool IsUnused() const { return false; }
    line 475:    virtual void CheckAccessControl() const override;
    line 838:    virtual bool ResolveTemplate
    line 1197:    virtual bool ResolveTypedef(Typedef* type) const override { return false; }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp:
  W098 Function does not invoke Debug::ft
    line 270: void CxxStatement::EnterBlock()
    line 339: bool Do::InLine() const
    line 535: bool For::InLine() const
    line 629: bool If::InLine() const
    line 993: bool While::InLine() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp:
  W076 Adjacent arguments have the same type
    line 40: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
    line 57: size_t RfindScopeOperator(const string& name, size_t begin, size_t end);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W026 Unused function
    line 59:    std::string& Prefix(std::string&& scope);
  W076 Adjacent arguments have the same type
    line 116:    size_t Replace(std::string& code,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp:
  W009 Cast down the inheritance hierarchy
    line 383:    return static_cast< Macro* >(macros.front());
    line 422:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    line 430:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    line 438:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    line 444:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W050 Default constructor invoked: POD members not initialized
    line 616:    SymbolView view;
  W098 Function does not invoke Debug::ft
    line 90: template< typename T > void Erase(const CxxScoped* item,
    line 188: template< typename T > void ListSymbols(const string& name,
    line 225: void CxxSymbols::EraseClass(const Class* cls)
    line 232: void CxxSymbols::EraseData(const Data* data)
    line 239: void CxxSymbols::EraseEnum(const Enum* item)
    line 246: void CxxSymbols::EraseEtor(const Enumerator* etor)
    line 253: void CxxSymbols::EraseForw(const Forward* forw)
    line 260: void CxxSymbols::EraseFriend(const Friend* frnd)
    line 267: void CxxSymbols::EraseFunc(const Function* func)
    line 296: void CxxSymbols::EraseMacro(const Macro* macro)
    line 303: void CxxSymbols::EraseSpace(const Namespace* space)
    line 310: void CxxSymbols::EraseTerm(const Terminal* term)
    line 317: void CxxSymbols::EraseType(const Typedef* type)
    line 662: void CxxSymbols::InsertClass(Class* cls)
    line 669: void CxxSymbols::InsertData(Data* data)
    line 676: void CxxSymbols::InsertEnum(Enum* item)
    line 683: void CxxSymbols::InsertEtor(Enumerator* etor)
    line 690: void CxxSymbols::InsertForw(Forward* forw)
    line 697: void CxxSymbols::InsertFriend(Friend* frnd)
    line 704: void CxxSymbols::InsertFunc(Function* func)
    line 738: void CxxSymbols::InsertMacro(Macro* macro)
    line 745: void CxxSymbols::InsertSpace(Namespace* space)
    line 752: void CxxSymbols::InsertTerm(Terminal* term)
    line 759: void CxxSymbols::InsertType(Typedef* type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h:
  W017 Using statement in header
    line 39: using namespace NodeBase;
  W082 Function could be const
    line 124:    void InsertClass(Class* cls);
    line 125:    void InsertData(Data* data);
    line 126:    void InsertEtor(Enumerator* etor);
    line 127:    void InsertEnum(Enum* item);
    line 128:    void InsertForw(Forward* forw);
    line 129:    void InsertFriend(Friend* frnd);
    line 130:    void InsertFunc(Function* func);
    line 131:    void InsertMacro(Macro* macro);
    line 132:    void InsertSpace(Namespace* space);
    line 133:    void InsertTerm(Terminal* term);
    line 134:    void InsertType(Typedef* type);
    line 139:    void EraseClass(const Class* cls);
    line 140:    void EraseData(const Data* data);
    line 141:    void EraseEtor(const Enumerator* etor);
    line 142:    void EraseEnum(const Enum* item);
    line 143:    void EraseForw(const Forward* forw);
    line 144:    void EraseFriend(const Friend* frnd);
    line 145:    void EraseFunc(const Function* func);
    line 146:    void EraseMacro(const Macro* macro);
    line 147:    void EraseSpace(const Namespace* space);
    line 148:    void EraseTerm(const Terminal* term);
    line 149:    void EraseType(const Typedef* type);
    line 150:    void EraseLocal(const CxxScoped* name);
    line 154:    void EraseLocals();
  W101 Override of Base.Display not found
    line 87: class CxxSymbols: public Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp:
  W007 Functional cast
    line 823:          stream << uint64_t(num_);
  W009 Cast down the inheritance hierarchy
    line 409:    auto oper = static_cast< Operation* >(item.get());
    line 435:          auto ante = static_cast< Operation* >(prev.get());
    line 487:       auto oper = static_cast< Operation* >(item.get());
    line 520:    auto oper = static_cast< Operation* >(prev.get());
    line 549:       auto oper = static_cast< Operation* >(item.get());
    line 591:    auto oper = static_cast< Operation* >(item.get());
    line 614:       auto ante = static_cast< Operation* >(prev.get());
    line 710:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    line 1102:       inClass = static_cast< Class* >(inRoot);
    line 1107:       outClass = static_cast< Class* >(outRoot);
    line 1132:    auto call = static_cast< Operation* >(args_.front().get());
    line 1519:       func = static_cast< Function* >(proc.item);
    line 1538:       cls = static_cast< Class* >(proc.item);
    line 1633:    auto dtor = static_cast< Class* >
    line 1682:       auto newCall = static_cast< Operation* >(args_.front().get());
    line 1702:    auto cls = static_cast< Class* >(spec.item->Root());
    line 1723:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    line 1747:       cls = static_cast< Class* >(root);
    line 1931:       area = static_cast< Class* >(targ);
    line 1933:       static_cast< Class* >(targ)->Instantiate();
    line 2271:    auto cls = static_cast< Class* >(root);
    line 2310:       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
    line 2333:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W010 Cast removes const qualification
    line 297:    CxxToken* prev = const_cast< CxxToken* >(this);
  W050 Default constructor invoked: POD members not initialized
    line 2516:    SymbolView view;
  W098 Function does not invoke Debug::ft
    line 342: void CxxUsageSets::AddBase(const CxxNamed* item)
    line 350: void CxxUsageSets::AddDirect(const CxxNamed* item)
    line 358: void CxxUsageSets::AddForward(const CxxNamed* item)
    line 369: void CxxUsageSets::AddIndirect(const CxxNamed* item)
    line 377: void CxxUsageSets::AddUsing(const CxxNamed* item)
    line 724: Numeric FloatLiteral::GetNumeric() const
    line 785: Numeric IntLiteral::GetNumeric() const
    line 890: CxxToken* Literal::AutoType() const
    line 915: CxxToken* Literal::RootType() const
    line 931: Cxx::ItemType Literal::Type() const
    line 2645: TypeSpec* StrLiteral::GetTypeSpec() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h:
  W010 Cast removes const qualification
    line 289:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W017 Using statement in header
    line 38: using namespace NodeBase;
  W052 Default copy constructor invoked
    line 371:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
    line 407:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  W069 Virtual function is public
    line 79:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    line 85:    virtual const std::string* Name() const;
    line 89:    virtual QualName* GetQualName() const { return nullptr; }
    line 94:    virtual std::string TypeString(bool arg) const { return ERROR_STR; }
    line 98:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    line 102:    virtual bool IsConst() const { return false; }
    line 106:    virtual bool IsConstPtr() const { return false; }
    line 111:    virtual bool IsAuto() const { return false; }
    line 116:    virtual bool IsIndirect() const { return false; }
    line 120:    virtual bool IsInitializing() const { return false; }
    line 129:    virtual CxxToken* AutoType() const { return nullptr; }
    line 134:    virtual Namespace* GetSpace() const { return nullptr; }
    line 139:    virtual Class* GetClass() const { return nullptr; }
    line 144:    virtual Class* Declarer() const { return GetClass(); }
    line 150:    virtual TypeName* GetTemplateArgs() const;
    line 155:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    line 159:    virtual void GetConvertibleTypes(StackArgVector& types) { }
    line 164:    virtual CxxNamed* Referent() const;
    line 170:    virtual void EnterBlock();
    line 175:    virtual void ExitBlock() { }
    line 181:    virtual bool AppendUnary() { return false; }
    line 185:    virtual CxxToken* Back() { return this; }
    line 190:    virtual bool WasRead() { return false; }
    line 202:    virtual bool WasWritten(const StackArg* arg, bool passed);
    line 207:    virtual bool SetNonConst() { return true; }
    line 212:    virtual void WasMutated(const StackArg* arg) { }
    line 218:    virtual void RecordUsage() const { }
    line 223:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
    line 227:    virtual void Check() const { }
    line 231:    virtual std::string Trace() const { return EMPTY_STR; }
    line 235:    virtual bool InLine() const { return true; }
    line 240:    virtual void Print(std::ostream& stream) const;
    line 245:    virtual void Shrink() { }
  W076 Adjacent arguments have the same type
    line 621:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W082 Function could be const
    line 175:    virtual void ExitBlock() { }
  W084 Function could be free
    line 278:    static void ShrinkExpression(const ExprPtr& expr);
    line 474:    static TypeSpecPtr CreateRef();
    line 610:    static void PushType(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp:
  W007 Functional cast
    line 155:          type = LibTokenType(i);
  W084 Function could be free
    line 51:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W091 Line contains adjacent spaces
    line 93:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    line 94:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    line 95:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    line 96:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    line 97:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    line 98:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    line 99:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    line 100:    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
    line 101:    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h:
  W017 Using statement in header
    line 38: using namespace NodeBase;
  W084 Function could be free
    line 64:    static bool IsOperator(const std::string& s);
  W101 Override of Base.Display not found
    line 46: class Interpreter : public Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp:
  W007 Functional cast
    line 838:          oper = Cxx::Operator(match->second);
  W009 Cast down the inheritance hierarchy
    line 1513:          auto def = static_cast< Define* >(item);
    line 1517:             auto code = const_cast< string* >(source_);
  W010 Cast removes const qualification
    line 1517:             auto code = const_cast< string* >(source_);
  W050 Default constructor invoked: POD members not initialized
    line 665:       IntLiteral::Tags tags;
    line 712:       FloatLiteral::Tags tags;
    line 776:    IntLiteral::Tags tags;
    line 1496:    SymbolView view;
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h:
  W036 Member could be private
    line 112:    std::string NextOperator() const;
    line 229:    bool ThisCharIs(char c);
  W041 Data is init-only
    line 406:    static bool Initialized;
  W076 Adjacent arguments have the same type
    line 125:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  W084 Function could be free
    line 62:    static bool IsValidIdentifier(const std::string& id);
C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp:
  W009 Cast down the inheritance hierarchy
    line 92:    sourcePathCfg_.reset
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h:
  W017 Using statement in header
    line 44: using namespace NodeBase;
  W036 Member could be private
    line 69:    CodeDir* FindDir(const std::string& name) const;
    line 90:    LibrarySet* FindVar(const std::string& name) const;
  W042 Data is write-only
    line 227:    LibraryVarSet* varSet_;
  W076 Adjacent arguments have the same type
    line 64:    word Import
    line 106:    word Assign(const std::string& name,
  W082 Function could be const
    line 74:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    line 106:    word Assign(const std::string& name,
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp:
  W098 Function does not invoke Debug::ft
    line 102: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp:
  W008 reinterpret_cast
    line 272:    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  W098 Function does not invoke Debug::ft
    line 75: LibrarySet* LibrarySet::AffectedBy() const
    line 82: LibrarySet* LibrarySet::Affecters() const
    line 89: LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
    line 107: LibrarySet* LibrarySet::CommonAffecters() const
    line 157: LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
    line 164: LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
    line 171: LibrarySet* LibrarySet::Directories() const
    line 190: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    line 197: LibrarySet* LibrarySet::Files() const
    line 204: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    line 222: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    line 241: LibrarySet* LibrarySet::Implements() const
    line 248: LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
    line 255: bool LibrarySet::IsReadOnly() const
    line 262: bool LibrarySet::IsTemporary() const
    line 289: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    line 296: LibrarySet* LibrarySet::NeededBy() const
    line 303: LibrarySet* LibrarySet::Needers() const
    line 312: word LibrarySet::NotImplemented(string& expl) const
    line 338: LibrarySet* LibrarySet::OpError() const
    line 454: LibrarySet* LibrarySet::Union(const LibrarySet* that) const
    line 461: LibrarySet* LibrarySet::UsedBy(bool self) const
    line 468: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
  W036 Member could be private
    line 61:    bool IsReadOnly() const;
    line 162:    static ptrdiff_t LinkDiff();
  W037 Member could be protected
    line 140:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  W047 Data could be const
    line 210:    Q2Link link_;
  W059 Base class virtual destructor is not public
    line 178:    virtual ~LibrarySet();
  W069 Virtual function is public
    line 69:    virtual LibSetType GetType() const;
    line 75:    virtual word Check(std::ostream& stream, std::string& expl) const;
    line 81:    virtual word Count(std::string& result) const;
    line 87:    virtual word Countlines(std::string& result) const;
    line 92:    virtual word Format(std::string& expl) const;
    line 98:    virtual word List(std::ostream& stream, std::string& expl) const;
    line 106:    virtual word Parse(std::string& expl, const std::string& opts) const;
    line 112:    virtual word Scan(std::ostream& stream,
    line 119:    virtual word Show(std::string& result) const;
    line 125:    virtual word Sort(std::ostream& stream, std::string& expl) const;
    line 131:    virtual word Trim(std::ostream& stream, std::string& expl) const;
    line 140:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
    line 141:    virtual LibrarySet* Assign(LibrarySet* rhs);
    line 142:    virtual LibrarySet* Intersection(const LibrarySet* that) const;
    line 143:    virtual LibrarySet* Difference(const LibrarySet* that) const;
    line 144:    virtual LibrarySet* Union(const LibrarySet* that) const;
    line 145:    virtual LibrarySet* Directories() const;
    line 146:    virtual LibrarySet* Files() const;
    line 147:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    line 148:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    line 149:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    line 150:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    line 151:    virtual LibrarySet* Implements() const;
    line 152:    virtual LibrarySet* UsedBy(bool self) const;
    line 153:    virtual LibrarySet* Users(bool self) const;
    line 154:    virtual LibrarySet* AffectedBy() const;
    line 155:    virtual LibrarySet* Affecters() const;
    line 156:    virtual LibrarySet* CommonAffecters() const;
    line 157:    virtual LibrarySet* NeededBy() const;
    line 158:    virtual LibrarySet* Needers() const;
  W084 Function could be free
    line 182:    static word Counted(std::string& result, const size_t* count);
    line 187:    static word Shown(std::string& result);
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp:
  W009 Cast down the inheritance hierarchy
    line 254:    auto op = static_cast< Operation* >(call.get());
    line 503:    auto brace = static_cast< BraceInit* >(token.get());
    line 577:    auto cast = static_cast< Operation* >(token.get());
    line 616:    auto c = static_cast< Catch* >(statement.get());
    line 713:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    line 714:    static_cast< ClassData* >(data.get())->SetWidth(width);
    line 873:    auto cond = static_cast< Operation* >(token.get());
    line 1147:    auto cast = static_cast< Operation* >(token.get());
    line 1253:    auto op = static_cast< Operation* >(token.get());
    line 1276:    auto delOp = static_cast< Operation* >(token.get());
    line 1304:    auto d = static_cast< Do* >(statement.get());
    line 1498:    auto f = static_cast< For* >(statement.get());
    line 1598:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    line 1647:          curr = static_cast< FuncData* >(data.get());
    line 1653:          curr = static_cast< FuncData* >(subseq.get());
    line 1906:             static_cast< If* >(first)->SetElseIf();
    line 1912:    auto i = static_cast< If* >(statement.get());
    line 2041:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    line 2083:    auto newOp = static_cast< Operation* >(token.get());
    line 2573:    static_cast< Return* >(statement.get())->AddExpr(expr);
    line 2620:    auto op = static_cast< Operation* >(token.get());
    line 2767:    auto op = static_cast< Operation* >(token.get());
    line 2793:    auto s = static_cast< Switch* >(statement.get());
    line 2875:    auto op = static_cast< Operation* >(token.get());
    line 2911:    auto t = static_cast< Try* >(statement.get());
    line 2969:    auto op = static_cast< Operation* >(token.get());
    line 3173:    auto w = static_cast< While* >(statement.get());
    line 3551:          auto op = static_cast< Operation* >(token)->Op();
  W050 Default constructor invoked: POD members not initialized
    line 998:             SymbolView view;
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h:
  W017 Using statement in header
    line 35: using namespace NodeBase;
  W026 Unused function
    line 188:    size_t GetCurr() const { return lexer_.Curr(); }
  W076 Adjacent arguments have the same type
    line 400:    static bool SetCompoundType
    line 444:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W080 Argument could be const
    line 252/1:    bool GetStatements(BlockPtr& block, bool braced);
    line 350/1:    bool GetCtorInit(FunctionPtr& func);
    line 369/1:    bool GetArguments(FunctionPtr& func);
    line 401/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    line 459/1:    bool GetNum(ExprPtr& expr);
    line 460/1:    bool GetChar(ExprPtr& expr);
    line 461/1:    bool GetStr(ExprPtr& expr);
    line 471/1:    bool GetCast(ExprPtr& expr);
    line 472/1:    bool GetPrecedence(ExprPtr& expr);
    line 479/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    line 483/1:    bool GetSubscript(ExprPtr& expr);
    line 492/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    line 493/1:    bool GetConditional(ExprPtr& expr);
    line 494/1:    bool GetDefined(ExprPtr& expr);
    line 495/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    line 496/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    line 497/1:    bool GetSizeOf(ExprPtr& expr);
    line 498/1:    bool GetThrow(ExprPtr& expr);
    line 499/1:    bool GetTypeId(ExprPtr& expr);
    line 567/1:    bool Punt(ExprPtr& expr, size_t end);
  W084 Function could be free
    line 400:    static bool SetCompoundType
    line 587:    static std::string Indent();
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h:
  W076 Adjacent arguments have the same type
    line 33:    void SetDifference
    line 42:    void SetIntersection
    line 51:    void SetUnion
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp:
  W008 reinterpret_cast
    line 64:    auto fake = reinterpret_cast< const Circuit* >(&local);
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
    line 33: using namespace SessionBase;
  W047 Data could be const
    line 90:    RegCell port_;
  W069 Virtual function is public
    line 64:    virtual std::string Name() const = 0;
    line 68:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
    line 35: using namespace SessionBase;
  W019 Unused argument
    line 109/1:    virtual void ProcessIcMsg(Message& msg);
  W026 Unused function
    line 58:    StateId GetState() const { return state_; }
    line 62:    virtual void SetState(StateId stid);
    line 72:    ProtocolSM* MgwPsm() const;
    line 78:    virtual void Deallocate();
    line 87:    static void* operator new(size_t size);
    line 92:    explicit MediaEndpt(MediaPsm& psm);
  W036 Member could be private
    line 104:    virtual void EndOfTransaction();
  W069 Virtual function is public
    line 62:    virtual void SetState(StateId stid);
    line 78:    virtual void Deallocate();
  W071 Virtual function has no overrides
    line 62:    virtual void SetState(StateId stid);
    line 78:    virtual void Deallocate();
    line 104:    virtual void EndOfTransaction();
    line 109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h:
  W017 Using statement in header
    line 33: using namespace NodeBase;
    line 34: using namespace SessionBase;
  W020 Unused class
    line 42: class MediaFailureEvent : public Event
  W026 Unused function
    line 48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    line 56:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp:
  W008 reinterpret_cast
    line 118:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W098 Function does not invoke Debug::ft
    line 107: CliParm* MediaParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
    line 32: using namespace SessionBase;
  W036 Member could be private
    line 53:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp:
  W008 reinterpret_cast
    line 575:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W009 Cast down the inheritance hierarchy
    line 253:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W098 Function does not invoke Debug::ft
    line 259: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h:
  W017 Using statement in header
    line 37: using namespace NodeBase;
    line 38: using namespace SessionBase;
  W026 Unused function
    line 120:    MediaEndpt* Mep() const { return mep_; }
  W036 Member could be private
    line 132:    Tone::Id GetOgTone() const { return ogTone_; }
    line 170:    void SetOgPort(Switch::PortId ogport);
    line 189:    virtual Event* ReceiveMsg(Message& msg) override;
    line 193:    virtual void PrepareOgMsgq() override;
  W069 Virtual function is public
    line 68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    line 73:    virtual void SetOgTone(Tone::Id ogTone);
    line 78:    virtual void SetIcTone(Tone::Id icTone);
  W071 Virtual function has no overrides
    line 68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    line 73:    virtual void SetOgTone(Tone::Id ogTone);
    line 78:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp:
  W009 Cast down the inheritance hierarchy
    line 94:       auto mpsm = static_cast< MediaPsm* >(psm);
    line 118:       auto mpsm = static_cast< MediaPsm* >(psm);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
  W026 Unused function
    line 48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W069 Virtual function is public
    line 48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W071 Virtual function has no overrides
    line 48:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp:
  W098 Function does not invoke Debug::ft
    line 97: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h:
  W017 Using statement in header
    line 37: using namespace NodeBase;
  W084 Function could be free
    line 65:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 79: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp:
  W008 reinterpret_cast
    line 66:    auto fake = reinterpret_cast< const Tone* >(&local);
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h:
  W007 Functional cast
    line 65:    Id Tid() const { return Id(tid_.GetId()); }
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W026 Unused function
    line 65:    Id Tid() const { return Id(tid_.GetId()); }
  W032 Member hides inherited name
    line 69:    static ptrdiff_t CellDiff();
  W059 Base class virtual destructor is not public
    line 82:    virtual ~Tone();
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp:
  W006 C-style cast
    line 33:    return (void*) ((const_ptr_t) ptr2 - diff);
    line 40:    return (void*) ((const_ptr_t) ptr1 + diff);
    line 77:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W010 Cast removes const qualification
    line 33:    return (void*) ((const_ptr_t) ptr2 - diff);
    line 40:    return (void*) ((const_ptr_t) ptr1 + diff);
  W011 Pointer arithmetic
    line 33:    return (void*) ((const_ptr_t) ptr2 - diff);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h:
  W076 Adjacent arguments have the same type
    line 50:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    line 54:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h:
  W091 Line contains adjacent spaces
    line 253:    inline static fn_name Array_ctor()     { return "Array.ctor"; }
    line 254:    inline static fn_name Array_dtor()     { return "Array.dtor"; }
    line 255:    inline static fn_name Array_Init()     { return "Array.Init"; }
    line 256:    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
    line 258:    inline static fn_name Array_Erase()    { return "Array.Erase"; }
    line 259:    inline static fn_name Array_Replace()  { return "Array.Replace"; }
    line 260:    inline static fn_name Array_Extend()   { return "Array.Extend"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp:
  W008 reinterpret_cast
    line 133:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    line 161:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W010 Cast removes const qualification
    line 98:       objects[count++] = const_cast< Base* >(this);
  W098 Function does not invoke Debug::ft
    line 128: void Base::Nullify(size_t n)
    line 157: Base::vptr_t Base::Vptr() const
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h:
  W036 Member could be private
    line 109:    virtual void Claim() { }
    line 152:    virtual MemoryType MemType() const { return MemPerm; }
  W037 Member could be protected
    line 78:    virtual void Display(std::ostream& stream,
    line 102:    void LogSubtended(std::ostream& stream,
  W069 Virtual function is public
    line 78:    virtual void Display(std::ostream& stream,
    line 97:    virtual void GetSubtended(Base* objects[], size_t& count) const;
    line 109:    virtual void Claim() { }
    line 114:    virtual void ClaimBlocks();
    line 132:    virtual void Cleanup() { }
    line 140:    virtual void Startup(RestartLevel level) { }
    line 148:    virtual void Shutdown(RestartLevel level) { }
    line 152:    virtual MemoryType MemType() const { return MemPerm; }
    line 156:    virtual const char* ClassName() const;
  W071 Virtual function has no overrides
    line 156:    virtual const char* ClassName() const;
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp:
  W098 Function does not invoke Debug::ft
    line 52: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h:
  W036 Member could be private
    line 66:    virtual bool SetNext(const std::string& input) override;
  W076 Adjacent arguments have the same type
    line 48:    CfgBitParm(const char* key, const char* def, const char* expl);
  W084 Function could be free
    line 76:    static fixed_string ValidTrueChars();
    line 81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h:
  W036 Member could be private
    line 67:    virtual bool SetNextValue(bool value) override;
  W054 Base class constructor is public
    line 38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  W076 Adjacent arguments have the same type
    line 38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp:
  W098 Function does not invoke Debug::ft
    line 70: bool CfgFlagParm::GetCurrValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h:
  W036 Member could be private
    line 65:    virtual bool SetNextValue(bool value) override;
  W047 Data could be const
    line 77:    FlagId fid_;
  W076 Adjacent arguments have the same type
    line 39:    CfgFlagParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp:
  W098 Function does not invoke Debug::ft
    line 72: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h:
  W026 Unused function
    line 57:    word GetCurrValue() const { return *curr_; }
  W036 Member could be private
    line 81:    virtual bool SetNext(const std::string& input) override;
  W047 Data could be const
    line 93:    word min_;
    line 97:    word max_;
  W054 Base class constructor is public
    line 39:    CfgIntParm(const char* key, const char* def, word* field,
  W076 Adjacent arguments have the same type
    line 39:    CfgIntParm(const char* key, const char* def, word* field,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp:
  W008 reinterpret_cast
    line 137:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h:
  W036 Member could be private
    line 60:    const char* Key() const;
    line 75:    static ptrdiff_t LinkDiff();
  W047 Data could be const
    line 155:    Q1Link link_;
  W048 Data could be const pointer
    line 143:    const char* default_;
    line 147:    const char* expl_;
  W069 Virtual function is public
    line 64:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W076 Adjacent arguments have the same type
    line 90:    CfgParm(const char* key, const char* def, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 274: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h:
  W026 Unused function
    line 90:    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  W082 Function could be const
    line 94:    void AddMainArg(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp:
  W098 Function does not invoke Debug::ft
    line 68: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h:
  W036 Member could be private
    line 101:    virtual bool SetNext(const std::string& input) override;
  W054 Base class constructor is public
    line 39:    CfgStrParm(const char* key, const char* def,
  W076 Adjacent arguments have the same type
    line 39:    CfgStrParm(const char* key, const char* def,
    line 92:    CfgFileTimeParm(const char* key, const char* def,
  W101 Override of Base.Display not found
    line 87: class CfgFileTimeParm : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp:
  W008 reinterpret_cast
    line 90:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h:
  W047 Data could be const
    line 117:    Q1Link link_;
  W084 Function could be free
    line 77:    static const std::string& ValidNameChars();
    line 82:    static const std::string& ValidValueChars();
    line 87:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp:
  W041 Data is init-only
    line 149:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  W099 Function does not invoke Debug::ft as first statement
    line 106:       Debug::ft(CinThread_Enter);
    line 151:    Debug::ft(CinThread_GetLine);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp:
  W006 C-style cast
    line 220:    if(addr != nullptr) return (Object*) addr;
  W008 reinterpret_cast
    line 75:    auto fake = reinterpret_cast< const Class* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h:
  W026 Unused function
    line 57:    virtual void Initialize();
    line 62:    virtual Object* Create();
    line 70:    virtual void FreeQuasiSingleton(Object* obj);
    line 119:    bool SetVptr(Object& obj);
    line 126:    bool SetTemplate(Object& obj);
    line 133:    bool SetQuasiSingleton(Object& obj);
  W036 Member could be private
    line 66:    virtual Object* GetQuasiSingleton();
    line 113:    virtual Object* New(size_t size);
  W059 Base class virtual destructor is not public
    line 107:    virtual ~Class();
  W069 Virtual function is public
    line 57:    virtual void Initialize();
    line 62:    virtual Object* Create();
    line 66:    virtual Object* GetQuasiSingleton();
    line 70:    virtual void FreeQuasiSingleton(Object* obj);
  W071 Virtual function has no overrides
    line 57:    virtual void Initialize();
    line 62:    virtual Object* Create();
    line 66:    virtual Object* GetQuasiSingleton();
    line 70:    virtual void FreeQuasiSingleton(Object* obj);
  W082 Function could be const
    line 113:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 79: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h:
  W047 Data could be const
    line 93:    Id id_;
  W059 Base class virtual destructor is not public
    line 85:    virtual ~CliAppData();
  W069 Virtual function is public
    line 66:    virtual void EventOccurred(Event evt);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h:
  W054 Base class constructor is public
    line 39:    explicit CliBoolParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h:
  W080 Argument could be const
    line 102/1:       (CliThread& cli, const std::string& expl, std::streamsize p = -1) const;
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h:
  W037 Member could be protected
    line 39:    CliCharParm(const char* help, const char* chars,
  W048 Data could be const pointer
    line 69:    const char* chars_;
  W054 Base class constructor is public
    line 39:    CliCharParm(const char* help, const char* chars,
  W076 Adjacent arguments have the same type
    line 39:    CliCharParm(const char* help, const char* chars,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h:
  W069 Virtual function is public
    line 71:    virtual Rc GetTextParmRc
  W076 Adjacent arguments have the same type
    line 100:    CliCommand(const char* comm, const char* help, size_t size = 32);
  W084 Function could be free
    line 132:    static Rc Exhausted(CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp:
  W008 reinterpret_cast
    line 79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    line 159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W009 Cast down the inheritance hierarchy
    line 79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    line 159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h:
  W076 Adjacent arguments have the same type
    line 58:    CliCommandSet(const char* comm, const char* help, size_t size = 32);
  W084 Function could be free
    line 63:    static void DescendTo(CliCookie& cookie, size_t index);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp:
  W007 Functional cast
    line 125:       stream << int(index_[i]) << SPACE;
  W098 Function does not invoke Debug::ft
    line 136: size_t CliCookie::Index(size_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp:
  W008 reinterpret_cast
    line 103:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h:
  W047 Data could be const
    line 105:    RegCell iid_;
  W048 Data could be const pointer
    line 109:    const char* name_;
    line 113:    const char* help_;
  W069 Virtual function is public
    line 65:    virtual void Enter();
    line 70:    virtual void Exit();
  W071 Virtual function has no overrides
    line 70:    virtual void Exit();
  W076 Adjacent arguments have the same type
    line 92:    CliIncrement(const char* name, const char* help, size_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h:
  W047 Data could be const
    line 79:    word min_;
    line 83:    word max_;
    line 87:    bool hex_;
  W054 Base class constructor is public
    line 49:    CliIntParm(const char* help, word min, word max,
  W076 Adjacent arguments have the same type
    line 49:    CliIntParm(const char* help, word min, word max,
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp:
  W008 reinterpret_cast
    line 96:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h:
  W026 Unused function
    line 167:    bool GetCharParm(char& c, CliThread& cli) const;
  W037 Member could be protected
    line 157:    bool GetBoolParm(bool& b, CliThread& cli) const;
    line 177:    bool GetPtrParm(void*& p, CliThread& cli) const;
    line 203:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    line 225:    bool GetFileName(std::string& s, CliThread& cli) const;
    line 237:    bool GetIdentifier(std::string& s, CliThread& cli,
    line 248:    const char* Help() const { return help_; }
    line 252:    bool IsOptional() const { return opt_; }
  W048 Data could be const pointer
    line 331:    const char* help_;
    line 339:    const char* tag_;
  W069 Virtual function is public
    line 134:    virtual CliParm* AccessParm(CliCookie& cookie, size_t depth) const;
    line 142:    virtual void Explain(std::ostream& stream, col_t indent) const;
    line 152:    virtual Rc GetIntParmRc(word& i, CliThread& cli) const;
    line 162:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    line 172:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    line 182:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    line 210:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    line 220:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    line 230:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    line 243:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W076 Adjacent arguments have the same type
    line 237:    bool GetIdentifier(std::string& s, CliThread& cli,
    line 243:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W084 Function could be free
    line 322:    static Rc Mismatch(CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp:
  W006 C-style cast
    line 98:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h:
  W037 Member could be protected
    line 38:    explicit CliPtrParm(const char* help,
  W054 Base class constructor is public
    line 38:    explicit CliPtrParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h:
  W036 Member could be private
    line 61:    const char* HelpText() const;
  W037 Member could be protected
    line 65:    const Registry< CliParm >& Parms() const { return parms_; }
  W048 Data could be const pointer
    line 110:    const char* text_;
  W054 Base class constructor is public
    line 48:    CliText(const char* help, const char* text,
  W069 Virtual function is public
    line 69:    virtual bool BindParm(CliParm& parm);
  W076 Adjacent arguments have the same type
    line 48:    CliText(const char* help, const char* text,
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h:
  W054 Base class constructor is public
    line 49:    explicit CliTextParm(const char* help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp:
  W098 Function does not invoke Debug::ft
    line 368: CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h:
  W026 Unused function
    line 113:    word Result() const { return result_; }
  W044 Data is not private
    line 179:    std::unique_ptr< CliBuffer > ibuf;
    line 183:    ostringstreamPtr obuf;
  W076 Adjacent arguments have the same type
    line 91:    char CharPrompt(const std::string& prompt,
  W082 Function could be const
    line 72:    word Report(word rc, const std::string& expl, col_t indent = 2);
    line 196:    const CliCommand* ParseCommand();
C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h:
  W026 Unused function
    line 72:    ticks_t TicksPerSec();
    line 121:    ticks_t UsecsToTicks(usecs_t usecs);
    line 125:    const SysTime& TimeZero();
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp:
  W009 Cast down the inheritance hierarchy
    line 84:       auto req = static_cast< StreamRequest* >(msg);
  W041 Data is init-only
    line 133:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h:
  W084 Function could be free
    line 47:    static void Spool(const char* s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp:
  W098 Function does not invoke Debug::ft
    line 135: void Debug::Reset()
  W099 Function does not invoke Debug::ft as first statement
    line 64:    Debug::ft(Debug_GenerateSwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h:
  W026 Unused function
    line 96:    static void noop();
  W076 Adjacent arguments have the same type
    line 72:    static void SwErr
    line 92:    static void Progress(const std::string& s, bool eol, bool force = false);
  W084 Function could be free
    line 81:    static void Assert(bool condition, debug32_t errval = 0)
    line 92:    static void Progress(const std::string& s, bool eol, bool force = false);
    line 96:    static void noop();
    line 140:    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h:
  W026 Unused function
    line 56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h:
  W084 Function could be free
    line 46:    static std::string strTimePlace();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp:
  W099 Function does not invoke Debug::ft as first statement
    line 45:    Debug::ft(Exception_ctor1);
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h:
  W026 Unused function
    line 60:    Exception(const Exception& that);
    line 61:    Exception(Exception&& that);
  W059 Base class virtual destructor is not public
    line 65:    virtual ~Exception() noexcept;
  W069 Virtual function is public
    line 45:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp:
  W009 Cast down the inheritance hierarchy
    line 217:       auto req = static_cast< FileRequest* >(msg);
  W026 Unused function
    line 54:    FileRequest(const FileRequest& that);
  W041 Data is init-only
    line 287:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h:
  W076 Adjacent arguments have the same type
    line 57:    static void Spool(const std::string& name,
  W084 Function could be free
    line 44:    static ostringstreamPtr CreateStream();
    line 57:    static void Spool(const std::string& name,
    line 62:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h:
  W026 Unused function
    line 66:    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  W076 Adjacent arguments have the same type
    line 76:    std::string strIndex(int n, int width = 0, bool colon = true);
    line 96:    std::string strCenter(const std::string& s, int breadth, int blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp:
  W098 Function does not invoke Debug::ft
    line 40: int FunctionName::compare(fn_name_arg func, const char* str)
    line 47: size_t FunctionName::find(fn_name_arg func, const char* str)
    line 56: size_t FunctionName::rfind(fn_name_arg func, const char* str)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h:
  W026 Unused function
    line 39:    size_t find(fn_name_arg func, const char* str);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp:
  W006 C-style cast
    line 386:          auto src = (ptr_t) this;
  W009 Cast down the inheritance hierarchy
    line 91:       auto curr = static_cast< FunctionTrace* >(rec);
    line 125:       auto curr = static_cast< FunctionTrace* >(rec);
    line 189:                   auto last = static_cast< const FunctionTrace* >(rec);
    line 261:       auto curr = static_cast< FunctionTrace* >(rec);
    line 300:          curr = static_cast< FunctionTrace* >(rec);
    line 368:       curr = static_cast< FunctionTrace* >(rec);
    line 421:          auto curr = static_cast< FunctionTrace* >(rec);
    line 486:          auto curr = static_cast< FunctionTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h:
  W026 Unused function
    line 55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp:
  W098 Function does not invoke Debug::ft
    line 28: bool InitFlags::AllowBreak()
    line 39: bool InitFlags::CauseTimeout()
    line 48: bool InitFlags::ImmediateTrace()
    line 57: bool InitFlags::TraceInit()
    line 68: bool InitFlags::TraceWork()
C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp:
  W041 Data is init-only
    line 307:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h:
  W033 Class could be namespace
    line 34: class Log
  W084 Function could be free
    line 40:    static ostringstreamPtr Create(fixed_string title);
    line 45:    static void Spool(ostringstreamPtr& log);
    line 49:    static std::string FileName();
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp:
  W009 Cast down the inheritance hierarchy
    line 89:       auto req = static_cast< StreamRequest* >(msg);
  W041 Data is init-only
    line 156:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp:
  W006 C-style cast
    line 225:    auto seg = (Segment*) addr;
    line 282:    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
    line 333:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
    line 384:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  W084 Function could be free
    line 151:    static size_t Size();
  W098 Function does not invoke Debug::ft
    line 154: size_t SegmentHeader::Size()
    line 171: SysHeap* Memory::AccessHeap(MemoryType type)
    line 189: size_t Memory::Align(size_t size, size_t log2align)
    line 255: SysHeap* Memory::EnsureHeap(MemoryType type)
    line 309: const SysHeap* Memory::Heap(MemoryType type)
    line 403: size_t Memory::Words(size_t nBytes)
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h:
  W026 Unused function
    line 56:    static void Set(void* dest, byte_t value, size_t nBytes);
    line 79:    static bool Verify(MemoryType type, void* addr);
  W084 Function could be free
    line 44:    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
    line 48:    static size_t Words(size_t nBytes);
    line 52:    static void Copy(void* dest, const void* source, size_t nBytes);
    line 56:    static void Set(void* dest, byte_t value, size_t nBytes);
    line 74:    static void* Realloc(void* addr, size_t nBytes);
    line 83:    static MemoryType Type(const void* addr);
    line 91:    static void Shutdown(RestartLevel level);
    line 99:    static SysHeap* EnsureHeap(MemoryType type);
    line 103:    static SysHeap* AccessHeap(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp:
  W009 Cast down the inheritance hierarchy
    line 66:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h:
  W084 Function could be free
    line 57:    static const char* TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp:
  W008 reinterpret_cast
    line 64:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h:
  W026 Unused function
    line 103:    ModuleId Mid() const { return mid_.GetId(); }
    line 111:    virtual ModuleId* Dependencies(size_t& count) const;
  W059 Base class virtual destructor is not public
    line 146:    virtual ~Module();
  W069 Virtual function is public
    line 111:    virtual ModuleId* Dependencies(size_t& count) const;
  W071 Virtual function has no overrides
    line 111:    virtual ModuleId* Dependencies(size_t& count) const;
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp:
  W007 Functional cast
    line 106:          return RestartLevel(errval_);
  W098 Function does not invoke Debug::ft
    line 152: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h:
  W084 Function could be free
    line 87:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp:
  W098 Function does not invoke Debug::ft
    line 74: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h:
  W054 Base class constructor is public
    line 43:    MsgBuffer();
    line 47:    MsgBuffer(const MsgBuffer& that);
  W069 Virtual function is public
    line 64:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp:
  W099 Function does not invoke Debug::ft as first statement
    line 38:    Debug::ft(MutexGuard_ctor);
    line 51:       Debug::ft(MutexGuard_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp:
  W098 Function does not invoke Debug::ft
    line 114: word ExplainTraceRc(CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h:
  W076 Adjacent arguments have the same type
    line 120: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp:
  W007 Functional cast
    line 484:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    line 692:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    line 1090:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    line 2441:       auto heap = Memory::Heap(MemoryType(m));
  W036 Member could be private
    line 1893:    static void SendAckToOutputFile(const CliThread& cli);
  W041 Data is init-only
    line 1697:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W084 Function could be free
    line 757:    static word DisplayHelpFile(CliThread& cli, const string& name);
    line 1893:    static void SendAckToOutputFile(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h:
  W021 Unused data
    line 153:    static const id_t LastNbIndex     = 3;
  W054 Base class constructor is public
    line 41:    StatusCommand();
    line 55:    SetWhatParm();
    line 68:    explicit SetCommand(bool bind = true);
    line 84:    IncludeWhatParm();
    line 98:    explicit IncludeCommand(bool bind = true);
    line 114:    ExcludeWhatParm();
    line 127:    explicit ExcludeCommand(bool bind = true);
    line 157:    explicit QueryCommand(bool bind = true);
    line 173:    SaveWhatParm();
    line 185:    explicit SaveCommand(bool bind = true);
    line 201:    ClearWhatParm();
    line 219:    explicit ClearCommand(bool bind = true);
  W102 Override of Object.Patch not found
    line 38: class StatusCommand : public CliCommand
    line 59: class SetCommand : public CliCommand
    line 88: class IncludeCommand : public CliCommand
    line 118: class ExcludeCommand : public CliCommand
    line 147: class QueryCommand : public CliCommand
    line 177: class SaveCommand : public CliCommand
    line 205: class ClearCommand : public CliCommand
C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h:
  W041 Data is init-only
    line 64:    static bool Registered;
  W084 Function could be free
    line 60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp:
  W007 Functional cast
    line 207:             stream << Faction(f) << CRLF;
  W098 Function does not invoke Debug::ft
    line 172: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h:
  W036 Member could be private
    line 77:    static bool ThreadsEmpty();
  W084 Function could be free
    line 73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    line 77:    static bool ThreadsEmpty();
  W101 Override of Base.Display not found
    line 63: class NbTracer : public Permanent
  W102 Override of Object.Patch not found
    line 63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp:
  W095 Function not sorted in standard order
    line 76: char NodeBase::FactionChar(Faction faction)
  W098 Function does not invoke Debug::ft
    line 45: char NodeBase::BlockingReasonChar(BlockingReason reason)
    line 76: char NodeBase::FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h:
  W023 Unused enumerator
    line 44:    DispOption_N  // number of reasons; can be used to extend this enum
    line 74:    IdleFaction,         // idle thread (not used)
  W027 Unused typedef
    line 175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
    line 176: typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
    line 177: typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
  W091 Line contains adjacent spaces
    line 174: typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
    line 175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp:
  W008 reinterpret_cast
    line 141:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W098 Function does not invoke Debug::ft
    line 71: Object::ClassId Object::GetClassId() const
    line 82: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    line 109: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h:
  W026 Unused function
    line 95:    ClassId GetClassId() const;
    line 107:    ObjectId GetObjectId() const;
    line 113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    line 121:    static void* operator new(size_t size, MemoryType type);
    line 122:    static void* operator new[](size_t size, MemoryType type);
    line 124:    static void operator delete[](void* addr);
    line 125:    static void operator delete(void* addr, MemoryType type);
    line 126:    static void operator delete[](void* addr, MemoryType type);
    line 135:    void MorphTo(Class& target);
  W036 Member could be private
    line 70:    typedef uint32_t InstanceId;  // identifies an object within a Class
    line 71:    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
    line 101:    virtual InstanceId GetInstanceId() const;
  W037 Member could be protected
    line 48:    typedef uint8_t sel_t;
    line 57:    virtual void Patch(sel_t selector, void* arguments) { }
    line 69:    typedef id_t ClassId;         // identifies a Class
  W047 Data could be const
    line 140:    uintptr_t patchArea_;
  W069 Virtual function is public
    line 57:    virtual void Patch(sel_t selector, void* arguments) { }
    line 82:    virtual Class* GetClass() const;
    line 90:    virtual void PostInitialize() { }
    line 101:    virtual InstanceId GetInstanceId() const;
  W071 Virtual function has no overrides
    line 82:    virtual Class* GetClass() const;
    line 90:    virtual void PostInitialize() { }
    line 101:    virtual InstanceId GetInstanceId() const;
  W084 Function could be free
    line 113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp:
  W006 C-style cast
    line 238:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
    line 261:          auto b = (ObjectBlock*) &seg[j];
    line 313:             auto b = (ObjectBlock*) &seg[j];
    line 350:             auto curr = (Pooled*) getptr1(item, diff);
    line 714:       return (ObjectBlock*) &blocks_[0][0];
    line 784:       return (ObjectBlock*) &blocks_[i][j];
    line 809:             auto b = (ObjectBlock*) &seg[j];
    line 841:    auto block = (const_ptr_t) ObjToBlock(obj);
    line 842:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    line 846:       auto b0 = (const_ptr_t) &blocks_[i][0];
    line 889:    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
    line 919:          auto b = (ObjectBlock*) &seg[j];
  W008 reinterpret_cast
    line 477:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W010 Cast removes const qualification
    line 842:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  W091 Line contains adjacent spaces
    line 95:    CounterPtr      allocCount_;
    line 96:    CounterPtr      freeCount_;
    line 97:    CounterPtr      failCount_;
    line 98:    CounterPtr      auditCount_;
  W098 Function does not invoke Debug::ft
    line 277: size_t ObjectPool::AllocCount() const
    line 443: bool ObjectPool::BidToIndices(Bid bid, size_t& i, size_t& j) const
    line 698: size_t ObjectPool::FailCount() const
    line 743: size_t ObjectPool::FreeCount() const
    line 750: bool ObjectPool::IndicesToBid(size_t i, size_t j, Bid& bid) const
    line 762: size_t ObjectPool::InUseCount() const
    line 769: size_t ObjectPool::LowAvailCount() const
    line 776: ObjectBlock* ObjectPool::Next(Bid& bid) const
    line 795: Pooled* ObjectPool::NextUsed(Bid& bid) const
    line 868: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    line 877: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    line 886: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W101 Override of Base.Display not found
    line 75: class ObjectPoolSizeCfg : public CfgIntParm
    line 88: class ObjectPoolStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h:
  W007 Functional cast
    line 97:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W021 Unused data
    line 82:    static const Bid MaxBid = MaxSegments << ObjectsPerSegmentLog2;
  W036 Member could be private
    line 191:    static ptrdiff_t CellDiff();
  W059 Base class virtual destructor is not public
    line 218:    virtual ~ObjectPool();
  W069 Virtual function is public
    line 108:    virtual Pooled* DeqBlock(size_t size);
    line 113:    virtual void EnqBlock(Pooled* obj, bool deleted);
    line 177:    virtual void DisplayStats(std::ostream& stream) const;
  W071 Virtual function has no overrides
    line 108:    virtual Pooled* DeqBlock(size_t size);
    line 113:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W076 Adjacent arguments have the same type
    line 238:    bool BidToIndices(Bid bid, size_t& i, size_t& j) const;
    line 243:    bool IndicesToBid(size_t i, size_t j, Bid& bid) const;
  W084 Function could be free
    line 257:    static ObjectBlock* ObjToBlock(const Pooled* obj);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 289: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h:
  W036 Member could be private
    line 56:    static bool NullifyObjectData() { return NullifyObjectData_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h:
  W026 Unused function
    line 57:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp:
  W098 Function does not invoke Debug::ft
    line 48: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h:
  W084 Function could be free
    line 41:    static PermanentHeap* Instance();
  W102 Override of Object.Patch not found
    line 36: class PermanentHeap : public SysHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp:
  W006 C-style cast
    line 142:    auto obj = (Pooled*) addr;
  W008 reinterpret_cast
    line 116:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h:
  W020 Unused class
    line 39: class PooledClass : public Class
  W026 Unused function
    line 53:    PooledClass(ClassId cid, size_t size);
    line 69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp:
  W008 reinterpret_cast
    line 69:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W098 Function does not invoke Debug::ft
    line 124: Flags PS_Break()
    line 129: Flags PS_Delayed()
    line 134: Flags PS_Exit()
    line 139: Flags PS_Final()
    line 144: Flags PS_Interrupt()
    line 149: Flags PS_Native()
    line 154: Flags PS_NoError()
    line 159: Flags PS_NoLog()
    line 164: Flags PS_NoRecover()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h:
  W047 Data could be const
    line 114:    signal_t value_;
    line 126:    uint8_t severity_;
    line 130:    Flags attrs_;
    line 134:    RegCell sid_;
  W048 Data could be const pointer
    line 118:    const char* name_;
    line 122:    const char* expl_;
  W059 Base class virtual destructor is not public
    line 105:    virtual ~PosixSignal();
  W076 Adjacent arguments have the same type
    line 99:    PosixSignal(signal_t value, const char* name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 57: Flags PosixSignalRegistry::Attrs(signal_t value) const
    line 90: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    line 102: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    line 153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h:
  W026 Unused function
    line 56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp:
  W099 Function does not invoke Debug::ft as first statement
    line 49:    Debug::ft(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h:
  W026 Unused function
    line 57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h:
  W080 Argument could be const
    line 79/1:    bool Enq(T& elem)
    line 100/1:    bool Henq(T& elem)
    line 122/1:    bool Insert(T* prev, T& elem)
    line 157/1:    bool Exq(T& elem)
    line 321/1:    void Corrupt(T* elem)
  W091 Line contains adjacent spaces
    line 387:    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
    line 388:    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
    line 389:    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
    line 390:    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
    line 391:    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
    line 393:    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
    line 394:    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
    line 395:    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
    line 396:    inline static fn_name Q1Way_Count()  { return "Q1Way.Count"; }
    line 397:    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
    line 398:    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp:
  W098 Function does not invoke Debug::ft
    line 39: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h:
  W026 Unused function
    line 57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h:
  W080 Argument could be const
    line 135/1:    bool Exq(T& elem)
  W082 Function could be const
    line 135:    bool Exq(T& elem)
  W091 Line contains adjacent spaces
    line 360:    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
    line 361:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    line 362:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    line 363:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    line 364:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    line 365:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    line 366:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    line 367:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    line 368:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    line 371:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp:
  W098 Function does not invoke Debug::ft
    line 39: RegCell::~RegCell()
    line 51: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h:
  W080 Argument could be const
    line 266/1:    bool Erase(T& item)
  W091 Line contains adjacent spaces
    line 625:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    line 626:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    line 627:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    line 629:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    line 630:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    line 631:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    line 632:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    line 633:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    line 634:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    line 635:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h:
  W084 Function could be free
    line 80:    static void Initiate(reinit_t reason, debug32_t errval);
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h:
  W041 Data is init-only
    line 130:    static T* Instance_;
  W091 Line contains adjacent spaces
    line 126:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp:
  W050 Default constructor invoked: POD members not initialized
    line 92:    SingletonTuple entry;
  W098 Function does not invoke Debug::ft
    line 125: Singletons* Singletons::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h:
  W054 Base class constructor is public
    line 41:    SoftwareException
    line 43:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp:
  W008 reinterpret_cast
    line 89:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W098 Function does not invoke Debug::ft
    line 117: uint64_t Statistic::Overall() const
    line 258: uint64_t HighWatermark::Overall() const
    line 334: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h:
  W036 Member could be private
    line 66:    static ptrdiff_t CellDiff();
  W037 Member could be protected
    line 62:    virtual void DisplayStat(std::ostream& stream) const;
  W044 Data is not private
    line 89:    std::atomic_uint32_t curr_;
    line 93:    std::atomic_uint32_t prev_;
    line 97:    std::atomic_uint64_t total_;
    line 101:    uint32_t divisor_;
  W047 Data could be const
    line 118:    RegCell sid_;
    line 122:    DynString expl_;
  W054 Base class constructor is public
    line 134:    explicit Counter(const std::string& expl, uint32_t divisor = 1);
  W069 Virtual function is public
    line 58:    virtual uint64_t Overall() const;
    line 62:    virtual void DisplayStat(std::ostream& stream) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp:
  W008 reinterpret_cast
    line 81:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  W091 Line contains adjacent spaces
    line 39: fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h:
  W036 Member could be private
    line 57:    id_t Gid() const { return gid_.GetId(); }
    line 61:    static ptrdiff_t CellDiff();
  W047 Data could be const
    line 100:    RegCell gid_;
    line 104:    DynString expl_;
  W069 Virtual function is public
    line 69:    virtual void DisplayStats(std::ostream& stream, id_t id) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp:
  W009 Cast down the inheritance hierarchy
    line 61:    statsFileName_.reset
  W098 Function does not invoke Debug::ft
    line 147: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h:
  W036 Member could be private
    line 77:    StatisticsGroup* GetGroup(id_t gid) const;
    line 81:    void DisplayStats(std::ostream& stream) const;
    line 85:    static std::string StatsFileName() { return StatsFileName_; }
  W082 Function could be const
    line 115:    void StartInterval(bool first);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h:
  W047 Data could be const
    line 53:    static secs_t LongIntervalSecs;
    line 58:    static secs_t ShortIntervalSecs;
    line 65:    static size_t WakeupsBetweenReports;
    line 70:    static ticks_t PrevToCurrTicks;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h:
  W037 Member could be protected
    line 57:    StreamRequest(const StreamRequest& that);
  W054 Base class constructor is public
    line 52:    StreamRequest();
    line 57:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp:
  W008 reinterpret_cast
    line 100:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h:
  W047 Data could be const
    line 96:    DynString name_;
    line 108:    Q1Link link_;
  W084 Function could be free
    line 52:    static const std::string& ValidNameChars();
    line 57:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h:
  W076 Adjacent arguments have the same type
    line 53:    bool BindSymbol
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp:
  W098 Function does not invoke Debug::ft
    line 32: std::istream& SysConsole::In()
    line 39: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h:
  W038 Typedef of pointer type
    line 46: typedef void* SysHeap_t;
    line 47: typedef void* SysThread_t;
    line 49: typedef void* SysMutex_t;
    line 50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h:
  W026 Unused function
    line 101:    static void* operator new[](size_t size);
    line 106:    static void operator delete[](void* addr);
  W082 Function could be const
    line 55:    bool Validate(const void* addr);
  W084 Function could be free
    line 87:    static void DisplayHeaps(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp:
  W006 C-style cast
    line 162:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp:
  W098 Function does not invoke Debug::ft
    line 48: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp:
  W099 Function does not invoke Debug::ft as first statement
    line 106:    Debug::ft(SysMutex_Acquire);
C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h:
  W020 Unused class
    line 54:    class SigAlrm : public PosixSignal
    line 68:    class SigBus : public PosixSignal
    line 96:    class SigQuit : public PosixSignal
    line 110:    class SigSys : public PosixSignal
    line 124:    class SigVtAlrm : public PosixSignal
  W030 No referent for friend declaration
    line 56:       friend class Singleton< SigAlrm >;
    line 70:       friend class Singleton< SigBus >;
    line 98:       friend class Singleton< SigQuit >;
    line 112:       friend class Singleton< SigSys >;
    line 126:       friend class Singleton< SigVtAlrm >;
  W084 Function could be free
    line 37:    static void CreateNativeSignals();
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h:
  W023 Unused enumerator
    line 58:       LowPriority,       // preemptable threads
  W080 Argument could be const
    line 106/4:       const Thread* client, size_t size, SysThreadId& nid);
  W082 Function could be const
    line 141:    DelayRc Delay(msecs_t msecs);
    line 147:    bool Interrupt();
  W084 Function could be free
    line 52:    static SysThreadId RunningThreadId();
    line 112:    static SysThread_t Wrap();
    line 116:    static void Delete(SysThread_t& thread);
    line 121:    static SysSentry_t CreateSentry();
    line 125:    static void DeleteSentry(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp:
  W006 C-style cast
    line 138:    return CreateThread(
    line 345:    _set_se_translator((_se_translator_function) SE_Handler);
  W010 Cast removes const qualification
    line 138:    return CreateThread(
  W019 Unused argument
    line 52/2: void SE_Handler(uint32_t errval, void* ex)
  W098 Function does not invoke Debug::ft
    line 269: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    line 296: SysThreadId SysThread::RunningThreadId()
  W099 Function does not invoke Debug::ft as first statement
    line 57:    Debug::ft(NodeBase_SE_Handler);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h:
  W019 Unused argument
    line 38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp:
  W006 C-style cast
    line 163:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  W015 #include not sorted in standard order
    line 29: #include <dbghelp.h>
  W076 Adjacent arguments have the same type
    line 72:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W098 Function does not invoke Debug::ft
    line 121: DWORD64 StackInfo::GetFrame(fn_depth depth)
    line 137: fn_depth StackInfo::GetFrames()
    line 145: void StackInfo::Shutdown()
    line 154: DWORD StackInfo::Startup()
    line 265: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h:
  W026 Unused function
    line 71:    bool TickTimingAvailable() const { return available_; }
  W101 Override of Base.Display not found
    line 41: class SysTickTimer : public Immutable
  W102 Override of Object.Patch not found
    line 41: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp:
  W050 Default constructor invoked: POD members not initialized
    line 44:    LARGE_INTEGER frequency;
    line 75:       LARGE_INTEGER now;
    line 81:       _timeb now;
  W098 Function does not invoke Debug::ft
    line 71: ticks_t SysTickTimer::TicksNow() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp:
  W007 Functional cast
    line 362:          Truncate(TimeField(int(field) + 1));
    line 543:          return OutOfRange(TimeField(f));
  W098 Function does not invoke Debug::ft
    line 181: int16_t SysTime::DayOfWeek() const
    line 191: int16_t SysTime::DayOfYear() const
    line 207: const int16_t* SysTime::DaysPerMonth(int16_t year)
    line 215: size_t SysTime::DaysSinceT0() const
    line 245: bool SysTime::IsLeapYear(int16_t year)
    line 265: int64_t SysTime::MsecsSinceT0() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h:
  W026 Unused function
    line 76:    int16_t Get(TimeField field) const { return time_[field]; }
  W036 Member could be private
    line 80:    int16_t DayOfWeek() const;
    line 131:    const char* strMonth() const;
  W076 Adjacent arguments have the same type
    line 71:    SysTime(int16_t year, int16_t month, int16_t day,
  W084 Function could be free
    line 88:    static bool IsLeapYear(int16_t year);
    line 153:    static const int16_t* DaysPerMonth(int16_t year);
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp:
  W050 Default constructor invoked: POD members not initialized
    line 42:    _timeb timebuff;
    line 43:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp:
  W008 reinterpret_cast
    line 33:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W098 Function does not invoke Debug::ft
    line 30: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h:
  W021 Unused data
    line 50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  W023 Unused enumerator
    line 148:    DebugLog,    // only useful to software designers
  W038 Typedef of pointer type
    line 86: typedef char* ptr_t;
    line 87: typedef const char* const_ptr_t;
    line 103: typedef const char* const fixed_string;
    line 108: typedef const char* const fn_name;      // for defining a function name
    line 109: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h:
  W026 Unused function
    line 55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp:
  W098 Function does not invoke Debug::ft
    line 29: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    line 36: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    line 43: void ThisThread::MakePreemptable()
    line 50: void ThisThread::MakeUnpreemptable()
    line 57: void ThisThread::MemProtect()
    line 64: void ThisThread::MemUnprotect()
    line 71: DelayRc ThisThread::Pause(msecs_t msecs)
    line 78: void ThisThread::PauseOver(word limit)
    line 85: word ThisThread::RtcPercentUsed()
    line 92: ThreadId ThisThread::RunningThreadId()
    line 99: TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
    line 106: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp:
  W008 reinterpret_cast
    line 1170:    auto fake = reinterpret_cast< const Thread* >(&local);
  W041 Data is init-only
    line 482:    MutexGuard guard(&lock_);
    line 676:    MutexGuard guard(&lock_);
    line 711:    MutexGuard guard(&lock_);
  W084 Function could be free
    line 88:    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  W091 Line contains adjacent spaces
    line 264:    CounterPtr       traps_;
    line 265:    CounterPtr       yields_;
    line 266:    CounterPtr       exceeds_;
    line 270:    AccumulatorPtr   totUsecs_;
  W098 Function does not invoke Debug::ft
    line 438: ContextSwitch* ContextSwitches::AddSwitch()
    line 1151: TraceStatus Thread::CalcStatus(bool dynamic) const
    line 1532: main_t Thread::EnterThread(void* arg)
    line 1736: void Thread::FunctionInvoked(fn_name_arg func)
    line 1833: bool Thread::HasExited() const
    line 1896: bool Thread::IsLocked() const
    line 1903: Thread* Thread::LockedThread()
    line 1970: TraceRc Thread::LogContextSwitches(bool on)
    line 2095: SysThreadId Thread::NativeThreadId() const
    line 2123: DelayRc Thread::Pause(msecs_t msecs)
    line 2163: double Thread::PercentIdle()
    line 2522: bool Thread::RunningLocked()
    line 2673: void Thread::StackCheck()
    line 2945: TraceRc Thread::StartTracing(bool immediate, bool autostop)
    line 2981: void Thread::StopTracing()
    line 3044: void Thread::Trace
    line 3061: bool Thread::TraceRunningThread(Thread*& thr)
    line 3096: void Thread::TrapCheck()
  W099 Function does not invoke Debug::ft as first statement
    line 1656:    Debug::ft(Thread_ExitIfSafe);
    line 2467:    Debug::ft(Thread_ResumeLocked);
    line 2645:    Debug::ft(Thread_SignalHandler);
    line 2717:          Debug::ft(Thread_Start);
    line 3230:       Debug::ft(Thread_Unlock);
  W101 Override of Base.Display not found
    line 258: class ThreadStats : public Dynamic
    line 351: class ContextSwitches : public Permanent
    line 606: class Orphans : public Permanent
  W102 Override of Object.Patch not found
    line 351: class ContextSwitches : public Permanent
    line 606: class Orphans : public Permanent
    line 740: class ThreadPriv : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h:
  W007 Functional cast
    line 158:    Id Tid() const { return Id(tid_.GetId()); }
  W019 Unused argument
    line 354/2:       (BlockingReason why, fn_name_arg func) { return true; }
    line 362/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W026 Unused function
    line 122:    static std::atomic_uint32_t* Vector();
    line 170:    bool ChangeFaction(Faction faction);
  W036 Member could be private
    line 126:    static bool TestFlag(FlagId fid);
    line 130:    static void ResetFlag(FlagId fid);
    line 162:    SysThreadId NativeThreadId() const;
    line 239:    static ptrdiff_t CellDiff();
  W059 Base class virtual destructor is not public
    line 281:    virtual ~Thread();
  W069 Virtual function is public
    line 187:    virtual TraceStatus CalcStatus(bool dynamic) const;
    line 211:    virtual void DisplayStats(std::ostream& stream) const;
  W071 Virtual function has no overrides
    line 211:    virtual void DisplayStats(std::ostream& stream) const;
    line 293:    virtual bool EnqMsg(MsgBuffer& msg);
    line 299:    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  W076 Adjacent arguments have the same type
    line 561:    void DisplaySummary
  W082 Function could be const
    line 118:    bool Interrupt(const Flags& mask = Flags());
    line 509:    void SetTrap(bool on);
    line 517:    void StackCheck();
    line 529:    void SetSignal(signal_t sig);
  W084 Function could be free
    line 106:    static void PauseOver(word limit);
    line 220:    static double PercentIdle();
    line 224:    static TraceRc LogContextSwitches(bool on);
    line 228:    static void DisplayContextSwitches(std::ostream& stream);
    line 439:    static SysThread::Priority FactionToPriority(Faction& faction);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp:
  W098 Function does not invoke Debug::ft
    line 287: bool ThreadAdmin::BreakEnabled()
    line 385: void ThreadAdmin::Incr(Register r)
    line 493: word ThreadAdmin::TrapCount()
  W101 Override of Base.Display not found
    line 51: class ThreadsStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h:
  W084 Function could be free
    line 90:    static int WarpFactor();
  W091 Line contains adjacent spaces
    line 176:    CfgIntParmPtr  initTimeoutMsecs_;
    line 177:    CfgIntParmPtr  schedTimeoutMsecs_;
    line 179:    CfgIntParmPtr  rtcTimeoutMsecs_;
    line 181:    CfgIntParmPtr  rtcLimit_;
    line 182:    CfgIntParmPtr  rtcInterval_;
    line 184:    CfgIntParmPtr  trapLimit_;
    line 185:    CfgIntParmPtr  trapInterval_;
    line 187:    CfgIntParmPtr  stackUsageLimit_;
    line 188:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 209: ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
    line 218: Thread* ThreadRegistry::GetThread(ThreadId tid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h:
  W082 Function could be const
    line 112:    void AssociateIds(const Thread& thread);
C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h:
  W037 Member could be protected
    line 48:    ticks_t GetTicks() const { return ticks_; }
    line 52:    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
    line 56:    SysThreadId Nid() const { return nid_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp:
  W008 reinterpret_cast
    line 67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h:
  W047 Data could be const
    line 105:    char abbr_;
    line 109:    bool safe_;
  W059 Base class virtual destructor is not public
    line 92:    virtual ~Tool();
  W069 Virtual function is public
    line 56:    virtual const char* Name() const = 0;
    line 60:    virtual const char* Expl() const = 0;
    line 66:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 117: Tool* ToolRegistry::GetTool(FlagId fid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp:
  W095 Function not sorted in standard order
    line 68: ostream& operator<<(std::ostream& stream, TraceStatus status)
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp:
  W006 C-style cast
    line 125:    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
    line 235:    auto addr = (TraceRecord*) &buff_[end_];
    line 428:       next = (uword*) record + incr;
    line 446:             record = (TraceRecord*) buff_;  // case (b)
    line 450:          record = (TraceRecord*) next;
    line 459:       next = (uword*) record + incr;
    line 485:       auto record = (TraceRecord*) &buff_[start_];
    line 592:    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  W098 Function does not invoke Debug::ft
    line 111: TraceBuffer::TraceBuffer() :
    line 139: TraceBuffer::~TraceBuffer()
    line 153: void* TraceBuffer::AddRecord(size_t nBytes)
    line 351: bool TraceBuffer::Empty() const
    line 382: bool TraceBuffer::IsLocked()
    line 391: void TraceBuffer::Lock()
    line 411: void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
    line 472: void TraceBuffer::PurgeRecords(size_t end)
    line 540: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    line 743: void TraceBuffer::Unlock()
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h:
  W026 Unused function
    line 169:    const SysTime& StartTimeFull() const { return startTime_; }
  W036 Member could be private
    line 178:    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  W101 Override of Base.Display not found
    line 63: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp:
  W007 Functional cast
    line 38:    size_(int16_t(size)),
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h:
  W026 Unused function
    line 96:    static void operator delete(void* addr, void* where) { }
  W036 Member could be private
    line 87:    static void operator delete(void* addr) { }
    line 91:    static void* operator new(size_t size, void* where);
  W037 Member could be protected
    line 70:    void Nullify() { owner_ = NIL_ID; }
  W044 Data is not private
    line 133:    Id rid_ : 8;
  W069 Virtual function is public
    line 77:    virtual bool Display(std::ostream& stream);
  W082 Function could be const
    line 113:    virtual void ClaimBlocks() { }
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp:
  W006 C-style cast
    line 58:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  W009 Cast down the inheritance hierarchy
    line 198:             auto ft = static_cast<FunctionTrace*>(rec);
  W098 Function does not invoke Debug::ft
    line 97: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h:
  W017 Using statement in header
    line 38: using namespace NodeBase;
  W047 Data could be const
    line 105:    size_t size_;
  W076 Adjacent arguments have the same type
    line 83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W082 Function could be const
    line 77:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W084 Function could be free
    line 83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W101 Override of Base.Display not found
    line 49: class FunctionProfiler : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp:
  W008 reinterpret_cast
    line 71:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W098 Function does not invoke Debug::ft
    line 60: void FunctionStats::IncrCalls(usecs_t net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W047 Data could be const
    line 78:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp:
  W007 Functional cast
    line 3033:    pool->time_[id1].Truncate(TimeField(field - 1));
    line 3064:    pool->time_[id1].Round(TimeField(field - 1), interval);
  W008 reinterpret_cast
    line 1179:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    line 1699:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    line 2260:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
    line 3494:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W036 Member could be private
    line 3278:    typedef id_t Test;
  W041 Data is init-only
    line 258:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W047 Data could be const
    line 1043:    Q1Link link_;
    line 1555:    Q2Link link_;
  W084 Function could be free
    line 3300:    static void UseBadPointer();
    line 3301:    static void LoopForever();
  W098 Function does not invoke Debug::ft
    line 1158: Q1WayItem::~Q1WayItem()
    line 1192: Q1WayPool::Q1WayPool()
    line 1221: void Q1WayPool::Reallocate()
    line 1678: Q2WayItem::~Q2WayItem()
    line 1712: Q2WayPool::Q2WayPool()
    line 1741: void Q2WayPool::Reallocate()
    line 2242: RegistryItem::~RegistryItem()
    line 2273: RegistryPool::RegistryPool()
  W099 Function does not invoke Debug::ft as first statement
    line 3374:       Debug::ft(RecoveryTestThread_Enter);
    line 3456:       Debug::ft(RecoveryTestThread_LoopForever);
  W101 Override of Base.Display not found
    line 905: class LbcPool : public Temporary
    line 2664: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h:
  W017 Using statement in header
    line 33: using namespace NodeBase;
  W021 Unused data
    line 81:    static const id_t LastNtIndex    = FuncTraceScope;
  W036 Member could be private
    line 163:    virtual void ConcludeTest(CliThread& cli) const;
  W054 Base class constructor is public
    line 45:    CorruptWhatParm();
    line 57:    explicit CorruptCommand(bool bind = true);
    line 99:    NtSaveWhatParm();
    line 111:    explicit NtSaveCommand(bool bind = true);
    line 125:    SizesCommand();
    line 140:    TestcaseAction();
    line 159:    explicit TestcaseCommand(bool bind = true);
  W071 Virtual function has no overrides
    line 163:    virtual void ConcludeTest(CliThread& cli) const;
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp:
  W009 Cast down the inheritance hierarchy
    line 66:    return static_cast< NtTestData* >(data);
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W084 Function could be free
    line 45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h:
  W037 Member could be protected
    line 62:    IpPort* Port() const { return port_; }
  W069 Virtual function is public
    line 91:    virtual IpBuffer* AllocBuff
    line 107:    virtual void ReceiveBuff
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp:
  W006 C-style cast
    line 77:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  W011 Pointer arithmetic
    line 205:       source += rcvd;
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h:
  W036 Member could be private
    line 95:    virtual bool ExitOnRestart(RestartLevel level) const override;
  W044 Data is not private
    line 99:    const ipport_t port_;
    line 104:    IpPort* ipPort_;
    line 108:    size_t rxSize_;
    line 112:    size_t txSize_;
    line 116:    SysIpL2Addr host_;
    line 120:    size_t recvs_;
    line 124:    SysIpL3Addr txAddr_;
    line 128:    SysIpL3Addr rxAddr_;
    line 132:    ticks_t ticks0_;
    line 136:    byte_t* buffer_;
  W069 Virtual function is public
    line 59:    virtual bool InsertSocket(SysSocket* socket);
  W071 Virtual function has no overrides
    line 91:    virtual bool ConditionalPause(word percent);
  W076 Adjacent arguments have the same type
    line 75:    IoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp:
  W006 C-style cast
    line 71:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    line 90:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    line 131:       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  W011 Pointer arithmetic
    line 261:    bytes += hdrSize_;
  W098 Function does not invoke Debug::ft
    line 205: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h:
  W036 Member could be private
    line 115:    virtual MsgSize PayloadSize() const;
  W054 Base class constructor is public
    line 49:    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
    line 53:    IpBuffer(const IpBuffer& that);
  W069 Virtual function is public
    line 115:    virtual MsgSize PayloadSize() const;
    line 134:    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  W071 Virtual function has no overrides
    line 134:    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  W076 Adjacent arguments have the same type
    line 49:    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  W084 Function could be free
    line 164:    static size_t BuffSize(size_t nBytes);
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp:
  W008 reinterpret_cast
    line 276:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W091 Line contains adjacent spaces
    line 55:    CounterPtr       recvs_;
    line 56:    AccumulatorPtr   bytesRcvd_;
    line 59:    CounterPtr       discards_;
    line 60:    CounterPtr       rejects_;
    line 61:    CounterPtr       sends_;
    line 62:    AccumulatorPtr   bytesSent_;
    line 64:    CounterPtr       overflows_;
  W098 Function does not invoke Debug::ft
    line 205: size_t IpPort::Discards() const
  W101 Override of Base.Display not found
    line 49: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h:
  W037 Member could be protected
    line 67:    IoThread* GetThread() const { return thread_; }
  W047 Data could be const
    line 179:    Q1Link link_;
    line 183:    ipport_t port_;
  W048 Data could be const pointer
    line 187:    IpService* service_;
  W069 Virtual function is public
    line 88:    virtual SysSocket* CreateAppSocket(size_t rxSize, size_t txSize);
    line 123:    virtual void DisplayStats(std::ostream& stream) const;
  W071 Virtual function has no overrides
    line 123:    virtual void DisplayStats(std::ostream& stream) const;
  W082 Function could be const
    line 160:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h:
  W076 Adjacent arguments have the same type
    line 46:    IpPortCfgParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 283: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W101 Override of Base.Display not found
    line 47: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp:
  W008 reinterpret_cast
    line 69:    auto fake = reinterpret_cast< const IpService* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h:
  W026 Unused function
    line 77:    virtual CliText* CreateText() const = 0;
  W036 Member could be private
    line 95:    IpPort* Provision(ipport_t port);
  W047 Data could be const
    line 147:    RegCell sid_;
  W059 Base class virtual destructor is not public
    line 129:    virtual ~IpService();
  W069 Virtual function is public
    line 51:    virtual const char* Name() const = 0;
    line 55:    virtual IpProtocol Protocol() const = 0;
    line 60:    virtual ipport_t Port() const = 0;
    line 64:    virtual Faction GetFaction() const = 0;
    line 68:    virtual size_t RxSize() const = 0;
    line 72:    virtual size_t TxSize() const = 0;
    line 77:    virtual CliText* CreateText() const = 0;
    line 83:    virtual SysSocket* CreateAppSocket() const { return nullptr; }
    line 91:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W071 Virtual function has no overrides
    line 83:    virtual SysSocket* CreateAppSocket() const { return nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 78: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h:
  W026 Unused function
    line 48:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h:
  W054 Base class constructor is public
    line 39:    NwClearWhatParm();
    line 54:    explicit NwClearCommand(bool bind = true);
    line 67:    NwExcludeWhatParm();
    line 80:    explicit NwExcludeCommand(bool bind = true);
    line 93:    NwIncludeWhatParm();
    line 106:    explicit NwIncludeCommand(bool bind = true);
    line 121:    explicit NwQueryCommand(bool bind = true);
    line 134:    NwStatusCommand() { }
  W102 Override of Object.Patch not found
    line 43: class NwClearCommand : public ClearCommand
    line 71: class NwExcludeCommand : public ExcludeCommand
    line 97: class NwIncludeCommand : public IncludeCommand
    line 116: class NwQueryCommand : public QueryCommand
    line 131: class NwStatusCommand : public StatusCommand
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h:
  W041 Data is init-only
    line 64:    static bool Registered;
  W084 Function could be free
    line 60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h:
  W036 Member could be private
    line 54:    bool PeersEmpty() const;
    line 58:    bool PortsEmpty() const;
  W101 Override of Base.Display not found
    line 40: class NwTracer : public Permanent
  W102 Override of Object.Patch not found
    line 40: class NwTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h:
  W054 Base class constructor is public
    line 40:    SysIpL2Addr();
    line 44:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    line 49:    explicit SysIpL2Addr(const std::string& text);
    line 53:    SysIpL2Addr(const SysIpL2Addr& that);
  W069 Virtual function is public
    line 77:    virtual std::string to_str() const;
  W084 Function could be free
    line 65:    static SysIpL2Addr LoopbackAddr();
    line 81:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp:
  W050 Default constructor invoked: POD members not initialized
    line 52:    in_addr result;
  W098 Function does not invoke Debug::ft
    line 110: SysIpL2Addr SysIpL2Addr::LoopbackAddr()
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h:
  W026 Unused function
    line 110:    bool operator!=(const SysIpL3Addr& that) const;
  W036 Member could be private
    line 106:    bool operator==(const SysIpL3Addr& that) const;
  W054 Base class constructor is public
    line 40:    SysIpL3Addr();
    line 45:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    line 51:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    line 59:    SysIpL3Addr
    line 64:    SysIpL3Addr(const SysIpL3Addr& that);
  W076 Adjacent arguments have the same type
    line 59:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp:
  W006 C-style cast
    line 58:          auto netaddr = (sockaddr_in*) info->ai_addr;
    line 113:    if(getnameinfo
  W050 Default constructor invoked: POD members not initialized
    line 48:    addrinfo hints;
    line 105:    sockaddr_in addr;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp:
  W098 Function does not invoke Debug::ft
    line 149: bool SysSocket::SetTracing(bool tracing)
    line 157: bool SysSocket::Trace(TraceStatus status)
    line 168: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h:
  W036 Member could be private
    line 92:    bool IsValid() const;
    line 190:    void Close();
  W037 Member could be protected
    line 97:    bool IsOpen() const;
  W059 Base class virtual destructor is not public
    line 176:    virtual ~SysSocket();
  W069 Virtual function is public
    line 76:    virtual IpProtocol Protocol() const { return IpAny; }
    line 80:    virtual void Acquire() { }
    line 84:    virtual void Release() { }
    line 114:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W076 Adjacent arguments have the same type
    line 165:    SysSocket(ipport_t port, IpProtocol proto,
  W084 Function could be free
    line 128:    static bool StartLayer();
    line 132:    static void StopLayer();
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp:
  W006 C-style cast
    line 87:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    line 205:    if(setsockopt(socket_, SOL_SOCKET, SO_RCVBUF,
    line 212:    if(getsockopt(socket_, SOL_SOCKET, SO_RCVBUF,
    line 222:    if(setsockopt(socket_, SOL_SOCKET, SO_SNDBUF,
    line 229:    if(getsockopt(socket_, SOL_SOCKET, SO_SNDBUF,
  W015 #include not sorted in standard order
    line 26: #include <windows.h>
  W050 Default constructor invoked: POD members not initialized
    line 52:    sockaddr_in addr;
    line 261:    WSAData wsaData;
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h:
  W026 Unused function
    line 129:    bool LocAddr(SysIpL3Addr& locAddr);
  W036 Member could be private
    line 84:    word Connect(const SysIpL3Addr& remAddr);
    line 124:    word Send(const byte_t* data, size_t len);
  W076 Adjacent arguments have the same type
    line 69:    SysTcpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp:
  W006 C-style cast
    line 43:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    line 71:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    line 116:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    line 224:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  W008 reinterpret_cast
    line 206:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), max, 0);
    line 251:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), len, 0);
  W050 Default constructor invoked: POD members not initialized
    line 40:    sockaddr_in peer;
    line 65:    sockaddr_in peer;
    line 113:    sockaddr_in host;
    line 221:    sockaddr_in peer;
  W051 Default constructor invoked
    line 147:    auto list = std::unique_ptr< pollfd[] >(new pollfd[count]);
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h:
  W036 Member could be private
    line 68:    word SendTo(const byte_t* data, size_t len, const SysIpL3Addr& remAddr);
  W076 Adjacent arguments have the same type
    line 51:    SysUdpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  W101 Override of Base.Display not found
    line 36: class SysUdpSocket : public SysSocket
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp:
  W006 C-style cast
    line 46:       if(getsockopt(Socket(), SOL_SOCKET, SO_MAX_MSG_SIZE,
    line 75:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    line 113:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W008 reinterpret_cast
    line 75:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    line 113:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W050 Default constructor invoked: POD members not initialized
    line 66:    sockaddr_in peer;
    line 98:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp:
  W009 Cast down the inheritance hierarchy
    line 156:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    line 175:    auto svc = static_cast< TcpIpService* >(ipPort_->GetService());
    line 266:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    line 412:    auto sock = static_cast< SysTcpSocket* >(socket);
  W098 Function does not invoke Debug::ft
    line 428: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h:
  W036 Member could be private
    line 71:    virtual void Unblock() override;
  W076 Adjacent arguments have the same type
    line 49:    TcpIoThread(Faction faction, ipport_t port,
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp:
  W009 Cast down the inheritance hierarchy
    line 105:    auto svc = static_cast< TcpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h:
  W036 Member could be private
    line 70:    virtual IpPort* CreatePort(ipport_t pid) override;
  W069 Virtual function is public
    line 39:    virtual size_t MaxConns() const = 0;
    line 44:    virtual size_t MaxBacklog() const = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp:
  W009 Cast down the inheritance hierarchy
    line 106:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    line 240:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h:
  W036 Member could be private
    line 55:    virtual void Unblock() override;
  W076 Adjacent arguments have the same type
    line 43:    UdpIoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  W082 Function could be const
    line 75:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h:
  W036 Member could be private
    line 54:    virtual IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 97: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 82: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 79: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
    line 31: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 97: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
    line 32: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 79: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
    line 31: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp:
  W098 Function does not invoke Debug::ft
    line 517: void PotsCircuit::Trace(const SignalEntry& entry)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h:
  W017 Using statement in header
    line 40: using namespace NodeBase;
    line 41: using namespace SessionBase;
    line 42: using namespace CallBase;
  W026 Unused function
    line 92:    bool IsRinging() const { return ringing_; }
    line 96:    bool CanFlash() const { return flash_; }
    line 101:    Cause::Ind GetCause() const { return cause_; }
  W036 Member could be private
    line 133:    void ResetCircuit();
  W048 Data could be const pointer
    line 221:    PotsProfile* profile_;
  W050 Default constructor invoked: POD members not initialized
    line 233:    SignalEntry trace_[TraceSize];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 76: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 69: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp:
  W008 reinterpret_cast
    line 88:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h:
  W007 Functional cast
    line 63:    Id Fid() const { return Id(fid_.GetId()); }
  W017 Using statement in header
    line 38: using namespace NodeBase;
  W019 Unused argument
    line 87/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W036 Member could be private
    line 63:    Id Fid() const { return Id(fid_.GetId()); }
    line 71:    const char* FullName() const { return name_; }
    line 75:    bool CanBeDeactivated() const { return deactivation_; }
    line 91:    static ptrdiff_t CellDiff();
  W048 Data could be const pointer
    line 133:    const char* abbr_;
    line 137:    const char* name_;
  W059 Base class virtual destructor is not public
    line 108:    virtual ~PotsFeature();
  W069 Virtual function is public
    line 86:    virtual PotsFeatureProfile* Subscribe
  W076 Adjacent arguments have the same type
    line 103:    PotsFeature(PotsFeature::Id fid, bool deactivation,
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp:
  W008 reinterpret_cast
    line 97:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W019 Unused argument
    line 55/1:    virtual bool Deactivate(PotsProfile& profile);
    line 89/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W036 Member could be private
    line 59:    PotsFeature::Id Fid() const { return fid_; }
    line 63:    static ptrdiff_t LinkDiff();
  W047 Data could be const
    line 93:    PotsFeature::Id fid_;
    line 97:    Q1Link link_;
  W059 Base class virtual destructor is not public
    line 76:    virtual ~PotsFeatureProfile();
  W069 Virtual function is public
    line 50:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    line 55:    virtual bool Deactivate(PotsProfile& profile);
  W071 Virtual function has no overrides
    line 89:    virtual bool Unsubscribe(PotsProfile& profile);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h:
  W017 Using statement in header
    line 36: using namespace NodeBase;
  W082 Function could be const
    line 57:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 84: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
    line 31: using namespace CallBase;
  W047 Data could be const
    line 59:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp:
  W009 Cast down the inheritance hierarchy
    line 441:       auto mep = static_cast< MediaEndpt* >(obj);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionTools;
  W054 Base class constructor is public
    line 41:    PbSizesCommand() { }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp:
  W053 Default assignment operator invoked
    line 147:       addr = GlobalAddress(peer, PotsCallIpPort, PotsCallFactoryId);
    line 202:       addr = GlobalAddress(peer, PotsShelfIpPort, PotsShelfFactoryId);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp:
  W008 reinterpret_cast
    line 87:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W052 Default copy constructor invoked
    line 54:    objAddr_(NilLocalAddress)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h:
  W017 Using statement in header
    line 40: using namespace NodeBase;
    line 41: using namespace SessionBase;
    line 42: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 113: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h:
  W017 Using statement in header
    line 35: using namespace NodeBase;
    line 36: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp:
  W008 reinterpret_cast
    line 578:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    line 747:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    line 868:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    line 956:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W009 Cast down the inheritance hierarchy
    line 593:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    line 654:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    line 761:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    line 787:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    line 881:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    line 969:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W091 Line contains adjacent spaces
    line 590:    id_t             index;
    line 591:    word             sid, ind;
    line 593:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    line 653:    TestRc            rc;
    line 654:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    line 656:    id_t              index;
    line 657:    word              sid, ind;
    line 759:    word           port;
    line 761:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    line 786:    TestRc          rc;
    line 787:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    line 788:    word            port;
    line 880:    TestRc        rc;
    line 881:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    line 883:    bool          ring = false;
    line 884:    auto          exists = false;
    line 968:    TestRc        rc;
    line 969:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    line 971:    string        scan;
    line 972:    auto          digits = false;
    line 973:    auto          flash = false;
    line 974:    auto          exists = false;
  W098 Function does not invoke Debug::ft
    line 356: CliText* PotsAlertingSignal::CreateText() const
    line 370: CliText* PotsDigitsSignal::CreateText() const
    line 384: CliText* PotsFacilitySignal::CreateText() const
    line 398: CliText* PotsFlashSignal::CreateText() const
    line 412: CliText* PotsLockoutSignal::CreateText() const
    line 426: CliText* PotsOffhookSignal::CreateText() const
    line 440: CliText* PotsOnhookSignal::CreateText() const
    line 454: CliText* PotsProgressSignal::CreateText() const
    line 468: CliText* PotsReleaseSignal::CreateText() const
    line 482: CliText* PotsSuperviseSignal::CreateText() const
    line 525: CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
    line 567: CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
    line 737: CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
    line 858: CliParm* PotsRingParameter::CreateCliParm(Usage use) const
    line 946: CliParm* PotsScanParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h:
  W017 Using statement in header
    line 45: using namespace NodeBase;
    line 46: using namespace SessionBase;
    line 47: using namespace MediaBase;
    line 48: using namespace CallBase;
  W021 Unused data
    line 105:    static const Id LastId    = NextId + 9;  // range constant
    line 133:    static const Id LastId   = NextId + 7;  // range constant
    line 225:    static const Ind MaxInd         = UINT8_MAX;
  W026 Unused function
    line 292:    MediaInfo* AddMedia(const MediaInfo& media);
    line 446:    virtual void InjectFinalMsg() override;
  W037 Member could be protected
    line 268:    explicit PotsMessage(SbIpBufferPtr& buff);
  W054 Base class constructor is public
    line 268:    explicit PotsMessage(SbIpBufferPtr& buff);
    line 272:    PotsMessage(ProtocolSM* psm, MsgSize size);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 74: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 85: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp:
  W098 Function does not invoke Debug::ft
    line 96: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
    line 32: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp:
  W015 #include not sorted in standard order
    line 96: #include "AnModule.h"
  W026 Unused function
    line 133: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp:
  W098 Function does not invoke Debug::ft
    line 91: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp:
  W098 Function does not invoke Debug::ft
    line 87: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp:
  W008 reinterpret_cast
    line 573:    auto fake = reinterpret_cast< const Context* >(&local);
    line 886:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W009 Cast down the inheritance hierarchy
    line 763:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    line 881:          auto pptr = static_cast< TlvMessage* >
  W098 Function does not invoke Debug::ft
    line 329: void Context::Dump() const
    line 953: bool Context::TraceOn()
    line 963: bool Context::TraceOn(TransTrace*& trans)
  W099 Function does not invoke Debug::ft as first statement
    line 695:    Debug::ft(Context_ProcessWork);
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h:
  W017 Using statement in header
    line 43: using namespace NodeBase;
  W019 Unused argument
    line 122/1:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  W026 Unused function
    line 117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    line 127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
    line 272:    size_t MsgCount(bool priority, bool standard) const;
  W032 Member hides inherited name
    line 167:    static ptrdiff_t LinkDiff();
  W047 Data could be const
    line 312:    Q2Link link_;
    line 336:    Faction faction_;
  W050 Default constructor invoked: POD members not initialized
    line 360:    MessageEntry trace_[TraceSize];
  W059 Base class virtual destructor is not public
    line 189:    virtual ~Context();
  W069 Virtual function is public
    line 101:    virtual ContextType Type() const = 0;
    line 105:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    line 109:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    line 113:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    line 117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W076 Adjacent arguments have the same type
    line 133:    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  W080 Argument could be const
    line 291/1:    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  W082 Function could be const
    line 159:    bool StopTimer(const Base& owner, TimerId tid);
  W084 Function could be free
    line 122:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
    line 127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp:
  W098 Function does not invoke Debug::ft
    line 138: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
  W036 Member could be private
    line 114:    virtual bool SaveContext();
    line 125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    line 131:    virtual void FreeContext(bool freeMsg);
    line 159:    virtual bool Save();
    line 163:    virtual Event* Restore(EventHandler::Rc& rc);
    line 167:    virtual void Free();
  W047 Data could be const
    line 214:    Id eid_;
  W069 Virtual function is public
    line 114:    virtual bool SaveContext();
    line 125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    line 131:    virtual void FreeContext(bool freeMsg);
  W084 Function could be free
    line 56:    static bool IsValidId(Id eid)
    line 72:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h:
  W017 Using statement in header
    line 40: using namespace NodeBase;
  W059 Base class virtual destructor is not public
    line 126:    virtual ~EventHandler();
  W069 Virtual function is public
    line 117:    virtual Rc ProcessEvent
  W084 Function could be free
    line 86:    static bool AppCanRegister(Id ehid)
    line 94:    static bool AppCanUse(Id ehid)
  W102 Override of Object.Patch not found
    line 50: class EventHandler : public Protected
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp:
  W008 reinterpret_cast
    line 202:    auto fake = reinterpret_cast< const Factory* >(&local);
  W091 Line contains adjacent spaces
    line 49:    CounterPtr       icMsgsIntra_;
    line 50:    CounterPtr       icMsgsInter_;
    line 52:    CounterPtr       ogMsgsIntra_;
    line 53:    CounterPtr       ogMsgsInter_;
    line 55:    CounterPtr       contexts_;
    line 56:    CounterPtr       msgsDeleted_;
    line 57:    CounterPtr       ctxsDeleted_;
  W098 Function does not invoke Debug::ft
    line 219: size_t Factory::DiscardedContextCount() const
    line 226: size_t Factory::DiscardedMessageCount() const
  W101 Override of Base.Display not found
    line 43: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h:
  W007 Functional cast
    line 87:    Id Fid() const { return Id(fid_.GetId()); }
  W017 Using statement in header
    line 45: using namespace NodeBase;
  W019 Unused argument
    line 127/1:    virtual Message* AllocOgMsg(SignalId sid) const;
  W026 Unused function
    line 219:    void SetFaction(Faction faction) { faction_ = faction; }
  W047 Data could be const
    line 267:    ProtocolId prid_;
  W048 Data could be const pointer
    line 271:    const char* name_;
  W059 Base class virtual destructor is not public
    line 203:    virtual ~Factory();
  W069 Virtual function is public
    line 121:    virtual CliText* CreateText() const;
    line 127:    virtual Message* AllocOgMsg(SignalId sid) const;
    line 134:    virtual bool InjectMsg(Message& msg) const;
    line 140:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    line 150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
    line 172:    virtual void DisplayStats(std::ostream& stream) const;
  W071 Virtual function has no overrides
    line 172:    virtual void DisplayStats(std::ostream& stream) const;
  W076 Adjacent arguments have the same type
    line 157:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W080 Argument could be const
    line 150/1:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  W082 Function could be const
    line 150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 151: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp:
  W052 Default copy constructor invoked
    line 41: GlobalAddress::GlobalAddress() : sbAddr_(NilLocalAddress)
    line 52:    sbAddr_(NilLocalAddress)
    line 66:    sbAddr_(NilLocalAddress)
    line 80:    sbAddr_(sbAddr)
  W053 Default assignment operator invoked
    line 35: const GlobalAddress GlobalAddress::NilAddr = GlobalAddress();
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W026 Unused function
    line 53:    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
    line 81:    bool operator!=(const GlobalAddress& that) const;
  W076 Adjacent arguments have the same type
    line 57:    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp:
  W098 Function does not invoke Debug::ft
    line 89: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp:
  W008 reinterpret_cast
    line 210:    auto fake = reinterpret_cast< const Initiator* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
  W047 Data could be const
    line 120:    ServiceId sid_;
    line 124:    ServiceId aid_;
    line 128:    TriggerId tid_;
    line 136:    Q1Link link_;
  W059 Base class virtual destructor is not public
    line 93:    virtual ~Initiator();
  W076 Adjacent arguments have the same type
    line 88:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W080 Argument could be const
    line 107/2:       (const ServiceSM& parentSsm, Event& icEvent, Event*& ogEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp:
  W008 reinterpret_cast
    line 225:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W009 Cast down the inheritance hierarchy
    line 181:    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    line 533:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W091 Line contains adjacent spaces
    line 64:    CounterPtr       requeues_;
    line 65:    CounterPtr       trojans_;
    line 66:    CounterPtr       lockouts_;
  W098 Function does not invoke Debug::ft
    line 698: void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
    line 802: size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
    line 810: msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
    line 818: size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  W101 Override of Base.Display not found
    line 57: class InvokerPoolStats : public Dynamic
    line 71: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h:
  W007 Functional cast
    line 70:    Faction GetFaction() const { return Faction(faction_.GetId()); }
  W017 Using statement in header
    line 44: using namespace NodeBase;
  W036 Member could be private
    line 92:    static ptrdiff_t CellDiff();
  W059 Base class virtual destructor is not public
    line 117:    virtual ~InvokerPool();
  W069 Virtual function is public
    line 88:    virtual void DisplayStats(std::ostream& stream) const;
  W071 Virtual function has no overrides
    line 88:    virtual void DisplayStats(std::ostream& stream) const;
  W082 Function could be const
    line 148:    void KickThread();
    line 152:    Context* FindWork();
    line 176:    void Requeue(Context& ctx);
    line 184:    void ScheduledOut();
  W084 Function could be free
    line 188:    static bool GenerateLog(Factory::Rc rc);
    line 200:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp:
  W007 Functional cast
    line 92:       auto p = reg->Pool(Faction(id));
  W098 Function does not invoke Debug::ft
    line 178: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp:
  W008 reinterpret_cast
    line 124:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W098 Function does not invoke Debug::ft
    line 113: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h:
  W017 Using statement in header
    line 40: using namespace NodeBase;
  W036 Member could be private
    line 63:    static word RtcYieldPercent() { return RtcYieldPercent_; }
    line 71:    static ptrdiff_t CellDiff2();
  W047 Data could be const
    line 134:    RegCell iid_;
    line 160:    static word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
  W026 Unused function
    line 53:    bool operator!=(const LocalAddress& that) const;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp:
  W098 Function does not invoke Debug::ft
    line 244: MsgDirection Message::Dir() const
    line 331: ProtocolId Message::GetProtocol() const
    line 366: SignalId Message::GetSignal() const
    line 422: MsgHeader* Message::Header() const
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h:
  W017 Using statement in header
    line 45: using namespace NodeBase;
  W022 Unused enum
    line 87:    enum Location
  W023 Unused enumerator
    line 89:       NotQueued,     // being built by a factory
    line 90:       ContextQ,      // has arrived at a context
    line 91:       PsmIncomingQ,  // has arrived at a PSM
    line 92:       PsmOutgoingQ,  // has been sent by a PSM
    line 93:       PsmPendingQ    // being built by a PSM
    line 103:       IllegalSignal,   // illegal signal found              0000  sid
    line 104:       IllegalParm,     // illegal parameter found          index  pid
    line 105:       IncompleteParm,  // parameter too short              index  pid
    line 106:       MissingParm,     // mandatory parameter missing       0000  pid
    line 107:       Overflow,        // last parameter extends past end  index  pid
    line 108:       Trampled         // last parameter trampled fence    index  pid
  W026 Unused function
    line 196:    Message* FindSignal(SignalId sid) const;
  W036 Member could be private
    line 348:    virtual void Handled(bool retain);
    line 352:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  W037 Member could be protected
    line 147:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    line 256:    MsgDirection Dir() const;
  W069 Virtual function is public
    line 147:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    line 167:    virtual void Save();
    line 172:    virtual void Unsave();
    line 180:    virtual bool Retrieve(ProtocolSM* psm);
    line 187:    virtual bool Relay(ProtocolSM& ogPsm);
    line 191:    virtual bool SendToSelf();
    line 248:    virtual void SetReceiver(const GlobalAddress& receiver);
    line 252:    virtual void SetSender(const GlobalAddress& sender);
    line 277:    virtual bool Send(Route route);
    line 281:    virtual bool Restore();
  W071 Virtual function has no overrides
    line 167:    virtual void Save();
    line 172:    virtual void Unsave();
    line 180:    virtual bool Retrieve(ProtocolSM* psm);
    line 187:    virtual bool Relay(ProtocolSM& ogPsm);
    line 191:    virtual bool SendToSelf();
    line 248:    virtual void SetReceiver(const GlobalAddress& receiver);
    line 252:    virtual void SetSender(const GlobalAddress& sender);
    line 281:    virtual bool Restore();
    line 335:    virtual void Refresh();
    line 348:    virtual void Handled(bool retain);
    line 352:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
    line 360:    virtual void ClearContext() const;
  W082 Function could be const
    line 125:    void SetSignal(SignalId sid);
    line 129:    void SetJoin(bool join);
    line 240:    void SetProtocol(ProtocolId prid);
    line 244:    void SetPriority(Priority prio);
    line 248:    virtual void SetReceiver(const GlobalAddress& receiver);
    line 252:    virtual void SetSender(const GlobalAddress& sender);
    line 377:    void SetRxAddr(const LocalAddress& rxaddr);
  W084 Function could be free
    line 289:    static const char* strPriority(Priority p);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp:
  W009 Cast down the inheritance hierarchy
    line 82:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h:
  W036 Member could be private
    line 58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W084 Function could be free
    line 58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp:
  W052 Default copy constructor invoked
    line 43:    txAddr(NilLocalAddress),
    line 44:    rxAddr(NilLocalAddress),
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
  W036 Member could be private
    line 53:    uint8_t           spare    : 6;   // reserved for future use
  W091 Line contains adjacent spaces
    line 44:    LocalAddress      txAddr;         // source address
    line 45:    LocalAddress      rxAddr;         // destination address
    line 47:    bool              initial  : 1;   // true for initial message
    line 48:    bool              final    : 1;   // true for final message
    line 49:    bool              join     : 1;   // true to create PSM and join root SSM
    line 50:    bool              self     : 1;   // true for message to self
    line 51:    bool              injected : 1;   // true if sent by InjectCommand
    line 52:    bool              kill     : 1;   // true to kill context on arrival
    line 53:    uint8_t           spare    : 6;   // reserved for future use
    line 54:    Message::Route    route    : 2;   // the route that the message took
    line 55:    ProtocolId        protocol : 16;  // message's protocol
    line 56:    SignalId          signal   : 16;  // message's signal
    line 57:    MsgSize           length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp:
  W009 Cast down the inheritance hierarchy
    line 80:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    line 154:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    line 220:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    line 277:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W010 Cast removes const qualification
    line 356:    return const_cast< MsgPort* >(this);
  W052 Default copy constructor invoked
    line 56:    locAddr_(msg.GetReceiver()),
    line 57:    remAddr_(msg.GetSender()),
    line 71:    locAddr_(GlobalAddress::NilAddr),
    line 72:    remAddr_(GlobalAddress::NilAddr),
  W053 Default assignment operator invoked
    line 204:    peerPort->remAddr_ = peerPrevRemAddr;
    line 205:    remAddr_ = GlobalAddress::NilAddr;
    line 317:    peerPrevRemAddr = peerPort->remAddr_;
    line 318:    locAddr_ = GlobalAddress(peerPort->locAddr_, locAddr_.sbAddr_);
    line 319:    remAddr_ = peerPort->locAddr_;
    line 320:    peerPort->remAddr_ = locAddr_;
    line 377:       remAddr_ = msg.GetSender();
    line 382:          locAddr_ = GlobalAddress(msg.RxIpAddr(), locAddr_.sbAddr_);
    line 421:       locAddr_ = GlobalAddress(txaddr, locAddr_.sbAddr_);
    line 422:       remAddr_ = msg.GetReceiver();
    line 481:       peer->remAddr_ = locAddr_;
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
  W021 Unused data
    line 144:    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  W084 Function could be free
    line 187:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp:
  W008 reinterpret_cast
    line 102:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W098 Function does not invoke Debug::ft
    line 194: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h:
  W007 Functional cast
    line 79:    Id Pid() const { return Id(pid_.GetId()); }
  W017 Using statement in header
    line 40: using namespace NodeBase;
  W023 Unused enumerator
    line 115:       StreamContainsIllegalParm,
  W026 Unused function
    line 83:    ProtocolId Prid() const { return prid_; }
  W047 Data could be const
    line 187:    ProtocolId prid_;
  W059 Base class virtual destructor is not public
    line 173:    virtual ~Parameter();
  W069 Virtual function is public
    line 93:    virtual void DisplayMsg(std::ostream& stream,
    line 102:    virtual CliParm* CreateCliParm(Usage use) const;
    line 131:    virtual TestRc InjectMsg
    line 144:    virtual TestRc VerifyMsg
  W084 Function could be free
    line 149:    static const char* ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp:
  W008 reinterpret_cast
    line 92:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W098 Function does not invoke Debug::ft
    line 135: Parameter* Protocol::FirstParm() const
    line 148: Signal* Protocol::FirstSignal() const
    line 161: Parameter* Protocol::GetParameter(ParameterId pid) const
    line 173: Signal* Protocol::GetSignal(SignalId sid) const
    line 185: void Protocol::NextParm(Parameter*& parm) const
    line 198: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h:
  W007 Functional cast
    line 71:    Id Prid() const { return Id(prid_.GetId()); }
  W017 Using statement in header
    line 40: using namespace NodeBase;
  W026 Unused function
    line 80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W036 Member could be private
    line 71:    Id Prid() const { return Id(prid_.GetId()); }
  W059 Base class virtual destructor is not public
    line 136:    virtual ~Protocol();
  W069 Virtual function is public
    line 80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    line 112:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
  W019 Unused argument
    line 173/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W026 Unused function
    line 74:    bool IsLowermost() const { return lower_ == nullptr; }
  W036 Member could be private
    line 118:    virtual ProtocolLayer* JoinPeer
    line 125:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W037 Member could be protected
    line 70:    bool IsUppermost() const { return upper_ == nullptr; }
    line 95:    virtual FactoryId GetFactory() const = 0;
  W059 Base class virtual destructor is not public
    line 149:    virtual ~ProtocolLayer();
  W069 Virtual function is public
    line 58:    virtual MsgPort* Port() const = 0;
    line 62:    virtual ProtocolSM* UppermostPsm() const = 0;
    line 95:    virtual FactoryId GetFactory() const = 0;
    line 99:    virtual Message::Route Route() const = 0;
    line 108:    virtual SysSocket* CreateAppSocket();
    line 118:    virtual ProtocolLayer* JoinPeer
    line 125:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 79: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.h:
  W017 Using statement in header
    line 35: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp:
  W009 Cast down the inheritance hierarchy
    line 434:       auto psm = static_cast< ProtocolSM* >(layer);
  W010 Cast removes const qualification
    line 698:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h:
  W017 Using statement in header
    line 37: using namespace NodeBase;
  W019 Unused argument
    line 302/1:    virtual void MsgHandled(Message& msg) { }
    line 308/1:    virtual void RestoreIcMsg(Message& msg) { }
    line 314/1:    virtual void RefreshMsg(Message& msg) { }
  W023 Unused enumerator
    line 97:       SignalUnknown,     // signal not recognized
    line 99:       ParameterUnknown,  // parameter not recognized
    line 100:       ParameterInvalid,  // parameter not valid for this signal
  W026 Unused function
    line 138:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    line 196:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    line 326:    virtual void InjectFinalMsg();
  W036 Member could be private
    line 69:    typedef uint8_t Priority;
    line 252:    virtual bool SendMsg(Message& msg) override;
  W037 Member could be protected
    line 77:    enum IncomingRc
    line 86:    enum OutgoingRc
    line 132:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W047 Data could be const
    line 373:    FactoryId fid_;
  W071 Virtual function has no overrides
    line 242:    virtual void SetState(StateId stid);
    line 297:    virtual Priority GetPriority() const { return NormalPriority; }
    line 302:    virtual void MsgHandled(Message& msg) { }
    line 308:    virtual void RestoreIcMsg(Message& msg) { }
    line 314:    virtual void RefreshMsg(Message& msg) { }
  W082 Function could be const
    line 119:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W026 Unused function
    line 86:    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp:
  W009 Cast down the inheritance hierarchy
    line 48:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
  W019 Unused argument
    line 52/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W069 Virtual function is public
    line 52:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
  W026 Unused function
    line 93:    StateId CurrState() const { return currState_; }
    line 106:    Message* SavedMsg() const { return savedMsg_; }
    line 215:    StateId CurrState() const { return currState_; }
    line 219:    StateId NextState() const { return nextState_; }
    line 360:    bool IsInitiation() const { return initiation_; }
    line 371:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp:
  W009 Cast down the inheritance hierarchy
    line 48:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    line 124:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    line 138:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
  W102 Override of Object.Patch not found
    line 42: class SbAnalyzeMessage : public EventHandler
    line 56: class SbAnalyzeSap : public EventHandler
    line 70: class SbAnalyzeSnp : public EventHandler
    line 84: class SbForceTransition : public EventHandler
    line 98: class SbInitiationReq : public EventHandler
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp:
  W006 C-style cast
    line 752:    ((ProtocolSM*) p)->Kill();
  W007 Functional cast
    line 701:       auto pool = reg->Pool(Faction(sc));
  W009 Cast down the inheritance hierarchy
    line 819:       auto msg = static_cast< Message* >(obj);
    line 906:       auto port = static_cast< MsgPort* >(obj);
    line 1118:       auto psm = static_cast< ProtocolSM* >(obj);
    line 1350:       auto ssm = static_cast< ServiceSM* >(obj);
    line 1563:       auto tmr = static_cast< Timer* >(obj);
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W021 Unused data
    line 57:    static const id_t LastSbIndex    = LastNwIndex + 9;
    line 86:    static const id_t LastSbIndex   = LastNwIndex + 6;
    line 115:    static const id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp:
  W008 reinterpret_cast
    line 77:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W009 Cast down the inheritance hierarchy
    line 108:    auto sbbuff = SbIpBufferPtr(static_cast< SbIpBuffer* >(buff.release()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp:
  W007 Functional cast
    line 127:    if(msgs->AvailCount() <= size_t(NoIngressMessageCount_)) return true;
    line 129:    return (WorkQCurrLength(Message::Ingress) >= size_t(NoIngressQueueLength_));
  W009 Cast down the inheritance hierarchy
    line 58:    noIngressQueueLength_.reset
    line 70:    noIngressMessageCount_.reset
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
  W069 Virtual function is public
    line 44:    virtual bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h:
  W008 reinterpret_cast
    line 64:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W026 Unused function
    line 85:    static void operator delete(void* addr, SbPoolUser user);
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 66:    static bool Registered;
  W084 Function could be free
    line 62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp:
  W009 Cast down the inheritance hierarchy
    line 223:       auto port = static_cast< MsgPort* >(obj);
    line 284:    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
    line 301:       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  W098 Function does not invoke Debug::ft
    line 406: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h:
  W017 Using statement in header
    line 35: using namespace NodeBase;
  W101 Override of Base.Display not found
    line 194: class TimerPool : public ObjectPool
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp:
  W007 Functional cast
    line 143:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    line 148:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    line 462:    width -= col_t(label.size());
  W009 Cast down the inheritance hierarchy
    line 355:          bt = static_cast< BuffTrace* >(rec);
    line 857:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    line 859:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    line 888:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W052 Default copy constructor invoked
    line 597:    locAddr_(NilLocalAddress),
    line 598:    remAddr_(NilLocalAddress),
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h:
  W017 Using statement in header
    line 37: using namespace NodeBase;
  W036 Member could be private
    line 535:    const StateId stid_;
  W044 Data is not private
    line 492:    ServiceId owner_;
    line 496:    const EventId eid_;
    line 531:    const ServiceId sid_;
    line 535:    const StateId stid_;
    line 539:    const EventHandler::Rc rc_;
  W054 Base class constructor is public
    line 468:    EventTrace(Id rid, const Event& evt);
    line 513:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W076 Adjacent arguments have the same type
    line 169:    static BuffTrace* NextIcMsg
    line 484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W084 Function could be free
    line 243:    static std::string OutputId(const std::string& label, id_t id);
    line 484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h:
  W017 Using statement in header
    line 36: using namespace NodeBase;
  W076 Adjacent arguments have the same type
    line 129:    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
    line 181:       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  W101 Override of Base.Display not found
    line 115: class SbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp:
  W008 reinterpret_cast
    line 283:    auto fake = reinterpret_cast< const Service* >(&local);
  W098 Function does not invoke Debug::ft
    line 371: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h:
  W007 Functional cast
    line 59:    Id Sid() const { return Id(sid_.GetId()); }
  W017 Using statement in header
    line 35: using namespace NodeBase;
  W026 Unused function
    line 125:    bool Disable();
    line 129:    bool Enable();
  W036 Member could be private
    line 73:    static bool IsValidPortId(PortId pid)
    line 115:    bool IsModifiable() const { return modifiable_; }
    line 119:    bool IsModifier() const { return modifier_; }
  W037 Member could be protected
    line 63:    typedef ServicePortId PortId;
    line 81:    virtual const char* PortName(PortId pid) const;
  W059 Base class virtual destructor is not public
    line 179:    virtual ~Service();
  W069 Virtual function is public
    line 81:    virtual const char* PortName(PortId pid) const;
    line 111:    virtual ServiceSM* AllocModifier() const;
  W076 Adjacent arguments have the same type
    line 174:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W084 Function could be free
    line 73:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 79: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp:
  W006 C-style cast
    line 771:             else if(((AnalyzeSapEvent*) ogEvent)->CurrInitiator() != nullptr)
    line 773:             else if(((AnalyzeSapEvent*) ogEvent)->CurrSsm() != nullptr)
  W009 Cast down the inheritance hierarchy
    line 457:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    line 461:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    line 462:          icEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    line 512:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    line 518:          icEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    line 519:          modifierInit = static_cast< AnalyzeSapEvent* >
    line 771:             else if(((AnalyzeSapEvent*) ogEvent)->CurrInitiator() != nullptr)
    line 773:             else if(((AnalyzeSapEvent*) ogEvent)->CurrSsm() != nullptr)
    line 877:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    line 881:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    line 943:             auto sibling = static_cast< InitiationReqEvent* >
    line 984:    auto& initEvent = static_cast< InitiationReqEvent& >(icEvent);
  W098 Function does not invoke Debug::ft
    line 312: Service* ServiceSM::GetService() const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h:
  W017 Using statement in header
    line 38: using namespace NodeBase;
  W019 Unused argument
    line 81/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    line 189/1:       (Event& currEvent, Event*& nextEvent);
    line 189/2:       (Event& currEvent, Event*& nextEvent);
  W026 Unused function
    line 134:    bool HasTriggered(TriggerId tid) const;
  W036 Member could be private
    line 97:    StateId NextState() const { return nextState_; }
  W059 Base class virtual destructor is not public
    line 169:    virtual ~ServiceSM();
  W069 Virtual function is public
    line 69:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    line 75:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    line 81:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    line 102:    virtual void SetNextState(StateId stid);
    line 109:    virtual void PsmDeleted(ProtocolSM& exPsm);
    line 123:    virtual void SetNextSap(TriggerId sap);
    line 129:    virtual void SetNextSnp(TriggerId snp);
    line 141:    virtual void MorphToService(ServiceId sid);
  W071 Virtual function has no overrides
    line 141:    virtual void MorphToService(ServiceId sid);
  W082 Function could be const
    line 188:    virtual EventHandler::Rc ProcessInitNack
    line 238:    EventHandler::Rc ProcessSsmqSap
    line 249:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp:
  W008 reinterpret_cast
    line 77:    auto fake = reinterpret_cast< const Signal* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h:
  W007 Functional cast
    line 75:    Id Sid() const { return Id(sid_.GetId()); }
  W017 Using statement in header
    line 36: using namespace NodeBase;
  W026 Unused function
    line 79:    ProtocolId Prid() const { return prid_; }
  W047 Data could be const
    line 118:    ProtocolId prid_;
  W059 Base class virtual destructor is not public
    line 109:    virtual ~Signal();
  W069 Virtual function is public
    line 86:    virtual CliText* CreateText() const;
  W084 Function could be free
    line 60:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp:
  W009 Cast down the inheritance hierarchy
    line 97:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
  W084 Function could be free
    line 88:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h:
  W019 Unused argument
    line 47/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W069 Virtual function is public
    line 41:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    line 47:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W076 Adjacent arguments have the same type
    line 55:    SsmFactory(Id fid, ProtocolId prid, const char* name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp:
  W008 reinterpret_cast
    line 190:    auto fake = reinterpret_cast< const State* >(&local);
  W098 Function does not invoke Debug::ft
    line 125: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    line 157: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    line 237: EventHandlerId State::GetHandler(EventId eid) const
    line 245: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h:
  W007 Functional cast
    line 54:    Id Stid() const { return Id(stid_.GetId()); }
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W026 Unused function
    line 58:    ServiceId Sid() const { return sid_; }
  W047 Data could be const
    line 117:    ServiceId sid_;
  W059 Base class virtual destructor is not public
    line 91:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
  W026 Unused function
    line 60:    explicit TextTlvMessage(SbIpBufferPtr& text);
    line 64:    TextTlvMessage(ProtocolSM* psm, MsgSize size);
    line 70:    bool Receive();
  W071 Virtual function has no overrides
    line 79:    virtual SbIpBufferPtr Parse() = 0;
    line 86:    virtual SbIpBufferPtr Build() = 0;
  W082 Function could be const
    line 79:    virtual SbIpBufferPtr Parse() = 0;
    line 86:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp:
  W008 reinterpret_cast
    line 191:    auto fake = reinterpret_cast< const Timer* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
  W032 Member hides inherited name
    line 54:    static ptrdiff_t LinkDiff();
  W036 Member could be private
    line 54:    static ptrdiff_t LinkDiff();
  W047 Data could be const
    line 136:    TimerId tid_;
    line 148:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp:
  W008 reinterpret_cast
    line 119:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h:
  W017 Using statement in header
    line 33: using namespace NodeBase;
  W102 Override of Object.Patch not found
    line 90: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp:
  W008 reinterpret_cast
    line 142:          auto psm = reinterpret_cast< const Base* >(t->Psm());
    line 154:          auto psm = reinterpret_cast< const Base* >(t->Psm());
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp:
  W098 Function does not invoke Debug::ft
    line 60: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h:
  W017 Using statement in header
    line 36: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp:
  W006 C-style cast
    line 176:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    line 285:    return (Fence*) fence;
    line 443:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W008 reinterpret_cast
    line 66:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    line 511:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W050 Default constructor invoked: POD members not initialized
    line 193:    ParmIterator pit;
    line 316:    ParmIterator pit;
    line 336:    ParmIterator pit;
    line 397:    ParmIterator locpit;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h:
  W007 Functional cast
    line 227:       return MsgSize(Memory::Align(size, Log2Align));
  W008 reinterpret_cast
    line 268:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W017 Using statement in header
    line 37: using namespace NodeBase;
  W026 Unused function
    line 64:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    line 69:    TlvMessage(const Message& msg, ProtocolSM* psm);
    line 78:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    line 169:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    line 175:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    line 189:    TlvParmPtr AddBytes(const byte_t* src, MsgSize size, ParameterId pid);
    line 195:    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
    line 199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    line 251:    byte_t* FindBytes(MsgSize& size, ParameterId pid) const;
    line 258:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    line 273:    int ParmOffset(ParmIterator& pit) const;
  W036 Member could be private
    line 158:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    line 163:    TlvParmPtr NextParm(ParmIterator& pit) const;
    line 184:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    line 245:    typedef uint16_t Fence;
    line 263:    virtual void AddFence();
    line 267:    TlvMsgLayout* TlvLayout() const
    line 278:    Fence* FencePtr() const;
    line 282:    void CheckFence() const;
  W054 Base class constructor is public
    line 52:    explicit TlvMessage(SbIpBufferPtr& buff);
    line 56:    TlvMessage(ProtocolSM* psm, MsgSize size);
    line 64:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    line 69:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W069 Virtual function is public
    line 78:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    line 184:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    line 199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    line 203:    virtual void DeleteParm(TlvParmLayout& parm);
  W071 Virtual function has no overrides
    line 78:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    line 184:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    line 199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    line 203:    virtual void DeleteParm(TlvParmLayout& parm);
    line 258:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    line 263:    virtual void AddFence();
  W076 Adjacent arguments have the same type
    line 115:    template< typename T > T* CopyType
  W080 Argument could be const
    line 203/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W084 Function could be free
    line 225:    static MsgSize Pad(MsgSize size)
    line 302:    inline static fn_name TlvMessage_FindType()
    line 304:    inline static fn_name TlvMessage_AddType()
    line 306:    inline static fn_name TlvMessage_CopyType()
    line 308:    inline static fn_name TlvMessage_VerifyParm()
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp:
  W009 Cast down the inheritance hierarchy
    line 73:    auto& tmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
  W026 Unused function
    line 72:    static Id ExtractPid(const TlvParmLayout& parm);
  W038 Typedef of pointer type
    line 59: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    line 60: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W084 Function could be free
    line 72:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp:
  W008 reinterpret_cast
    line 70:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h:
  W026 Unused function
    line 39:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h:
  W017 Using statement in header
    line 36: using namespace NodeBase;
  W036 Member could be private
    line 74:    static bool IsValidId(Id tid)
  W047 Data could be const
    line 118:    Id tid_;
  W059 Base class virtual destructor is not public
    line 99:    virtual ~Trigger();
  W084 Function could be free
    line 74:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp:
  W009 Cast down the inheritance hierarchy
    line 60:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 63:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 100:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 116:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 118:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 138:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 153:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 154:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    line 169:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 171:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 177:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    line 198:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 225:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 255:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 272:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 296:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 311:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 325:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 340:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 355:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 357:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 376:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 397:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 412:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 428:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 445:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 446:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    line 463:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 477:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 479:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    line 509:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 524:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 525:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    line 540:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 541:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 562:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 581:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 596:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 598:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 623:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 652:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 667:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 683:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 699:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 701:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 722:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 737:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 753:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 755:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 772:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 798:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 817:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 832:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 851:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 866:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 882:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 884:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 893:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 920:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    line 921:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 959:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 975:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 991:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 992:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    line 1007:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    line 1008:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 1042:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 1063:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
    line 29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp:
  W009 Cast down the inheritance hierarchy
    line 73:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    line 78:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    line 86:       SetNPsm(static_cast< CipPsm& >(psm));
    line 90:       SetUPsm(static_cast< MediaPsm& >(psm));
    line 130:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W098 Function does not invoke Debug::ft
    line 385: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp:
  W009 Cast down the inheritance hierarchy
    line 82:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp:
  W009 Cast down the inheritance hierarchy
    line 82:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp:
  W009 Cast down the inheritance hierarchy
    line 114:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    line 195:       auto pmsg = static_cast< const PotsMessage* >(msg);
    line 197:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    line 201:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    line 202:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    line 265:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp:
  W008 reinterpret_cast
    line 96:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    line 97:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W009 Cast down the inheritance hierarchy
    line 94:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    line 115:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp:
  W007 Functional cast
    line 108: ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  W098 Function does not invoke Debug::ft
    line 98: Faction PotsCallIpService::GetFaction() const { return PayloadFaction; }
    line 108: ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
    line 112: size_t PotsCallIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    line 116: size_t PotsCallIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp:
  W009 Cast down the inheritance hierarchy
    line 105:       return static_cast< PotsCallPsm* >(psm);
    line 177:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    line 212:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp:
  W009 Cast down the inheritance hierarchy
    line 203:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 263:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    line 286:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 302:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
    line 29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp:
  W009 Cast down the inheritance hierarchy
    line 56:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    line 58:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp:
  W009 Cast down the inheritance hierarchy
    line 56:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    line 58:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp:
  W009 Cast down the inheritance hierarchy
    line 56:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    line 58:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp:
  W009 Cast down the inheritance hierarchy
    line 292:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 297:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 299:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    line 320:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    line 321:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    line 373:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 400:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 482:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    line 484:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 497:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    line 519:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    line 533:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    line 539:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    line 545:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    line 579:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    line 582:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 637:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 644:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    line 659:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 667:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    line 685:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h:
  W017 Using statement in header
    line 42: using namespace NodeBase;
    line 43: using namespace SessionBase;
    line 44: using namespace CallBase;
  W019 Unused argument
    line 61/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp:
  W008 reinterpret_cast
    line 1466:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W009 Cast down the inheritance hierarchy
    line 448:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    line 1167:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    line 1204:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    line 1274:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    line 1301:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    line 1315:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    line 1381:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    line 1425:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    line 1974:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 1975:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    line 2005:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    line 2020:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 2022:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2029:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 2126:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2128:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 2129:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    line 2130:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    line 2225:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2239:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2253:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2267:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2283:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2298:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2312:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2327:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2342:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2343:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    line 2358:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2359:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    line 2373:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    line 2395:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W019 Unused argument
    line 435/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W047 Data could be const
    line 186:    Cause::Ind cause_;
  W084 Function could be free
    line 455:    static EventHandler::Rc SendFacilityNack
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp:
  W009 Cast down the inheritance hierarchy
    line 290:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    line 617:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    line 622:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 623:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    line 640:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 648:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    line 686:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 716:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 811:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    line 813:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 908:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 930:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 961:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 963:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    line 969:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    line 993:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 1018:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    line 1019:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    line 1039:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    line 1040:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    line 1044:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    line 1063:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 1065:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    line 1069:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    line 1109:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    line 1110:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    line 1112:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    line 1157:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W036 Member could be private
    line 252:    void StartTimer(TimerId tid, secs_t duration);
  W047 Data could be const
    line 147:    Facility::Ind ind_;
  W069 Virtual function is public
    line 257:    virtual void Cancel() override;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
    line 31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp:
  W009 Cast down the inheritance hierarchy
    line 133:    auto& pssm = static_cast< BcSsm& >(*Parent());
    line 135:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp:
  W009 Cast down the inheritance hierarchy
    line 83:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    line 173:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 179:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp:
  W009 Cast down the inheritance hierarchy
    line 196:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    line 247:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    line 250:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    line 362:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    line 415:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    line 748:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    line 751:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    line 824:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    line 892:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    line 999:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 1000:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    line 1022:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    line 1053:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    line 1054:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 1077:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h:
  W017 Using statement in header
    line 45: using namespace NodeBase;
    line 46: using namespace SessionBase;
    line 47: using namespace MediaBase;
    line 48: using namespace CallBase;
  W019 Unused argument
    line 159/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W026 Unused function
    line 78:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W036 Member could be private
    line 161:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp:
  W009 Cast down the inheritance hierarchy
    line 54:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 55:    auto msg = static_cast< CipMessage* >(ame.Msg());
    line 57:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 90:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 107:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    line 109:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 133:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 134:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 136:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 173:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 183:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    line 207:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 225:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 244:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 245:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 247:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 294:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 312:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 313:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 315:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 357:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 358:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 360:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 410:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 428:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 446:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 464:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 482:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 515:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 516:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    line 546:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 565:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 566:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    line 596:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    line 616:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    line 617:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W091 Line contains adjacent spaces
    line 133:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 134:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 135:    auto          sid = msg->GetSignal();
    line 136:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 138:    CauseInfo*    cci;
    line 244:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 245:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 246:    auto          sid = msg->GetSignal();
    line 247:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 249:    CauseInfo*    cci;
    line 312:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 313:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 314:    auto          sid = msg->GetSignal();
    line 315:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 317:    CauseInfo*    cci;
    line 357:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 358:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    line 359:    auto          sid = msg->GetSignal();
    line 360:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    line 362:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
    line 29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
    line 29: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h:
  W017 Using statement in header
    line 44: using namespace NodeBase;
    line 45: using namespace SessionBase;
    line 46: using namespace CallBase;
  W026 Unused function
    line 76:    virtual CliText* CreateText() const override;
  W036 Member could be private
    line 421:    ProtocolSM* TimerPsm(TimerId tid) const;
  W084 Function could be free
    line 137:    static void SendRelease(const Message& msg1);
  W101 Override of Base.Display not found
    line 54: class PotsCallIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
    line 31: using namespace CallBase;
  W036 Member could be private
    line 45:    typedef uint8_t Id;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp:
  W009 Cast down the inheritance hierarchy
    line 81:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h:
  W017 Using statement in header
    line 30: using namespace NodeBase;
    line 31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp:
  W098 Function does not invoke Debug::ft
    line 118: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    line 200: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h:
  W017 Using statement in header
    line 31: using namespace NodeBase;
    line 32: using namespace CallBase;
  W036 Member could be private
    line 57:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp:
  W008 reinterpret_cast
    line 85:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    line 206:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W009 Cast down the inheritance hierarchy
    line 255:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    line 299:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    line 329:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h:
  W017 Using statement in header
    line 45: using namespace NodeBase;
    line 46: using namespace SessionBase;
    line 47: using namespace MediaBase;
    line 48: using namespace CallBase;
  W047 Data could be const
    line 161:    PotsTreatmentQueue::QId qid_;
    line 165:    Q1Link link_;
    line 194:    Tone::Id tone_;
    line 198:    secs_t duration_;
  W069 Virtual function is public
    line 137:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp:
  W009 Cast down the inheritance hierarchy
    line 191:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    line 193:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    line 436:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 463:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    line 465:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 470:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    line 542:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    line 545:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 605:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    line 625:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    line 662:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 667:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    line 669:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    line 690:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    line 691:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h:
  W017 Using statement in header
    line 27: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp:
  W008 reinterpret_cast
    line 89:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W052 Default copy constructor invoked
    line 41:    locAddr_(mt.LocAddr()),
    line 42:    remAddr_(NilLocalAddress),
  W098 Function does not invoke Debug::ft
    line 77: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h:
  W017 Using statement in header
    line 41: using namespace NodeBase;
    line 42: using namespace SessionBase;
  W047 Data could be const
    line 128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp:
  W007 Functional cast
    line 342:       if(rows_[row].size() > size_t(end))
  W009 Cast down the inheritance hierarchy
    line 151:          tt = static_cast< const TransTrace* >(rec);
    line 159:          auto mt = static_cast< const MsgTrace* >(rec);
    line 712:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    line 729:             trans = static_cast< const TransTrace* >(rec);
    line 741:             return static_cast< const MsgTrace* >(rec);
    line 758:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    line 779:             trans = static_cast< const TransTrace* >(rec);
    line 786:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    line 947:          tt = static_cast< const TransTrace* >(rec);
    line 983:             mt = static_cast< const MsgTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h:
  W017 Using statement in header
    line 54: using namespace NodeBase;
    line 55: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp:
  W008 reinterpret_cast
    line 100:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W098 Function does not invoke Debug::ft
    line 89: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
    line 33: using namespace SessionBase;
  W047 Data could be const
    line 144:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp:
  W008 reinterpret_cast
    line 92:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W098 Function does not invoke Debug::ft
    line 56: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h:
  W017 Using statement in header
    line 34: using namespace NodeBase;
  W047 Data could be const
    line 85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp:
  W009 Cast down the inheritance hierarchy
    line 139:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W041 Data is init-only
    line 454:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h:
  W017 Using statement in header
    line 29: using namespace NodeBase;
    line 30: using namespace NodeTools;
  W054 Base class constructor is public
    line 41:    StSizesCommand() { }
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h:
  W017 Using statement in header
    line 28: using namespace NodeBase;
  W041 Data is init-only
    line 62:    static bool Registered;
  W084 Function could be free
    line 58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp:
  W009 Cast down the inheritance hierarchy
    line 69:    return static_cast< StTestData* >(data);
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h:
  W017 Using statement in header
    line 32: using namespace NodeBase;
    line 33: using namespace SessionBase;
  W076 Adjacent arguments have the same type
    line 70:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W084 Function could be free
    line 47:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp:
  W009 Cast down the inheritance hierarchy
    line 509:    auto tpsm = static_cast< TestPsm* >(Psm());
    line 526:    auto tssm = static_cast< TestSsm* >(RootSsm());
    line 580:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    line 858:       SetTestPsm(static_cast< TestPsm* >(&psm));
    line 986:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    line 987:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    line 1025:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    line 1034:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    line 1045:    auto& tssm = static_cast< TestSsm& >(ssm);
    line 1063:    auto& tssm = static_cast< TestSsm& >(ssm);
    line 1082:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    line 1083:    auto& tssm = static_cast< TestSsm& >(ssm);
  W053 Default assignment operator invoked
    line 419:       addr = GlobalAddress(addr, dest->EnsurePort()->LocAddr().SbAddr());
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h:
  W017 Using statement in header
    line 43: using namespace NodeBase;
    line 44: using namespace SessionBase;
  W036 Member could be private
    line 265:    void UpdateTestPsm();
    line 341:    TestPsm* GetTestPsm() const { return testPsm_; }
  W076 Adjacent arguments have the same type
    line 347:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W082 Function could be const
    line 265:    void UpdateTestPsm();
