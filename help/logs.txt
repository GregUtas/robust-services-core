/ Documentation for logs
/ displayed by >nb logs explain <log-group> <log-number>
/
? NODE100
The system failed to initialize before the timeout specified by the
configuration parameter InitTimeoutMsecs occurred. If FIELD_LOAD is
#defined, a restart follows.
? NODE101
InitThread, which ensures that cooperative multitasking is occurring,
failed to send a heartbeat to RootThread. The need for this heartbeat
can be suppressed by setting the configuration parameter BreakEnabled,
which is typically done to use breakpoint debugging. A restart follows
this log if the configuration parameter ReinitOnSchedTimeout is set.
? NODE102
Symbol information for the executable was not found. This means that
it will not be possible to display stack traces, which will seriously
compromise the debugging value of logs such as THR902 and SW900.
? NODE103
A restart has been initiated.
? NODE500
The system is now in service.
? SW900
A software error has occurred. This is an important log for debugging
purposes because its stack trace shows where the error was detected.
? CFG100
The file that contains start-up values for configuration parameters was
not found. It should be located at .../rsc/input/element.config.txt,
where the rsc/ directory is the first one with that name above the
directory out of which the system's executable was run.
? CFG101
A key in the configuration file contains an invalid character. Valid
characters are returned by CfgTuple::ValidKeyChars().
? CFG102
The configuration file contains more than one entry with the same key.
? CFG103
A value in the configuration file contains an invalid character or a
value that is incompatible with the type of configuration parameter,
such as a numeric value for a boolean configuration parameter. Valid
characters are returned byCfgTuple::ValidValueChars().
? CFG104
A line in the configuration file contains a key but no value.
? CFG500
A line in the configuration file contains extra characters that follow
a valid key and value. These characters have been ignored.
? STATS400
This periodic report, which contains all the system's statistics, is
generated every 15 minutes (at hh:00, hh:15, hh:30m and hh:45). When
the system first boots, its initial report occurs as scheduled if the
system has been in service for at least 7 minutes and 30 seconds.
? THR100
A critical thread has exited or been killed. This causes a restart.
? THR900
A Thread object was deleted by very naughty software. This should never
occur. Instead, the thread should be sent a SIGCLOSE or SIGPURGE signal
to force it to exit.
? THR901
A thread has exited, either voluntarily or as the result of being
signaled. In the latter case, the thread is recreated unless it was
to be permanently shut down.
? THR902
A software exception occurred. This is an important debugging log
because its stack trace pinpoints the exception's origin.
? THR903
One thread is signaling another thread.
? THR904
The signal handler is reraising a signal. A signal is normally handled
by throwing a SignalException for the running thread. If the running
thread cannot be found, a break signal (e.g. generated by ctrl-C) will
be handled by forwarding it to
  o the thread that holds the run-to-completion lock, if the
    configuration parameter TrapOnRtcTimeout is not set; else
  o the CLI thread, if it can be found, under the assumption
    that it is unresponsive or that its work should be aborted.
A signal is reraised only if none of the above apply. This will cause
the system to abort (and enter the debugger, if one is attached).
? THR905
A thread that ran for longer than the run-to-completion timeout, and
that received a SIGYIELD signal, has finally yielded.
? THR906
A thread was forced to exit after encountering a serious problem, such
as getting into a trap loop.
? THR907
A thread trapped or exited while holding one or more mutexes that were
therefore released.
? OBJ100
Memory could not be allocated to increase the number of blocks in an
object pool.
? OBJ200
The percentage of unused blocks in an object pool has reached a threshold
level. This log raises an OBJPOOL alarm with the following severity:
  o critical: under 3.13% (1 in 32) of the blocks are available
  o major: under 6.25% (1 in 16) of the blocks are available
  o minor: under 12.50% (1 in 8) of the blocks are available
  o off: over 12.50% of the blocks are available
? OBJ300
The size of an object pool was automatically expanded because the number
of available blocks was less than 1.56% (1 in 64) of the total blocks.
? OBJ900
An object pool's queue of available blocks was corrupted. The object
pool audit has truncated the queue and will recover orphaned blocks.
? OBJ901
The count for an object pool's queue of available blocks was incorrect.
The object pool audit has corrected it.
? OBJ902
An orphaned block was detected and will be returned to its object pool.
This is an important debugging log because it displays the object in the
block. It usually occurs after an exception, although it also occurs if
no override of Base::Claim marks a block that an application is using.
? OBJ903
Multiple orphaned blocks have been returned to their object pool.
? NET100
The network layer failed to initialize. The node has no network access.
This log raises the NETWORK alarm.
? NET101
The network layer failed to shut down along with the system.
? NET102
The network layer has gone down. The node has no network access. This
log raises the NETWORK alarm.
? NET103
A service could not be provisioned because it attempted to use an IP
port that is already assigned to another service.
? NET104
An I/O thread has failed because it could not configure its primary
socket. The service provisioned on its IP port is now unavailable.
This log raises a PORT alarm.
? NET105
A network resource, such as a socket, could not be allocated.
? NET106
A network function, such as a name lookup, failed.
? NET500
The network layer is in service.
? NET501
An I/O thread is now running. The service provisioned on its IP port
is now available.
? NET900
A socket function, such as receiving or sending a message, failed.
? NET901
An input handler's AllocBuff function returned nullptr, so a message
received by the I/O thread will be discarded.
? SESS100
All threads in an invoker pool are blocked. This is serious because
incoming work cannot be handled until one of the threads unblocks.
? SESS200
Payload work is overloaded. Ingress work will now be discarded. This
log raises the OVERLOAD alarm.
? SESS500
Payload work is no longer overloaded. Ingress work will now be handled.
This log clears the OVERLOAD alarm.
? SESS900
A session-based application has detected an error that will cause the
session to be aborted. This is an important debugging log because it
displays all of the session's objects.
? SESS901
The session processing framework detected a service logic error that
forces the session to be aborted.
? SESS902
An invoker thread detected that the count of items in its pool's work
queue was incorrect. The count has been repaired.
? SESS903
An invoker thread discarded in incoming buffer because it was ill-formed
or could not be delivered to the application.
? SESS904
An invoker thread discarded in incoming message because it was ill-formed
or could not be delivered to the application.
? SESS905
The SessionBase input handler discarded an ill-formed message.
? POTS100
The POTS shelf received an invalid signal from the POTS call.
? POTS101
The POTS shelf received a message for a circuit that does not support
the POTS protocol.
? POTS102
The POTS shelf received an ill-formed message from the POTS call.
? POTS103
The POTS call received an invalid signal from the POTS shelf.
? POTS104
The POTS call received an ill-formed message from the POTS shelf.
? POTS300
The >pots reset command was used to reset a POTS circuit to its initial
state. 
? POTS500
The POTS traffic thread is now generating the indicated number of calls
per minute.
? POTS900
The POTS shelf prevented its application from sending an invalid signal
to the POTS call.