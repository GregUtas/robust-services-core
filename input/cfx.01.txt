subscribe &dn.B cfu &dn.C
testcase begin cfx.01

/ A-B: VERIFY CFU INACTIVE
read bc.AB
delay 2
inject PS E &port.A
delay 1
inject PS E &port.B
verify PS R &port.A &cause.normal
verify PS S &port.B m=&port.silence c=&cause.normal
verify PS R &port.B &cause.normal
delay 1
contexts c
if &cli.result != 0 testcase failed &cli.result "Context(s) not idled"

/ B: ACTIVATE CFU TO C (PROVISIONED)
inject PS B &port.B
delay 1
inject PS D &port.B &sc.cfu.activation
delay 2
inject PS D &port.B #
delay 2
inject PS E &port.B
delay 1
verify PS S &port.B s=d m=&port.dial
verify PS S &port.B s=d m=&port.stutter
verify PS S &port.B s=x m=&port.conf c=&cause.confirmation
verify PS R &port.B &cause.normal
contexts c
if &cli.result != 0 testcase failed &cli.result "Context(s) not idled"

/ A-B(CFU)-C: RINGBACK, ANSWER, RELEASE
inject PS B &port.A
delay 1
inject PS D &port.A &dn.B
delay 2
inject PS B &port.C
delay 2
inject PS E &port.A
delay 1
inject PS E &port.C
delay 1
verify PS S &port.A s=d m=&port.dial
verify PS S &port.A s=x m=&port.silence
verify PS S &port.C r=t
verify PS S &port.A m=&port.ringback
verify PS S &port.C r=f m=&port.A
verify PS S &port.A m=&port.C
verify PS R &port.A &cause.normal
verify PS S &port.C m=&port.silence c=&cause.normal
verify PS R &port.C &cause.normal
delay 2
testcase end
unsubscribe &dn.B cfu