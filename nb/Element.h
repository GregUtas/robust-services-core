//==============================================================================
//
//  Element.h
//
//  Copyright (C) 2017  Greg Utas
//
//  This file is part of the Robust Services Core (RSC).
//
//  RSC is free software: you can redistribute it and/or modify it under the
//  terms of the GNU General Public License as published by the Free Software
//  Foundation, either version 3 of the License, or (at your option) any later
//  version.
//
//  RSC is distributed in the hope that it will be useful, but WITHOUT ANY
//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
//  details.
//
//  You should have received a copy of the GNU General Public License along
//  with RSC.  If not, see <http://www.gnu.org/licenses/>.
//
#ifndef ELEMENT_H_INCLUDED
#define ELEMENT_H_INCLUDED

#include "Protected.h"
#include <string>
#include "NbTypes.h"

//------------------------------------------------------------------------------

namespace NodeBase
{
//  Attributes of the element on which this software load is running.
//
class Element : public Protected
{
   friend class Singleton< Element >;
public:
   //  Returns the element's name.
   //
   static std::string Name() { return Name_; }

   //  Returns a string containing the current time in SysTime::Alpha format,
   //  followed by " on " and Element::Name().
   //
   static std::string strTimePlace();

   //  Returns the help directory, which contains help files for CLI commands
   //  and increments.  Does not include a trailing PATH_SEPARATOR character.
   //
   static const std::string& HelpPath();

   //  Returns the input directory, which contains the element.config.txt file
   //  and files for the CLI >read command.  Does not include a trailing
   //  PATH_SEPARATOR character.
   //
   static const std::string& InputPath();

   //  Returns the output directory, where files generated by the element are
   //  written.  Does not include a trailing PATH_SEPARATOR character.
   //
   static const std::string& OutputPath();

   //  Returns true if running in a non-field (debug) load.
   //
   static bool RunningInLab() { return RunningInLab_; }

   //  Overridden to display member variables.
   //
   virtual void Display(std::ostream& stream,
      const std::string& prefix, const Flags& options) const override;

   //  Overridden for patching.
   //
   virtual void Patch(sel_t selector, void* arguments) override;
private:
   //  Private because this singleton is not subclassed.
   //
   Element();

   //  Private because this singleton is not subclassed.
   //
   ~Element();

   //  The element's name.
   //
   static std::string Name_;

   //  The directory from which help files are obtained.
   //
   static std::string HelpPath_;

   //  The directory from which files are to be read.
   //
   static std::string InputPath_;

   //  The directory to which files are to be written.
   //
   static std::string OutputPath_;

   //  Set if this is a lab load.
   //
   static bool RunningInLab_;

   //  Configuration parameter for the element's name.
   //
   CfgStrParmPtr name_;

   //  Configuration parameter for the help directory.
   //
   CfgStrParmPtr helpPath_;

   //  Configuration parameter for the input directory.
   //
   CfgStrParmPtr inputPath_;

   //  Configuration parameter for the output directory.
   //
   CfgStrParmPtr outputPath_;

   //  Configuration parameter that defines if this is a lab load.
   //
   CfgBoolParmPtr runningInLab_;
};
}
#endif
