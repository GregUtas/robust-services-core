nb>read test.cp.all
nb>read test.cp.setup
nb>quit all
  Nothing to quit.
nb>nt
nt>sb
sb>st
st>pots
pots>stop
  OK.
pots>clear buffer
  OK.
pots>clear selections
  OK.
pots>clear tools
  OK.
pots>set tools fnbtc on
  f: OK.
  n: OK.
  b: OK.
  t: OK.
  c: OK.
  OK.
pots>include all on
  OK.
pots>exclude faction &faction.audit
  OK.
pots>exclude faction &faction.bkgd
  OK.
pots>exclude faction &faction.oper
  OK.
pots>exclude timers
  OK.
pots>//* swflags set &flag.cipalwaysoverip on
pots>symbols set dn.A 20000
  OK.
pots>symbols set dn.B 20001
  OK.
pots>symbols set dn.C 20002
  OK.
pots>symbols set dn.D 20003
  OK.
pots>symbols set dn.E 20004
  OK.
pots>symbols set dn.X 90000
  OK.
pots>symbols set dn.Y 90001
  OK.
pots>symbols set dn.Z 90002
  OK.
pots>register &dn.A
  OK.
pots>register &dn.B
  OK.
pots>register &dn.C
  OK.
pots>register &dn.D
  OK.
pots>register &dn.E
  OK.
pots>register &dn.X
  OK.
pots>register &dn.Y
  OK.
pots>register &dn.Z
  OK.
pots>symbols set port.A 11
  OK.
pots>symbols set port.B 12
  OK.
pots>symbols set port.C 13
  OK.
pots>symbols set port.D 14
  OK.
pots>symbols set port.E 15
  OK.
pots>symbols set port.X 16
  OK.
pots>symbols set port.Y 17
  OK.
pots>symbols set port.Z 18
  OK.
pots>testcase prolog test.cp.prolog
  OK.
pots>testcase epilog test.cp.epilog
  OK.
pots>read test.cp.bc
pots>read bc.01
pots>testcase begin bc.01
  OK.
symbols set testcase.name bc.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.02
pots>testcase begin bc.02
  OK.
symbols set testcase.name bc.02
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.03
pots>testcase begin bc.03
  OK.
symbols set testcase.name bc.03
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.04
pots>testcase begin bc.04
  OK.
symbols set testcase.name bc.04
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.05
pots>testcase begin bc.05
  OK.
symbols set testcase.name bc.05
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.06
pots>testcase begin bc.06
  OK.
symbols set testcase.name bc.06
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.07
pots>testcase begin bc.07
  OK.
symbols set testcase.name bc.07
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.08
pots>testcase begin bc.08
  OK.
symbols set testcase.name bc.08
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.09
pots>testcase begin bc.09
  OK.
symbols set testcase.name bc.09
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.10
pots>testcase begin bc.10
  OK.
symbols set testcase.name bc.10
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.11
pots>testcase begin bc.11
  OK.
symbols set testcase.name bc.11
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.12
pots>testcase begin bc.12
  OK.
symbols set testcase.name bc.12
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.13
pots>testcase begin bc.13
  OK.
symbols set testcase.name bc.13
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.14
pots>testcase begin bc.14
  OK.
symbols set testcase.name bc.14
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.15
pots>testcase begin bc.15
  OK.
symbols set testcase.name bc.15
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.16
pots>testcase begin bc.16
  OK.
symbols set testcase.name bc.16
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bc.17
pots>testcase begin bc.17
  OK.
symbols set testcase.name bc.17
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read test.cp.cip
pots>read cip.01
pots>testcase begin cip.01
  OK.
symbols set testcase.name cip.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read cip.02
pots>testcase begin cip.02
  OK.
symbols set testcase.name cip.02
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read test.cp.ss
pots>read sus.01
pots>testcase begin sus.01
  OK.
symbols set testcase.name sus.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read sus.02
pots>testcase begin sus.02
  OK.
symbols set testcase.name sus.02
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read boc.01
pots>testcase begin boc.01
  OK.
symbols set testcase.name boc.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read sus.03
pots>testcase begin sus.03
  OK.
symbols set testcase.name sus.03
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read bic.01
pots>testcase begin bic.01
  OK.
symbols set testcase.name bic.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read sus.04
pots>testcase begin sus.04
  OK.
symbols set testcase.name sus.04
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read htl.01
pots>testcase begin htl.01
  OK.
symbols set testcase.name htl.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.01
pots>testcase begin wml.01
  OK.
symbols set testcase.name wml.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.02
pots>testcase begin wml.02
  OK.
symbols set testcase.name wml.02
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.03
pots>testcase begin wml.03
  OK.
symbols set testcase.name wml.03
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.04
pots>testcase begin wml.04
  OK.
symbols set testcase.name wml.04
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.05
pots>testcase begin wml.05
  OK.
symbols set testcase.name wml.05
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.06
pots>testcase begin wml.06
  OK.
symbols set testcase.name wml.06
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read wml.07
pots>testcase begin wml.07
  OK.
symbols set testcase.name wml.07
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>read test.cp.cfx
pots>read cfx.01
pots>subscribe &dn.B cfu &dn.C
  OK.
pots>testcase begin cfx.01
  OK.
symbols set testcase.name cfx.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.B cfu
  OK.
pots>read cfx.02
pots>subscribe &dn.B cfb &dn.C
  OK.
pots>testcase begin cfx.02
  OK.
symbols set testcase.name cfx.02
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.B cfb
  OK.
pots>read cfx.03
pots>subscribe &dn.B cfn &dn.C 12
  OK.
pots>testcase begin cfx.03
  OK.
symbols set testcase.name cfx.03
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.B cfn
  OK.
pots>read cfx.04
pots>subscribe &dn.B cwt
  OK.
pots>subscribe &dn.B cfb &dn.E
  OK.
pots>testcase begin cfx.04
  OK.
symbols set testcase.name cfx.04
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.B cfb
  OK.
pots>unsubscribe &dn.B cwt
  OK.
pots>read cfx.05
pots>subscribe &dn.A cwt
  OK.
pots>subscribe &dn.A cfn &dn.D 12
  OK.
pots>testcase begin cfx.05
  OK.
symbols set testcase.name cfx.05
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cfn
  OK.
pots>unsubscribe &dn.A cwt
  OK.
pots>read test.cp.cwt
pots>read cwt.01
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>testcase verify on
  OK.
pots>testcase begin cwt.01
  OK.
symbols set testcase.name cwt.01
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.02
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>testcase verify on
  OK.
pots>testcase begin cwt.02
  OK.
symbols set testcase.name cwt.02
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.03
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.BA
pots>/ B-A: RINGBACK; ANSWER
pots>inject PS B &port.B
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.B &dn.A
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.B s=d m=&port.dial
pots>verify PS S &port.B s=x m=&port.silence
pots>verify PS S &port.A r=t
pots>verify PS S &port.B m=&port.ringback
pots>verify PS S &port.A r=f m=&port.B
pots>verify PS S &port.B m=&port.A
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>testcase verify on
  OK.
pots>testcase begin cwt.03
  OK.
symbols set testcase.name cwt.03
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.04
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>testcase verify on
  OK.
pots>testcase begin cwt.04
  OK.
symbols set testcase.name cwt.04
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.05
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>testcase verify on
  OK.
pots>testcase begin cwt.05
  OK.
symbols set testcase.name cwt.05
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.06
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.BA
pots>/ B-A: RINGBACK; ANSWER
pots>inject PS B &port.B
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.B &dn.A
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.B s=d m=&port.dial
pots>verify PS S &port.B s=x m=&port.silence
pots>verify PS S &port.A r=t
pots>verify PS S &port.B m=&port.ringback
pots>verify PS S &port.A r=f m=&port.B
pots>verify PS S &port.B m=&port.A
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 3A
pots>read cwt.Nd2ExB
pots>/ NOTIFIED 2; IDLE B
pots>inject PS E &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS R &port.B &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A m=&port.silence c=&cause.normal
pots>/ 3B
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 3C
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>testcase verify on
  OK.
pots>testcase begin cwt.06
  OK.
symbols set testcase.name cwt.06
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.07
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>testcase verify on
  OK.
pots>testcase begin cwt.07
  OK.
symbols set testcase.name cwt.07
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.08
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>testcase verify on
  OK.
pots>testcase begin cwt.08
  OK.
symbols set testcase.name cwt.08
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.09
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.BA
pots>/ B-A: RINGBACK; ANSWER
pots>inject PS B &port.B
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.B &dn.A
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.B s=d m=&port.dial
pots>verify PS S &port.B s=x m=&port.silence
pots>verify PS S &port.A r=t
pots>verify PS S &port.B m=&port.ringback
pots>verify PS S &port.A r=f m=&port.B
pots>verify PS S &port.B m=&port.A
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>testcase verify on
  OK.
pots>testcase begin cwt.09
  OK.
symbols set testcase.name cwt.09
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.10
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>testcase verify on
  OK.
pots>testcase begin cwt.10
  OK.
symbols set testcase.name cwt.10
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.11
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>/ 2D
pots>read cwt.AdAFls
pots>/ FLASH (FLIP TO ORIGINAL)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A m=&port.B
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PC P &port.A &prog.media m=&port.A
pots>verify PS S &port.C m=&port.held
pots>verify PS S &port.B m=&port.A
pots>testcase verify on
  OK.
pots>testcase begin cwt.11
  OK.
symbols set testcase.name cwt.11
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.12
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>/ 2D
pots>read cwt.AdAFls
pots>/ FLASH (FLIP TO ORIGINAL)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A m=&port.B
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PC P &port.A &prog.media m=&port.A
pots>verify PS S &port.C m=&port.held
pots>verify PS S &port.B m=&port.A
pots>/ 11A
pots>read cwt.AdHExB
pots>/ WAITING CALL HELD: IDLE B
pots>inject PS E &port.B
  OK.
pots>delay 12
  OK.
pots>verify PS R &port.B &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A m=&port.silence c=&cause.normal
pots>testcase verify on
  OK.
pots>testcase begin cwt.12
  OK.
symbols set testcase.name cwt.12
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.13
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>/ 8A
pots>read cwt.AdAExC
pots>/ ACTIVE ON WAITING CALL: IDLE C
pots>inject PS E &port.C
  OK.
pots>delay 2
  OK.
pots>verify PS R &port.C &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A m=&port.silence c=&cause.normal
pots>/ 8B
pots>read cwt.Hg1ExA
pots>/ HOLDING 1: ONHOOK A (RERING)
pots>inject PS E &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A r=t
pots>testcase verify on
  OK.
pots>testcase begin cwt.13
  OK.
symbols set testcase.name cwt.13
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.14
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>/ 8A
pots>read cwt.AdAExC
pots>/ ACTIVE ON WAITING CALL: IDLE C
pots>inject PS E &port.C
  OK.
pots>delay 2
  OK.
pots>verify PS R &port.C &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A m=&port.silence c=&cause.normal
pots>/ 8B
pots>read cwt.Hg1ExA
pots>/ HOLDING 1: ONHOOK A (RERING)
pots>inject PS E &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A r=t
pots>testcase verify on
  OK.
pots>testcase begin cwt.14
  OK.
symbols set testcase.name cwt.14
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.15
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.BA
pots>/ B-A: RINGBACK; ANSWER
pots>inject PS B &port.B
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.B &dn.A
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.B s=d m=&port.dial
pots>verify PS S &port.B s=x m=&port.silence
pots>verify PS S &port.A r=t
pots>verify PS S &port.B m=&port.ringback
pots>verify PS S &port.A r=f m=&port.B
pots>verify PS S &port.B m=&port.A
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 3A
pots>read cwt.Nd2ExB
pots>/ NOTIFIED 2; IDLE B
pots>inject PS E &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS R &port.B &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A m=&port.silence c=&cause.normal
pots>testcase verify on
  OK.
pots>testcase begin cwt.15
  OK.
symbols set testcase.name cwt.15
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.16
pots>subscribe &dn.A cwt
  OK.
pots>/ A(CCW)-B (ANSWERED)
pots>testcase begin cwt.16
  OK.
symbols set testcase.name cwt.16
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.17
pots>subscribe &dn.A cwt
  OK.
pots>testcase begin cwt.17
  OK.
symbols set testcase.name cwt.17
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.18
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>/ 2D
pots>read cwt.AdAFls
pots>/ FLASH (FLIP TO ORIGINAL)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A m=&port.B
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PC P &port.A &prog.media m=&port.A
pots>verify PS S &port.C m=&port.held
pots>verify PS S &port.B m=&port.A
pots>/ 11A
pots>read cwt.AdHExB
pots>/ WAITING CALL HELD: IDLE B
pots>inject PS E &port.B
  OK.
pots>delay 12
  OK.
pots>verify PS R &port.B &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A m=&port.silence c=&cause.normal
pots>testcase verify on
  OK.
pots>testcase begin cwt.18
  OK.
symbols set testcase.name cwt.18
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.19
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 1D
pots>read cwt.Nd2ExC
pots>/ NOTIFIED 2; IDLE C
pots>inject PS E &port.C
  OK.
pots>delay 2
  OK.
pots>verify PS R &port.C &cause.normal
pots>verify PM R &port.A &cause.normal
pots>verify PS S &port.A s=x c=&cause.normal
pots>verify PC F &port.A f &service.cwa &facility.cwt.released
pots>testcase verify on
  OK.
pots>/ RE-INITIATE CWT IN MUX PASSIVE STATE
pots>testcase begin cwt.19
  OK.
symbols set testcase.name cwt.19
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.20
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>/ A-B (ALERTING)
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>/ INITIATE CWT: DENIED BECAUSE A-B NOT ANSWERED
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.nack
pots>verify PC F &port.A f &service.cwb &facility.nack
pots>verify PM R &port.A &cause.userbusy
pots>verify PS S &port.C m=&port.busy c=&cause.userbusy
pots>inject PS E &port.C
  OK.
pots>delay 3
  OK.
pots>testcase verify on
  OK.
pots>testcase begin cwt.20
  OK.
symbols set testcase.name cwt.20
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>read cwt.21
pots>subscribe &dn.A cwt
  OK.
pots>testcase verify off
  OK.
pots>read bc.AB
pots>/ A-B: RINGBACK; ANSWER
pots>inject PS B &port.A
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.A &dn.B
  OK.
pots>delay 2
  OK.
pots>inject PS B &port.B
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A s=d m=&port.dial
pots>verify PS S &port.A s=x m=&port.silence
pots>verify PS S &port.B r=t
pots>verify PS S &port.A m=&port.ringback
pots>verify PS S &port.B r=f m=&port.A
pots>verify PS S &port.A m=&port.B
pots>/ 1A 1B
pots>read cwt.In2Ack
pots>/ INITIATE CWT
pots>inject PS B &port.C
  OK.
pots>delay 1
  OK.
pots>inject PS D &port.C &dn.A
  OK.
pots>delay 3
  OK.
pots>verify PS S &port.C s=d m=&port.dial
pots>verify PS S &port.C s=x m=&port.silence
pots>verify PM F &port.A f &service.cwm &facility.req
pots>verify PC F &port.A f &service.cwa &facility.req
pots>verify PM F &port.A f &service.cwm &facility.ack
pots>verify PC F &port.A f &service.cwb &facility.ack
pots>verify PM S &port.A r=t
pots>verify PS S &port.A s=f m=&port.cwt
pots>verify PC A &port.A
pots>verify PS S &port.C m=&port.ringback
pots>/ 1C
pots>read cwt.Nf2Tmr
pots>/ NOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2A
pots>read cwt.Nd2Tmr
pots>/ NOTIFIED: RENOTIFY
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.cwt
pots>/ 2B
pots>read cwt.Rf2Tmr
pots>/ RENOTIFYING 2: STOP CWT TONE
pots>delay 6
  OK.
pots>verify PS S &port.A m=&port.B
pots>/ 2C
pots>read cwt.Rd2Fls
pots>/ RENOTIFIED 2: FLASH (ANSWER)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PC B &port.A m=&port.A
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PS S &port.A m=&port.silence
pots>verify PM S &port.A r=f m=&port.C
pots>verify PS S &port.A m=&port.C
pots>verify PS S &port.C m=&port.A
pots>verify PS S &port.B m=&port.held
pots>/ 2D
pots>read cwt.AdAFls
pots>/ FLASH (FLIP TO ORIGINAL)
pots>inject PS L &port.A
  OK.
pots>delay 2
  OK.
pots>verify PS S &port.A m=&port.B
pots>verify PC P &port.A &prog.media m=&port.held
pots>verify PC P &port.A &prog.media m=&port.A
pots>verify PS S &port.C m=&port.held
pots>verify PS S &port.B m=&port.A
pots>testcase verify on
  OK.
pots>testcase begin cwt.21
  OK.
symbols set testcase.name cwt.21
  OK.
read test.cp.prolog
pots>send &testcase.name
pots>print Testcase &testcase.name completed.
pots>unsubscribe &dn.A cwt
  OK.
pots>help testcase
testcase          : Configures or executes testcases.
(                 : subcommand...
  prolog          : file to read before executing a testcase
    [<str>]       : filename (none if omitted)
  epilog          : file to read after a testcase passes
    [<str>]       : filename (none if omitted)
  recover         : file to read after a testcase fails
    [<str>]       : filename (epilog if omitted)
  begin           : executes a testcase (and concludes any previous one)
    <str>         : testcase filename
  end             : concludes a testcase
  failed          : records that the current testcase failed
    <int>         : failure code
    [<str>]       : explanation for failure
  query           : shows the counts of passed/failed testcases
  reset           : clears the counts of passed/failed testcases
  verify          : enables or disables the >verify command
  (               : setting...
    on            : on
    off           : off
  )
)
pots>testcase query
  Passed: 59
  Failed: 0
pots>