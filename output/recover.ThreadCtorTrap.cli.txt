nt>sched start
  OK.
nt>start
  OK.
nt>read trap.20
nt>/ RECOVER thread constructor trap
nt>/ This also causes a trap in InitThread, because it invokes
nt>/ RecoveryDaemon.CreateThread to recreate the recovery thread.
nt>recover ctortrap
  OK.
nt>testcase end
  OK.
read test.trap.epilog
nt>delay 1
  OK.
nt>stop
  OK.
nt>sched stop
  OK.
nt>sched show &testcase.name
  OK.
nt>save funcs &testcase.name
  OK.
nt>save trace &testcase.name
  OK.
nt>clear buffer
  OK.
nt>send cout
  OK.
