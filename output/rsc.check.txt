LINE COUNTS
 source code   64136
       blank   36295
          //   15280
     file //    9389
separator //    6321
   tagged //     207
     text //   16985
          /*       0
           {   12527
           }   10907
          };    1622
   Debug::ft    4034
     fn_name    4015
    ...split      94
    #include    5286
    #<other>    1004
       using     716
       TOTAL  188818

WARNING COUNTS
  W004    81  C-style cast
  W005    44  Functional cast
  W006    83  reinterpret_cast
  W007   532  Cast down the inheritance hierarchy
  W008    41  Cast removes const qualification
  W009    14  Pointer arithmetic
  W015     3  #include not sorted in standard order
  W017     1  Add #include directive
  W018     4  Remove #include directive
  W019    66  Header relies on using statement via #include
  W020   155  Using statement in header
  W022   374  Add using statement
  W026    32  Unused argument
  W027    10  Unused class
  W028    24  Unused data
  W029     1  Unused enum
  W030    19  Unused enumerator
  W032   136  Unused function
  W033     3  Unused typedef
  W037     9  Member hides inherited name
  W042   143  Member could be private
  W043    58  Member could be protected
  W044    11  Typedef of pointer type
  W047    35  Data is init-only
  W048     1  Data is write-only
  W050    24  Data is not private
  W053    74  Data could be const
  W054    16  Data could be const pointer
  W056    23  Default constructor invoked: POD members not initialized
  W057     1  Default constructor invoked
  W058     7  Default copy constructor invoked
  W060    67  Base class constructor is public
  W062     2  Member not included in member initialization list
  W065    27  Base class virtual destructor is not public
  W075   364  Virtual function is public
  W076     4  Virtual function is overloaded
  W077   106  Virtual function has no overrides
  W082    79  Adjacent arguments have the same type
  W088    33  Argument could be const
  W090    71  Function could be const
  W092   143  Function could be free
  W097     7  Line indentation is not a multiple of the standard value
  W099   283  Line contains adjacent spaces
  W102     4  Line length exceeds the standard maximum
  W103     2  Function not sorted in standard order
  W106   469  Function does not invoke Debug::ft
  W107    17  Function does not invoke Debug::ft as first statement
  W110    30  Override of Base.Display not found
  W111    27  Override of Object.Patch not found
  W112   156  Function could be defaulted
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE
W004 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(502):    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1076):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(573):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(605):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(443):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1249):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(337):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1250):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1443):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(160):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(460):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(567):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(988):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1065):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(77):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(77):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(220):    if(addr != nullptr) return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(98):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(391):          auto src = (ptr_t) this;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(227):    auto seg = (Segment*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(284):    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(335):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(386):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(239):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(262):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(314):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(351):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(715):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(785):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(810):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(843):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(847):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(890):    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(920):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(142):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(162):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(144):       (DWORD*) &nid);                  // updates thread's identifier
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(345):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(163):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(126):    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(236):    auto addr = (TraceRecord*) &buff_[end_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(431):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(449):             record = (TraceRecord*) buff_;  // case (b)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(453):          record = (TraceRecord*) next;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(462):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(488):       auto record = (TraceRecord*) &buff_[start_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(595):    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(58):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(79):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(72):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(91):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(131):       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(58):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(114):       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(100):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(209):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(216):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(226):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(233):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(44):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(88):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(149):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(257):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(313):       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(323):       (char*) &val, &valsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(48):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(77):       size, 0, (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(115):       size, 0, (sockaddr*) &peer, peersize);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(752):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(775):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(177):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(286):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(444):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(50):    virtual ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(305):    virtual ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(344):    virtual ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(139):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(171):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(188):       *stream << setw(12) << LineType(t)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(200):          *stream << setw(6) << WarningCode(Warning(w)) << setw(6)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(201):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(260):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(312):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(363):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(369):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(374):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(677):    *cli.obuf << ": " << Warning(log.warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(148):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1178):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(63):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(106):          return RestartLevel(errval_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(485):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(693):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1090):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2509):       auto heap = Memory::Heap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(207):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(88):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(362):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(545):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(157):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp(38):    size_(int16_t(size)),
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3180):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3211):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(87):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(69):    Faction GetFaction() const { return Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(92):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(79):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(701):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(143):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(148):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(462):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(59):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(75):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(54):    Id Stid() const { return Id(stid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(59):    virtual ipport_t Port() const override { return ipport_t(port_); }
W006 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(70):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(71):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(490):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(97):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(134):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(120):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(471):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(65):    auto fake = reinterpret_cast< const CodeDir* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(596):    auto fake = reinterpret_cast< const CodeFile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(281):    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(64):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(118):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(575):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(65):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(133):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(161):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(137):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(75):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(103):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(96):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(64):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(141):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(112):       reinterpret_cast< word* >(&pool->targSegments_), 0,
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(478):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(116):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(69):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(89):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(81):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(100):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(33):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1170):    auto fake = reinterpret_cast< const Thread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(80):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1326):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1846):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2407):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3641):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(276):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(69):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(239):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(284):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(76):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(114):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(88):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(97):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(86):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(577):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(746):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(867):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(955):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(573):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(886):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(202):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(210):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(187):          reinterpret_cast< word* >(&poolSize_), 1,
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(227):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(124):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(102):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(92):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(77):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(64):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(283):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(77):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(190):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(191):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(119):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(142):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(154):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(67):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(512):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(265):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(69):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(96):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(97):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1465):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(85):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(206):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(88):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(99):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(92):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(139):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(151):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(172):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(182):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(68):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(114):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(165):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(51):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(53):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(486):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(516):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(828):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(862):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(992):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1390):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1395):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(405):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(920):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(463):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(472):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(504):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(505):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(624):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(782):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(818):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1044):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1049):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(83):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(216):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(248):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(271):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(519):    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2366):    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2504):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(80):    auto curr = static_cast< CodeFileSet* >(Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(92):       curr = static_cast< CodeFileSet* >(prev->Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(112):    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(124):       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(440):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(472):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(473):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(584):       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(616):       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(651):    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(64):    auto that = static_cast< CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(100):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(137):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(151):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(211):          static_cast< const Function* >(item)->IsInline())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(223):          auto spec = static_cast< ClassInst* >(usingClass)->GetSpec();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1030):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1033):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1050):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1972):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1998):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(840):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(872):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(885):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1418):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1426):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1567):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1611):    auto ref = static_cast< CxxNamed* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1776):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(395):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(419):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(473):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(484):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(489):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(501):             item = static_cast< CxxScoped* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(778):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1986):          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1996):       ref = static_cast< Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(655):       auto cls = static_cast<const Class*>(scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1308):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1376):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1662):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1708):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2609):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3030):             static_cast< ClassData* >(data)->SetInit(m->get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3241):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4489):                auto item = static_cast< CxxNamed* >(args.front().item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4572):       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4573):       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(92):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(264):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(298):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1431):          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1581):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1594):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1633):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1638):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1913):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(384):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(423):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(431):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(439):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(445):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(420):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(446):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(498):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(531):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(560):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(601):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(624):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(720):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1149):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1154):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1179):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1567):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1586):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1682):       (arg.item->Root())->FindDtor(Context::Scope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1730):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1750):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1771):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1795):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1978):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1980):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2318):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2357):       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2380):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(216):    auto arg = static_cast< const Argument* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(217):    auto defn = static_cast< const Function* >(arg->GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(342):    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1854):    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2351):       ns = static_cast< const Namespace* >(ref)->OuterSpace();
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2886):    if(!static_cast< const Function* >(log.item)->IsImplemented())
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2967):    auto func = static_cast< const Function* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1810):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1814):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp(95):       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(365):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(618):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(691):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(730):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(828):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(829):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(989):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1264):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1371):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1396):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1424):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1629):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1730):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1780):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1786):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2056):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2062):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2224):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2266):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2704):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2750):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2898):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2924):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3007):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3043):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3102):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3347):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3731):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(253):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(94):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(118):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(85):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(218):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(91):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(125):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(189):                   auto last = static_cast< const FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(266):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(305):          curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(373):       curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(426):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(491):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(109):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(66):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(62):       (static_cast< CfgFileTimeParm* >(reg->FindParm("StatsFileName")));
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(198):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(68):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(310):    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(173):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(183):    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(283):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(446):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(65):    auto thread = static_cast< TcpIoThread* >(GetThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(70):       thread = static_cast< TcpIoThread* >(CreateIoThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(76):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(106):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(108):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(112):       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(243):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(57):    auto svc = static_cast< const UdpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(443):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(592):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(653):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(760):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(786):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(880):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(968):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(763):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(882):             (m)->FindParm(Parameter::Timeout);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(182):    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(535):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(82):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(78):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(151):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(215):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(272):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(434):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(48):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(48):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(124):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(138):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(819):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(906):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1118):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1350):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1563):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(108):    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(59):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(71):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(223):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(284):    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(301):       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(355):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(857):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(860):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(887):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(457):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(461):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(462):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(513):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(519):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(521):             (sapEvent)->CurrInitiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(775):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(879):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(883):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(946):                (initEvent)->GetModifier();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(986):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(97):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(73):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(61):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(64):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(101):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(117):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(119):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(139):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(154):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(155):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(170):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(172):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(178):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(199):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(226):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(256):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(273):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(297):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(312):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(326):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(341):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(356):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(358):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(377):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(398):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(413):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(429):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(446):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(447):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(464):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(478):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(480):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(510):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(525):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(526):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(541):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(542):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(563):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(582):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(597):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(599):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(624):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(653):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(668):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(684):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(700):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(702):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(723):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(738):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(754):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(756):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(773):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(799):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(818):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(833):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(852):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(867):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(883):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(885):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(894):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(921):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(922):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(960):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(976):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(992):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(993):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1008):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1009):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1043):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1064):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(73):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(78):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(86):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(90):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(130):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(112):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(193):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(195):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(199):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(200):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(263):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(94):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(115):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(105):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(177):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(212):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(206):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(266):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(289):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(305):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(60):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(60):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(60):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(293):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(298):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(300):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(321):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(322):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(374):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(401):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(483):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(485):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(498):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(520):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(534):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(540):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(546):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(580):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(583):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(638):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(645):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(660):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(668):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(686):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(447):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1166):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1203):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1273):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1300):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1314):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1380):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1424):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1973):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1974):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2004):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2019):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2021):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2028):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2125):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2127):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2128):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2129):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2224):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2238):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2252):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2266):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2282):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2297):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2311):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2326):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2341):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2342):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2357):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2358):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2372):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2394):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(290):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(617):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(622):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(623):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(640):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(648):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(686):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(716):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(811):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(813):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(908):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(930):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(961):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(963):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(969):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(994):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1019):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1020):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1040):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1041):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1045):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1064):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1066):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1070):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1110):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1111):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1113):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1159):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(131):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(133):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(85):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(175):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(181):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(195):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(246):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(249):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(361):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(414):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(747):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(750):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(823):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(891):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(998):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(999):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1021):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1052):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1053):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1076):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(55):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(56):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(58):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(108):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(110):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(174):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(184):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(208):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(226):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(246):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(295):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(314):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(359):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(361):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(412):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(430):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(448):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(466):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(484):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(517):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(518):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(548):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(567):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(568):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(598):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(618):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(619):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(83):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(255):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(299):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(329):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(195):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(438):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(465):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(467):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(472):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(544):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(547):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(607):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(627):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(664):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(669):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(671):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(692):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(693):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(151):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(159):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(712):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(729):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(741):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(758):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(779):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(786):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(947):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(983):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(140):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(69):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(509):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(526):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(580):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(858):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(986):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(987):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1025):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1034):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1045):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1063):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1082):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1083):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(573):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(605):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1247):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1370):    return static_cast< CxxScope* >(const_cast< Class* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1968):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(144):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(443):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(479):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(877):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(974):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1392):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2573):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(792):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1249):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2130):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3205):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3384):       (const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3638):    func->SetTemplate(const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(337):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1157):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1250):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1443):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1823):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1842):    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1854):    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(160):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(460):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(567):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(988):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1065):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(308):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(291):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1814):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(98):       objects[count++] = const_cast< Base* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(843):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(351):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(698):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W009 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(392):          auto dst = src + sizeof(FunctionTrace);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2682):    ptrdiff_t stacksize = &local - priv_->stackBase_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(431):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(462):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(197):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(143):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(143):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(244):       bytes = buff_ + hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(270):    bytes += hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(103):    byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(177):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(285):    auto fence = layout->bytes + layout->header.length;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(29): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(26): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(97): #include "AnModule.h"
W017 Add #include directive
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(1): "Debug.h"
W018 Remove #include directive
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(29): #include <vector>
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.cpp(25): #include <sstream>
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(23): #include "SysMemory.h"
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(28): #include "Debug.h"
W019 Header relies on using statement via #include
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(1): 
W020 Using statement in header
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(35): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(50): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(51): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(52): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(32): using NodeBase::fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(33): using NodeBase::Flags;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(38): using std::string;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(39): using NodeBase::word;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace SessionTools;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(47): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(48): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(49): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(30): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(46): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(47): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(34): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(34): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(30): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(28): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(30): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeTools;
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace SessionBase;
W022 Add using statement
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1): std::string
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeMsgEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ForceTransitionEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeTools
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(1): namespace NodeBase
W026 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(330/3):       const CxxNamed* item, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(628/1):    static void Shutdown(NodeBase::RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(632/1):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(83/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1185/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(52/2): void SE_Handler(uint32_t errval, void* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(353/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(361/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(96/5):       byte_t*& dest, size_t& rcvd, SysTcpSocket* socket) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(104/1):       (IpBuffer& buff, byte_t* dest, const byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(132/1):       (IpBuffer& buff, byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(132/3):       (IpBuffer& buff, byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(137/1):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(87/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122/1):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(174/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(300/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(306/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(312/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(60/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(434/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(157/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(189): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(41): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(54):    class SigAlrm : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(68):    class SigBus : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(96):    class SigQuit : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(110):    class SigSys : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(124):    class SigVtAlrm : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(39): class TextTlvMessage : public TlvMessage
W028 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(60):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(216):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(300):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(385):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(168): extern const std::string SingleRule;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(567): extern const Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(568): extern const Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(572): extern const Flags Stats_Mask;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h(54): constexpr ModuleId FirstAppModuleId = 15;  // start of applicaton modules
  C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h(73): constexpr ObjectPoolId FirstAppObjPoolId = 14;    // start of application pools
  C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h(88): constexpr FlagId FirstAppDebugFlag = 8;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(68): extern fixed_string NotImplementedExpl;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(181):    static const id_t LastNbIndex     = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.h(85): constexpr FlagId FirstAppTracer = 10;  // start of application-specific tracers
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(187):    static const id_t LastNtIndex = SortIndex;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(80):    static const id_t LastNtIndex    = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(106):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(134):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(226):    static const Ind MaxInd         = UINT8_MAX;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(142):    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(57):    static const id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(86):    static const id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):    enum Location
W030 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(144):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(58):       LowPriority,       // preemptable threads
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       NotQueued,     // being built by a factory
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       ContextQ,      // has arrived at a context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(93):       PsmIncomingQ,  // has arrived at a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(94):       PsmOutgoingQ,  // has been sent by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(95):       PsmPendingQ    // being built by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(105):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(106):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(107):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(108):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(109):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(110):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(115):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(95):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(97):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(98):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(63):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(213):    Digit GetDigit(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(182):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(249):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(318):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(364):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(192):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(164):    static std::string Demangle(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(64):       bool operator!=(const WarningLog& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(127):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(270):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(490):    bool operator<(const SourceLoc& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(83):    std::string& Prefix(std::string&& scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(218):    CodeLocation PrevPos(const CodeLocation& curr);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(87):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(47):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(55):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(119):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(63):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(57):    word GetCurrValue() const { return *curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(89):    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(119):    bool SetVptr(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(126):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(133):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(168):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(112):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(72):    ticks_t TicksPerSec();
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(121):    ticks_t UsecsToTicks(usecs_t usecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(125):    const SysTime& TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(60):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(61):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(55):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(70):    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h(39):    size_t find(fn_name_arg func, const char* str);
  C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(79):    static bool Verify(MemoryType type, void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(103):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(95):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(107):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(121):    static void* operator new(size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(122):    static void* operator new[](size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(124):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(125):    static void operator delete(void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(126):    static void operator delete[](void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(135):    void MorphTo(Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h(57):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.h(46):    bool Minimize(bool minimize);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.h(50):    bool SetTitle(const std::string& title);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(87):    void GetDir(std::string& dirName);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(101):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(106):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(71):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(76):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(121):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(169):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(168):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(99):    static void operator delete(void* addr, void* where) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(82):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(50):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(115):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(51): uint64_t htonll(uint64_t hostllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(54): uint64_t ntohll(uint32_t netllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(134):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(186):    void SetIcMsg(IpBuffer* buff);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(190):    IpBuffer* IcMsg() const { return icMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(194):    IpBuffer* AcquireIcMsg();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(91):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(95):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(100):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(293):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(447):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(137): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(272):    size_t MsgCount(bool priority, bool standard) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(219):    void SetFaction(Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(49):    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(85):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(66):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(198):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(83):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(75):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(136):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(194):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(324):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(84):    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(104):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(213):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(217):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(358):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(369):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(85):    static void operator delete(void* addr, SbPoolUser user);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(125):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(129):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(134):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(79):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(58):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(60):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(64):    TextTlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(70):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(61):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(66):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(75):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(166):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(172):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(186):    TlvParmPtr AddBytes(const byte_t* src, size_t size, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(192):    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(196):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(248):    byte_t* FindBytes(size_t& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(255):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(270):    size_t ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(73):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(76):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(72):    virtual CliText* CreateText() const override;
W033 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(176): typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(177): typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
W037 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(314):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(881):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(60):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(210):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(216):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(300):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(67):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(167):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
W042 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(145):    typedef uint8_t DigitCount;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(175):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(182):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(201):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(225):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(236):    virtual void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(240):    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(412):    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1150):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(492):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(46):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(108):    bool IsTemplateHeader() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(214):    int CalcGroup(const Include& incl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(92):       static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(102):       static bool IsSortedByWarning
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(427):    Numeric(NumericType type, size_t width, bool sign) :
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(119):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(164):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(168):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(365):    Function* FindFuncByRole(FunctionRole role, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(369):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(845):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(280):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(269):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(926):    bool IsUnboundedArray() const { return array_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(998):    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1026):    size_t MinArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1031):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1089):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(150):    bool IsSubscopeOf(const std::string& fqSuper) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(189):    std::string NextOperator() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(67):    CodeDir* FindDir(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(88):    LibrarySet* FindVar(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(64):    bool IsReadOnly() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(172):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(52):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(131):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(169):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(188):    virtual Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(192):    virtual void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(67):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(81):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(60):    const char* Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(75):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(101):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    const char* HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1961):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(70):    typedef uint32_t InstanceId;  // identifies an object within a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(71):    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(182):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(56):    static bool NullifyObjectData() { return NullifyObjectData_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(66):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(57):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(61):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(77):    StatisticsGroup* GetGroup(id_t gid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(81):    void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(85):    static std::string StatsFileName() { return StatsFileName_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(80):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(131):    const char* strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(125):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(129):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(161):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(238):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(177):    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(90):    static void operator delete(void* addr) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(94):    static void* operator new(size_t size, void* where);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3425):    typedef id_t Test;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(89):    virtual bool ExitOnRestart(RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(116):    virtual size_t PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(100):    IpPort* Provision(ipport_t pid);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(56):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(60):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(111):    bool operator==(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(89):    word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(129):    word Send(const byte_t* data, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(181):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(216):    void Disconnect();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(221):    void Close();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(72):    word SendTo(const byte_t* data, size_t size, const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(77):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(86):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(58):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(59):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(132):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(71):    const char* FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(75):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(91):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(59):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(63):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(159):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(163):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(167):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(91):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(63):    static word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(71):    static ptrdiff_t CellDiff2();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(350):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(354):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(67):    typedef uint8_t Priority;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(250):    virtual bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(115):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(119):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(97):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(155):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(160):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(181):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(242):    typedef uint16_t Fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(260):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(264):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(275):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(279):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(159):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(417):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(45):    typedef uint8_t Id;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(57):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(264):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(340):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(124):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(116):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(79):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(87):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(91):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(733):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(166):    bool IsInternal() const { return loc_.IsInternal(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(231):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(240):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(314):    void Accessed() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(325):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(329):    std::string strLocation() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(334):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1020):    Cxx::ItemType GetUserType() const { return user_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1024):    TemplateRole GetTemplateRole() const { return role_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(297):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(301):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(305):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(51):    CodeFile* GetImplFile() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(86):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(91):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(102):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(158):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(178):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(204):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(253):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(48):    typedef uint8_t sel_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(69):    typedef id_t ClassId;         // identifies a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(48):    ticks_t GetTicks() const { return ticks_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(52):    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(56):    SysThreadId Nid() const { return nid_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(71):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(65):    IpPort* Port() const { return port_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(69):    IoThread* GetThread() const { return thread_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(98):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(269):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(149):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(258):    MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(71):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(96):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(75):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(84):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(130):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(63):    typedef ServicePortId PortId;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
W044 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(88): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(89): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(105): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(110): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(111): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(60): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(61): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W047 Data is init-only
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(80):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(171):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(381):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(60):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(475):    static bool Initialized;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(149):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(93):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(139):       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(228):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(301):       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
  C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp(307):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(187):       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1765):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(130):    static T* Instance_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(482):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(676):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(711):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(234):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(426):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(97):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(247):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(455):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(62):    static bool Registered;
W048 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(225):    LibraryVarSet* varSet_;
W050 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(305):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(278):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(971):    bool ptrDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(975):    bool refDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(178):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(182):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(89):    std::atomic_size_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(93):    std::atomic_size_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(97):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(101):    size_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(136):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(93):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(98):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(102):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(106):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(110):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(115):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(119):    ticks_t ticks0_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(123):    byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(492):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(496):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(531):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(539):    const EventHandler::Rc rc_;
W053 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(172):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(338):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(354):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(50):       Warning warning;       // type of warning
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(52):       size_t line;           // line where warning occurred
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(53):       size_t pos;            // position in FILE where warning occurred
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(55):       size_t offset;         // warning-specific; displayed if non-zero
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(56):       std::string info;      // warning-specific
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(57):       bool hide;             // set to stop warning from being displayed
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(302):    CxxToken* via_;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(220):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(77):    FlagId fid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(93):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(97):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(117):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(93):    Id id_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(106):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(140):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(114):    signal_t value_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(126):    uint8_t severity_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(130):    Flags attrs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(134):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(118):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(122):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(100):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(104):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(53):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(58):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(65):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static ticks_t PrevToCurrTicks;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(96):    DynString name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(108):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(105):    char abbr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(109):    bool safe_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(105):    size_t size_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(84):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1190):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1702):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(180):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(152):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(93):    PotsFeature::Id fid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(97):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(58):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(312):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(336):    Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(214):    Id eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(267):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(120):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(124):    ServiceId aid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(128):    TriggerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(136):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(134):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(160):    static word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(187):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(371):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(118):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(117):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(136):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(148):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(118):    Id tid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(185):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(147):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(161):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(165):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(194):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(198):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(145):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W054 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(51):       const CodeFile* file;  // file where warning occurred
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(54):       const CxxNamed* item;  // item associated with warning
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(143):    const char* default_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(147):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(69):    const char* chars_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(110):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(114):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(332):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(340):    const char* tag_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(111):    const char* text_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(118):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(122):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(220):    PotsProfile* profile_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(133):    const char* abbr_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(137):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(271):    const char* name_;
W056 Default constructor invoked: POD members not initialized
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(44):    LARGE_INTEGER frequency;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(75):       LARGE_INTEGER now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(81):       _timeb now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    _timeb timebuff;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(43):    tm timeofday;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(52):    in_addr result;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(48):    addrinfo hints;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(105):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(64):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(252):    WSAData wsaData;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(41):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(82):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(146):    sockaddr_in host;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(254):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(67):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(99):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(232):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(360):    MessageEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(194):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(317):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(337):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(398):    ParmIterator locpit;
W057 Default constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(180):    std::unique_ptr< pollfd[] > list(new pollfd[size]);
W058 Default copy constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(156):    arg_(arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(652):    tags_(that.tags_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2003):    attrs_(Numeric::Nil)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(375):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(415):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(208):       explicit CodeLocation(const Iter& i) : iter(i), pos(string::npos) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(209):       CodeLocation(const Iter& i, size_t p) : iter(i), pos(p) { }
W060 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(251):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(const char* help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(41):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(55):    LogsAction();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(67):    explicit LogsCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(83):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(96):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(112):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(126):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(142):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(155):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(185):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(201):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(213):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(229):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(247):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(134):    explicit Counter(const std::string& expl, size_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(52):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(44):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(56):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(98):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(110):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(124):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(139):    TestcaseAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(160):    explicit TestcaseCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(52):    IpBuffer(MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(56):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(41):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(56):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(69):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(95):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(108):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(123):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(136):    NwStatusCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(42):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(46):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(51):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(55):    SysIpL2Addr(const SysIpL2Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(40):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(45):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(51):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(64):    SysIpL3Addr(const SysIpL3Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(40):    PbSizesCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(269):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(273):    PotsMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(468):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(513):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(49):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(53):    TlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(61):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(66):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(40):    StSizesCommand() = default;
W062 Member not included in member initialization list
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(40):    FileWalker(const char* dirName, const char* fileSpec);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
W065 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(188):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(80):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(107):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(85):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(65):    virtual ~Exception() noexcept;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(146):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(209):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(105):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(280):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(92):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(134):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(180):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(108):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(76):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(189):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(126):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(203):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(93):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(116):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(173):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(136):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(150):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(179):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(169):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(109):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(91):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(99):    virtual ~Trigger();
W075 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1074):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1211):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(469):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(509):    virtual void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(128):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(135):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(276):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(284):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(289):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(306):    virtual Class* GetClassTemplate() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(321):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(434):    virtual bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(451):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(459):    virtual Class* DirectClass() const override { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(864):    virtual CxxScoped* FindItem(const std::string& name) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(115):    virtual void SetScope(CxxScope* scope) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(245):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(251):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(280):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(415):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(419):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(428):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(469):    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(65):    virtual bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(77):    virtual bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(93):    virtual bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(109):    virtual bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(129):    virtual bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(113):    virtual void SetLoc(CodeFile* file, size_t pos);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(126):    virtual void CopyContext(const CxxNamed* that);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(144):    virtual size_t GetRange(size_t& begin, size_t& end) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(149):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(157):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(162):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(172):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(177):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(185):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(191):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(197):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(202):    virtual void GetScopedNames(stringVector& names) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(209):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(215):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(220):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(224):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(231):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(235):    virtual NodeBase::id_t GetDeclFid() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(240):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(257):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(267):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(273):    virtual CxxNamed* DirectType() const { return Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(277):    virtual void FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(283):    virtual void SetReferent(CxxNamed* item, const SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(287):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(292):    virtual bool Instantiate() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(296):    virtual bool IsInTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(303):    virtual StackArg NameToArg(Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(309):    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(611):    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(823):    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(827):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1016):    virtual void SetUserType(Cxx::ItemType user);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1028):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1038):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1042):    virtual TypeTags* Tags() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1043):    virtual const TypeTags* Tags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1047):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1053):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1059):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1064):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1068):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1072):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1076):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1081):    virtual TypeTags GetAllTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1086):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1091):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1095):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1101):    virtual void SetPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1106):    virtual void RemoveRefs() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1111):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1115):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1119):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1130):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1136):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1141):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1145):    virtual bool ItemIsTemplateArg(const CxxScoped* item) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1151):    virtual void Instantiating() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(77):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(82):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(90):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(328):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(333):    virtual bool IsUnionMember() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1123):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1127):    virtual void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1131):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1251):    virtual void WasCalled() override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(68):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(77):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(95):    virtual void AddFiles(SetOfIds& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(164):    virtual void SetAccess(Cxx::Access access) override { access_ = access; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(168):    virtual void SetScope(CxxScope* scope) override { scope_ = scope; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(469):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(865):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1252):    virtual bool ResolveTypedef(Typedef* type, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(79):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(85):    virtual const std::string* Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(89):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(94):    virtual std::string TypeString(bool arg) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(99):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(103):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(107):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(111):    virtual bool IsConstPtr(size_t n) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(116):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(121):    virtual bool IsIndirect() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(125):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(130):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(135):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(140):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(145):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(151):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(156):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(160):    virtual void GetConvertibleTypes(StackArgVector& types) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(165):    virtual CxxNamed* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(171):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(176):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(182):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(186):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(191):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(203):    virtual bool WasWritten(const StackArg* arg, bool passed);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(208):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(213):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(219):    virtual void RecordUsage() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(224):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(228):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(232):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(236):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(241):    virtual void Print
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(247):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(72):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(78):    virtual NodeBase::word Check(std::ostream* stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(84):    virtual NodeBase::word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(90):    virtual NodeBase::word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(95):    virtual NodeBase::word Fix
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(101):    virtual NodeBase::word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(107):    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(115):    virtual NodeBase::word Parse
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(122):    virtual NodeBase::word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(129):    virtual NodeBase::word Show(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(135):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(141):    virtual NodeBase::word Trim(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Assign(LibrarySet* rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* Union(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(164):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(165):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(166):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(167):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(168):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(64):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(68):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(97):    virtual void GetSubtended(Base* objects[], size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(114):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(132):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(140):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(148):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(64):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(66):    virtual void EventOccurred(Event evt);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(71):    virtual Rc GetTextParmRc
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(66):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(71):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(135):    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(143):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(153):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(163):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(173):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(183):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(211):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(221):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(231):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(45):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(62):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(99):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(104):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(168):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(58):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(69):    virtual void DisplayStats(std::ostream& stream, id_t id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(46):    virtual void GetName(std::string& fileName) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(50):    virtual bool IsSubdir() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(54):    virtual bool AtEnd() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(59):    virtual bool Advance() = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(186):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(210):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(56):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(60):    virtual const char* Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(66):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(80):    virtual bool Display(std::ostream& stream, bool diff);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(95):    virtual IpBuffer* AllocBuff(const byte_t* source, size_t size,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(103):    virtual void NetworkToHost
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(122):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(131):    virtual byte_t* HostToNetwork
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(137):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(116):    virtual size_t PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(135):    virtual bool AddBytes(const byte_t* source, size_t size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(89):    virtual SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(124):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(54):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(58):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(63):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(67):    virtual Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(71):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(75):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(82):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(88):    virtual bool HasSharedSocket() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(96):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(79):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(90):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(116):    virtual AllocRc SetService(const IpService* service, bool shared);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(120):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(173):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(177):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(45):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(50):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(86):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(50):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(101):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(105):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(109):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(113):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(117):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(121):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(134):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(140):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(87):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(149):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(169):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(174):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(182):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(189):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(193):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(279):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(283):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(93):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(102):    virtual CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(131):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(144):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(112):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(59):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(63):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(96):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(100):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(109):    virtual SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(42):    virtual bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(111):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(69):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(75):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(102):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(109):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(123):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(129):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(86):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(41):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(75):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(181):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(196):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(200):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    virtual void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(137):    virtual EventHandler::Rc ApplyTreatment
W076 Virtual function is overloaded
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1042):    virtual TypeTags* Tags() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1043):    virtual const TypeTags* Tags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(107):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(111):    virtual bool IsConstPtr(size_t n) const { return false; }
W077 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(469):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(71):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(99):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(104):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(210):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(292):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(298):    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(103):    virtual void NetworkToHost
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(131):    virtual byte_t* HostToNetwork
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(137):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(135):    virtual bool AddBytes(const byte_t* source, size_t size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(124):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(71):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(75):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(173):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(177):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(87):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(169):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(174):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(182):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(189):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(193):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(283):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(337):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(350):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(354):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(362):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(240):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(295):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(300):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(306):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(312):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(79):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(86):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(75):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(181):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(196):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(200):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(255):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(260):    virtual void AddFence();
W082 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1215):    BcFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(346):    void LogCode(Warning warning, size_t line, size_t pos,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(295):    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(60):       WarningLog(Warning warning, const CodeFile* file,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(236):    TypeMatch CalcMatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(287):    TypeMatch MatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(545):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(761):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1130):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(328):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1326):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1175):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(41): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(102):    size_t CompareScopes
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(140):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(633):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(348):    word InsertNamespaceForward(const Iter& iter,
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(376):    static void DebugFtCode
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(197):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(383):    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(62):    NodeBase::word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(476):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(522):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(50):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(54):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(90):    CfgParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(92):    CfgFileTimeParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(100):    CliCommand(const char* comm, const char* help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(58):    CliCommandSet(const char* comm, const char* help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(93):    CliIncrement(const char* name, const char* help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(90):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(208):    void Report1
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(69):    static void SwLog(fn_name_arg func, debug64_t errval,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(56):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(100):    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(120): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(229):    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(234):    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(99):    PosixSignal(signal_t value, const char* name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(53):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(99):    bool FindFiles(const char* dirName,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(105):    static SysThread_t Create(const ThreadEntry entry,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(72):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(71):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(560):    void DisplaySummary
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(196):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(52):    IpBuffer(MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(48):    IpPortCfgParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(106):    static word Poll(SysTcpSocket* sockets[], size_t size, msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(103):    PotsFeature(PotsFeature::Id fid, bool deactivation,
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(133):    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(157):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(53):    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(88):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(169):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(129):    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(181):       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(174):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(55):    SsmFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(112):    template< typename T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(70):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(346):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(262/4):       (Iter iter, size_t pos, const string& id, size_t* range = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(323/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(412/1):    bool GetFuncSpecial(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(425/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(444/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(477/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(537/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(538/1):    bool GetChar(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(539/1):    bool GetStr(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(549/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(550/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(557/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(561/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(570/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(571/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(572/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(573/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(574/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(575/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(576/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(577/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(79/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(100/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(122/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(157/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(321/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(266/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(106/4):       const Thread* client, size_t stackSize, SysThreadId& nid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(291/1):    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150/1):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(107/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(200/1):    virtual void DeleteParm(TlvParmLayout& parm);
W090 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1166):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(122):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(123):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(124):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(125):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(126):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(127):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(128):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(129):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(130):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(131):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(132):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(137):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(138):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(139):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(140):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(141):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void EraseLocal(const CxxScoped* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(152):    void EraseLocals();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(176):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(72):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(124):    bool Replace(size_t index, const T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(93):    void AddMainArg(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(115):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(55):    bool Validate(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(141):    DelayRc Delay(msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(147):    bool Interrupt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(117):    bool Interrupt(const Flags& mask = Flags());
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(508):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(516):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(528):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h(112):    void AssociateIds(const Thread& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(116):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(77):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(82):    void Reset();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(161):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(148):    virtual IpPort* CreatePort(ipport_t pid) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(78):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(57):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(159):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(147):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(151):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(175):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(183):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(127):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(131):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(242):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(246):    void SetPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(379):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(191):    virtual Message* UnwrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(198):    virtual Message* WrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(117):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(188):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(238):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(249):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(79):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(86):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(264):    void UpdateTestPsm();
W092 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(168):    static const char* strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(87):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(100):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(116):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(120):    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(124):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(175):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(112):    static NodeBase::word Report
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(257):    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(116):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(92):       static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(97):       static bool IsSortedByLine
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(102):       static bool IsSortedByWarning
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(115):       static std::string WarningCode(Warning warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(56):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(186):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(588):    static size_t CreateCodeError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(298):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(571):    static void SetPos(const CxxLocation& loc);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(632):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(701):    static std::string Location();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1326):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1339):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(285):    static void ShrinkExpression(const ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(484):    static TypeSpecPtr CreateRef();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(622):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(335):    string DemangleInclude(string code) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(390):    static bool IsSorted2(const string& line1, const string& line2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(52):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(62):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(192):    static NodeBase::word Counted(std::string& result, const size_t* count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(197):    static NodeBase::word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(476):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(652):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(65):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(77):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(82):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(87):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(132):    static Rc Exhausted(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(63):    static void DescendTo(CliCookie& cookie, uint32_t index);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(323):    static Rc Mismatch(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(48):    static void Spool(const char* s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(76):    static void Assert(bool condition, debug32_t errval = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(81):    static void Progress(const std::string& s, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(85):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(129):    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(44):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(56):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(61):    static void Record(const std::string& s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(65):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(46):    static void Spool(ostringstreamPtr& log);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(50):    static std::string FileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(151):    static size_t Size();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(44):    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(48):    static size_t Words(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(52):    static void Copy(void* dest, const void* source, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(74):    static void* Realloc(void* addr, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(83):    static MemoryType Type(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(91):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(99):    static SysHeap* EnsureHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(103):    static SysHeap* AccessHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static const char* TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(87):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(758):    static word DisplayHelpFile(const CliThread& cli, const string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1961):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(248):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(80):    static void Initiate(reinit_t reason, debug32_t errval);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(52):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(57):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(87):    static void DisplayHeaps(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(37):    static void CreateNativeSignals();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(52):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(112):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(116):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(121):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(125):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(88):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(153):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(88):    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(105):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(219):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(223):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(227):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(438):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(90):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(196):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3447):    static void UseBadPointer();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3448):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(169):    static size_t BuffSize(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(67):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(83):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(134):    static bool StartLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(138):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(56):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(72):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(86):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(94):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(187):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(199):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(291):    static const char* strPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(185):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(149):    static const char* ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(243):    static std::string OutputId(const std::string& label, id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(60):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(86):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(222):    static size_t Pad(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(299):    inline static fn_name TlvMessage_FindType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(301):    inline static fn_name TlvMessage_AddType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(303):    inline static fn_name TlvMessage_CopyType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(305):    inline static fn_name TlvMessage_VerifyParm()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(73):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(454):    static EventHandler::Rc SendFacilityNack
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(133):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(47):    static StTestData* Access(CliThread& cli);
W097 Line indentation is not a multiple of the standard value
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(176):        tagpos = loc.iter->code.find(tag, tagpos + 1))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(252):        loc.pos != string::npos;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(253):        loc = FindWord(loc.iter, loc.pos + 1, *defnName, &range))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(890):        tag.pos != string::npos;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(891):        tag = FindWord(tag.iter, tag.pos + 1, CONST_STR))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1062):        arg = FindWord(arg.iter, arg.pos + 1, VOID_STR))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2384):           loc = FindWord(loc.iter, loc.pos, name))
W099 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(81):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(84):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(138):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(183):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(217):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(220):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(483):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(484):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(486):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(515):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(516):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(518):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(519):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(861):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(862):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(863):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(864):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(866):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(867):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(991):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(992):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(993):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(995):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(996):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(425):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(428):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(98):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(99):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(100):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(101):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(102):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(103):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(104):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(105):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(106):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(107):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(108):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(109):    CxxWord("DP",  "-",    "-",  T),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(110):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(111):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(112):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(113):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(114):    CxxWord("P",   "P",    "-",  T),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(115):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(116):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(117):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(118):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(119):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(120):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(121):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(122):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(123):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(124):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(125):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(126):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(127):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(128):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(129):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(130):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(131):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(132):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(133):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(155):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(156):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(157):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(158):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(159):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(160):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(161):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(162):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(163):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(164):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(165):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(167):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(168):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(169):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(170):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(171):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(172):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(173):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(174):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(175):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(176):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(177):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(178):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(179):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(180):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(181):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(182):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(183):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(184):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(185):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(186):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(187):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(188):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(189):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(190):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(191):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(192):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(193):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(194):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(195):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(196):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(197):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(198):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(199):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(200):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(201):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(202):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(203):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(204):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(205):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(206):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(207):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(208):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(209):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(210):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(211):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(212):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(213):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(214):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(215):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(216):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(217):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(218):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(219):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(220):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(102):    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(251):    inline static fn_name Array_ctor()     { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(252):    inline static fn_name Array_dtor()     { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(253):    inline static fn_name Array_Init()     { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(254):    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(256):    inline static fn_name Array_Erase()    { return "Array.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(257):    inline static fn_name Array_Replace()  { return "Array.Replace"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(258):    inline static fn_name Array_Extend()   { return "Array.Extend"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(174): typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(95):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(96):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(97):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(98):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(387):    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(394):    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(395):    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(396):    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(397):    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(398):    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(360):    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(361):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(362):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(369):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(626):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(634):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(635):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(126):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(39): fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(264):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(265):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(266):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(270):    AccumulatorPtr   totUsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(176):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(177):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(179):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(181):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(184):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(187):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(55):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(56):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(60):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(61):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(589):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(590):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(592):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(652):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(653):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(655):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(656):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(758):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(760):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(785):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(786):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(879):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(880):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(882):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(883):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(967):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(968):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(970):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(971):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(972):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(973):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(49):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(50):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(53):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(56):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(65):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(66):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(67):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(44):    LocalAddress      txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    LocalAddress      rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool              initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool              final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool              join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool              self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    bool              injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    bool              kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    Message::Route    route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    ProtocolId        protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(56):    SignalId          signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(57):    uint16_t          length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(139):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(246):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(250):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(314):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(315):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(318):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(359):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(360):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(361):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(363):    CauseInfo*    cci;
W102 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(300):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1152):       if((s.front() != '/') && (s.front() != QUOTE)) warnings.insert(Indentation);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1783):       (lpar.iter->code.find_first_not_of(WhitespaceChars, lpar.pos + 1) == rpar))
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(43): CliCommandSet::CliCommandSet(const char* comm, const char* help, uint32_t size) :
W103 Function not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp(67): ostream& operator<<(ostream& stream, TraceStatus status)
W106 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1380): void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(123): CliParm* CauseParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(109): CliParm* ProgressParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(379): CliText* CipIamSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(393): CliText* CipCpgSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(407): CliText* CipAnmSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(421): CliText* CipRelSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(461): CliParm* CipRouteParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(565): CliParm* CipCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(589): CliParm* CipCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(615): CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(641): CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(169): Digit DigitString::GetDigit(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1722): int8_t CodeFile::GetDepth(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1751): void CodeFile::GetLineCounts() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1767): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1922): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1930): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1938): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1947): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1955): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1963): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1971): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2000): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2008): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2016): void CodeFile::InsertUsing(Using* use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(343): bool IsUnusedItemWarning(Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(104): word CodeInfo::FindWarning(const WarningLog& log)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(298): bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(316): bool CodeInfo::IsSortedByLine(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(336): bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(376): void Class::AddItem(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1244): Class* Class::GetClassTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1276): Cxx::Access Class::GetCurrAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1352): size_t Class::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1367): CxxScope* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1738): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2469): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(48): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(151): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(822): CxxScope* MacroName::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(235): const Parser* Context::GetParser()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(297): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(304): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(382): void Context::SetPos(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(414): void Context::SetPos(const CxxLocation& loc)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(504): void Context::Trace(CxxTrace::Action act)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(512): void Context::Trace(CxxTrace::Action act, const StackArg& arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(520): void Context::Trace(CxxTrace::Action act, word err, const string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(528): void Context::Trace(CxxTrace::Action act, const CodeFile& file)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(536): void Context::Trace(CxxTrace::Action act, const CxxToken* token)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(735): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(922): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(953): bool SourceLoc::operator<(const SourceLoc& that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(72): size_t CxxLocation::GetPos() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(79): void CxxLocation::SetLoc(CodeFile* file, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(201): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(210): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(219): id_t CxxNamed::GetDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(228): size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(237): void CxxNamed::GetScopedNames(stringVector& names) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(244): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(253): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(608): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(949): TypeTags DataSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(972): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1101): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1833): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1942): TypeName* QualName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2022): TypeName* QualName::Last() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2269): size_t QualName::Size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2546): CxxNamed* TypeName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2570): TypeName* TypeName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2738): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3237): int TypeTags::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3245): bool TypeTags::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(113): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(232): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(240): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(280): bool Block::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(826): id_t CxxScope::GetDistinctDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1184): CodeFile* Data::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1191): const Data* Data::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1200): CodeFile* Data::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1247): TypeName* Data::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1404): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1517): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3279): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3316): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3327): CodeFile* Function::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3334): const Function* Function::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3343): CodeFile* Function::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3352): size_t Function::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3368): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3380): CxxScope* Function::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3392): TemplateType Function::GetTemplateType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3872): bool Function::IsImplemented() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3880): bool Function::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4594): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4608): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4615): void FuncSpec::Check() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4622): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4644): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4663): void FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4671): TypeTags FuncSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4678): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4685): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4692): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4699): void FuncSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4707): bool FuncSpec::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4714): bool FuncSpec::ItemIsTemplateArg(const CxxScoped* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4722): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4730): TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4740): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4762): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4769): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4776): void FuncSpec::RemoveRefs()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4783): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4790): void FuncSpec::SetPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4797): void FuncSpec::SetReferent(CxxNamed* item, const SymbolView* view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4812): const TypeTags* FuncSpec::Tags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4819): TypeTags* FuncSpec::Tags()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(296): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(397): void CxxScoped::AddFiles(SetOfIds& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(532): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(541): size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(552): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(561): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(570): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(579): bool CxxScoped::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(588): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(596): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(609): bool CxxScoped::IsIndirect() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1007): TypeSpec* Enum::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1182): void Enumerator::RecordAccess(Cxx::Access access) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1246): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1439): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1705): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1714): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1723): CxxNamed* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2206): TypeName* Typedef::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(284): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(364): bool Do::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(574): bool For::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(680): bool If::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(1082): bool While::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(91): template< typename T > void Erase(const CxxScoped* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(189): template< typename T > void ListSymbols(const string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(226): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(233): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(240): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(247): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(254): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(261): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(268): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(297): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(304): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(311): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(318): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(666): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(673): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(680): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(687): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(694): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(701): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(708): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(742): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(749): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(756): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(763): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(262): bool CxxToken::IsPointer(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(353): void CxxUsageSets::AddBase(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(361): void CxxUsageSets::AddDirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(369): void CxxUsageSets::AddForward(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(380): void CxxUsageSets::AddIndirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(388): void CxxUsageSets::AddUser(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(734): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(795): Numeric IntLiteral::BaseNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(938): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(963): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(979): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2693): TypeSpec* StrLiteral::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2700): CxxNamed* StrLiteral::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(80): bool IsBlank(char c)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(87): bool IsWordChar(char c)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(298): word Editor::Changed()
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(306): word Editor::Changed(const Iter& iter, string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1084): Editor::CodeLocation Editor::Find(Iter iter, const string& str, size_t off)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1099): Editor::CodeLocation Editor::FindFirstOf
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1115): Editor::Iter Editor::FindLine(size_t line)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1127): Editor::Iter Editor::FindLine(size_t line, string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1642): LineType Editor::GetLineType(const Iter& iter) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2198): bool Editor::IsSorted1(const SourceLine& line1, const SourceLine& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2205): bool Editor::IsSorted2(const string& line1, const string& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2267): Editor::CodeLocation Editor::NextPos(const CodeLocation& curr)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2287): Editor::CodeLocation Editor::PrevPos(const CodeLocation& curr)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2328): void Editor::PushBack(const string& code)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2675): Editor::CodeLocation Editor::Rfind(Iter iter, const string& str, size_t off)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(134): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(142): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(57): IndentRule ClassifyIndent(string& id)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(705): void Lexer::GetDepth(size_t line, int8_t& depth, bool& cont) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(873): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(897): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(970): bool Lexer::GetNthLine(size_t n, string& s) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1866): void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(103): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(76): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(83): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(90): LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(108): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(155): LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(162): LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(169): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(188): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(195): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(202): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(231): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(250): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(257): LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(264): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(271): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(298): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(305): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(312): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(321): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(347): LibrarySet* LibrarySet::OpError() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(463): LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(470): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(477): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(107): CliParm* MediaParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(259): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(89): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(79): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(128): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(157): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(52): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(70): bool CfgFlagParm::GetCurrValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(72): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(275): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(68): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(79): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(136): uint32_t CliCookie::Index(uint32_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(363): CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(47): void Debug::Assert(bool condition, debug32_t errval)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(140): void Debug::Reset()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(40): int FunctionName::compare(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(47): size_t FunctionName::find(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(55): size_t FunctionName::rfind(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::ImmediateTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(57): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(68): bool InitFlags::TraceWork()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(154): size_t SegmentHeader::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(171): SysHeap* Memory::AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(189): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(257): SysHeap* Memory::EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(311): const SysHeap* Memory::Heap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(405): size_t Memory::Words(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(152): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(74): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(114): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(172): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(45): char BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(71): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(82): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(109): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(278): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(444): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(699): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(744): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(751): bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(763): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(770): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(777): ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(796): Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(869): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(878): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(887): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(289): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(48): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(124): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(129): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(134): Flags PS_Exit()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(139): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(144): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(149): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(154): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(159): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(164): Flags PS_NoRecover()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(57): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(90): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(102): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(40): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(37): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(49): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(125): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(117): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(258): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(334): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(147): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(32): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(39): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(99): bool FileWalker::AtEnd() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(106): void FileWalker::GetName(string& fileName) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(115): bool FileWalker::IsSubdir() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(48): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(269): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(296): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(121): DWORD64 StackInfo::GetFrame(fn_depth depth)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(137): fn_depth StackInfo::GetFrames()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(145): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(154): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(265): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(71): ticks_t SysTickTimer::TicksNow() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(181): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(191): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(207): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(215): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(245): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(265): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(30): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(29): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(36): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(43): void ThisThread::MakePreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(50): void ThisThread::MakeUnpreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(57): void ThisThread::MemProtect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(64): void ThisThread::MemUnprotect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(71): DelayRc ThisThread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(78): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(85): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(92): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(99): TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(106): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(438): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1151): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1532): main_t Thread::EnterThread(void* arg)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1736): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1833): bool Thread::HasExited() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1896): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1903): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1970): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2095): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2123): DelayRc Thread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2163): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2522): bool Thread::RunningLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2673): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2945): TraceRc Thread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2981): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3044): void Thread::Trace(Thread* thr, fn_name_arg func, TraceRecordId rid, word info)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3060): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3095): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(287): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(385): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(493): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(209): ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(218): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(117): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(112): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(140): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(154): void* TraceBuffer::AddRecord(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(354): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(385): bool TraceBuffer::IsLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(394): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(414): void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(475): void TraceBuffer::PurgeRecords(size_t end)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(543): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(746): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(97): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(51): int FunctionStats::Compare(const FunctionStats& that) const
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(69): void FunctionStats::IncrCalls(usecs_t net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1305): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1339): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1368): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1825): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1859): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1888): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2389): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2420): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(154): TestDatabase::State TestDatabase::GetState(const string& testcase)
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(205): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(205): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(283): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(78): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(135): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(143): bool SysSocket::Trace(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(154): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(35): uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(37): uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(39): uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(41): uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(43): uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(45): uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(466): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(97): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(82): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(79): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(97): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(79): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(513): void PotsCircuit::Trace(const SignalEntry& entry)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(76): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(69): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(84): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(113): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(355): CliText* PotsAlertingSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(369): CliText* PotsDigitsSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(383): CliText* PotsFacilitySignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(397): CliText* PotsFlashSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(411): CliText* PotsLockoutSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(425): CliText* PotsOffhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(439): CliText* PotsOnhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(453): CliText* PotsProgressSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(467): CliText* PotsReleaseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(481): CliText* PotsSuperviseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(524): CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(566): CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(736): CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(857): CliParm* PotsRingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(945): CliParm* PotsScanParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(74): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(85): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(96): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(91): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(87): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(329): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(953): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(963): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(138): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(219): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(226): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(151): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(89): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(700): void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(804): size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(812): msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(820): size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(178): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(113): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(244): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(331): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(366): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(422): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(194): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(135): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(148): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(161): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(173): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(185): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(198): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(79): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(406): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(371): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(79): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(312): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(125): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(157): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(237): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(245): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(60): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(385): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(119): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(201): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(76): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(88): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(56): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(106):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(151):    Debug::ft(CinThread_GetLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(74):    Debug::ft(Debug_GenerateSwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(45):    Debug::ft(Exception_ctor1);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(38):    Debug::ft(MutexGuard_ctor);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(51):       Debug::ft(MutexGuard_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ft(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp(107):    Debug::ft(SysMutex_Acquire);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(57):    Debug::ft(NodeBase_SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1656):    Debug::ft(Thread_ExitIfSafe);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2467):    Debug::ft(Thread_ResumeLocked);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2645):    Debug::ft(Thread_SignalHandler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2717):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3229):       Debug::ft(Thread_Unlock);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3521):       Debug::ft(RecoveryTestThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3603):       Debug::ft(RecoveryTestThread_LoopForever);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(695):    Debug::ft(Context_ProcessWork);
W110 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(43): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(224): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(337): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(85): class CxxSymbols: public NodeBase::Base
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(44): class Interpreter : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(87): class CfgFileTimeParm : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(75): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(88): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(258): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(51): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(62): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1052): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2811): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h(41): class TestDatabase : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(49): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(47): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(42): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(43): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(58): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(72): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(194): class TimerPool : public ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(115): class SbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(52): class PotsCallIpService : public UdpIpService
W111 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(38): class StatusCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(59): class LogsCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(87): class SetCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(116): class IncludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(146): class ExcludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(175): class QueryCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(205): class SaveCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(233): class ClearCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(36): class PermanentHeap : public SysHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(740): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(45): class NwClearCommand : public ClearCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(73): class NwExcludeCommand : public ExcludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(99): class NwIncludeCommand : public IncludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(118): class NwQueryCommand : public QueryCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(133): class NwStatusCommand : public StatusCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(42): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(50): class EventHandler : public Protected
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(40): class SbAnalyzeMessage : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(54): class SbAnalyzeSap : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(68): class SbAnalyzeSnp : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(82): class SbForceTransition : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(96): class SbInitiationReq : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
W112 Function could be defaulted
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(133):    virtual ~BcNull();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(140):    virtual ~BcAuthorizingOrigination();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(147):    virtual ~BcCollectingInformation();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(154):    virtual ~BcAnalyzingInformation();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(161):    virtual ~BcSelectingRoute();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(168):    virtual ~BcAuthorizingCallSetup();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(175):    virtual ~BcSendingCall();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(182):    virtual ~BcOrigAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(189):    virtual ~BcAuthorizingTermination();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(196):    virtual ~BcSelectingFacility();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(203):    virtual ~BcPresentingCall();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(210):    virtual ~BcTermAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(217):    virtual ~BcActive();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(224):    virtual ~BcLocalSuspending();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(231):    virtual ~BcRemoteSuspending();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(238):    virtual ~BcDisconnecting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(245):    virtual ~BcException();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(883):    BcEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(884):    virtual ~BcEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1233):    BcNuAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1234):    ~BcNuAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1243):    BcScAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1244):    ~BcScAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1253):    BcOaAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1254):    ~BcOaAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1263):    BcPcAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1264):    ~BcPcAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1273):    BcAcAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1274):    ~BcAcAnalyzeRemoteMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(88):    virtual ~ProxyBcNull();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(95):    virtual ~ProxyBcAuthorizingOrigination();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(102):    virtual ~ProxyBcCollectingInformation();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(109):    virtual ~ProxyBcAnalyzingInformation();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(116):    virtual ~ProxyBcSelectingRoute();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(123):    virtual ~ProxyBcAuthorizingCallSetup();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(130):    virtual ~ProxyBcSendingCall();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(137):    virtual ~ProxyBcOrigAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(144):    virtual ~ProxyBcAuthorizingTermination();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(151):    virtual ~ProxyBcSelectingFacility();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(158):    virtual ~ProxyBcPresentingCall();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(165):    virtual ~ProxyBcTermAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(172):    virtual ~ProxyBcActive();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(179):    virtual ~ProxyBcLocalSuspending();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(186):    virtual ~ProxyBcRemoteSuspending();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(193):    virtual ~ProxyBcDisconnecting();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(200):    virtual ~ProxyBcException();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(302):    ProxyBcEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    virtual ~ProxyBcEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(321):    ProxyBcAnalyzeProxyMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(322):    ~ProxyBcAnalyzeProxyMessage();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(331):    ProxyBcProgressHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(332):    ~ProxyBcProgressHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(341):    ProxyBcAnswerHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(342):    ~ProxyBcAnswerHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(351):    ProxyBcReleaseHandler();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(352):    ~ProxyBcReleaseHandler();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(99):    ~ToneSilent();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(108):    ~ToneDial();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(117):    ~ToneStutteredDial();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(126):    ~ToneConfirmation();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(135):    ~ToneRingback();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(144):    ~ToneBusy();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(153):    ~ToneCallWaiting();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(162):    ~ToneReorder();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(171):    ~ToneReceiverOffHook();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(180):    ~ToneHeld();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(64):    virtual ~Base() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h(43):    virtual ~Dynamic() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(42):    virtual ~FunctionTrace() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h(42):    virtual ~Immutable() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(42):    virtual ~StatusCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(56):    virtual ~LogsAction() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(68):    virtual ~LogsCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(84):    virtual ~SetWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(97):    virtual ~SetCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(113):    virtual ~IncludeWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(127):    virtual ~IncludeCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(143):    virtual ~ExcludeWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(156):    virtual ~ExcludeCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(172):    virtual ~QueryWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(186):    virtual ~QueryCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(202):    virtual ~SaveWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(214):    virtual ~SaveCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(230):    virtual ~ClearWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(248):    virtual ~ClearCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(44):    virtual ~Object() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h(44):    virtual ~Permanent() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.h(49):    virtual ~Pooled() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h(43):    virtual ~Protected() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(41):    virtual ~FileList() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(63):    FileList() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h(42):    virtual ~Temporary() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(49):    ~FunctionStats();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(114):    virtual ~PotsSignal();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(142):    virtual ~PotsParameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(42):    virtual ~SbClearWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(62):    virtual ~SbClearCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(75):    virtual ~SbExcludeWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(91):    virtual ~SbExcludeCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(104):    virtual ~SbIncludeWhatParm() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(120):    virtual ~SbIncludeCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(135):    virtual ~SbQueryCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(147):    SbStatusCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(148):    virtual ~SbStatusCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(58):    virtual ~TlvIntParameter() { }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(111):    PotsCfxEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(112):    virtual ~PotsCfxEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(236):    PotsCwmEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(237):    virtual ~PotsCwmEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(159):    PotsCwtEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(160):    virtual ~PotsCwtEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(83):    PotsMuxEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(84):    virtual ~PotsMuxEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(59):    ~PotsProxyNull();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(67):    ~PotsProxyAuthorizingOrigination();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(75):    ~PotsProxyCollectingInformation();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(83):    ~PotsProxyAnalyzingInformation();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(91):    ~PotsProxySelectingRoute();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(99):    ~PotsProxyAuthorizingCallSetup();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(107):    ~PotsProxySendingCall();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(115):    ~PotsProxyOrigAlerting();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(123):    ~PotsProxyAuthorizingTermination();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(131):    ~PotsProxySelectingFacility();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(139):    ~PotsProxyPresentingCall();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(147):    ~PotsProxyTermAlerting();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(155):    ~PotsProxyActive();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(163):    ~PotsProxyLocalSuspending();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(171):    ~PotsProxyRemoteSuspending();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(179):    ~PotsProxyException();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(204):    ~PotsBcNull();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(212):    ~PotsBcAuthorizingOrigination();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(220):    ~PotsBcCollectingInformation();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(228):    ~PotsBcAnalyzingInformation();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(236):    ~PotsBcSelectingRoute();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(244):    ~PotsBcAuthorizingCallSetup();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(252):    ~PotsBcSendingCall();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(260):    ~PotsBcOrigAlerting();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(268):    ~PotsBcAuthorizingTermination();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(276):    ~PotsBcSelectingFacility();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(284):    ~PotsBcPresentingCall();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(292):    ~PotsBcTermAlerting();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(300):    ~PotsBcActive();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(308):    ~PotsBcLocalSuspending();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(316):    ~PotsBcRemoteSuspending();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(324):    ~PotsBcException();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(341):    ~PotsAuthorizeOriginationSap();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(354):    ~PotsCollectInformationSap();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(368):    ~PotsAuthorizeTerminationSap();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(381):    ~PotsLocalBusySap();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(391):    ~PotsLocalAlertingSnp();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(40):    virtual ~PotsSusInitiator() { }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(116):    PotsWmlEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(117):    virtual ~PotsWmlEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(132):    TestEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(133):    virtual ~TestEventHandler();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(82):    virtual ~TestSignal();
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h
  W005 Functional cast
    50:    virtual ipport_t Port() const override { return ipport_t(port_); }
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    34: using namespace SessionBase;
    35: using namespace MediaBase;
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W032 Unused function
    63:    virtual CliText* CreateText() const override;
  W110 Override of Base.Display not found
    43: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    139:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    151:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    172:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    182:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    70:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    71:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    68:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    502:    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
    1076:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  W006 reinterpret_cast
    490:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W053 Data could be const
    172:    Q1Link link_;
  W092 Function could be free
    168:    static const char* strState(State state);
  W106 Function does not invoke Debug::ft
    1380: void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  W110 Override of Base.Display not found
    224: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace CallBase;
  W092 Function could be free
    87:    static void DisplayStateCounts
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    114:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    165:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    34: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    213:    Digit GetDigit(DigitCount i) const;
  W042 Member could be private
    145:    typedef uint8_t DigitCount;
    175:    static bool IsValidDigit(Digit d)
    182:    Rc AddDigit(Digit d);
    201:    DigitCount Size() const;
    225:    bool operator==(const DigitString& that) const;
  W043 Member could be protected
    124:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W092 Function could be free
    100:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    116:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    120:    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
    124:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    175:    static bool IsValidDigit(Digit d)
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    134:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    123: CliParm* CauseParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    51:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    53:    auto& bcssm = static_cast< BcSsm& >(ssm);
    79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    81:    auto          sid = msg->GetSignal();
    82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    84:    CauseInfo*    cci;
    136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    138:    auto       sid = msg->GetSignal();
    139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    183:    auto       sid = msg->GetSignal();
    184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    217:    auto          sid = msg->GetSignal();
    218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    220:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    120:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    109: CliParm* ProgressParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp
  W006 reinterpret_cast
    471:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    486:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    516:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    828:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    862:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    992:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1390:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1395:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    483:    id_t        idx;
    484:    word        fid, rid;
    486:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    515:    TestRc       rc;
    516:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    518:    id_t         idx;
    519:    word         fid, rid;
    861:    auto          state = GetState();
    862:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    863:    auto          sig = tmsg.GetSignal();
    864:    TimeoutInfo*  toi = nullptr;
    866:    auto          err = true;
    867:    debug64_t     error;
    991:    auto          state = GetState();
    992:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    993:    auto          sig = msg.GetSignal();
    995:    auto          err = true;
    996:    debug64_t     error;
  W106 Function does not invoke Debug::ft
    379: CliText* CipIamSignal::CreateText() const
    393: CliText* CipCpgSignal::CreateText() const
    407: CliText* CipAnmSignal::CreateText() const
    421: CliText* CipRelSignal::CreateText() const
    461: CliParm* CipRouteParameter::CreateCliParm(Usage use) const
    565: CliParm* CipCallingParameter::CreateCliParm(Usage use) const
    589: CliParm* CipCalledParameter::CreateCliParm(Usage use) const
    615: CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
    641: CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h
  W005 Functional cast
    305:    virtual ipport_t Port() const override { return ipport_t(port_); }
    344:    virtual ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    50: using namespace NodeBase;
    51: using namespace NetworkBase;
    52: using namespace SessionBase;
    53: using namespace MediaBase;
  W027 Unused class
    298: class CipUdpService : public UdpIpService
  W032 Unused function
    182:    MediaInfo* AddMedia(const MediaInfo& media);
    249:    virtual void InjectFinalMsg() override;
    318:    virtual CliText* CreateText() const override;
    364:    virtual CliText* CreateText() const override;
  W042 Member could be private
    236:    virtual void EnsureMediaMsg() override;
    240:    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    412:    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W110 Override of Base.Display not found
    298: class CipUdpService : public UdpIpService
    337: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h
  W020 Using statement in header
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    53: using namespace MediaBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W037 Member hides inherited name
    314:    static const Id NextId = FirstId + 50;
    881:    static const Id NextId                 = FirstUn + 7;
  W042 Member could be private
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1150:    CipPsm* AllocNPsm();
  W043 Member could be protected
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W053 Data could be const
    338:    Progress::Ind progress_;
    354:    Cause::Ind cause_;
  W075 Virtual function is public
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1074:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1211:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W077 Virtual function has no overrides
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  W082 Adjacent arguments have the same type
    1215:    BcFactory(Id fid, ProtocolId prid, const char* name);
  W090 Function could be const
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1166:    CipMessage* BuildCipRel(Cause::Ind cause);
  W112 Function could be defaulted
    133:    virtual ~BcNull();
    140:    virtual ~BcAuthorizingOrigination();
    147:    virtual ~BcCollectingInformation();
    154:    virtual ~BcAnalyzingInformation();
    161:    virtual ~BcSelectingRoute();
    168:    virtual ~BcAuthorizingCallSetup();
    175:    virtual ~BcSendingCall();
    182:    virtual ~BcOrigAlerting();
    189:    virtual ~BcAuthorizingTermination();
    196:    virtual ~BcSelectingFacility();
    203:    virtual ~BcPresentingCall();
    210:    virtual ~BcTermAlerting();
    217:    virtual ~BcActive();
    224:    virtual ~BcLocalSuspending();
    231:    virtual ~BcRemoteSuspending();
    238:    virtual ~BcDisconnecting();
    245:    virtual ~BcException();
    883:    BcEventHandler();
    884:    virtual ~BcEventHandler();
    1233:    BcNuAnalyzeRemoteMessage();
    1234:    ~BcNuAnalyzeRemoteMessage();
    1243:    BcScAnalyzeRemoteMessage();
    1244:    ~BcScAnalyzeRemoteMessage();
    1253:    BcOaAnalyzeRemoteMessage();
    1254:    ~BcOaAnalyzeRemoteMessage();
    1263:    BcPcAnalyzeRemoteMessage();
    1264:    ~BcPcAnalyzeRemoteMessage();
    1273:    BcAcAnalyzeRemoteMessage();
    1274:    ~BcAcAnalyzeRemoteMessage();
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    405:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    920:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W102 Line length exceeds the standard maximum
    300:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    139:       auto rc = AddDigit(Digit(ds.digits_[i]));
    171:    if(i < Size()) return Digit(digits_[i]);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    169: Digit DigitString::GetDigit(DigitCount i) const
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    463:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    472:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    504:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    505:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    624:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    782:          return static_cast< ProxyBcPsm* >(p);
    818:          ppsm = static_cast< ProxyBcPsm* >(psm);
    1044:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1049:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    425:    auto          sid = msg->GetSignal();
    426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    428:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W027 Unused class
    189: class ProxyBcDisconnecting : public BcDisconnecting
  W028 Unused data
    60:    static const ServicePortId NextPortId = FirstPortId + 1;
    216:    static const Id NextId        = FirstId + 4;
    300:    static const Id NextId              = FirstId + 7;
    385:    static const Id NextId          = FirstId + 3;
  W032 Unused function
    192:    explicit ProxyBcDisconnecting(ServiceId sid);
  W037 Member hides inherited name
    60:    static const ServicePortId NextPortId = FirstPortId + 1;
    210:    static const Id FirstId = BcEvent::NextId;
    216:    static const Id NextId        = FirstId + 4;
    300:    static const Id NextId              = FirstId + 7;
  W042 Member could be private
    492:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    469:    virtual EventHandler::Rc RaiseReleaseUser
    471:    virtual EventHandler::Rc RaiseProxyProgress
    473:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    474:    virtual EventHandler::Rc RaiseProxyRelease
    509:    virtual void SetUPsm(MediaPsm& psm) override;
  W077 Virtual function has no overrides
    469:    virtual EventHandler::Rc RaiseReleaseUser
    471:    virtual EventHandler::Rc RaiseProxyProgress
    473:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    474:    virtual EventHandler::Rc RaiseProxyRelease
  W112 Function could be defaulted
    88:    virtual ~ProxyBcNull();
    95:    virtual ~ProxyBcAuthorizingOrigination();
    102:    virtual ~ProxyBcCollectingInformation();
    109:    virtual ~ProxyBcAnalyzingInformation();
    116:    virtual ~ProxyBcSelectingRoute();
    123:    virtual ~ProxyBcAuthorizingCallSetup();
    130:    virtual ~ProxyBcSendingCall();
    137:    virtual ~ProxyBcOrigAlerting();
    144:    virtual ~ProxyBcAuthorizingTermination();
    151:    virtual ~ProxyBcSelectingFacility();
    158:    virtual ~ProxyBcPresentingCall();
    165:    virtual ~ProxyBcTermAlerting();
    172:    virtual ~ProxyBcActive();
    179:    virtual ~ProxyBcLocalSuspending();
    186:    virtual ~ProxyBcRemoteSuspending();
    193:    virtual ~ProxyBcDisconnecting();
    200:    virtual ~ProxyBcException();
    302:    ProxyBcEventHandler();
    303:    virtual ~ProxyBcEventHandler();
    321:    ProxyBcAnalyzeProxyMessage();
    322:    ~ProxyBcAnalyzeProxyMessage();
    331:    ProxyBcProgressHandler();
    332:    ~ProxyBcProgressHandler();
    341:    ProxyBcAnswerHandler();
    342:    ~ProxyBcAnswerHandler();
    351:    ProxyBcReleaseHandler();
    352:    ~ProxyBcReleaseHandler();
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
  W042 Member could be private
    46:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp
  W047 Data is init-only
    80:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    171:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    381:    FunctionGuard guard(FunctionGuard::MakePreemptable);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h
  W032 Unused function
    164:    static std::string Demangle(const std::string& s);
  W092 Function could be free
    112:    static NodeBase::word Report
  W110 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const CodeDir* >(&local);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp
  W006 reinterpret_cast
    596:    auto fake = reinterpret_cast< const CodeFile* >(&local);
  W007 Cast down the inheritance hierarchy
    83:          auto base = static_cast< const Class* >(*b);
    216:       auto base = static_cast< const Class* >(*b);
    248:                auto type = static_cast< const Typedef* >(*item2);
    271:          auto type = static_cast< const Typedef* >(*item1);
    519:    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
    2366:    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
    2504:       auto base = static_cast< const Class* >(*b);
  W102 Line length exceeds the standard maximum
    1152:       if((s.front() != '/') && (s.front() != QUOTE)) warnings.insert(Indentation);
  W106 Function does not invoke Debug::ft
    1722: int8_t CodeFile::GetDepth(size_t line) const
    1751: void CodeFile::GetLineCounts() const
    1767: LineType CodeFile::GetLineType(size_t n) const
    1922: void CodeFile::InsertClass(Class* cls)
    1930: void CodeFile::InsertData(Data* data)
    1938: bool CodeFile::InsertDirective(DirectivePtr& dir)
    1947: void CodeFile::InsertEnum(Enum* item)
    1955: void CodeFile::InsertForw(Forward* forw)
    1963: void CodeFile::InsertFunc(Function* func)
    1971: void CodeFile::InsertInclude(IncludePtr& incl)
    2000: void CodeFile::InsertMacro(Macro* macro)
    2008: void CodeFile::InsertType(Typedef* type)
    2016: void CodeFile::InsertUsing(Using* use)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h
  W026 Unused argument
    330/3:       const CxxNamed* item, const CxxScope* scope) const;
  W042 Member could be private
    108:    bool IsTemplateHeader() const;
    214:    int CalcGroup(const Include& incl) const;
  W082 Adjacent arguments have the same type
    346:    void LogCode(Warning warning, size_t line, size_t pos,
  W092 Function could be free
    257:    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    573:    LibrarySet* nbSet = (LibrarySet*) this;
    605:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    80:    auto curr = static_cast< CodeFileSet* >(Users(true));
    92:       curr = static_cast< CodeFileSet* >(prev->Users(true));
    112:    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
    124:       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
    440:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
    472:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    473:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    584:       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
    616:       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
    651:    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  W008 Cast removes const qualification
    573:    LibrarySet* nbSet = (LibrarySet*) this;
    605:    LibrarySet* nsSet = (LibrarySet*) this;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp
  W043 Member could be protected
    116:    static LibrarySet* Evaluate(const CliThread& cli);
  W092 Function could be free
    116:    static LibrarySet* Evaluate(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp
  W007 Cast down the inheritance hierarchy
    64:    auto that = static_cast< CodeSet* >(rhs);
    100:    auto that = static_cast< const CodeSet* >(rhs);
    137:    auto that = static_cast< const CodeSet* >(rhs);
    151:    auto that = static_cast< const CodeSet* >(rhs);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp
  W106 Function does not invoke Debug::ft
    343: bool IsUnusedItemWarning(Warning warning)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h
  W018 Remove #include directive
    29: #include <vector>
  W020 Using statement in header
    32: using NodeBase::fixed_string;
    33: using NodeBase::Flags;
  W028 Unused data
    168: extern const std::string SingleRule;
    567: extern const Flags NoLF_Mask;
    568: extern const Flags Last_Mask;
    572: extern const Flags Stats_Mask;
  W082 Adjacent arguments have the same type
    295:    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp
  W005 Functional cast
    188:       *stream << setw(12) << LineType(t)
    200:          *stream << setw(6) << WarningCode(Warning(w)) << setw(6)
    201:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  W106 Function does not invoke Debug::ft
    104: word CodeInfo::FindWarning(const WarningLog& log)
    298: bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
    316: bool CodeInfo::IsSortedByLine(const WarningLog& log1, const WarningLog& log2)
    336: bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h
  W032 Unused function
    64:       bool operator!=(const WarningLog& that) const;
  W042 Member could be private
    92:       static bool IsSortedByFile
    102:       static bool IsSortedByWarning
  W053 Data could be const
    50:       Warning warning;       // type of warning
    52:       size_t line;           // line where warning occurred
    53:       size_t pos;            // position in FILE where warning occurred
    55:       size_t offset;         // warning-specific; displayed if non-zero
    56:       std::string info;      // warning-specific
    57:       bool hide;             // set to stop warning from being displayed
  W054 Data could be const pointer
    51:       const CodeFile* file;  // file where warning occurred
    54:       const CxxNamed* item;  // item associated with warning
  W082 Adjacent arguments have the same type
    60:       WarningLog(Warning warning, const CodeFile* file,
  W092 Function could be free
    92:       static bool IsSortedByFile
    97:       static bool IsSortedByLine
    102:       static bool IsSortedByWarning
    115:       static std::string WarningCode(Warning warning);
C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h
  W047 Data is init-only
    60:    static bool Registered;
  W092 Function could be free
    56:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    260:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    312:          oper = Cxx::Operator(i);
    363:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    369:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    374:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W099 Line contains adjacent spaces
    98:    CxxWord("-",   "-",    "D",  F),  // AUTO
    99:    CxxWord("-",   "-",    "b",  T),  // BREAK
    100:    CxxWord("-",   "-",    "c",  T),  // CASE
    101:    CxxWord("C",   "C",    "-",  T),  // CLASS
    102:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    103:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    104:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    105:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    106:    CxxWord("-",   "-",    "d",  T),  // DO
    107:    CxxWord("E",   "E",    "E",  T),  // ENUM
    108:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    109:    CxxWord("DP",  "-",    "-",  T),  // EXTERN
    110:    CxxWord("-",   "-",    "f",  T),  // FOR
    111:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    112:    CxxWord("H",   "H",    "H",  F),  // HASH
    113:    CxxWord("-",   "-",    "i",  T),  // IF
    114:    CxxWord("P",   "P",    "-",  T),  // INLINE
    115:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    116:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    117:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    118:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    119:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    120:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    121:    CxxWord("-",   "-",    "r",  T),  // RETURN
    122:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    123:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    124:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    125:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    126:    CxxWord("-",   "-",    "t",  T),  // TRY
    127:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    128:    CxxWord("C",   "C",    "-",  T),  // UNION
    129:    CxxWord("U",   "U",    "U",  T),  // USING
    130:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    131:    CxxWord("-",   "-",    "w",  T),  // WHILE
    132:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    133:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    155:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    156:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    157:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    158:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    159:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    160:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    161:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    162:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    163:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    164:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    165:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    167:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    168:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    169:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    170:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    171:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    172:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    173:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    174:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    175:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    176:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    177:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    178:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    179:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    180:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    181:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    182:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    183:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    184:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    185:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    186:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    187:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    188:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    189:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    190:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    191:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    192:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    193:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    194:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    195:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    196:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    197:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    198:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    199:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    200:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    201:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    202:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    203:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    204:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    205:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    206:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    207:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    208:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    209:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    210:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    211:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    212:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    213:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    214:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    215:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    216:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    217:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    218:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    219:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    220:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h
  W042 Member could be private
    427:    Numeric(NumericType type, size_t width, bool sign) :
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    211:          static_cast< const Function* >(item)->IsInline())
    223:          auto spec = static_cast< ClassInst* >(usingClass)->GetSpec();
    1030:    auto area = static_cast< CxxArea* >(GetScope());
    1033:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1050:          auto c = static_cast< Class* >(*s);
    1972:       auto func = static_cast< const Function* >(item);
    1998:       auto func = static_cast< const Function* >(item);
  W008 Cast removes const qualification
    1247:    return const_cast< Class* >(this);
    1370:    return static_cast< CxxScope* >(const_cast< Class* >(this));
    1968:       return const_cast< ClassInst* >(this);
  W106 Function does not invoke Debug::ft
    376: void Class::AddItem(CxxNamed* item)
    1244: Class* Class::GetClassTemplate() const
    1276: Cxx::Access Class::GetCurrAccess() const
    1352: size_t Class::GetRange(size_t& begin, size_t& end) const
    1367: CxxScope* Class::GetTemplate() const
    1738: Class* Class::OuterClass() const
    2469: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    443:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W007 Cast down the inheritance hierarchy
    840:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    144:       override { return const_cast< CxxArea* >(this); }
    443:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    479:       override { return const_cast< Class* >(this); }
    877:       override { return const_cast< Namespace* >(this); }
  W042 Member could be private
    119:    Typedef* FindType(const std::string& name) const;
    164:    Enum* FindEnum(const std::string& name) const;
    168:    Enumerator* FindEnumerator(const std::string& name) const;
    365:    Function* FindFuncByRole(FunctionRole role, bool base) const;
    369:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    845:    Namespace* FindNamespace(const std::string& name) const;
  W043 Member could be protected
    79:    const ClassPtrVector* Classes() const { return &classes_; }
    87:    const EnumPtrVector* Enums() const { return &enums_; }
    91:    const ForwardPtrVector* Forws() const { return &forws_; }
  W060 Base class constructor is public
    251:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W075 Virtual function is public
    128:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    135:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    276:    virtual ClassInst* EnsureInstance(const TypeName* type);
    284:    virtual Class* BaseClass()
    289:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    306:    virtual Class* GetClassTemplate() const;
    321:    virtual bool DerivesFrom(const Class* cls) const;
    434:    virtual bool AddAnonymousUnion(const ClassPtr& cls) override;
    451:    virtual void CheckIfUsed(Warning warning) const override;
    459:    virtual Class* DirectClass() const override { return GetClass(); }
    864:    virtual CxxScoped* FindItem(const std::string& name) const override;
  W092 Function could be free
    186:    static Function* FoundFunc
    588:    static size_t CreateCodeError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    872:       auto macro = static_cast< Macro* >(ref_);
    885:       auto macro = static_cast< Macro* >(ref_);
  W106 Function does not invoke Debug::ft
    48: void AlignLeft(ostream& stream, const string& prefix)
    151: CxxToken* Define::AutoType() const
    822: CxxScope* MacroName::GetScope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h
  W042 Member could be private
    240:    virtual CxxToken* GetValue() const = 0;
    280:    virtual CxxToken* RootType() const override { return GetValue(); }
  W043 Member could be protected
    733:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    305:    size_t refs_ : 16;
  W075 Virtual function is public
    115:    virtual void SetScope(CxxScope* scope) override;
    240:    virtual CxxToken* GetValue() const = 0;
    245:    virtual bool IsDefined() const { return true; }
    251:    virtual void SetExpr(ExprPtr& rhs);
    280:    virtual CxxToken* RootType() const override { return GetValue(); }
    415:    virtual bool AddElif(Elif* e) { return false; }
    419:    virtual bool AddElse(const Else* e) { return false; }
    428:    virtual bool HasCompiledCode() const { return compile_; }
    469:    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp
  W007 Cast down the inheritance hierarchy
    1418:       auto thisClass = static_cast< Class* >(thisRoot);
    1426:             auto thatClass = static_cast< Class* >(thatRoot);
    1567:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    1611:    auto ref = static_cast< CxxNamed* >(item);
    1776:          static_cast< Class* >(root)->BlockCopied(this);
  W058 Default copy constructor invoked
    156:    arg_(arg)
  W075 Virtual function is public
    65:    virtual bool Display(ostream& stream, bool diff) override;
    77:    virtual bool Display(ostream& stream, bool diff) override;
    93:    virtual bool Display(ostream& stream, bool diff) override;
    109:    virtual bool Display(ostream& stream, bool diff) override;
    129:    virtual bool Display(ostream& stream, bool diff) override;
  W106 Function does not invoke Debug::ft
    235: const Parser* Context::GetParser()
    297: bool Context::OptionIsOn(char opt)
    304: bool Context::ParsingTemplateInstance()
    382: void Context::SetPos(size_t pos)
    414: void Context::SetPos(const CxxLocation& loc)
    504: void Context::Trace(CxxTrace::Action act)
    512: void Context::Trace(CxxTrace::Action act, const StackArg& arg)
    520: void Context::Trace(CxxTrace::Action act, word err, const string& expl)
    528: void Context::Trace(CxxTrace::Action act, const CodeFile& file)
    536: void Context::Trace(CxxTrace::Action act, const CxxToken* token)
    735: OptionalCode* ParseFrame::Optional() const
    922: CxxScope* ParseFrame::Scope() const
    953: bool SourceLoc::operator<(const SourceLoc& that) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h
  W026 Unused argument
    628/1:    static void Shutdown(NodeBase::RestartLevel level);
    632/1:    static void Startup(NodeBase::RestartLevel level) { }
  W032 Unused function
    127:    size_t Arrays() const;
    270:    bool operator!=(const StackArg& that) const;
    490:    bool operator<(const SourceLoc& that) const;
  W042 Member could be private
    269:    bool operator==(const StackArg& that) const;
  W050 Data is not private
    278:    CxxToken* item;
  W053 Data could be const
    302:    CxxToken* via_;
  W082 Adjacent arguments have the same type
    236:    TypeMatch CalcMatchWith(const StackArg& that,
    287:    TypeMatch MatchWith(const StackArg& that,
  W092 Function could be free
    298:    static void ContextFunctionIsNonConst();
    571:    static void SetPos(const CxxLocation& loc);
    632:    static void Startup(NodeBase::RestartLevel level) { }
    701:    static std::string Location();
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp
  W007 Cast down the inheritance hierarchy
    395:          space = static_cast< Namespace* >(item);
    419:          cls = static_cast< Class* >(item);
    473:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    484:             auto tdef = static_cast< Typedef* >(item);
    489:             item = static_cast< CxxScoped* >(root);
    501:             item = static_cast< CxxScoped* >(ref);
    778:    return static_cast< Class* >(root);
    1986:          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
    1996:       ref = static_cast< Function* >(ref)->FindRootFunc();
  W008 Cast removes const qualification
    974:    return const_cast< DataSpec* >(this);
    1392:    const_cast< DataSpec* >(this)->FindReferent();
    2573:    return const_cast< TypeName* >(this);
  W058 Default copy constructor invoked
    652:    tags_(that.tags_)
  W106 Function does not invoke Debug::ft
    72: size_t CxxLocation::GetPos() const
    79: void CxxLocation::SetLoc(CodeFile* file, size_t pos)
    201: CxxArea* CxxNamed::GetArea() const
    210: Class* CxxNamed::GetClass() const
    219: id_t CxxNamed::GetDeclFid() const
    228: size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
    237: void CxxNamed::GetScopedNames(stringVector& names) const
    244: Namespace* CxxNamed::GetSpace() const
    253: bool CxxNamed::IsInTemplateInstance() const
    608: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    949: TypeTags DataSpec::GetAllTags() const
    972: TypeSpec* DataSpec::GetTypeSpec() const
    1101: bool DataSpec::IsAutoDecl() const
    1833: TypeName* QualName::At(size_t n) const
    1942: TypeName* QualName::GetTemplateArgs() const
    2022: TypeName* QualName::Last() const
    2269: size_t QualName::Size() const
    2546: CxxNamed* TypeName::DirectType() const
    2570: TypeName* TypeName::GetTemplateArgs() const
    2738: void TypeName::PushBack(TypeNamePtr& type)
    3237: int TypeTags::IsConstPtr() const
    3245: bool TypeTags::IsConstPtr(size_t n) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1249:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    792:       override { return const_cast< QualName* >(this); }
    1249:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W042 Member could be private
    926:    bool IsUnboundedArray() const { return array_; }
  W043 Member could be protected
    166:    bool IsInternal() const { return loc_.IsInternal(); }
    231:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    240:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    314:    void Accessed() const;
    325:    void DisplayReferent(std::ostream& stream, bool fq) const;
    329:    std::string strLocation() const;
    334:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    1020:    Cxx::ItemType GetUserType() const { return user_; }
    1024:    TemplateRole GetTemplateRole() const { return role_; }
  W050 Data is not private
    971:    bool ptrDet_: 1;
    975:    bool refDet_: 1;
  W075 Virtual function is public
    113:    virtual void SetLoc(CodeFile* file, size_t pos);
    126:    virtual void CopyContext(const CxxNamed* that);
    144:    virtual size_t GetRange(size_t& begin, size_t& end) const;
    149:    virtual CxxScope* GetScope() const { return nullptr; }
    157:    virtual bool IsStatic() const { return true; }
    162:    virtual bool IsDeclaredInFunction() const { return false; }
    172:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    177:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    185:    virtual CxxScope* GetTemplate() const { return nullptr; }
    191:    virtual std::string QualifiedName(bool scopes, bool templates)
    197:    virtual std::string ScopedName(bool templates) const;
    202:    virtual void GetScopedNames(stringVector& names) const;
    209:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    215:    virtual CxxArea* GetArea() const;
    220:    virtual Function* GetFunction() const { return nullptr; }
    224:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    231:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    235:    virtual NodeBase::id_t GetDeclFid() const;
    240:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    257:    virtual bool EnterScope() { return true; }
    267:    virtual bool IsImplemented() const { return true; }
    273:    virtual CxxNamed* DirectType() const { return Referent(); }
    277:    virtual void FindReferent();
    283:    virtual void SetReferent(CxxNamed* item, const SymbolView* view) const;
    287:    virtual void SetAsReferent(const CxxNamed* user) { }
    292:    virtual bool Instantiate() { return false; }
    296:    virtual bool IsInTemplateInstance() const;
    303:    virtual StackArg NameToArg(Cxx::Operator op);
    309:    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
    611:    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
    823:    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
    827:    virtual bool ResolveTemplate
    1016:    virtual void SetUserType(Cxx::ItemType user);
    1028:    virtual Function* GetFuncSpec() const { return nullptr; }
    1038:    virtual TypeSpec* Clone() const = 0;
    1042:    virtual TypeTags* Tags() = 0;
    1043:    virtual const TypeTags* Tags() const = 0;
    1047:    virtual void AddArray(ArraySpecPtr& array) = 0;
    1053:    virtual TagCount Ptrs(bool arrays) const = 0;
    1059:    virtual TagCount Refs() const = 0;
    1064:    virtual TagCount Arrays() const = 0;
    1068:    virtual bool HasArrayDefn() const = 0;
    1072:    virtual void EnteringScope(const CxxScope* scope) = 0;
    1076:    virtual void EnterArrays() const = 0;
    1081:    virtual TypeTags GetAllTags() const = 0;
    1086:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1091:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1095:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1101:    virtual void SetPtrs(TagCount count) = 0;
    1106:    virtual void RemoveRefs() = 0;
    1111:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1115:    virtual StackArg ResultType() const = 0;
    1119:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1130:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    1136:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1141:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1145:    virtual bool ItemIsTemplateArg(const CxxScoped* item) const = 0;
    1151:    virtual void Instantiating() const = 0;
  W076 Virtual function is overloaded
    1042:    virtual TypeTags* Tags() = 0;
    1043:    virtual const TypeTags* Tags() const = 0;
  W082 Adjacent arguments have the same type
    545:    TypeMatch MatchTemplate(const TypeName* that,
    761:    TypeMatch MatchTemplate(const QualName* that,
    1130:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp
  W007 Cast down the inheritance hierarchy
    655:       auto cls = static_cast<const Class*>(scope);
    1308:    auto cls = static_cast< Class* >(root);
    1376:          auto op = static_cast< Operation* >(expr);
    1662:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    1708:    auto data = static_cast< FuncData* >(next_.get());
    2609:       if(!static_cast< Function* >(item)->virtual_)
    3030:             static_cast< ClassData* >(data)->SetInit(m->get());
    3241:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    4489:                auto item = static_cast< CxxNamed* >(args.front().item);
    4572:       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
    4573:       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  W008 Cast removes const qualification
    2130:    return FoundFunc(const_cast< Function* >(this), args, match);
    3205:    auto prev = const_cast< Function* >(this);
    3384:       (const_cast< Function* >(this));
    3638:    func->SetTemplate(const_cast< Function* >(this));
  W106 Function does not invoke Debug::ft
    113: bool Block::CrlfOver(Form form) const
    232: CxxToken* Block::FirstStatement() const
    240: Function* Block::GetFunction() const
    280: bool Block::InLine() const
    826: id_t CxxScope::GetDistinctDeclFid() const
    1184: CodeFile* Data::GetDeclFile() const
    1191: const Data* Data::GetDefn() const
    1200: CodeFile* Data::GetDefnFile() const
    1247: TypeName* Data::GetTemplateArgs() const
    1404: bool Data::IsConst() const
    1517: bool Data::WasRead()
    3279: FunctionRole Function::FuncRole() const
    3316: FunctionType Function::FuncType() const
    3327: CodeFile* Function::GetDeclFile() const
    3334: const Function* Function::GetDefn() const
    3343: CodeFile* Function::GetDefnFile() const
    3352: size_t Function::GetRange(size_t& begin, size_t& end) const
    3368: CxxScope* Function::GetScope() const
    3380: CxxScope* Function::GetTemplate() const
    3392: TemplateType Function::GetTemplateType() const
    3872: bool Function::IsImplemented() const
    3880: bool Function::IsInTemplateInstance() const
    4594: void FuncSpec::AddArray(ArraySpecPtr& array)
    4608: TagCount FuncSpec::Arrays() const
    4615: void FuncSpec::Check() const
    4622: TypeSpec* FuncSpec::Clone() const
    4644: void FuncSpec::EnterArrays() const
    4663: void FuncSpec::FindReferent()
    4671: TypeTags FuncSpec::GetAllTags() const
    4678: TypeName* FuncSpec::GetTemplateArgs() const
    4685: TypeSpec* FuncSpec::GetTypeSpec() const
    4692: bool FuncSpec::HasArrayDefn() const
    4699: void FuncSpec::Instantiating() const
    4707: bool FuncSpec::IsConst() const
    4714: bool FuncSpec::ItemIsTemplateArg(const CxxScoped* item) const
    4722: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    4730: TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    4740: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    4762: TagCount FuncSpec::Ptrs(bool arrays) const
    4769: TagCount FuncSpec::Refs() const
    4776: void FuncSpec::RemoveRefs()
    4783: StackArg FuncSpec::ResultType() const
    4790: void FuncSpec::SetPtrs(TagCount count)
    4797: void FuncSpec::SetReferent(CxxNamed* item, const SymbolView* view) const
    4812: const TypeTags* FuncSpec::Tags() const
    4819: TypeTags* FuncSpec::Tags()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    337:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    337:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1157:       const override { return const_cast< Function* >(this); }
  W026 Unused argument
    83/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  W030 Unused enumerator
    144:       Multiple   // two statements or more
  W042 Member could be private
    998:    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
    1026:    size_t MinArgs() const;
    1031:    size_t MaxArgs() const { return args_.size(); }
    1089:    bool IsInvokedInBase() const;
  W043 Member could be protected
    297:    bool IsExtern() const { return extern_; }
    301:    bool IsConstexpr() const { return constexpr_; }
    305:    bool WasInited() const { return GetDecl()->inited_; }
  W075 Virtual function is public
    77:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    82:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    90:    virtual void AccessibilityOf
    328:    virtual void Promote
    333:    virtual bool IsUnionMember() const { return false; }
    1123:    virtual void CheckAccessControl() const override;
    1127:    virtual void CheckIfHiding() const override;
    1131:    virtual void CheckIfUsed(Warning warning) const override;
    1251:    virtual void WasCalled() override;
  W082 Adjacent arguments have the same type
    328:    virtual void Promote
    1326:    static TypeMatch MatchTemplate
  W092 Function could be free
    1326:    static TypeMatch MatchTemplate
    1339:    static Function* InstantiateError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1250:    return (CxxToken*) this;
    1443:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    92:          auto func = static_cast< Function* >(GetScope());
    264:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    298:    return static_cast< Class* >(name_->GetReferent());
    1431:          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
    1581:          space = static_cast< Namespace* >(item);
    1594:          cls = static_cast< Class* >(item);
    1633:             auto tdef = static_cast< Typedef* >(item);
    1638:             item = static_cast< CxxScoped* >(root);
    1913:       static_cast< CxxArea* >(scope)->AddFunc(func);
  W008 Cast removes const qualification
    1250:    return (CxxToken*) this;
    1443:    return (CxxToken*) this;
    1823:    const_cast< Friend* >(this)->FindReferent();
    1842:    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
    1854:    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  W058 Default copy constructor invoked
    2003:    attrs_(Numeric::Nil)
  W106 Function does not invoke Debug::ft
    296: Class* BaseDecl::GetClass() const
    397: void CxxScoped::AddFiles(SetOfIds& imSet) const
    532: CodeFile* CxxScoped::GetImplFile() const
    541: size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
    552: bool CxxScoped::IsAuto() const
    561: bool CxxScoped::IsConst() const
    570: bool CxxScoped::IsConstPtr() const
    579: bool CxxScoped::IsConstPtr(size_t n) const
    588: bool CxxScoped::IsDeclaredInFunction() const
    596: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    609: bool CxxScoped::IsIndirect() const
    1007: TypeSpec* Enum::GetTypeSpec() const
    1182: void Enumerator::RecordAccess(Cxx::Access access) const
    1246: CxxToken* Forward::AutoType() const
    1439: CxxToken* Friend::AutoType() const
    1705: Function* Friend::GetFunction() const
    1714: QualName* Friend::GetQualName() const
    1723: CxxNamed* Friend::GetReferent() const
    2206: TypeName* Typedef::GetTemplateArgs() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    160:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    460:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    567:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    988:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1065:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    160:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    460:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    567:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    988:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1065:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1185/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  W042 Member could be private
    150:    bool IsSubscopeOf(const std::string& fqSuper) const;
  W043 Member could be protected
    51:    CodeFile* GetImplFile() const;
    86:    CxxScoped* FindInheritedName() const;
    91:    void DisplayFiles(std::ostream& stream) const;
    99:    virtual bool IsUnused() const { return false; }
  W075 Virtual function is public
    68:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
    77:    virtual void RecordAccess(Cxx::Access access) const;
    95:    virtual void AddFiles(SetOfIds& imSet) const;
    99:    virtual bool IsUnused() const { return false; }
    164:    virtual void SetAccess(Cxx::Access access) override { access_ = access; }
    168:    virtual void SetScope(CxxScope* scope) override { scope_ = scope; }
    469:    virtual void CheckAccessControl() const override;
    865:    virtual bool ResolveTemplate
    1252:    virtual bool ResolveTypedef(Typedef* type, size_t n) const
  W082 Adjacent arguments have the same type
    1175:    Using(QualNamePtr& name, bool space, bool added = false);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp
  W106 Function does not invoke Debug::ft
    284: void CxxStatement::EnterBlock()
    364: bool Do::InLine() const
    574: bool For::InLine() const
    680: bool If::InLine() const
    1082: bool While::InLine() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    41: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h
  W032 Unused function
    83:    std::string& Prefix(std::string&& scope);
  W082 Adjacent arguments have the same type
    102:    size_t CompareScopes
    140:    size_t Replace(std::string& code,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W007 Cast down the inheritance hierarchy
    384:    return static_cast< Macro* >(macros.front());
    423:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    431:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    439:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    445:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W106 Function does not invoke Debug::ft
    91: template< typename T > void Erase(const CxxScoped* item,
    189: template< typename T > void ListSymbols(const string& name,
    226: void CxxSymbols::EraseClass(const Class* cls)
    233: void CxxSymbols::EraseData(const Data* data)
    240: void CxxSymbols::EraseEnum(const Enum* item)
    247: void CxxSymbols::EraseEtor(const Enumerator* etor)
    254: void CxxSymbols::EraseForw(const Forward* forw)
    261: void CxxSymbols::EraseFriend(const Friend* frnd)
    268: void CxxSymbols::EraseFunc(const Function* func)
    297: void CxxSymbols::EraseMacro(const Macro* macro)
    304: void CxxSymbols::EraseSpace(const Namespace* space)
    311: void CxxSymbols::EraseTerm(const Terminal* term)
    318: void CxxSymbols::EraseType(const Typedef* type)
    666: void CxxSymbols::InsertClass(Class* cls)
    673: void CxxSymbols::InsertData(Data* data)
    680: void CxxSymbols::InsertEnum(Enum* item)
    687: void CxxSymbols::InsertEtor(Enumerator* etor)
    694: void CxxSymbols::InsertForw(Forward* forw)
    701: void CxxSymbols::InsertFriend(Friend* frnd)
    708: void CxxSymbols::InsertFunc(Function* func)
    742: void CxxSymbols::InsertMacro(Macro* macro)
    749: void CxxSymbols::InsertSpace(Namespace* space)
    756: void CxxSymbols::InsertTerm(Terminal* term)
    763: void CxxSymbols::InsertType(Typedef* type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h
  W090 Function could be const
    122:    void InsertClass(Class* cls);
    123:    void InsertData(Data* data);
    124:    void InsertEtor(Enumerator* etor);
    125:    void InsertEnum(Enum* item);
    126:    void InsertForw(Forward* forw);
    127:    void InsertFriend(Friend* frnd);
    128:    void InsertFunc(Function* func);
    129:    void InsertMacro(Macro* macro);
    130:    void InsertSpace(Namespace* space);
    131:    void InsertTerm(Terminal* term);
    132:    void InsertType(Typedef* type);
    137:    void EraseClass(const Class* cls);
    138:    void EraseData(const Data* data);
    139:    void EraseEtor(const Enumerator* etor);
    140:    void EraseEnum(const Enum* item);
    141:    void EraseForw(const Forward* forw);
    142:    void EraseFriend(const Friend* frnd);
    143:    void EraseFunc(const Function* func);
    144:    void EraseMacro(const Macro* macro);
    145:    void EraseSpace(const Namespace* space);
    146:    void EraseTerm(const Terminal* term);
    147:    void EraseType(const Typedef* type);
    148:    void EraseLocal(const CxxScoped* name);
    152:    void EraseLocals();
  W110 Override of Base.Display not found
    85: class CxxSymbols: public NodeBase::Base
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp
  W007 Cast down the inheritance hierarchy
    420:    auto oper = static_cast< Operation* >(item.get());
    446:          auto ante = static_cast< Operation* >(prev.get());
    498:       auto oper = static_cast< Operation* >(item.get());
    531:    auto oper = static_cast< Operation* >(prev.get());
    560:       auto oper = static_cast< Operation* >(item.get());
    601:    auto oper = static_cast< Operation* >(item.get());
    624:       auto ante = static_cast< Operation* >(prev.get());
    720:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1149:       inClass = static_cast< Class* >(inRoot);
    1154:       outClass = static_cast< Class* >(outRoot);
    1179:    auto call = static_cast< Operation* >(args_.front().get());
    1567:       func = static_cast< Function* >(proc.item);
    1586:       cls = static_cast< Class* >(proc.item);
    1682:       (arg.item->Root())->FindDtor(Context::Scope());
    1730:       auto newCall = static_cast< Operation* >(args_.front().get());
    1750:    auto cls = static_cast< Class* >(spec.item->Root());
    1771:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    1795:       cls = static_cast< Class* >(root);
    1978:       area = static_cast< Class* >(targ);
    1980:       static_cast< Class* >(targ)->Instantiate();
    2318:    auto cls = static_cast< Class* >(root);
    2357:       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
    2380:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    308:    CxxToken* prev = const_cast< CxxToken* >(this);
  W106 Function does not invoke Debug::ft
    262: bool CxxToken::IsPointer(bool arrays) const
    353: void CxxUsageSets::AddBase(const CxxNamed* item)
    361: void CxxUsageSets::AddDirect(const CxxNamed* item)
    369: void CxxUsageSets::AddForward(const CxxNamed* item)
    380: void CxxUsageSets::AddIndirect(const CxxNamed* item)
    388: void CxxUsageSets::AddUser(const CxxNamed* item)
    734: Numeric FloatLiteral::GetNumeric() const
    795: Numeric IntLiteral::BaseNumeric() const
    938: CxxToken* Literal::AutoType() const
    963: CxxToken* Literal::RootType() const
    979: Cxx::ItemType Literal::Type() const
    2693: TypeSpec* StrLiteral::GetTypeSpec() const
    2700: CxxNamed* StrLiteral::Referent() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    291:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W058 Default copy constructor invoked
    375:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
    415:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  W075 Virtual function is public
    79:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    85:    virtual const std::string* Name() const;
    89:    virtual QualName* GetQualName() const { return nullptr; }
    94:    virtual std::string TypeString(bool arg) const
    99:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    103:    virtual bool IsConst() const { return false; }
    107:    virtual bool IsConstPtr() const { return false; }
    111:    virtual bool IsConstPtr(size_t n) const { return false; }
    116:    virtual bool IsAuto() const { return false; }
    121:    virtual bool IsIndirect() const { return false; }
    125:    virtual bool IsInitializing() const { return false; }
    130:    virtual CxxToken* AutoType() const { return nullptr; }
    135:    virtual Namespace* GetSpace() const { return nullptr; }
    140:    virtual Class* GetClass() const { return nullptr; }
    145:    virtual Class* Declarer() const { return GetClass(); }
    151:    virtual TypeName* GetTemplateArgs() const;
    156:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    160:    virtual void GetConvertibleTypes(StackArgVector& types) { }
    165:    virtual CxxNamed* Referent() const;
    171:    virtual void EnterBlock();
    176:    virtual void ExitBlock() { }
    182:    virtual bool AppendUnary() { return false; }
    186:    virtual CxxToken* Back() { return this; }
    191:    virtual bool WasRead() { return false; }
    203:    virtual bool WasWritten(const StackArg* arg, bool passed);
    208:    virtual bool SetNonConst() { return true; }
    213:    virtual void WasMutated(const StackArg* arg) { }
    219:    virtual void RecordUsage() const { }
    224:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
    228:    virtual void Check() const { }
    232:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    236:    virtual bool InLine() const { return true; }
    241:    virtual void Print
    247:    virtual void Shrink() { }
  W076 Virtual function is overloaded
    107:    virtual bool IsConstPtr() const { return false; }
    111:    virtual bool IsConstPtr(size_t n) const { return false; }
  W082 Adjacent arguments have the same type
    633:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W090 Function could be const
    176:    virtual void ExitBlock() { }
  W092 Function could be free
    285:    static void ShrinkExpression(const ExprPtr& expr);
    484:    static TypeSpecPtr CreateRef();
    622:    static void PushType(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp
  W005 Functional cast
    677:    *cli.obuf << ": " << Warning(log.warning);
  W007 Cast down the inheritance hierarchy
    216:    auto arg = static_cast< const Argument* >(log.item);
    217:    auto defn = static_cast< const Function* >(arg->GetScope());
    342:    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
    1854:    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
    2351:       ns = static_cast< const Namespace* >(ref)->OuterSpace();
    2886:    if(!static_cast< const Function* >(log.item)->IsImplemented())
    2967:    auto func = static_cast< const Function* >(log.item);
  W022 Add using statement
    1: std::string
  W097 Line indentation is not a multiple of the standard value
    176:        tagpos = loc.iter->code.find(tag, tagpos + 1))
    252:        loc.pos != string::npos;
    253:        loc = FindWord(loc.iter, loc.pos + 1, *defnName, &range))
    890:        tag.pos != string::npos;
    891:        tag = FindWord(tag.iter, tag.pos + 1, CONST_STR))
    1062:        arg = FindWord(arg.iter, arg.pos + 1, VOID_STR))
    2384:           loc = FindWord(loc.iter, loc.pos, name))
  W102 Line length exceeds the standard maximum
    1783:       (lpar.iter->code.find_first_not_of(WhitespaceChars, lpar.pos + 1) == rpar))
  W106 Function does not invoke Debug::ft
    80: bool IsBlank(char c)
    87: bool IsWordChar(char c)
    298: word Editor::Changed()
    306: word Editor::Changed(const Iter& iter, string& expl)
    1084: Editor::CodeLocation Editor::Find(Iter iter, const string& str, size_t off)
    1099: Editor::CodeLocation Editor::FindFirstOf
    1115: Editor::Iter Editor::FindLine(size_t line)
    1127: Editor::Iter Editor::FindLine(size_t line, string& expl)
    1642: LineType Editor::GetLineType(const Iter& iter) const
    2198: bool Editor::IsSorted1(const SourceLine& line1, const SourceLine& line2)
    2205: bool Editor::IsSorted2(const string& line1, const string& line2)
    2267: Editor::CodeLocation Editor::NextPos(const CodeLocation& curr)
    2287: Editor::CodeLocation Editor::PrevPos(const CodeLocation& curr)
    2328: void Editor::PushBack(const string& code)
    2675: Editor::CodeLocation Editor::Rfind(Iter iter, const string& str, size_t off)
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h
  W020 Using statement in header
    38: using std::string;
    39: using NodeBase::word;
  W032 Unused function
    218:    CodeLocation PrevPos(const CodeLocation& curr);
  W058 Default copy constructor invoked
    208:       explicit CodeLocation(const Iter& i) : iter(i), pos(string::npos) { }
    209:       CodeLocation(const Iter& i, size_t p) : iter(i), pos(p) { }
  W082 Adjacent arguments have the same type
    348:    word InsertNamespaceForward(const Iter& iter,
    376:    static void DebugFtCode
  W088 Argument could be const
    262/4:       (Iter iter, size_t pos, const string& id, size_t* range = nullptr);
  W092 Function could be free
    335:    string DemangleInclude(string code) const;
    390:    static bool IsSorted2(const string& line1, const string& line2);
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    148:          type = LibTokenType(i);
  W092 Function could be free
    52:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W099 Line contains adjacent spaces
    94:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    95:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    96:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    97:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    98:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    99:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    100:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    101:    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
    102:    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  W106 Function does not invoke Debug::ft
    134: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    142: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h
  W092 Function could be free
    62:    static bool IsOperator(const std::string& s);
  W110 Override of Base.Display not found
    44: class Interpreter : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    1178:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    1810:          auto def = static_cast< Define* >(item);
    1814:             auto code = const_cast< string* >(source_);
  W008 Cast removes const qualification
    1814:             auto code = const_cast< string* >(source_);
  W106 Function does not invoke Debug::ft
    57: IndentRule ClassifyIndent(string& id)
    705: void Lexer::GetDepth(size_t line, int8_t& depth, bool& cont) const
    873: size_t Lexer::GetLineNum(size_t pos) const
    897: size_t Lexer::GetLineStart(size_t line) const
    970: bool Lexer::GetNthLine(size_t n, string& s) const
    1866: void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h
  W042 Member could be private
    189:    std::string NextOperator() const;
  W047 Data is init-only
    475:    static bool Initialized;
  W082 Adjacent arguments have the same type
    197:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
    383:    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp
  W007 Cast down the inheritance hierarchy
    95:       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h
  W042 Member could be private
    67:    CodeDir* FindDir(const std::string& name) const;
    88:    LibrarySet* FindVar(const std::string& name) const;
  W048 Data is write-only
    225:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    62:    NodeBase::word Import
    104:    NodeBase::word Assign(const std::string& name,
  W090 Function could be const
    72:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    104:    NodeBase::word Assign(const std::string& name,
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp
  W106 Function does not invoke Debug::ft
    103: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp
  W006 reinterpret_cast
    281:    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  W106 Function does not invoke Debug::ft
    76: LibrarySet* LibrarySet::AffectedBy() const
    83: LibrarySet* LibrarySet::Affecters() const
    90: LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
    108: LibrarySet* LibrarySet::CommonAffecters() const
    155: LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
    162: LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
    169: LibrarySet* LibrarySet::Directories() const
    188: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    195: LibrarySet* LibrarySet::Files() const
    202: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    231: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    250: LibrarySet* LibrarySet::Implements() const
    257: LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
    264: bool LibrarySet::IsReadOnly() const
    271: bool LibrarySet::IsTemporary() const
    298: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    305: LibrarySet* LibrarySet::NeededBy() const
    312: LibrarySet* LibrarySet::Needers() const
    321: word LibrarySet::NotImplemented(string& expl) const
    347: LibrarySet* LibrarySet::OpError() const
    463: LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
    470: LibrarySet* LibrarySet::UsedBy(bool self) const
    477: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h
  W042 Member could be private
    64:    bool IsReadOnly() const;
    172:    static ptrdiff_t LinkDiff();
  W043 Member could be protected
    150:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  W053 Data could be const
    220:    NodeBase::Q2Link link_;
  W065 Base class virtual destructor is not public
    188:    virtual ~LibrarySet();
  W075 Virtual function is public
    72:    virtual LibSetType GetType() const;
    78:    virtual NodeBase::word Check(std::ostream* stream, std::string& expl) const;
    84:    virtual NodeBase::word Count(std::string& result) const;
    90:    virtual NodeBase::word Countlines(std::string& result) const;
    95:    virtual NodeBase::word Fix
    101:    virtual NodeBase::word Format(std::string& expl) const;
    107:    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
    115:    virtual NodeBase::word Parse
    122:    virtual NodeBase::word Scan(std::ostream& stream,
    129:    virtual NodeBase::word Show(std::string& result) const;
    135:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    141:    virtual NodeBase::word Trim(std::ostream& stream, std::string& expl) const;
    150:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
    151:    virtual LibrarySet* Assign(LibrarySet* rhs);
    152:    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
    153:    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
    154:    virtual LibrarySet* Union(const LibrarySet* rhs) const;
    155:    virtual LibrarySet* Directories() const;
    156:    virtual LibrarySet* Files() const;
    157:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    158:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    159:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    160:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    161:    virtual LibrarySet* Implements() const;
    162:    virtual LibrarySet* UsedBy(bool self) const;
    163:    virtual LibrarySet* Users(bool self) const;
    164:    virtual LibrarySet* AffectedBy() const;
    165:    virtual LibrarySet* Affecters() const;
    166:    virtual LibrarySet* CommonAffecters() const;
    167:    virtual LibrarySet* NeededBy() const;
    168:    virtual LibrarySet* Needers() const;
  W092 Function could be free
    192:    static NodeBase::word Counted(std::string& result, const size_t* count);
    197:    static NodeBase::word Shown(std::string& result);
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    365:    auto op = static_cast< Operation* >(call.get());
    618:    auto brace = static_cast< BraceInit* >(token.get());
    691:    auto cast = static_cast< Operation* >(token.get());
    730:    auto c = static_cast< Catch* >(statement.get());
    828:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    829:    static_cast< ClassData* >(data.get())->SetWidth(width);
    989:    auto cond = static_cast< Operation* >(token.get());
    1264:    auto cast = static_cast< Operation* >(token.get());
    1371:    auto op = static_cast< Operation* >(token.get());
    1396:    auto delOp = static_cast< Operation* >(token.get());
    1424:    auto d = static_cast< Do* >(statement.get());
    1629:    auto f = static_cast< For* >(statement.get());
    1730:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    1780:          curr = static_cast< FuncData* >(data.get());
    1786:          curr = static_cast< FuncData* >(subseq.get());
    2056:             static_cast< If* >(first)->SetElseIf();
    2062:    auto i = static_cast< If* >(statement.get());
    2224:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2266:    auto newOp = static_cast< Operation* >(token.get());
    2704:    static_cast< Return* >(statement.get())->AddExpr(expr);
    2750:    auto op = static_cast< Operation* >(token.get());
    2898:    auto op = static_cast< Operation* >(token.get());
    2924:    auto s = static_cast< Switch* >(statement.get());
    3007:    auto op = static_cast< Operation* >(token.get());
    3043:    auto t = static_cast< Try* >(statement.get());
    3102:    auto op = static_cast< Operation* >(token.get());
    3347:    auto w = static_cast< While* >(statement.get());
    3731:          auto op = static_cast< Operation* >(token)->Op();
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h
  W082 Adjacent arguments have the same type
    476:    static bool SetCompoundType
    522:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W088 Argument could be const
    323/1:    bool GetStatements(BlockPtr& block, bool braced);
    412/1:    bool GetFuncSpecial(FunctionPtr& func);
    425/1:    bool GetCtorInit(FunctionPtr& func);
    444/1:    bool GetArguments(FunctionPtr& func);
    477/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    537/1:    bool GetNum(ExprPtr& expr);
    538/1:    bool GetChar(ExprPtr& expr);
    539/1:    bool GetStr(ExprPtr& expr);
    549/1:    bool GetCast(ExprPtr& expr);
    550/1:    bool GetPrecedence(ExprPtr& expr);
    557/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    561/1:    bool GetSubscript(ExprPtr& expr);
    570/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    571/1:    bool GetConditional(ExprPtr& expr);
    572/1:    bool GetDefined(ExprPtr& expr);
    573/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    574/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    575/1:    bool GetSizeOf(ExprPtr& expr);
    576/1:    bool GetThrow(ExprPtr& expr);
    577/1:    bool GetTypeId(ExprPtr& expr);
  W092 Function could be free
    476:    static bool SetCompoundType
    652:    static std::string Indent();
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const Circuit* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W053 Data could be const
    90:    RegCell port_;
  W075 Virtual function is public
    64:    virtual std::string Name() const = 0;
    68:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h
  W020 Using statement in header
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
  W032 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    87:    static void* operator new(size_t size);
    92:    explicit MediaEndpt(MediaPsm& psm);
  W042 Member could be private
    104:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
  W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    33: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W027 Unused class
    41: class MediaFailureEvent : public Event
  W032 Unused function
    47:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    55:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    118:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    107: CliParm* MediaParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    52:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    575:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    253:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    259: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    37: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    119:    MediaEndpt* Mep() const { return mep_; }
  W042 Member could be private
    131:    Tone::Id GetOgTone() const { return ogTone_; }
    169:    void SetOgPort(Switch::PortId ogport);
    188:    virtual Event* ReceiveMsg(Message& msg) override;
    192:    virtual void PrepareOgMsgq() override;
  W075 Virtual function is public
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
  W077 Virtual function has no overrides
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto mpsm = static_cast< MediaPsm* >(psm);
    118:       auto mpsm = static_cast< MediaPsm* >(psm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W077 Virtual function has no overrides
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    89: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W092 Function could be free
    65:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Tone* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    63:    Id Tid() const { return Id(tid_.GetId()); }
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    63:    Id Tid() const { return Id(tid_.GetId()); }
  W037 Member hides inherited name
    67:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    80:    virtual ~Tone();
  W112 Function could be defaulted
    99:    ~ToneSilent();
    108:    ~ToneDial();
    117:    ~ToneStutteredDial();
    126:    ~ToneConfirmation();
    135:    ~ToneRingback();
    144:    ~ToneBusy();
    153:    ~ToneCallWaiting();
    162:    ~ToneReorder();
    171:    ~ToneReceiverOffHook();
    180:    ~ToneHeld();
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
    77:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
    77:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h
  W082 Adjacent arguments have the same type
    50:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    54:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h
  W090 Function could be const
    124:    bool Replace(size_t index, const T& item)
  W099 Line contains adjacent spaces
    251:    inline static fn_name Array_ctor()     { return "Array.ctor"; }
    252:    inline static fn_name Array_dtor()     { return "Array.dtor"; }
    253:    inline static fn_name Array_Init()     { return "Array.Init"; }
    254:    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
    256:    inline static fn_name Array_Erase()    { return "Array.Erase"; }
    257:    inline static fn_name Array_Replace()  { return "Array.Replace"; }
    258:    inline static fn_name Array_Extend()   { return "Array.Extend"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    133:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    161:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    98:       objects[count++] = const_cast< Base* >(this);
  W106 Function does not invoke Debug::ft
    128: void Base::Nullify(size_t n)
    157: Base::vptr_t Base::Vptr() const
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h
  W042 Member could be private
    109:    virtual void Claim() { }
  W043 Member could be protected
    78:    virtual void Display(std::ostream& stream,
    102:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    78:    virtual void Display(std::ostream& stream,
    97:    virtual void GetSubtended(Base* objects[], size_t& count) const;
    109:    virtual void Claim() { }
    114:    virtual void ClaimBlocks();
    132:    virtual void Cleanup() { }
    140:    virtual void Startup(RestartLevel level) { }
    148:    virtual void Shutdown(RestartLevel level) { }
    152:    virtual MemoryType MemType() const { return MemPerm; }
    156:    virtual const char* ClassName() const;
  W077 Virtual function has no overrides
    156:    virtual const char* ClassName() const;
  W112 Function could be defaulted
    64:    virtual ~Base() { }
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp
  W106 Function does not invoke Debug::ft
    52: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h
  W042 Member could be private
    66:    virtual bool SetNext(const std::string& input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(const char* key, const char* def, const char* expl);
  W092 Function could be free
    76:    static fixed_string ValidTrueChars();
    81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h
  W042 Member could be private
    67:    virtual bool SetNextValue(bool value) override;
  W060 Base class constructor is public
    38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  W082 Adjacent arguments have the same type
    38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp
  W106 Function does not invoke Debug::ft
    70: bool CfgFlagParm::GetCurrValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h
  W042 Member could be private
    65:    virtual bool SetNextValue(bool value) override;
  W053 Data could be const
    77:    FlagId fid_;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp
  W106 Function does not invoke Debug::ft
    72: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h
  W032 Unused function
    57:    word GetCurrValue() const { return *curr_; }
  W042 Member could be private
    81:    virtual bool SetNext(const std::string& input) override;
  W053 Data could be const
    93:    word min_;
    97:    word max_;
  W060 Base class constructor is public
    39:    CfgIntParm(const char* key, const char* def, word* field,
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(const char* key, const char* def, word* field,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    137:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h
  W042 Member could be private
    60:    const char* Key() const;
    75:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    155:    Q1Link link_;
  W054 Data could be const pointer
    143:    const char* default_;
    147:    const char* expl_;
  W075 Virtual function is public
    64:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W082 Adjacent arguments have the same type
    90:    CfgParm(const char* key, const char* def, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
  W106 Function does not invoke Debug::ft
    275: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h
  W032 Unused function
    89:    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  W090 Function could be const
    93:    void AddMainArg(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp
  W106 Function does not invoke Debug::ft
    68: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h
  W042 Member could be private
    101:    virtual bool SetNext(const std::string& input) override;
  W060 Base class constructor is public
    39:    CfgStrParm(const char* key, const char* def,
  W082 Adjacent arguments have the same type
    39:    CfgStrParm(const char* key, const char* def,
    92:    CfgFileTimeParm(const char* key, const char* def,
  W110 Override of Base.Display not found
    87: class CfgFileTimeParm : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h
  W053 Data could be const
    117:    Q1Link link_;
  W092 Function could be free
    77:    static const std::string& ValidNameChars();
    82:    static const std::string& ValidValueChars();
    87:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp
  W047 Data is init-only
    149:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  W107 Function does not invoke Debug::ft as first statement
    106:       Debug::ft(CinThread_Enter);
    151:    Debug::ft(CinThread_GetLine);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    220:    if(addr != nullptr) return (Object*) addr;
  W006 reinterpret_cast
    75:    auto fake = reinterpret_cast< const Class* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h
  W032 Unused function
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    70:    virtual void FreeQuasiSingleton(Object* obj);
    119:    bool SetVptr(Object& obj);
    126:    bool SetTemplate(Object& obj);
    133:    bool SetQuasiSingleton(Object& obj);
  W042 Member could be private
    66:    virtual Object* GetQuasiSingleton();
    113:    virtual Object* New(size_t size);
  W065 Base class virtual destructor is not public
    107:    virtual ~Class();
  W075 Virtual function is public
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W077 Virtual function has no overrides
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W090 Function could be const
    113:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h
  W053 Data could be const
    93:    Id id_;
  W065 Base class virtual destructor is not public
    85:    virtual ~CliAppData();
  W075 Virtual function is public
    66:    virtual void EventOccurred(Event evt);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h
  W060 Base class constructor is public
    39:    explicit CliBoolParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h
  W043 Member could be protected
    39:    CliCharParm(const char* help, const char* chars,
  W054 Data could be const pointer
    69:    const char* chars_;
  W060 Base class constructor is public
    39:    CliCharParm(const char* help, const char* chars,
  W082 Adjacent arguments have the same type
    39:    CliCharParm(const char* help, const char* chars,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h
  W075 Virtual function is public
    71:    virtual Rc GetTextParmRc
  W082 Adjacent arguments have the same type
    100:    CliCommand(const char* comm, const char* help, uint32_t size = 32);
  W092 Function could be free
    132:    static Rc Exhausted(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W102 Line length exceeds the standard maximum
    43: CliCommandSet::CliCommandSet(const char* comm, const char* help, uint32_t size) :
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h
  W082 Adjacent arguments have the same type
    58:    CliCommandSet(const char* comm, const char* help, uint32_t size = 32);
  W092 Function could be free
    63:    static void DescendTo(CliCookie& cookie, uint32_t index);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp
  W106 Function does not invoke Debug::ft
    136: uint32_t CliCookie::Index(uint32_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    103:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h
  W053 Data could be const
    106:    RegCell iid_;
  W054 Data could be const pointer
    110:    const char* name_;
    114:    const char* help_;
  W075 Virtual function is public
    66:    virtual void Enter();
    71:    virtual void Exit();
  W077 Virtual function has no overrides
    71:    virtual void Exit();
  W082 Adjacent arguments have the same type
    93:    CliIncrement(const char* name, const char* help, uint32_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h
  W053 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
  W060 Base class constructor is public
    49:    CliIntParm(const char* help, word min, word max,
  W082 Adjacent arguments have the same type
    49:    CliIntParm(const char* help, word min, word max,
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    96:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h
  W032 Unused function
    168:    bool GetCharParm(char& c, CliThread& cli) const;
  W043 Member could be protected
    158:    bool GetBoolParm(bool& b, CliThread& cli) const;
    178:    bool GetPtrParm(void*& p, CliThread& cli) const;
    204:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    253:    bool IsOptional() const { return opt_; }
  W054 Data could be const pointer
    332:    const char* help_;
    340:    const char* tag_;
  W075 Virtual function is public
    135:    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
    143:    virtual void Explain(std::ostream& stream, col_t indent) const;
    153:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    163:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    173:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    183:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    211:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    221:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    231:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W092 Function could be free
    323:    static Rc Mismatch(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    98:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h
  W043 Member could be protected
    38:    explicit CliPtrParm(const char* help,
  W060 Base class constructor is public
    38:    explicit CliPtrParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h
  W042 Member could be private
    61:    const char* HelpText() const;
  W043 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
  W054 Data could be const pointer
    111:    const char* text_;
  W060 Base class constructor is public
    48:    CliText(const char* help, const char* text,
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    48:    CliText(const char* help, const char* text,
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h
  W060 Base class constructor is public
    49:    explicit CliTextParm(const char* help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp
  W106 Function does not invoke Debug::ft
    363: CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h
  W032 Unused function
    112:    word Result() const { return result_; }
  W050 Data is not private
    178:    std::unique_ptr< CliBuffer > ibuf;
    182:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    90:    char CharPrompt(const std::string& prompt,
    208:    void Report1
C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h
  W032 Unused function
    72:    ticks_t TicksPerSec();
    121:    ticks_t UsecsToTicks(usecs_t usecs);
    125:    const SysTime& TimeZero();
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    85:       auto req = static_cast< StreamRequest* >(msg);
  W047 Data is init-only
    93:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    139:       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h
  W092 Function could be free
    48:    static void Spool(const char* s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp
  W106 Function does not invoke Debug::ft
    47: void Debug::Assert(bool condition, debug32_t errval)
    140: void Debug::Reset()
  W107 Function does not invoke Debug::ft as first statement
    74:    Debug::ft(Debug_GenerateSwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h
  W082 Adjacent arguments have the same type
    69:    static void SwLog(fn_name_arg func, debug64_t errval,
  W092 Function could be free
    76:    static void Assert(bool condition, debug32_t errval = 0);
    81:    static void Progress(const std::string& s, bool force = false);
    85:    static void noop();
    129:    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h
  W032 Unused function
    56:    static void* operator new[](size_t size);
  W112 Function could be defaulted
    43:    virtual ~Dynamic() { }
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h
  W092 Function could be free
    46:    static std::string strTimePlace();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    45:    Debug::ft(Exception_ctor1);
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h
  W032 Unused function
    60:    Exception(const Exception& that);
    61:    Exception(Exception&& that);
  W065 Base class virtual destructor is not public
    65:    virtual ~Exception() noexcept;
  W075 Virtual function is public
    45:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    218:       auto req = static_cast< FileRequest* >(msg);
  W032 Unused function
    55:    FileRequest(const FileRequest& that);
  W047 Data is init-only
    228:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    301:       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h
  W082 Adjacent arguments have the same type
    56:    static void Spool(const std::string& name,
  W092 Function could be free
    44:    static ostringstreamPtr CreateStream();
    56:    static void Spool(const std::string& name,
    61:    static void Record(const std::string& s, bool eol = false);
    65:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h
  W032 Unused function
    70:    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  W082 Adjacent arguments have the same type
    100:    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp
  W106 Function does not invoke Debug::ft
    40: int FunctionName::compare(fn_name_arg func, const char* str)
    47: size_t FunctionName::find(fn_name_arg func, const char* str)
    55: size_t FunctionName::rfind(fn_name_arg func, const char* str)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h
  W032 Unused function
    39:    size_t find(fn_name_arg func, const char* str);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W004 C-style cast
    391:          auto src = (ptr_t) this;
  W007 Cast down the inheritance hierarchy
    91:       auto curr = static_cast< FunctionTrace* >(rec);
    125:       auto curr = static_cast< FunctionTrace* >(rec);
    189:                   auto last = static_cast< const FunctionTrace* >(rec);
    266:       auto curr = static_cast< FunctionTrace* >(rec);
    305:          curr = static_cast< FunctionTrace* >(rec);
    373:       curr = static_cast< FunctionTrace* >(rec);
    426:          auto curr = static_cast< FunctionTrace* >(rec);
    491:          auto curr = static_cast< FunctionTrace* >(rec);
  W009 Pointer arithmetic
    392:          auto dst = src + sizeof(FunctionTrace);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h
  W112 Function could be defaulted
    42:    virtual ~FunctionTrace() { }
C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h
  W032 Unused function
    55:    static void* operator new[](size_t size);
  W112 Function could be defaulted
    42:    virtual ~Immutable() { }
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp
  W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::ImmediateTrace()
    57: bool InitFlags::TraceInit()
    68: bool InitFlags::TraceWork()
C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp
  W047 Data is init-only
    307:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h
  W092 Function could be free
    46:    static void Spool(ostringstreamPtr& log);
    50:    static std::string FileName();
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    109:       auto req = static_cast< StreamRequest* >(msg);
  W047 Data is init-only
    187:       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp
  W004 C-style cast
    227:    auto seg = (Segment*) addr;
    284:    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
    335:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
    386:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  W092 Function could be free
    151:    static size_t Size();
  W106 Function does not invoke Debug::ft
    154: size_t SegmentHeader::Size()
    171: SysHeap* Memory::AccessHeap(MemoryType type)
    189: size_t Memory::Align(size_t size, size_t log2align)
    257: SysHeap* Memory::EnsureHeap(MemoryType type)
    311: const SysHeap* Memory::Heap(MemoryType type)
    405: size_t Memory::Words(size_t nBytes)
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h
  W032 Unused function
    56:    static void Set(void* dest, byte_t value, size_t nBytes);
    79:    static bool Verify(MemoryType type, void* addr);
  W092 Function could be free
    44:    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
    48:    static size_t Words(size_t nBytes);
    52:    static void Copy(void* dest, const void* source, size_t nBytes);
    56:    static void Set(void* dest, byte_t value, size_t nBytes);
    74:    static void* Realloc(void* addr, size_t nBytes);
    83:    static MemoryType Type(const void* addr);
    91:    static void Shutdown(RestartLevel level);
    99:    static SysHeap* EnsureHeap(MemoryType type);
    103:    static SysHeap* AccessHeap(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    66:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h
  W092 Function could be free
    57:    static const char* TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h
  W032 Unused function
    103:    ModuleId Mid() const { return mid_.GetId(); }
    111:    virtual ModuleId* Dependencies(size_t& count) const;
  W065 Base class virtual destructor is not public
    146:    virtual ~Module();
  W075 Virtual function is public
    111:    virtual ModuleId* Dependencies(size_t& count) const;
  W077 Virtual function has no overrides
    111:    virtual ModuleId* Dependencies(size_t& count) const;
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp
  W005 Functional cast
    106:          return RestartLevel(errval_);
  W106 Function does not invoke Debug::ft
    152: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h
  W092 Function could be free
    87:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp
  W106 Function does not invoke Debug::ft
    74: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h
  W060 Base class constructor is public
    41:    MsgBuffer();
    45:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    62:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp
  W107 Function does not invoke Debug::ft as first statement
    38:    Debug::ft(MutexGuard_ctor);
    51:       Debug::ft(MutexGuard_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h
  W028 Unused data
    54: constexpr ModuleId FirstAppModuleId = 15;  // start of applicaton modules
    73: constexpr ObjectPoolId FirstAppObjPoolId = 14;    // start of application pools
    88: constexpr FlagId FirstAppDebugFlag = 8;
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp
  W106 Function does not invoke Debug::ft
    114: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h
  W028 Unused data
    68: extern fixed_string NotImplementedExpl;
  W082 Adjacent arguments have the same type
    120: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    485:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    693:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1090:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    2509:       auto heap = Memory::Heap(MemoryType(m));
  W042 Member could be private
    1961:    static void SendAckToOutputFile(const CliThread& cli);
  W047 Data is init-only
    1765:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W092 Function could be free
    758:    static word DisplayHelpFile(const CliThread& cli, const string& name);
    1961:    static void SendAckToOutputFile(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h
  W028 Unused data
    181:    static const id_t LastNbIndex     = 3;
  W060 Base class constructor is public
    41:    StatusCommand();
    55:    LogsAction();
    67:    explicit LogsCommand(bool bind = true);
    83:    SetWhatParm();
    96:    explicit SetCommand(bool bind = true);
    112:    IncludeWhatParm();
    126:    explicit IncludeCommand(bool bind = true);
    142:    ExcludeWhatParm();
    155:    explicit ExcludeCommand(bool bind = true);
    185:    explicit QueryCommand(bool bind = true);
    201:    SaveWhatParm();
    213:    explicit SaveCommand(bool bind = true);
    229:    ClearWhatParm();
    247:    explicit ClearCommand(bool bind = true);
  W111 Override of Object.Patch not found
    38: class StatusCommand : public CliCommand
    59: class LogsCommand : public CliCommand
    87: class SetCommand : public CliCommand
    116: class IncludeCommand : public CliCommand
    146: class ExcludeCommand : public CliCommand
    175: class QueryCommand : public CliCommand
    205: class SaveCommand : public CliCommand
    233: class ClearCommand : public CliCommand
  W112 Function could be defaulted
    42:    virtual ~StatusCommand() { }
    56:    virtual ~LogsAction() { }
    68:    virtual ~LogsCommand() { }
    84:    virtual ~SetWhatParm() { }
    97:    virtual ~SetCommand() { }
    113:    virtual ~IncludeWhatParm() { }
    127:    virtual ~IncludeCommand() { }
    143:    virtual ~ExcludeWhatParm() { }
    156:    virtual ~ExcludeCommand() { }
    172:    virtual ~QueryWhatParm() { }
    186:    virtual ~QueryCommand() { }
    202:    virtual ~SaveWhatParm() { }
    214:    virtual ~SaveCommand() { }
    230:    virtual ~ClearWhatParm() { }
    248:    virtual ~ClearCommand() { }
C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h
  W047 Data is init-only
    64:    static bool Registered;
  W092 Function could be free
    60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    207:             stream << Faction(f) << CRLF;
  W106 Function does not invoke Debug::ft
    172: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h
  W042 Member could be private
    77:    static bool ThreadsEmpty();
  W092 Function could be free
    73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    77:    static bool ThreadsEmpty();
  W110 Override of Base.Display not found
    63: class NbTracer : public Permanent
  W111 Override of Object.Patch not found
    63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp
  W103 Function not sorted in standard order
    76: char FactionChar(Faction faction)
  W106 Function does not invoke Debug::ft
    45: char BlockingReasonChar(BlockingReason reason)
    76: char FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h
  W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
  W033 Unused typedef
    175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
    176: typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
    177: typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
  W099 Line contains adjacent spaces
    174: typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
    175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    141:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W106 Function does not invoke Debug::ft
    71: Object::ClassId Object::GetClassId() const
    82: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    109: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h
  W032 Unused function
    95:    ClassId GetClassId() const;
    107:    ObjectId GetObjectId() const;
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    121:    static void* operator new(size_t size, MemoryType type);
    122:    static void* operator new[](size_t size, MemoryType type);
    124:    static void operator delete[](void* addr);
    125:    static void operator delete(void* addr, MemoryType type);
    126:    static void operator delete[](void* addr, MemoryType type);
    135:    void MorphTo(Class& target);
  W042 Member could be private
    70:    typedef uint32_t InstanceId;  // identifies an object within a Class
    71:    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
    101:    virtual InstanceId GetInstanceId() const;
  W043 Member could be protected
    48:    typedef uint8_t sel_t;
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    69:    typedef id_t ClassId;         // identifies a Class
  W053 Data could be const
    140:    uintptr_t patchArea_;
  W075 Virtual function is public
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W077 Virtual function has no overrides
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W092 Function could be free
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  W112 Function could be defaulted
    44:    virtual ~Object() { }
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    239:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
    262:          auto b = (ObjectBlock*) &seg[j];
    314:             auto b = (ObjectBlock*) &seg[j];
    351:             auto curr = (Pooled*) getptr1(item, diff);
    715:       return (ObjectBlock*) &blocks_[0][0];
    785:       return (ObjectBlock*) &blocks_[i][j];
    810:             auto b = (ObjectBlock*) &seg[j];
    842:    auto block = (const_ptr_t) ObjToBlock(obj);
    843:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    847:       auto b0 = (const_ptr_t) &blocks_[i][0];
    890:    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
    920:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    112:       reinterpret_cast< word* >(&pool->targSegments_), 0,
    478:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W008 Cast removes const qualification
    843:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  W099 Line contains adjacent spaces
    95:    CounterPtr      allocCount_;
    96:    CounterPtr      freeCount_;
    97:    CounterPtr      failCount_;
    98:    CounterPtr      auditCount_;
  W106 Function does not invoke Debug::ft
    278: size_t ObjectPool::AllocCount() const
    444: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    699: size_t ObjectPool::FailCount() const
    744: size_t ObjectPool::FreeCount() const
    751: bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
    763: size_t ObjectPool::InUseCount() const
    770: size_t ObjectPool::LowAvailCount() const
    777: ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
    796: Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
    869: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    878: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    887: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W110 Override of Base.Display not found
    75: class ObjectPoolSizeCfg : public CfgIntParm
    88: class ObjectPoolStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    88:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W042 Member could be private
    182:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    209:    virtual ~ObjectPool();
  W075 Virtual function is public
    99:    virtual Pooled* DeqBlock(size_t size);
    104:    virtual void EnqBlock(Pooled* obj, bool deleted);
    168:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    99:    virtual Pooled* DeqBlock(size_t size);
    104:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    229:    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
    234:    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  W092 Function could be free
    248:    static ObjectBlock* ObjToBlock(const Pooled* obj);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
  W106 Function does not invoke Debug::ft
    289: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
  W042 Member could be private
    56:    static bool NullifyObjectData() { return NullifyObjectData_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h
  W032 Unused function
    57:    static void* operator new[](size_t size);
  W112 Function could be defaulted
    44:    virtual ~Permanent() { }
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp
  W106 Function does not invoke Debug::ft
    48: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h
  W092 Function could be free
    41:    static PermanentHeap* Instance();
  W111 Override of Object.Patch not found
    36: class PermanentHeap : public SysHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    142:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    116:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.h
  W112 Function could be defaulted
    49:    virtual ~Pooled() { }
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
  W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W106 Function does not invoke Debug::ft
    124: Flags PS_Break()
    129: Flags PS_Delayed()
    134: Flags PS_Exit()
    139: Flags PS_Final()
    144: Flags PS_Interrupt()
    149: Flags PS_Native()
    154: Flags PS_NoError()
    159: Flags PS_NoLog()
    164: Flags PS_NoRecover()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h
  W053 Data could be const
    114:    signal_t value_;
    126:    uint8_t severity_;
    130:    Flags attrs_;
    134:    RegCell sid_;
  W054 Data could be const pointer
    118:    const char* name_;
    122:    const char* expl_;
  W065 Base class virtual destructor is not public
    105:    virtual ~PosixSignal();
  W082 Adjacent arguments have the same type
    99:    PosixSignal(signal_t value, const char* name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
  W106 Function does not invoke Debug::ft
    57: Flags PosixSignalRegistry::Attrs(signal_t value) const
    90: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    102: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h
  W032 Unused function
    56:    static void* operator new[](size_t size);
  W112 Function could be defaulted
    43:    virtual ~Protected() { }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ft(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h
  W032 Unused function
    57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h
  W088 Argument could be const
    79/1:    bool Enq(T& elem)
    100/1:    bool Henq(T& elem)
    122/1:    bool Insert(T* prev, T& elem)
    157/1:    bool Exq(T& elem)
    321/1:    void Corrupt(T* elem)
  W099 Line contains adjacent spaces
    387:    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
    388:    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
    389:    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
    390:    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
    391:    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
    393:    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
    394:    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
    395:    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
    396:    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
    397:    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
    398:    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp
  W106 Function does not invoke Debug::ft
    40: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h
  W032 Unused function
    57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h
  W088 Argument could be const
    135/1:    bool Exq(T& elem)
  W090 Function could be const
    135:    bool Exq(T& elem)
  W099 Line contains adjacent spaces
    360:    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
    361:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    362:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    363:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    364:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    365:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    366:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    367:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    368:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    369:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    371:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp
  W106 Function does not invoke Debug::ft
    37: RegCell::~RegCell()
    49: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h
  W088 Argument could be const
    266/1:    bool Erase(T& item)
  W099 Line contains adjacent spaces
    625:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    626:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    627:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    629:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    630:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    631:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    632:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    633:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    634:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    635:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h
  W092 Function could be free
    80:    static void Initiate(reinit_t reason, debug32_t errval);
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h
  W047 Data is init-only
    130:    static T* Instance_;
  W099 Line contains adjacent spaces
    126:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp
  W106 Function does not invoke Debug::ft
    125: Singletons* Singletons::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h
  W060 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W106 Function does not invoke Debug::ft
    117: uint64_t Statistic::Overall() const
    258: uint64_t HighWatermark::Overall() const
    334: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h
  W042 Member could be private
    66:    static ptrdiff_t CellDiff();
  W043 Member could be protected
    62:    virtual void DisplayStat(std::ostream& stream) const;
  W050 Data is not private
    89:    std::atomic_size_t curr_;
    93:    std::atomic_size_t prev_;
    97:    std::atomic_uint64_t total_;
    101:    size_t divisor_;
  W053 Data could be const
    118:    RegCell sid_;
    122:    DynString expl_;
  W060 Base class constructor is public
    134:    explicit Counter(const std::string& expl, size_t divisor = 1);
  W075 Virtual function is public
    58:    virtual uint64_t Overall() const;
    62:    virtual void DisplayStat(std::ostream& stream) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    81:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  W099 Line contains adjacent spaces
    39: fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h
  W042 Member could be private
    57:    id_t Gid() const { return gid_.GetId(); }
    61:    static ptrdiff_t CellDiff();
  W053 Data could be const
    100:    RegCell gid_;
    104:    DynString expl_;
  W075 Virtual function is public
    69:    virtual void DisplayStats(std::ostream& stream, id_t id) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
  W007 Cast down the inheritance hierarchy
    62:       (static_cast< CfgFileTimeParm* >(reg->FindParm("StatsFileName")));
  W106 Function does not invoke Debug::ft
    147: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h
  W042 Member could be private
    77:    StatisticsGroup* GetGroup(id_t gid) const;
    81:    void DisplayStats(std::ostream& stream) const;
    85:    static std::string StatsFileName() { return StatsFileName_; }
  W090 Function could be const
    115:    void StartInterval(bool first);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h
  W053 Data could be const
    53:    static secs_t LongIntervalSecs;
    58:    static secs_t ShortIntervalSecs;
    65:    static size_t WakeupsBetweenReports;
    70:    static ticks_t PrevToCurrTicks;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.cpp
  W018 Remove #include directive
    25: #include <sstream>
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h
  W043 Member could be protected
    57:    StreamRequest(const StreamRequest& that);
  W060 Base class constructor is public
    52:    StreamRequest();
    57:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h
  W053 Data could be const
    96:    DynString name_;
    108:    Q1Link link_;
  W092 Function could be free
    52:    static const std::string& ValidNameChars();
    57:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    53:    bool BindSymbol
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp
  W106 Function does not invoke Debug::ft
    32: std::istream& SysConsole::In()
    39: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.h
  W032 Unused function
    46:    bool Minimize(bool minimize);
    50:    bool SetTitle(const std::string& title);
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h
  W032 Unused function
    87:    void GetDir(std::string& dirName);
  W075 Virtual function is public
    46:    virtual void GetName(std::string& fileName) const = 0;
    50:    virtual bool IsSubdir() const = 0;
    54:    virtual bool AtEnd() const = 0;
    59:    virtual bool Advance() = 0;
  W082 Adjacent arguments have the same type
    99:    bool FindFiles(const char* dirName,
  W112 Function could be defaulted
    41:    virtual ~FileList() { }
    63:    FileList() { }
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp
  W056 Default constructor invoked: POD members not initialized
    57:    _finddata_t attributes_;
  W062 Member not included in member initialization list
    40:    FileWalker(const char* dirName, const char* fileSpec);
    57:    _finddata_t attributes_;
  W106 Function does not invoke Debug::ft
    99: bool FileWalker::AtEnd() const
    106: void FileWalker::GetName(string& fileName) const
    115: bool FileWalker::IsSubdir() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h
  W032 Unused function
    101:    static void* operator new[](size_t size);
    106:    static void operator delete[](void* addr);
  W090 Function could be const
    55:    bool Validate(const void* addr);
  W092 Function could be free
    87:    static void DisplayHeaps(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    162:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp
  W018 Remove #include directive
    23: #include "SysMemory.h"
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp
  W106 Function does not invoke Debug::ft
    48: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp
  W107 Function does not invoke Debug::ft as first statement
    107:    Debug::ft(SysMutex_Acquire);
C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h
  W027 Unused class
    54:    class SigAlrm : public PosixSignal
    68:    class SigBus : public PosixSignal
    96:    class SigQuit : public PosixSignal
    110:    class SigSys : public PosixSignal
    124:    class SigVtAlrm : public PosixSignal
  W092 Function could be free
    37:    static void CreateNativeSignals();
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h
  W030 Unused enumerator
    58:       LowPriority,       // preemptable threads
  W082 Adjacent arguments have the same type
    105:    static SysThread_t Create(const ThreadEntry entry,
  W088 Argument could be const
    106/4:       const Thread* client, size_t stackSize, SysThreadId& nid);
  W090 Function could be const
    141:    DelayRc Delay(msecs_t msecs);
    147:    bool Interrupt();
  W092 Function could be free
    52:    static SysThreadId RunningThreadId();
    112:    static SysThread_t Wrap();
    116:    static void Delete(SysThread_t& thread);
    121:    static SysSentry_t CreateSentry();
    125:    static void DeleteSentry(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
    144:       (DWORD*) &nid);                  // updates thread's identifier
    345:    _set_se_translator((_se_translator_function) SE_Handler);
  W008 Cast removes const qualification
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
  W026 Unused argument
    52/2: void SE_Handler(uint32_t errval, void* ex)
  W106 Function does not invoke Debug::ft
    269: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    296: SysThreadId SysThread::RunningThreadId()
  W107 Function does not invoke Debug::ft as first statement
    57:    Debug::ft(NodeBase_SE_Handler);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h
  W026 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    163:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  W015 #include not sorted in standard order
    29: #include <dbghelp.h>
  W082 Adjacent arguments have the same type
    72:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W106 Function does not invoke Debug::ft
    121: DWORD64 StackInfo::GetFrame(fn_depth depth)
    137: fn_depth StackInfo::GetFrames()
    145: void StackInfo::Shutdown()
    154: DWORD StackInfo::Startup()
    265: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h
  W032 Unused function
    71:    bool TickTimingAvailable() const { return available_; }
  W110 Override of Base.Display not found
    41: class SysTickTimer : public Immutable
  W111 Override of Object.Patch not found
    41: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W056 Default constructor invoked: POD members not initialized
    44:    LARGE_INTEGER frequency;
    75:       LARGE_INTEGER now;
    81:       _timeb now;
  W106 Function does not invoke Debug::ft
    71: ticks_t SysTickTimer::TicksNow() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    362:          Truncate(TimeField(int(field) + 1));
    545:          return OutOfRange(TimeField(f));
  W106 Function does not invoke Debug::ft
    181: int16_t SysTime::DayOfWeek() const
    191: int16_t SysTime::DayOfYear() const
    207: const int16_t* SysTime::DaysPerMonth(int16_t year)
    215: size_t SysTime::DaysSinceT0() const
    245: bool SysTime::IsLeapYear(int16_t year)
    265: int64_t SysTime::MsecsSinceT0() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h
  W032 Unused function
    76:    int16_t Get(TimeField field) const { return time_[field]; }
  W042 Member could be private
    80:    int16_t DayOfWeek() const;
    131:    const char* strMonth() const;
  W082 Adjacent arguments have the same type
    71:    SysTime(int16_t year, int16_t month, int16_t day,
  W092 Function could be free
    88:    static bool IsLeapYear(int16_t year);
    153:    static const int16_t* DaysPerMonth(int16_t year);
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp
  W056 Default constructor invoked: POD members not initialized
    42:    _timeb timebuff;
    43:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    33:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W106 Function does not invoke Debug::ft
    30: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h
  W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  W044 Typedef of pointer type
    88: typedef char* ptr_t;
    89: typedef const char* const_ptr_t;
    105: typedef const char* const fixed_string;
    110: typedef const char* const fn_name;      // for defining a function name
    111: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h
  W032 Unused function
    55:    static void* operator new[](size_t size);
  W112 Function could be defaulted
    42:    virtual ~Temporary() { }
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp
  W106 Function does not invoke Debug::ft
    29: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    36: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    43: void ThisThread::MakePreemptable()
    50: void ThisThread::MakeUnpreemptable()
    57: void ThisThread::MemProtect()
    64: void ThisThread::MemUnprotect()
    71: DelayRc ThisThread::Pause(msecs_t msecs)
    78: void ThisThread::PauseOver(word limit)
    85: word ThisThread::RtcPercentUsed()
    92: ThreadId ThisThread::RunningThreadId()
    99: TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
    106: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1170:    auto fake = reinterpret_cast< const Thread* >(&local);
  W009 Pointer arithmetic
    2682:    ptrdiff_t stacksize = &local - priv_->stackBase_;
  W047 Data is init-only
    482:    MutexGuard guard(&lock_);
    676:    MutexGuard guard(&lock_);
    711:    MutexGuard guard(&lock_);
  W092 Function could be free
    88:    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  W099 Line contains adjacent spaces
    264:    CounterPtr       traps_;
    265:    CounterPtr       yields_;
    266:    CounterPtr       exceeds_;
    270:    AccumulatorPtr   totUsecs_;
  W106 Function does not invoke Debug::ft
    438: ContextSwitch* ContextSwitches::AddSwitch()
    1151: TraceStatus Thread::CalcStatus(bool dynamic) const
    1532: main_t Thread::EnterThread(void* arg)
    1736: void Thread::FunctionInvoked(fn_name_arg func)
    1833: bool Thread::HasExited() const
    1896: bool Thread::IsLocked() const
    1903: Thread* Thread::LockedThread()
    1970: TraceRc Thread::LogContextSwitches(bool on)
    2095: SysThreadId Thread::NativeThreadId() const
    2123: DelayRc Thread::Pause(msecs_t msecs)
    2163: double Thread::PercentIdle()
    2522: bool Thread::RunningLocked()
    2673: void Thread::StackCheck()
    2945: TraceRc Thread::StartTracing(bool immediate, bool autostop)
    2981: void Thread::StopTracing()
    3044: void Thread::Trace(Thread* thr, fn_name_arg func, TraceRecordId rid, word info)
    3060: bool Thread::TraceRunningThread(Thread*& thr)
    3095: void Thread::TrapCheck()
  W107 Function does not invoke Debug::ft as first statement
    1656:    Debug::ft(Thread_ExitIfSafe);
    2467:    Debug::ft(Thread_ResumeLocked);
    2645:    Debug::ft(Thread_SignalHandler);
    2717:          Debug::ft(Thread_Start);
    3229:       Debug::ft(Thread_Unlock);
  W110 Override of Base.Display not found
    258: class ThreadStats : public Dynamic
    351: class ContextSwitches : public Permanent
    606: class Orphans : public Permanent
  W111 Override of Object.Patch not found
    351: class ContextSwitches : public Permanent
    606: class Orphans : public Permanent
    740: class ThreadPriv : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h
  W005 Functional cast
    157:    Id Tid() const { return Id(tid_.GetId()); }
  W026 Unused argument
    353/2:       (BlockingReason why, fn_name_arg func) { return true; }
    361/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W032 Unused function
    121:    static std::atomic_uint32_t* Vector();
    169:    bool ChangeFaction(Faction faction);
  W042 Member could be private
    125:    static bool TestFlag(FlagId fid);
    129:    static void ResetFlag(FlagId fid);
    161:    SysThreadId NativeThreadId() const;
    238:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    280:    virtual ~Thread();
  W075 Virtual function is public
    186:    virtual TraceStatus CalcStatus(bool dynamic) const;
    210:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    210:    virtual void DisplayStats(std::ostream& stream) const;
    292:    virtual bool EnqMsg(MsgBuffer& msg);
    298:    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  W082 Adjacent arguments have the same type
    560:    void DisplaySummary
  W090 Function could be const
    117:    bool Interrupt(const Flags& mask = Flags());
    508:    void SetTrap(bool on);
    516:    void StackCheck();
    528:    void SetSignal(signal_t sig);
  W092 Function could be free
    105:    static void PauseOver(word limit);
    219:    static double PercentIdle();
    223:    static TraceRc LogContextSwitches(bool on);
    227:    static void DisplayContextSwitches(std::ostream& stream);
    438:    static SysThread::Priority FactionToPriority(Faction& faction);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp
  W106 Function does not invoke Debug::ft
    287: bool ThreadAdmin::BreakEnabled()
    385: void ThreadAdmin::Incr(Register r)
    493: word ThreadAdmin::TrapCount()
  W110 Override of Base.Display not found
    51: class ThreadsStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h
  W092 Function could be free
    90:    static int WarpFactor();
  W099 Line contains adjacent spaces
    176:    CfgIntParmPtr  initTimeoutMsecs_;
    177:    CfgIntParmPtr  schedTimeoutMsecs_;
    179:    CfgIntParmPtr  rtcTimeoutMsecs_;
    181:    CfgIntParmPtr  rtcLimit_;
    182:    CfgIntParmPtr  rtcInterval_;
    184:    CfgIntParmPtr  trapLimit_;
    185:    CfgIntParmPtr  trapInterval_;
    187:    CfgIntParmPtr  stackUsageLimit_;
    188:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp
  W106 Function does not invoke Debug::ft
    209: ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
    218: Thread* ThreadRegistry::GetThread(ThreadId tid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h
  W090 Function could be const
    112:    void AssociateIds(const Thread& thread);
C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h
  W043 Member could be protected
    48:    ticks_t GetTicks() const { return ticks_; }
    52:    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
    56:    SysThreadId Nid() const { return nid_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h
  W053 Data could be const
    105:    char abbr_;
    109:    bool safe_;
  W065 Base class virtual destructor is not public
    92:    virtual ~Tool();
  W075 Virtual function is public
    56:    virtual const char* Name() const = 0;
    60:    virtual const char* Expl() const = 0;
    66:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp
  W106 Function does not invoke Debug::ft
    117: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp
  W103 Function not sorted in standard order
    67: ostream& operator<<(ostream& stream, TraceStatus status)
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.h
  W028 Unused data
    85: constexpr FlagId FirstAppTracer = 10;  // start of application-specific tracers
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    126:    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
    236:    auto addr = (TraceRecord*) &buff_[end_];
    431:       next = (uword*) record + incr;
    449:             record = (TraceRecord*) buff_;  // case (b)
    453:          record = (TraceRecord*) next;
    462:       next = (uword*) record + incr;
    488:       auto record = (TraceRecord*) &buff_[start_];
    595:    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  W009 Pointer arithmetic
    431:       next = (uword*) record + incr;
    462:       next = (uword*) record + incr;
  W106 Function does not invoke Debug::ft
    112: TraceBuffer::TraceBuffer() :
    140: TraceBuffer::~TraceBuffer()
    154: void* TraceBuffer::AddRecord(size_t nBytes)
    354: bool TraceBuffer::Empty() const
    385: bool TraceBuffer::IsLocked()
    394: void TraceBuffer::Lock()
    414: void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
    475: void TraceBuffer::PurgeRecords(size_t end)
    543: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    746: void TraceBuffer::Unlock()
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h
  W032 Unused function
    168:    const SysTime& StartTimeFull() const { return startTime_; }
  W042 Member could be private
    177:    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  W110 Override of Base.Display not found
    62: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp
  W005 Functional cast
    38:    size_(int16_t(size)),
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h
  W032 Unused function
    99:    static void operator delete(void* addr, void* where) { }
  W042 Member could be private
    90:    static void operator delete(void* addr) { }
    94:    static void* operator new(size_t size, void* where);
  W043 Member could be protected
    71:    void Nullify() { owner_ = NIL_ID; }
  W050 Data is not private
    136:    Id rid_ : 8;
  W075 Virtual function is public
    80:    virtual bool Display(std::ostream& stream, bool diff);
  W090 Function could be const
    116:    virtual void ClaimBlocks() { }
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    58:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  W007 Cast down the inheritance hierarchy
    198:             auto ft = static_cast<FunctionTrace*>(rec);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W053 Data could be const
    105:    size_t size_;
  W082 Adjacent arguments have the same type
    83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W090 Function could be const
    77:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W092 Function could be free
    83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W110 Override of Base.Display not found
    49: class FunctionProfiler : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    80:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    51: int FunctionStats::Compare(const FunctionStats& that) const
    69: void FunctionStats::IncrCalls(usecs_t net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W053 Data could be const
    84:    Q2Link link_;
  W112 Function could be defaulted
    49:    ~FunctionStats();
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3180:    pool->time_[id1].Truncate(TimeField(field - 1));
    3211:    pool->time_[id1].Round(TimeField(field - 1), interval);
  W006 reinterpret_cast
    1326:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    1846:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2407:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
    3641:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W022 Add using statement
    1: namespace NodeBase
  W028 Unused data
    187:    static const id_t LastNtIndex = SortIndex;
  W042 Member could be private
    3425:    typedef id_t Test;
  W047 Data is init-only
    234:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    426:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W053 Data could be const
    1190:    Q1Link link_;
    1702:    Q2Link link_;
  W082 Adjacent arguments have the same type
    196:    word Sort(const string& input, const string& output, string& expl) const;
  W092 Function could be free
    196:    word Sort(const string& input, const string& output, string& expl) const;
    3447:    static void UseBadPointer();
    3448:    static void LoopForever();
  W106 Function does not invoke Debug::ft
    1305: Q1WayItem::~Q1WayItem()
    1339: Q1WayPool::Q1WayPool()
    1368: void Q1WayPool::Reallocate()
    1825: Q2WayItem::~Q2WayItem()
    1859: Q2WayPool::Q2WayPool()
    1888: void Q2WayPool::Reallocate()
    2389: RegistryItem::~RegistryItem()
    2420: RegistryPool::RegistryPool()
  W107 Function does not invoke Debug::ft as first statement
    3521:       Debug::ft(RecoveryTestThread_Enter);
    3603:       Debug::ft(RecoveryTestThread_LoopForever);
  W110 Override of Base.Display not found
    1052: class LbcPool : public Temporary
    2811: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W028 Unused data
    80:    static const id_t LastNtIndex    = FuncTraceScope;
  W060 Base class constructor is public
    44:    CorruptWhatParm();
    56:    explicit CorruptCommand(bool bind = true);
    98:    NtSaveWhatParm();
    110:    explicit NtSaveCommand(bool bind = true);
    124:    SizesCommand();
    139:    TestcaseAction();
    160:    explicit TestcaseCommand(bool bind = true);
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    68:    return static_cast< NtTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W090 Function could be const
    82:    void Reset();
  W092 Function could be free
    45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp
  W047 Data is init-only
    97:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    247:    FunctionGuard guard(FunctionGuard::MakePreemptable);
  W106 Function does not invoke Debug::ft
    154: TestDatabase::State TestDatabase::GetState(const string& testcase)
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h
  W110 Override of Base.Display not found
    41: class TestDatabase : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    96/5:       byte_t*& dest, size_t& rcvd, SysTcpSocket* socket) const;
    104/1:       (IpBuffer& buff, byte_t* dest, const byte_t* src, size_t size) const;
    132/1:       (IpBuffer& buff, byte_t* src, size_t size) const;
    132/3:       (IpBuffer& buff, byte_t* src, size_t size) const;
    137/1:    virtual void SocketFailed(SysSocket* socket) const { }
  W043 Member could be protected
    65:    IpPort* Port() const { return port_; }
  W075 Virtual function is public
    95:    virtual IpBuffer* AllocBuff(const byte_t* source, size_t size,
    103:    virtual void NetworkToHost
    122:    virtual void ReceiveBuff
    131:    virtual byte_t* HostToNetwork
    137:    virtual void SocketFailed(SysSocket* socket) const { }
  W077 Virtual function has no overrides
    103:    virtual void NetworkToHost
    131:    virtual byte_t* HostToNetwork
    137:    virtual void SocketFailed(SysSocket* socket) const { }
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    79:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  W009 Pointer arithmetic
    197:       source += rcvd;
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W042 Member could be private
    89:    virtual bool ExitOnRestart(RestartLevel level) const override;
  W050 Data is not private
    93:    const ipport_t port_;
    98:    IpPort* ipPort_;
    102:    SysIpL2Addr host_;
    106:    size_t recvs_;
    110:    SysIpL3Addr txAddr_;
    115:    SysIpL3Addr rxAddr_;
    119:    ticks_t ticks0_;
    123:    byte_t* buffer_;
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    72:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    91:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    131:       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  W009 Pointer arithmetic
    143:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    143:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    244:       bytes = buff_ + hdrSize_;
    270:    bytes += hdrSize_;
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    205: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h
  W009 Pointer arithmetic
    103:    byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  W020 Using statement in header
    32: using namespace NodeBase;
  W042 Member could be private
    116:    virtual size_t PayloadSize() const;
  W060 Base class constructor is public
    52:    IpBuffer(MsgDirection dir, size_t header, size_t payload);
    56:    IpBuffer(const IpBuffer& that);
  W075 Virtual function is public
    116:    virtual size_t PayloadSize() const;
    135:    virtual bool AddBytes(const byte_t* source, size_t size, bool& moved);
  W077 Virtual function has no overrides
    135:    virtual bool AddBytes(const byte_t* source, size_t size, bool& moved);
  W082 Adjacent arguments have the same type
    52:    IpBuffer(MsgDirection dir, size_t header, size_t payload);
  W092 Function could be free
    169:    static size_t BuffSize(size_t nBytes);
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    276:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W099 Line contains adjacent spaces
    55:    CounterPtr       recvs_;
    56:    AccumulatorPtr   bytesRcvd_;
    59:    CounterPtr       discards_;
    60:    CounterPtr       rejects_;
    61:    CounterPtr       sends_;
    62:    AccumulatorPtr   bytesSent_;
    64:    CounterPtr       overflows_;
  W106 Function does not invoke Debug::ft
    205: size_t IpPort::Discards() const
  W110 Override of Base.Display not found
    49: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W043 Member could be protected
    69:    IoThread* GetThread() const { return thread_; }
  W053 Data could be const
    180:    Q1Link link_;
  W075 Virtual function is public
    89:    virtual SysTcpSocket* CreateAppSocket();
    124:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    124:    virtual void DisplayStats(std::ostream& stream) const;
  W090 Function could be const
    161:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W082 Adjacent arguments have the same type
    48:    IpPortCfgParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    283: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W110 Override of Base.Display not found
    47: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.h
  W020 Using statement in header
    32: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const IpService* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h
  W020 Using statement in header
    33: using namespace NodeBase;
  W032 Unused function
    82:    virtual CliText* CreateText() const = 0;
  W042 Member could be private
    100:    IpPort* Provision(ipport_t pid);
  W053 Data could be const
    152:    RegCell sid_;
  W065 Base class virtual destructor is not public
    134:    virtual ~IpService();
  W075 Virtual function is public
    54:    virtual const char* Name() const = 0;
    58:    virtual IpProtocol Protocol() const = 0;
    63:    virtual ipport_t Port() const = 0;
    67:    virtual Faction GetFaction() const = 0;
    71:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    75:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
    82:    virtual CliText* CreateText() const = 0;
    88:    virtual bool HasSharedSocket() const = 0;
    96:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W077 Virtual function has no overrides
    71:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    75:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  W090 Function could be const
    148:    virtual IpPort* CreatePort(ipport_t pid) = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    78: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W032 Unused function
    50:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W060 Base class constructor is public
    41:    NwClearWhatParm();
    56:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    95:    NwIncludeWhatParm();
    108:    explicit NwIncludeCommand(bool bind = true);
    123:    explicit NwQueryCommand(bool bind = true);
    136:    NwStatusCommand() = default;
  W111 Override of Object.Patch not found
    45: class NwClearCommand : public ClearCommand
    73: class NwExcludeCommand : public ExcludeCommand
    99: class NwIncludeCommand : public IncludeCommand
    118: class NwQueryCommand : public QueryCommand
    133: class NwStatusCommand : public StatusCommand
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    66:    static bool Registered;
  W092 Function could be free
    62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W042 Member could be private
    56:    bool PeersEmpty() const;
    60:    bool PortsEmpty() const;
  W110 Override of Base.Display not found
    42: class NwTracer : public Permanent
  W111 Override of Object.Patch not found
    42: class NwTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h
  W020 Using statement in header
    29: using namespace NodeBase;
  W060 Base class constructor is public
    42:    SysIpL2Addr();
    46:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    51:    explicit SysIpL2Addr(const std::string& text);
    55:    SysIpL2Addr(const SysIpL2Addr& that);
  W075 Virtual function is public
    79:    virtual std::string to_str() const;
  W092 Function could be free
    67:    static SysIpL2Addr LoopbackAddr();
    83:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W022 Add using statement
    1: namespace NodeBase
  W056 Default constructor invoked: POD members not initialized
    52:    in_addr result;
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    115:    bool operator!=(const SysIpL3Addr& that) const;
  W042 Member could be private
    111:    bool operator==(const SysIpL3Addr& that) const;
  W060 Base class constructor is public
    40:    SysIpL3Addr();
    45:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    51:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    59:    SysIpL3Addr
    64:    SysIpL3Addr(const SysIpL3Addr& that);
  W082 Adjacent arguments have the same type
    59:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    58:          auto netaddr = (sockaddr_in*) info->ai_addr;
    114:       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  W022 Add using statement
    1: namespace NodeBase
  W056 Default constructor invoked: POD members not initialized
    48:    addrinfo hints;
    105:    sockaddr_in addr;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    135: bool SysSocket::SetTracing(bool tracing)
    143: bool SysSocket::Trace(TraceStatus status)
    154: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W032 Unused function
    51: uint64_t htonll(uint64_t hostllong);
    54: uint64_t ntohll(uint32_t netllong);
  W043 Member could be protected
    98:    bool IsValid() const;
  W065 Base class virtual destructor is not public
    180:    virtual ~SysSocket();
  W075 Virtual function is public
    90:    virtual IpProtocol Protocol() const { return IpAny; }
    116:    virtual AllocRc SetService(const IpService* service, bool shared);
    120:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W092 Function could be free
    134:    static bool StartLayer();
    138:    static void StopLayer();
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    100:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    209:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    216:       (char*) &max, &maxsize) == SOCKET_ERROR)
    226:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    233:       (char*) &max, &maxsize) == SOCKET_ERROR)
  W015 #include not sorted in standard order
    26: #include <windows.h>
  W022 Add using statement
    1: namespace NodeBase
  W056 Default constructor invoked: POD members not initialized
    64:    sockaddr_in addr;
    252:    WSAData wsaData;
  W106 Function does not invoke Debug::ft
    35: uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
    37: uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
    39: uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
    41: uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
    43: uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
    45: uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    134:    bool LocAddr(SysIpL3Addr& locAddr);
    186:    void SetIcMsg(IpBuffer* buff);
    190:    IpBuffer* IcMsg() const { return icMsg_; }
    194:    IpBuffer* AcquireIcMsg();
  W042 Member could be private
    89:    word Connect(const SysIpL3Addr& remAddr);
    129:    word Send(const byte_t* data, size_t size);
    181:    bool IsOpen() const;
    216:    void Disconnect();
    221:    void Close();
  W075 Virtual function is public
    173:    virtual void Acquire();
    177:    virtual void Release();
  W077 Virtual function has no overrides
    173:    virtual void Acquire();
    177:    virtual void Release();
  W082 Adjacent arguments have the same type
    106:    static word Poll(SysTcpSocket* sockets[], size_t size, msecs_t msecs);
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    44:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    88:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    149:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    257:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
    313:       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
    323:       (char*) &val, &valsize) == SOCKET_ERROR)
  W006 reinterpret_cast
    239:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
    284:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  W007 Cast down the inheritance hierarchy
    310:    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  W022 Add using statement
    1: namespace NodeBase
  W056 Default constructor invoked: POD members not initialized
    41:    sockaddr_in peer;
    82:    sockaddr_in peer;
    146:    sockaddr_in host;
    254:    sockaddr_in peer;
  W057 Default constructor invoked
    180:    std::unique_ptr< pollfd[] > list(new pollfd[size]);
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    72:    word SendTo(const byte_t* data, size_t size, const SysIpL3Addr& remAddr);
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    48:          (char*) &max, &maxsize) == SOCKET_ERROR)
    77:       size, 0, (sockaddr*) &peer, &peersize);
    115:       size, 0, (sockaddr*) &peer, peersize);
  W006 reinterpret_cast
    76:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    114:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W022 Add using statement
    1: namespace NodeBase
  W056 Default constructor invoked: POD members not initialized
    67:    sockaddr_in peer;
    99:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    173:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    183:    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
    283:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    446:    auto sock = static_cast< SysTcpSocket* >(socket);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    466: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    77:    virtual void Unblock() override;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    65:    auto thread = static_cast< TcpIoThread* >(GetThread());
    70:       thread = static_cast< TcpIoThread* >(CreateIoThread());
    76:    auto svc = static_cast< const TcpIpService* >(GetService());
    106:    auto svc = static_cast< const TcpIpService* >(GetService());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    86:    virtual IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    40:    virtual bool AcceptsConns() const { return true; }
    45:    virtual size_t MaxConns() const = 0;
    50:    virtual size_t MaxBacklog() const = 0;
    54:    virtual bool Keepalive() const { return false; }
  W077 Virtual function has no overrides
    40:    virtual bool AcceptsConns() const { return true; }
    54:    virtual bool Keepalive() const { return false; }
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    108:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    112:       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
    243:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    58:    virtual void Unblock() override;
  W090 Function could be const
    78:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    57:    auto svc = static_cast< const UdpIpService* >(GetService());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h
  W042 Member could be private
    59:    virtual IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    82: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    513: void PotsCircuit::Trace(const SignalEntry& entry)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W032 Unused function
    91:    bool IsRinging() const { return ringing_; }
    95:    bool CanFlash() const { return flash_; }
    100:    Cause::Ind GetCause() const { return cause_; }
  W042 Member could be private
    132:    void ResetCircuit();
  W054 Data could be const pointer
    220:    PotsProfile* profile_;
  W056 Default constructor invoked: POD members not initialized
    232:    SignalEntry trace_[TraceSize];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    76: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    69: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    63:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    38: using namespace NodeBase;
  W026 Unused argument
    87/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W042 Member could be private
    63:    Id Fid() const { return Id(fid_.GetId()); }
    71:    const char* FullName() const { return name_; }
    75:    bool CanBeDeactivated() const { return deactivation_; }
    91:    static ptrdiff_t CellDiff();
  W054 Data could be const pointer
    133:    const char* abbr_;
    137:    const char* name_;
  W065 Base class virtual destructor is not public
    108:    virtual ~PotsFeature();
  W075 Virtual function is public
    86:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    103:    PotsFeature(PotsFeature::Id fid, bool deactivation,
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    97:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    55/1:    virtual bool Deactivate(PotsProfile& profile);
    89/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W042 Member could be private
    59:    PotsFeature::Id Fid() const { return fid_; }
    63:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    93:    PotsFeature::Id fid_;
    97:    Q1Link link_;
  W065 Base class virtual destructor is not public
    76:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    50:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    55:    virtual bool Deactivate(PotsProfile& profile);
  W077 Virtual function has no overrides
    89:    virtual bool Unsubscribe(PotsProfile& profile);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W090 Function could be const
    57:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    84: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
  W053 Data could be const
    58:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    443:       auto mep = static_cast< MediaEndpt* >(obj);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionTools;
  W022 Add using statement
    1: namespace NodeBase
  W060 Base class constructor is public
    40:    PbSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    86:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    40: using namespace NodeBase;
    41: using namespace CallBase;
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    113: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    577:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    746:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    867:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    955:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    592:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    653:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    760:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    786:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    880:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    968:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    589:    id_t             index;
    590:    word             sid, ind;
    592:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    652:    TestRc            rc;
    653:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    655:    id_t              index;
    656:    word              sid, ind;
    758:    word           port;
    760:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    785:    TestRc          rc;
    786:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    787:    word            port;
    879:    TestRc        rc;
    880:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    882:    bool          ring = false;
    883:    auto          exists = false;
    967:    TestRc        rc;
    968:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    970:    string        scan;
    971:    auto          digits = false;
    972:    auto          flash = false;
    973:    auto          exists = false;
  W106 Function does not invoke Debug::ft
    355: CliText* PotsAlertingSignal::CreateText() const
    369: CliText* PotsDigitsSignal::CreateText() const
    383: CliText* PotsFacilitySignal::CreateText() const
    397: CliText* PotsFlashSignal::CreateText() const
    411: CliText* PotsLockoutSignal::CreateText() const
    425: CliText* PotsOffhookSignal::CreateText() const
    439: CliText* PotsOnhookSignal::CreateText() const
    453: CliText* PotsProgressSignal::CreateText() const
    467: CliText* PotsReleaseSignal::CreateText() const
    481: CliText* PotsSuperviseSignal::CreateText() const
    524: CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
    566: CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
    736: CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
    857: CliParm* PotsRingParameter::CreateCliParm(Usage use) const
    945: CliParm* PotsScanParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h
  W020 Using statement in header
    46: using namespace NodeBase;
    47: using namespace SessionBase;
    48: using namespace MediaBase;
    49: using namespace CallBase;
  W028 Unused data
    106:    static const Id LastId    = NextId + 9;  // range constant
    134:    static const Id LastId   = NextId + 7;  // range constant
    226:    static const Ind MaxInd         = UINT8_MAX;
  W032 Unused function
    293:    MediaInfo* AddMedia(const MediaInfo& media);
    447:    virtual void InjectFinalMsg() override;
  W043 Member could be protected
    269:    explicit PotsMessage(SbIpBufferPtr& buff);
  W060 Base class constructor is public
    269:    explicit PotsMessage(SbIpBufferPtr& buff);
    273:    PotsMessage(ProtocolSM* psm, size_t size);
  W112 Function could be defaulted
    114:    virtual ~PotsSignal();
    142:    virtual ~PotsParameter();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    74: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    85: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    96: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp
  W015 #include not sorted in standard order
    97: #include "AnModule.h"
  W032 Unused function
    137: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeMsgEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    91: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    87: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    573:    auto fake = reinterpret_cast< const Context* >(&local);
    886:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    763:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    882:             (m)->FindParm(Parameter::Timeout);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    329: void Context::Dump() const
    953: bool Context::TraceOn()
    963: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    695:    Debug::ft(Context_ProcessWork);
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h
  W020 Using statement in header
    43: using namespace NodeBase;
  W026 Unused argument
    122/1:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  W032 Unused function
    117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
    272:    size_t MsgCount(bool priority, bool standard) const;
  W037 Member hides inherited name
    167:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    312:    Q2Link link_;
    336:    Faction faction_;
  W056 Default constructor invoked: POD members not initialized
    360:    MessageEntry trace_[TraceSize];
  W065 Base class virtual destructor is not public
    189:    virtual ~Context();
  W075 Virtual function is public
    101:    virtual ContextType Type() const = 0;
    105:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    109:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    113:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    133:    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  W088 Argument could be const
    291/1:    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  W090 Function could be const
    159:    bool StopTimer(const Base& owner, TimerId tid);
  W092 Function could be free
    122:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
    127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    138: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W042 Member could be private
    114:    virtual bool SaveContext();
    125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    131:    virtual void FreeContext(bool freeMsg);
    159:    virtual bool Save();
    163:    virtual Event* Restore(EventHandler::Rc& rc);
    167:    virtual void Free();
  W053 Data could be const
    214:    Id eid_;
  W075 Virtual function is public
    114:    virtual bool SaveContext();
    125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    131:    virtual void FreeContext(bool freeMsg);
  W092 Function could be free
    56:    static bool IsValidId(Id eid)
    72:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W065 Base class virtual destructor is not public
    126:    virtual ~EventHandler();
  W075 Virtual function is public
    117:    virtual Rc ProcessEvent
  W092 Function could be free
    86:    static bool AppCanRegister(Id ehid)
    94:    static bool AppCanUse(Id ehid)
  W111 Override of Object.Patch not found
    50: class EventHandler : public Protected
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    202:    auto fake = reinterpret_cast< const Factory* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W099 Line contains adjacent spaces
    49:    CounterPtr       icMsgsIntra_;
    50:    CounterPtr       icMsgsInter_;
    52:    CounterPtr       ogMsgsIntra_;
    53:    CounterPtr       ogMsgsInter_;
    55:    CounterPtr       contexts_;
    56:    CounterPtr       msgsDeleted_;
    57:    CounterPtr       ctxsDeleted_;
  W106 Function does not invoke Debug::ft
    219: size_t Factory::DiscardedContextCount() const
    226: size_t Factory::DiscardedMessageCount() const
  W110 Override of Base.Display not found
    43: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    87:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    45: using namespace NodeBase;
  W026 Unused argument
    127/1:    virtual Message* AllocOgMsg(SignalId sid) const;
  W032 Unused function
    219:    void SetFaction(Faction faction) { faction_ = faction; }
  W053 Data could be const
    267:    ProtocolId prid_;
  W054 Data could be const pointer
    271:    const char* name_;
  W065 Base class virtual destructor is not public
    203:    virtual ~Factory();
  W075 Virtual function is public
    121:    virtual CliText* CreateText() const;
    127:    virtual Message* AllocOgMsg(SignalId sid) const;
    134:    virtual bool InjectMsg(Message& msg) const;
    140:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
    172:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    172:    virtual void DisplayStats(std::ostream& stream) const;
  W082 Adjacent arguments have the same type
    157:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W088 Argument could be const
    150/1:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  W090 Function could be const
    150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    151: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ForceTransitionEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    49:    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
    85:    bool operator!=(const GlobalAddress& that) const;
  W082 Adjacent arguments have the same type
    53:    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    89: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    210:    auto fake = reinterpret_cast< const Initiator* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W053 Data could be const
    120:    ServiceId sid_;
    124:    ServiceId aid_;
    128:    TriggerId tid_;
    136:    Q1Link link_;
  W065 Base class virtual destructor is not public
    93:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    88:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W088 Argument could be const
    107/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    187:          reinterpret_cast< word* >(&poolSize_), 1,
    227:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    182:    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    535:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W022 Add using statement
    1: namespace NodeBase
  W099 Line contains adjacent spaces
    65:    CounterPtr       requeues_;
    66:    CounterPtr       trojans_;
    67:    CounterPtr       lockouts_;
  W106 Function does not invoke Debug::ft
    700: void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
    804: size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
    812: msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
    820: size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  W110 Override of Base.Display not found
    58: class InvokerPoolStats : public Dynamic
    72: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    69:    Faction GetFaction() const { return Faction(faction_.GetId()); }
  W020 Using statement in header
    43: using namespace NodeBase;
  W042 Member could be private
    91:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    116:    virtual ~InvokerPool();
  W075 Virtual function is public
    87:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    87:    virtual void DisplayStats(std::ostream& stream) const;
  W090 Function could be const
    147:    void KickThread();
    151:    Context* FindWork();
    175:    void Requeue(Context& ctx);
    183:    void ScheduledOut();
  W092 Function could be free
    187:    static bool GenerateLog(Factory::Rc rc);
    199:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    92:       auto p = reg->Pool(Faction(id));
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    178: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.h
  W020 Using statement in header
    34: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    124:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    113: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W042 Member could be private
    63:    static word RtcYieldPercent() { return RtcYieldPercent_; }
    71:    static ptrdiff_t CellDiff2();
  W053 Data could be const
    134:    RegCell iid_;
    160:    static word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W032 Unused function
    66:    bool operator!=(const LocalAddress& that) const;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    244: MsgDirection Message::Dir() const
    331: ProtocolId Message::GetProtocol() const
    366: SignalId Message::GetSignal() const
    422: MsgHeader* Message::Header() const
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h
  W020 Using statement in header
    46: using namespace NetworkBase;
    47: using namespace NodeBase;
  W029 Unused enum
    89:    enum Location
  W030 Unused enumerator
    91:       NotQueued,     // being built by a factory
    92:       ContextQ,      // has arrived at a context
    93:       PsmIncomingQ,  // has arrived at a PSM
    94:       PsmOutgoingQ,  // has been sent by a PSM
    95:       PsmPendingQ    // being built by a PSM
    105:       IllegalSignal,   // illegal signal found              0000  sid
    106:       IllegalParm,     // illegal parameter found          index  pid
    107:       IncompleteParm,  // parameter too short              index  pid
    108:       MissingParm,     // mandatory parameter missing       0000  pid
    109:       Overflow,        // last parameter extends past end  index  pid
    110:       Trampled         // last parameter trampled fence    index  pid
  W032 Unused function
    198:    Message* FindSignal(SignalId sid) const;
  W042 Member could be private
    350:    virtual void Handled(bool retain);
    354:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  W043 Member could be protected
    149:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    258:    MsgDirection Dir() const;
  W075 Virtual function is public
    149:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    169:    virtual void Save();
    174:    virtual void Unsave();
    182:    virtual bool Retrieve(ProtocolSM* psm);
    189:    virtual bool Relay(ProtocolSM& ogPsm);
    193:    virtual bool SendToSelf();
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    279:    virtual bool Send(Route route);
    283:    virtual bool Restore();
  W077 Virtual function has no overrides
    169:    virtual void Save();
    174:    virtual void Unsave();
    182:    virtual bool Retrieve(ProtocolSM* psm);
    189:    virtual bool Relay(ProtocolSM& ogPsm);
    193:    virtual bool SendToSelf();
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    283:    virtual bool Restore();
    337:    virtual void Refresh();
    350:    virtual void Handled(bool retain);
    354:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
    362:    virtual void ClearContext() const;
  W090 Function could be const
    127:    void SetSignal(SignalId sid);
    131:    void SetJoin(bool join);
    242:    void SetProtocol(ProtocolId prid);
    246:    void SetPriority(Priority prio);
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    379:    void SetRxAddr(const LocalAddress& rxaddr);
  W092 Function could be free
    291:    static const char* strPriority(Priority prio);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    82:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h
  W042 Member could be private
    58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W092 Function could be free
    58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h
  W020 Using statement in header
    34: using namespace NetworkBase;
  W042 Member could be private
    53:    uint8_t           spare    : 6;   // reserved for future use
  W099 Line contains adjacent spaces
    44:    LocalAddress      txAddr;         // source address
    45:    LocalAddress      rxAddr;         // destination address
    47:    bool              initial  : 1;   // true for initial message
    48:    bool              final    : 1;   // true for final message
    49:    bool              join     : 1;   // true to create PSM and join root SSM
    50:    bool              self     : 1;   // true for message to self
    51:    bool              injected : 1;   // true if sent by InjectCommand
    52:    bool              kill     : 1;   // true to kill context on arrival
    53:    uint8_t           spare    : 6;   // reserved for future use
    54:    Message::Route    route    : 2;   // the route that the message took
    55:    ProtocolId        protocol : 16;  // message's protocol
    56:    SignalId          signal   : 16;  // message's signal
    57:    uint16_t          length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    78:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    151:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    215:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    272:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    351:    return const_cast< MsgPort* >(this);
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W028 Unused data
    142:    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  W092 Function could be free
    185:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    102:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    194: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    79:    Id Pid() const { return Id(pid_.GetId()); }
  W020 Using statement in header
    40: using namespace NodeBase;
  W030 Unused enumerator
    115:       StreamContainsIllegalParm,
  W032 Unused function
    83:    ProtocolId Prid() const { return prid_; }
  W053 Data could be const
    187:    ProtocolId prid_;
  W065 Base class virtual destructor is not public
    173:    virtual ~Parameter();
  W075 Virtual function is public
    93:    virtual void DisplayMsg(std::ostream& stream,
    102:    virtual CliParm* CreateCliParm(Usage use) const;
    131:    virtual TestRc InjectMsg
    144:    virtual TestRc VerifyMsg
  W092 Function could be free
    149:    static const char* ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    135: Parameter* Protocol::FirstParm() const
    148: Signal* Protocol::FirstSignal() const
    161: Parameter* Protocol::GetParameter(ParameterId pid) const
    173: Signal* Protocol::GetSignal(SignalId sid) const
    185: void Protocol::NextParm(Parameter*& parm) const
    198: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h
  W005 Functional cast
    71:    Id Prid() const { return Id(prid_.GetId()); }
  W020 Using statement in header
    40: using namespace NodeBase;
  W032 Unused function
    80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W042 Member could be private
    71:    Id Prid() const { return Id(prid_.GetId()); }
  W065 Base class virtual destructor is not public
    136:    virtual ~Protocol();
  W075 Virtual function is public
    80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    112:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h
  W020 Using statement in header
    34: using namespace NetworkBase;
    35: using namespace NodeBase;
  W026 Unused argument
    174/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W032 Unused function
    75:    bool IsLowermost() const { return lower_ == nullptr; }
  W042 Member could be private
    119:    virtual ProtocolLayer* JoinPeer
    126:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W043 Member could be protected
    71:    bool IsUppermost() const { return upper_ == nullptr; }
    96:    virtual FactoryId GetFactory() const = 0;
  W065 Base class virtual destructor is not public
    150:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    59:    virtual MsgPort* Port() const = 0;
    63:    virtual ProtocolSM* UppermostPsm() const = 0;
    96:    virtual FactoryId GetFactory() const = 0;
    100:    virtual Message::Route Route() const = 0;
    109:    virtual SysTcpSocket* CreateAppSocket();
    119:    virtual ProtocolLayer* JoinPeer
    126:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W090 Function could be const
    191:    virtual Message* UnwrapMsg(Message& msg);
    198:    virtual Message* WrapMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    434:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    698:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W026 Unused argument
    300/1:    virtual void MsgHandled(Message& msg) { }
    306/1:    virtual void RestoreIcMsg(Message& msg) { }
    312/1:    virtual void RefreshMsg(Message& msg) { }
  W030 Unused enumerator
    95:       SignalUnknown,     // signal not recognized
    97:       ParameterUnknown,  // parameter not recognized
    98:       ParameterInvalid,  // parameter not valid for this signal
  W032 Unused function
    136:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    194:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    324:    virtual void InjectFinalMsg();
  W042 Member could be private
    67:    typedef uint8_t Priority;
    250:    virtual bool SendMsg(Message& msg) override;
  W043 Member could be protected
    75:    enum IncomingRc
    84:    enum OutgoingRc
    130:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W053 Data could be const
    371:    FactoryId fid_;
  W077 Virtual function has no overrides
    240:    virtual void SetState(StateId stid);
    295:    virtual Priority GetPriority() const { return NormalPriority; }
    300:    virtual void MsgHandled(Message& msg) { }
    306:    virtual void RestoreIcMsg(Message& msg) { }
    312:    virtual void RefreshMsg(Message& msg) { }
  W090 Function could be const
    117:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    84:    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/PsmFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    48:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W026 Unused argument
    50/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    50:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    91:    StateId CurrState() const { return currState_; }
    104:    Message* SavedMsg() const { return savedMsg_; }
    213:    StateId CurrState() const { return currState_; }
    217:    StateId NextState() const { return nextState_; }
    358:    bool IsInitiation() const { return initiation_; }
    369:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    48:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    124:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    138:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W111 Override of Object.Patch not found
    40: class SbAnalyzeMessage : public EventHandler
    54: class SbAnalyzeSap : public EventHandler
    68: class SbAnalyzeSnp : public EventHandler
    82: class SbForceTransition : public EventHandler
    96: class SbInitiationReq : public EventHandler
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    752:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    701:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    819:       auto msg = static_cast< Message* >(obj);
    906:       auto port = static_cast< MsgPort* >(obj);
    1118:       auto psm = static_cast< ProtocolSM* >(obj);
    1350:       auto ssm = static_cast< ServiceSM* >(obj);
    1563:       auto tmr = static_cast< Timer* >(obj);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W028 Unused data
    57:    static const id_t LastSbIndex    = LastNwIndex + 9;
    86:    static const id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const id_t LastSbIndex   = LastNwIndex + 5;
  W112 Function could be defaulted
    42:    virtual ~SbClearWhatParm() { }
    62:    virtual ~SbClearCommand() { }
    75:    virtual ~SbExcludeWhatParm() { }
    91:    virtual ~SbExcludeCommand() { }
    104:    virtual ~SbIncludeWhatParm() { }
    120:    virtual ~SbIncludeCommand() { }
    135:    virtual ~SbQueryCommand() { }
    147:    SbStatusCommand() { }
    148:    virtual ~SbStatusCommand() { }
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    77:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    108:    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    59:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    71:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W075 Virtual function is public
    42:    virtual bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    64:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    85:    static void operator delete(void* addr, SbPoolUser user);
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    66:    static bool Registered;
  W092 Function could be free
    62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    223:       auto port = static_cast< MsgPort* >(obj);
    284:    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
    301:       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    406: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W110 Override of Base.Display not found
    194: class TimerPool : public ObjectPool
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    143:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    148:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    462:    width -= col_t(label.size());
  W007 Cast down the inheritance hierarchy
    355:          bt = static_cast< BuffTrace* >(rec);
    857:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    860:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    887:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W042 Member could be private
    535:    const StateId stid_;
  W050 Data is not private
    492:    ServiceId owner_;
    496:    const EventId eid_;
    531:    const ServiceId sid_;
    535:    const StateId stid_;
    539:    const EventHandler::Rc rc_;
  W060 Base class constructor is public
    468:    EventTrace(Id rid, const Event& evt);
    513:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    169:    static BuffTrace* NextIcMsg
    484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W092 Function could be free
    243:    static std::string OutputId(const std::string& label, id_t id);
    484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W082 Adjacent arguments have the same type
    129:    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
    181:       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  W110 Override of Base.Display not found
    115: class SbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    283:    auto fake = reinterpret_cast< const Service* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    371: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    59:    Id Sid() const { return Id(sid_.GetId()); }
  W020 Using statement in header
    35: using namespace NodeBase;
  W032 Unused function
    125:    bool Disable();
    129:    bool Enable();
  W042 Member could be private
    73:    static bool IsValidPortId(PortId pid)
    115:    bool IsModifiable() const { return modifiable_; }
    119:    bool IsModifier() const { return modifier_; }
  W043 Member could be protected
    63:    typedef ServicePortId PortId;
    81:    virtual const char* PortName(PortId pid) const;
  W065 Base class virtual destructor is not public
    179:    virtual ~Service();
  W075 Virtual function is public
    81:    virtual const char* PortName(PortId pid) const;
    111:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    174:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W092 Function could be free
    73:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp
  W004 C-style cast
    773:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    775:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  W007 Cast down the inheritance hierarchy
    457:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    461:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    462:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    513:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    519:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    521:             (sapEvent)->CurrInitiator();
    773:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    775:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
    879:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    883:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    946:                (initEvent)->GetModifier();
    986:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    312: Service* ServiceSM::GetService() const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W026 Unused argument
    81/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    189/1:       (Event& currEvent, Event*& nextEvent);
    189/2:       (Event& currEvent, Event*& nextEvent);
  W032 Unused function
    134:    bool HasTriggered(TriggerId tid) const;
  W042 Member could be private
    97:    StateId NextState() const { return nextState_; }
  W065 Base class virtual destructor is not public
    169:    virtual ~ServiceSM();
  W075 Virtual function is public
    69:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    75:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    81:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    102:    virtual void SetNextState(StateId stid);
    109:    virtual void PsmDeleted(ProtocolSM& exPsm);
    123:    virtual void SetNextSap(TriggerId sap);
    129:    virtual void SetNextSnp(TriggerId snp);
    141:    virtual void MorphToService(ServiceId sid);
  W077 Virtual function has no overrides
    141:    virtual void MorphToService(ServiceId sid);
  W090 Function could be const
    188:    virtual EventHandler::Rc ProcessInitNack
    238:    EventHandler::Rc ProcessSsmqSap
    249:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    77:    auto fake = reinterpret_cast< const Signal* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    75:    Id Sid() const { return Id(sid_.GetId()); }
  W020 Using statement in header
    36: using namespace NodeBase;
  W032 Unused function
    79:    ProtocolId Prid() const { return prid_; }
  W053 Data could be const
    118:    ProtocolId prid_;
  W065 Base class virtual destructor is not public
    109:    virtual ~Signal();
  W075 Virtual function is public
    86:    virtual CliText* CreateText() const;
  W092 Function could be free
    60:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    97:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W092 Function could be free
    86:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h
  W026 Unused argument
    47/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    41:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    47:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    55:    SsmFactory(Id fid, ProtocolId prid, const char* name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    190:    auto fake = reinterpret_cast< const State* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    125: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    157: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    237: EventHandlerId State::GetHandler(EventId eid) const
    245: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    54:    Id Stid() const { return Id(stid_.GetId()); }
  W020 Using statement in header
    31: using namespace NodeBase;
  W032 Unused function
    58:    ServiceId Sid() const { return sid_; }
  W053 Data could be const
    117:    ServiceId sid_;
  W065 Base class virtual destructor is not public
    91:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h
  W020 Using statement in header
    29: using namespace NodeBase;
  W027 Unused class
    39: class TextTlvMessage : public TlvMessage
  W032 Unused function
    60:    explicit TextTlvMessage(SbIpBufferPtr& text);
    64:    TextTlvMessage(ProtocolSM* psm, size_t size);
    70:    bool Receive();
  W077 Virtual function has no overrides
    79:    virtual SbIpBufferPtr Parse() = 0;
    86:    virtual SbIpBufferPtr Build() = 0;
  W090 Function could be const
    79:    virtual SbIpBufferPtr Parse() = 0;
    86:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    191:    auto fake = reinterpret_cast< const Timer* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W037 Member hides inherited name
    54:    static ptrdiff_t LinkDiff();
  W042 Member could be private
    54:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    136:    TimerId tid_;
    148:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    119:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W111 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W006 reinterpret_cast
    142:          auto psm = reinterpret_cast< const Base* >(t->Psm());
    154:          auto psm = reinterpret_cast< const Base* >(t->Psm());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    60: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W112 Function could be defaulted
    58:    virtual ~TlvIntParameter() { }
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    177:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    286:    return (Fence*) fence;
    444:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    67:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    512:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W009 Pointer arithmetic
    177:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    285:    auto fence = layout->bytes + layout->header.length;
  W017 Add #include directive
    1: "Debug.h"
  W022 Add using statement
    1: namespace NodeBase
  W056 Default constructor invoked: POD members not initialized
    194:    ParmIterator pit;
    317:    ParmIterator pit;
    337:    ParmIterator pit;
    398:    ParmIterator locpit;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h
  W006 reinterpret_cast
    265:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W018 Remove #include directive
    28: #include "Debug.h"
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    61:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    66:    TlvMessage(const Message& msg, ProtocolSM* psm);
    75:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    166:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    172:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    186:    TlvParmPtr AddBytes(const byte_t* src, size_t size, ParameterId pid);
    192:    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
    196:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
    248:    byte_t* FindBytes(size_t& size, ParameterId pid) const;
    255:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    270:    size_t ParmOffset(ParmIterator& pit) const;
  W042 Member could be private
    155:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    160:    TlvParmPtr NextParm(ParmIterator& pit) const;
    181:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    242:    typedef uint16_t Fence;
    260:    virtual void AddFence();
    264:    TlvMsgLayout* TlvLayout() const
    275:    Fence* FencePtr() const;
    279:    void CheckFence() const;
  W060 Base class constructor is public
    49:    explicit TlvMessage(SbIpBufferPtr& buff);
    53:    TlvMessage(ProtocolSM* psm, size_t size);
    61:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    66:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W075 Virtual function is public
    75:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    181:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    196:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
    200:    virtual void DeleteParm(TlvParmLayout& parm);
  W077 Virtual function has no overrides
    75:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    181:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    196:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
    200:    virtual void DeleteParm(TlvParmLayout& parm);
    255:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    260:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    112:    template< typename T > T* CopyType
  W088 Argument could be const
    200/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W092 Function could be free
    222:    static size_t Pad(size_t size)
    299:    inline static fn_name TlvMessage_FindType()
    301:    inline static fn_name TlvMessage_AddType()
    303:    inline static fn_name TlvMessage_CopyType()
    305:    inline static fn_name TlvMessage_VerifyParm()
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    73:    auto& tmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W032 Unused function
    73:    static Id ExtractPid(const TlvParmLayout& parm);
  W044 Typedef of pointer type
    60: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    61: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W092 Function could be free
    73:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    69:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h
  W032 Unused function
    39:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W042 Member could be private
    74:    static bool IsValidId(Id tid)
  W053 Data could be const
    118:    Id tid_;
  W065 Base class virtual destructor is not public
    99:    virtual ~Trigger();
  W092 Function could be free
    74:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    61:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    64:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    101:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    117:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    119:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    139:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    154:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    155:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    170:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    172:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    178:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    199:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    226:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    256:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    273:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    297:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    312:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    326:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    341:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    356:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    358:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    377:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    398:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    413:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    429:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    446:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    447:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    464:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    478:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    480:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    510:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    525:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    526:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    541:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    542:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    563:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    582:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    597:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    599:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    624:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    653:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    668:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    684:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    700:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    702:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    723:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    738:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    754:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    756:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    773:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    799:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    818:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    833:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    852:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    867:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    883:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    885:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    894:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    921:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    922:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    960:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    976:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    992:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    993:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    1008:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    1009:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1043:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1064:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    73:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    78:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    86:       SetNPsm(static_cast< CipPsm& >(psm));
    90:       SetUPsm(static_cast< MediaPsm& >(psm));
    130:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    385: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    112:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    193:       auto pmsg = static_cast< const PotsMessage* >(msg);
    195:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    199:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    200:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    263:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    96:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    97:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    94:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    115:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    105:       return static_cast< PotsCallPsm* >(psm);
    177:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    212:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    206:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    266:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    289:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    305:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    293:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    298:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    300:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    321:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    322:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    374:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    401:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    483:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    485:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    498:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    520:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    534:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    540:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    546:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    580:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    583:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    638:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    645:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    660:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    668:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    686:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
  W112 Function could be defaulted
    111:    PotsCfxEventHandler();
    112:    virtual ~PotsCfxEventHandler();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    42: using namespace SessionBase;
    43: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
  W026 Unused argument
    60/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1465:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    447:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1166:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1203:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1273:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1300:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1314:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1380:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1424:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1973:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1974:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    2004:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    2019:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2021:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2028:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    2125:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2127:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2128:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    2129:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2224:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2238:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2252:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2266:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2282:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2297:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2311:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2326:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2341:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2342:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2357:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2358:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2372:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2394:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    434/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W053 Data could be const
    185:    Cause::Ind cause_;
  W092 Function could be free
    454:    static EventHandler::Rc SendFacilityNack
  W112 Function could be defaulted
    236:    PotsCwmEventHandler();
    237:    virtual ~PotsCwmEventHandler();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    290:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    617:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    622:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    623:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    640:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    648:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    686:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    716:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    811:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    813:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    908:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    930:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    961:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    963:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    969:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    994:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    1019:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1020:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    1040:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1041:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1045:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1064:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1066:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1070:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1110:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1111:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1113:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1159:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W042 Member could be private
    252:    void StartTimer(TimerId tid, secs_t duration);
  W053 Data could be const
    147:    Facility::Ind ind_;
  W075 Virtual function is public
    257:    virtual void Cancel() override;
  W112 Function could be defaulted
    159:    PotsCwtEventHandler();
    160:    virtual ~PotsCwtEventHandler();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    131:    auto& pssm = static_cast< BcSsm& >(*Parent());
    133:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    85:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    175:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    181:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    195:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    246:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    249:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    361:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    414:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    747:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    750:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    823:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    891:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    998:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    999:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1021:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1052:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1053:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1076:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W112 Function could be defaulted
    83:    PotsMuxEventHandler();
    84:    virtual ~PotsMuxEventHandler();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    157/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W032 Unused function
    76:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W042 Member could be private
    159:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    55:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    56:    auto msg = static_cast< CipMessage* >(ame.Msg());
    58:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    91:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    108:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    110:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    134:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    135:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    137:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    174:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    184:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    208:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    226:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    245:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    246:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    248:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    295:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    313:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    314:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    316:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    358:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    359:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    361:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    412:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    430:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    448:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    466:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    484:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    517:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    518:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    548:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    567:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    568:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    598:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    618:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    619:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    134:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    135:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    136:    auto          sid = msg->GetSignal();
    137:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    139:    CauseInfo*    cci;
    245:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    246:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    247:    auto          sid = msg->GetSignal();
    248:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    250:    CauseInfo*    cci;
    313:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    314:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    315:    auto          sid = msg->GetSignal();
    316:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    318:    CauseInfo*    cci;
    358:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    359:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    360:    auto          sid = msg->GetSignal();
    361:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    363:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
  W112 Function could be defaulted
    59:    ~PotsProxyNull();
    67:    ~PotsProxyAuthorizingOrigination();
    75:    ~PotsProxyCollectingInformation();
    83:    ~PotsProxyAnalyzingInformation();
    91:    ~PotsProxySelectingRoute();
    99:    ~PotsProxyAuthorizingCallSetup();
    107:    ~PotsProxySendingCall();
    115:    ~PotsProxyOrigAlerting();
    123:    ~PotsProxyAuthorizingTermination();
    131:    ~PotsProxySelectingFacility();
    139:    ~PotsProxyPresentingCall();
    147:    ~PotsProxyTermAlerting();
    155:    ~PotsProxyActive();
    163:    ~PotsProxyLocalSuspending();
    171:    ~PotsProxyRemoteSuspending();
    179:    ~PotsProxyException();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h
  W005 Functional cast
    59:    virtual ipport_t Port() const override { return ipport_t(port_); }
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    44: using namespace CallBase;
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W032 Unused function
    72:    virtual CliText* CreateText() const override;
  W042 Member could be private
    417:    ProtocolSM* TimerPsm(TimerId tid) const;
  W092 Function could be free
    133:    static void SendRelease(const Message& msg1);
  W110 Override of Base.Display not found
    52: class PotsCallIpService : public UdpIpService
  W112 Function could be defaulted
    204:    ~PotsBcNull();
    212:    ~PotsBcAuthorizingOrigination();
    220:    ~PotsBcCollectingInformation();
    228:    ~PotsBcAnalyzingInformation();
    236:    ~PotsBcSelectingRoute();
    244:    ~PotsBcAuthorizingCallSetup();
    252:    ~PotsBcSendingCall();
    260:    ~PotsBcOrigAlerting();
    268:    ~PotsBcAuthorizingTermination();
    276:    ~PotsBcSelectingFacility();
    284:    ~PotsBcPresentingCall();
    292:    ~PotsBcTermAlerting();
    300:    ~PotsBcActive();
    308:    ~PotsBcLocalSuspending();
    316:    ~PotsBcRemoteSuspending();
    324:    ~PotsBcException();
    341:    ~PotsAuthorizeOriginationSap();
    354:    ~PotsCollectInformationSap();
    368:    ~PotsAuthorizeTerminationSap();
    381:    ~PotsLocalBusySap();
    391:    ~PotsLocalAlertingSnp();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W042 Member could be private
    45:    typedef uint8_t Id;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    83:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W112 Function could be defaulted
    40:    virtual ~PotsSusInitiator() { }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    119: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    201: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
  W042 Member could be private
    57:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    206:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    255:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    299:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    329:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h
  W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
  W053 Data could be const
    161:    PotsTreatmentQueue::QId qid_;
    165:    Q1Link link_;
    194:    Tone::Id tone_;
    198:    secs_t duration_;
  W075 Virtual function is public
    137:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    193:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    195:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    438:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    465:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    467:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    472:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    544:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    547:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    607:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    627:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    664:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    669:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    671:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    692:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    693:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W112 Function could be defaulted
    116:    PotsWmlEventHandler();
    117:    virtual ~PotsWmlEventHandler();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h
  W020 Using statement in header
    27: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    76: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h
  W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
  W053 Data could be const
    128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    151:          tt = static_cast< const TransTrace* >(rec);
    159:          auto mt = static_cast< const MsgTrace* >(rec);
    712:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    729:             trans = static_cast< const TransTrace* >(rec);
    741:             return static_cast< const MsgTrace* >(rec);
    758:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    779:             trans = static_cast< const TransTrace* >(rec);
    786:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    947:          tt = static_cast< const TransTrace* >(rec);
    983:             mt = static_cast< const MsgTrace* >(rec);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h
  W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    99:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    88: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W053 Data could be const
    145:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    56: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W053 Data could be const
    85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    140:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace NodeTools
  W047 Data is init-only
    455:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace NodeTools;
  W022 Add using statement
    1: namespace NodeBase
  W060 Base class constructor is public
    40:    StSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    69:    return static_cast< StTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W082 Adjacent arguments have the same type
    70:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W092 Function could be free
    47:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    509:    auto tpsm = static_cast< TestPsm* >(Psm());
    526:    auto tssm = static_cast< TestSsm* >(RootSsm());
    580:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    858:       SetTestPsm(static_cast< TestPsm* >(&psm));
    986:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    987:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    1025:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1034:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    1045:    auto& tssm = static_cast< TestSsm& >(ssm);
    1063:    auto& tssm = static_cast< TestSsm& >(ssm);
    1082:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1083:    auto& tssm = static_cast< TestSsm& >(ssm);
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W112 Function could be defaulted
    132:    TestEventHandler();
    133:    virtual ~TestEventHandler();
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    43: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    264:    void UpdateTestPsm();
    340:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    346:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W090 Function could be const
    264:    void UpdateTestPsm();
  W112 Function could be defaulted
    82:    virtual ~TestSignal();
