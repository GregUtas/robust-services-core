LINE COUNTS
   75805   source code not in one of the categories below
   43139   blank line
   17661   blank comment
   10365   comment at the top of a file (e.g. for the file's name or license info)
    7509   comment followed by repeated characters to draw a rule (e.g. //---- ...)
     167   comment followed by a character that classifies it (e.g. //c <text>)
   19904   comment not in one of the categories above (e.g. //  <text>)
       0   C-style comment
   15308   bare left brace
   13520   bare right brace
    1789   bare right brace with semicolon
    2399   access control
    4636   invocation of Debug::ft
    4753   definition of an fn_name
    6159   #include directive
    1125   preprocessor directive other than #include
     902   using statement
  225141   TOTAL

WARNING COUNTS (* if supported by >fix)
  W004   125  C-style cast
  W005    52  Functional cast
  W006   126  reinterpret_cast
  W007   578  Cast down the inheritance hierarchy
  W008    45  Cast removes const qualification
  W009    15  Pointer arithmetic
* W015     4  #include not sorted in standard order
* W018     1  Remove #include directive
* W020   145  Using statement in header
* W022   229  Add using statement
* W024     1  Add forward declaration
  W026    30  Unused argument
  W027     7  Unused class
* W028    44  Unused data
* W029     1  Unused enum
* W030    20  Unused enumerator
* W032   185  Unused function
* W033     1  Unused typedef
  W037     9  Member hides inherited name
  W042   145  Member could be private
  W043    55  Member could be protected
  W044    13  Typedef of pointer type
* W048     2  Data is write-only
  W050    26  Data is not private
  W052     1  DATA CANNOT BE CONST POINTER
* W053    65  Data could be const
* W054     3  Data could be const pointer
* W055     1  Data need not be mutable
  W056    26  Default constructor invoked: POD members not initialized
* W057     1  Default constructor invoked
  W060    71  Base class constructor is public
  W062     2  Member not included in member initialization list
  W065    27  Base class virtual destructor is not public
  W075   388  Virtual function is public
  W077    57  Virtual function has no overrides
  W082    90  Adjacent arguments have the same type
* W088    41  Argument could be const
* W090    98  Function could be const
  W092   162  Function could be free
* W097    33  Line indentation is not a multiple of the standard value
* W099   291  Line contains adjacent spaces
  W102     4  Line length exceeds the standard maximum
  W103     1  Function not sorted in standard order
  W104    35  File heading is not standard
* W106   581  Function does not invoke Debug::ft
  W107    15  Function does not invoke Debug::ft as first statement
  W110    37  Override of Base.Display not found
* W111    11  Override of Object.Patch not found
* W117    30  Line can merge with the next line and be under the length limit
  W119    70  Argument passed by value is modified
  W120     4  Function returns non-const reference or pointer to member data
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE
W004 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(503):    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1070):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(597):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(629):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(491):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(844):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1374):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1574):    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4010):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(365):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1528):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1742):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2442):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2531):    return (CxxScoped*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2544):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(195):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(526):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(645):    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1281):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1379):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(393):    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(104):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(104):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(237):    return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(97):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.cpp(151):       auto base = (const Base*) obj;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(328):    auto after = (ptr_t) next_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(341):       if(wrap && (after > (const_ptr_t) first)) return nullptr;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(348):       if(wrap || (after > (const_ptr_t) first)) return nullptr;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(525):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(525):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(527):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(527):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(285):    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(326):    heap_->state = (uint8_t*) (heapAddr + infoSize);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(358):          ReleaseBlock((HeapBlock*) addr, level);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(369):       ReserveBlock((HeapBlock*) addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(453):       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(500):    auto block = (const HeapBlock*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(625):                   if(block < (HeapBlock*) heap_)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(627):                   else if(block < (HeapBlock*) heap_->minAddr)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(695):    FreeBlock((HeapBlock*) addr, level);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(744):    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(826):       auto size = BlockToSize((const HeapBlock*) addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(829):       auto index = BlockToIndex((const HeapBlock*) addr, level);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(881):          if((HeapBlock*) block->link.prev->next != block)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(883):          if((HeapBlock*) block->link.next->prev != block)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(292):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(316):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(368):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(404):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(832):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(902):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(927):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(959):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(960):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(964):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(1007):    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(1037):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(146):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(138):          getptr2(prev, diff_);                   // put item after previous
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(160):       return (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(206):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(228):             getptr2(elem, diff_);           // start at the current item
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(241):       elem = (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(254):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(326):          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(335):          getptr2(elem, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(336):       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(354):       return (Q1Link*) getptr2(&elem, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(142):       return (T*) getptr1(item, diff_);    // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(171):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(189):             getptr2(elem, diff_);           // start at current element
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(194):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(205):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(215):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(233):             getptr2(elem, diff_);           // start at current element
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(238):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(249):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(333):       return (Q2Link*) getptr2(&elem, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(114):       registry_ = (T**) Memory::Alloc(size, mem);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(504):                auto cell = (RegCell*) getptr2(item, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(562):       return (RegCell*) getptr2(&item, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(576):       auto table = (T**) Memory::Alloc(size, mem_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(80):       reg->BindInstance((const Base**) &Instance_, type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(99):       reg->UnbindInstance((const Base**) &Instance_);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(204):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(162):       (_beginthreadex_proc_type) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(163):       (void*) client,                    // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(167):    auto handle = (HANDLE) result;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(331):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(153):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(210):       Memory::Alloc(size * sizeof(TraceRecord*), MemPermanent, ex);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(214):       Memory::Alloc(size * sizeof(FunctionTrace), MemPermanent, ex);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(59):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemporary);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(79):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(73):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(92):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(133):          Memory::Realloc(buff_, BuffSize(newSize), MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(60):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(118):       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(106):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(241):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(248):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(258):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(265):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(47):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(75):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(136):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(243):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(299):       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(309):       (char*) &val, &valsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(50):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(79):       size, 0, (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(117):       size, 0, (sockaddr*) &peer, peersize);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(753):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(782):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(784):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(181):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(277):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(435):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(51):    ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(305):    ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(344):    ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(139):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(150):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(262):          << spaces(3) << LineType(t) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(273):          *stream << (Attrs_.at(Warning(w)).fixable ? '*' : SPACE);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(274):          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(275):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(1575):       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(1589):    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(335):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(387):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(438):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(444):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(449):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(767):    *cli.obuf << ": " << Warning(log.warning_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(148):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1286):          fp *= std::pow(10.0, int(num));
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1396):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(446): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(70):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(258):       auto type = MemoryType(m);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(731):    return BlockState(state);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(650):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1007):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1101):          auto type = MemoryType(m);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1112):          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1467):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(3356):       auto heap = Memory::GetHeap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(216):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(94):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(361):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(542):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(139):    ThreadId Tid() const { return ThreadId(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(601):    stream << indent << "buffsize : " << int(std::log2(size_));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3627):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3658):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(4589):    auto test = RecoveryThread::Test(index);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(69):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(91):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(72):       { return NodeBase::Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(94):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(82):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(702):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(141):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(146):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(466):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(62):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(78):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(57):    Id Stid() const { return Id(stid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(62):    ipport_t Port() const override { return ipport_t(port_); }
W006 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(72):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(73):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(491):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(97):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(132):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(119):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(468):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(66):    auto fake = reinterpret_cast< const CodeDir* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(617):    auto fake = reinterpret_cast< const CodeFile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(281):    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(227):    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(550):    auto& dm = reinterpret_cast< const DM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(551):    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(681):    auto& em = reinterpret_cast< const EM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(1417):       auto& rm = reinterpret_cast< const RM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2257):    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2333):    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2490):    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2494):    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(193):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(224):    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(102):       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(131):    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(62):       reinterpret_cast < const IM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(65):       reinterpret_cast < const RM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(68):       reinterpret_cast < const DM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(71):       reinterpret_cast < const FM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(74):       reinterpret_cast < const EM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(77):       reinterpret_cast < const BM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(203):       auto header = reinterpret_cast< const DipHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(213):       auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(234):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(240):       auto im = reinterpret_cast< IM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(248):       auto dm = reinterpret_cast< DM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(259):       auto em = reinterpret_cast< EM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(288):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(297):       auto rm = reinterpret_cast< RM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(308):       auto dm = reinterpret_cast< DM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(319):       auto em = reinterpret_cast< EM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(342):    auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(369):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(62):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(118):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(573):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(65):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(112):    auto fake = reinterpret_cast< const Alarm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(101):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(150):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(139):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(92):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(95):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(76):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(145):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(104):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(100):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.cpp(76):    auto fake = reinterpret_cast< const Daemon* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(132):    auto fake = reinterpret_cast< const Log* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(126):    SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(355):       where = reinterpret_cast< Entry* >(buff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(363):    SetNext(reinterpret_cast< Entry* >(after));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(404):          SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp(116):    auto fake = reinterpret_cast< const LogGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(67):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(120):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(117):       reinterpret_cast< word* >(&pool->targSegments_), 0,
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(542):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(120):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(73):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(86):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(80):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(100):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(41):    auto fake = reinterpret_cast< const SysMutex* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(34):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1474):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1483):    auto fake = reinterpret_cast< const Thread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(69):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(76):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1773):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2293):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2846):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(304):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(74):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(225):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(270):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(78):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(116):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(86):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(98):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(88):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(569):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(736):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(857):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(945):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(618):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(925):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(203):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(217):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(199):          reinterpret_cast< word* >(&poolSize_), 1,
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(240):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(132):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(108):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(94):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(82):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(62):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(289):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(81):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(204):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(198):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(120):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(148):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(160):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(70):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(503):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(88):       return reinterpret_cast< T* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(102):       auto dest = reinterpret_cast< T* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(137):       parm = (pptr == nullptr ? nullptr : reinterpret_cast< T* >(pptr->bytes));
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(264):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(70):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(97):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(98):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1465):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(86):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(204):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(89):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(97):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(93):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(142):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(155):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(177):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(187):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(70):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(114):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(164):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(41):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(43):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(483):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(513):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(825):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(857):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(987):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1384):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1389):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(394):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(909):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(379):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(380):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(382):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(414):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(451):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(452):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(567):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(724):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(760):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(987):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(992):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(84):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(217):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(273):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(296):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(553):    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2538):    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2676):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(82):    auto curr = static_cast< CodeFileSet* >(Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(94):       curr = static_cast< CodeFileSet* >(prev->Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(114):    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(126):       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(158):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(159):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(464):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(496):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(497):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(608):       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(640):       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(675):    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(64):    auto that = static_cast< CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(100):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(137):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(151):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(909):       if(static_cast< const Function* >(item_)->IsVirtual())
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(982):       auto data = static_cast< const Data* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1024):       auto func = static_cast< const Function* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1098):       auto cls = static_cast< const Class* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1122):       auto cls = static_cast< const Class* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1153):          auto func = static_cast< const Function* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(211):          static_cast< const Function* >(item)->IsInline())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1025):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1028):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1045):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2125):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2169):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2179):       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(919):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(896):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(909):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1530):          auto derived = static_cast< const Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1635):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1643):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1808):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1866):       auto type = static_cast< TypeSpec* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1876):       spec->SetReferent(static_cast< CxxScoped* >(item), nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2068):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(488):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(512):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(566):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(577):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(582):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(893):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2178):             static_cast< Function* >(tfunc)->SetTemplateParm();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2348):       ref = static_cast< Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(706):       auto cls = static_cast<const Class*>(scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1397):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1464):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1595):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1611):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1639):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1654):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1798):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1840):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3046):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3785):       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3798):       auto i = FindArg(static_cast< const Argument* >(item), false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3849):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4573):    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5017):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5031):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5262):                auto item = static_cast< CxxNamed* >(args.front().item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5348):       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(101):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(172):    auto cls = static_cast< Class* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(187):    auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(231):       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(265):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(279):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(341):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(375):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(501):          ref = static_cast< const Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1232):    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1443):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1475):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1657):    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1881):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1894):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1933):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1938):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2123):    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2243):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2394):    ref_ = static_cast< ClassData* >(cls->FindData(name_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2891):    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(3059):          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(535):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(574):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(582):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(590):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(596):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(570):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(596):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(648):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(681):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(718):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(776):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(799):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(891):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1354):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1359):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1384):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1788):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1802):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1901):    auto cls = static_cast< Class* >(arg.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1951):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1972):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1994):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2018):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2211):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2213):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2570):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2634):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(337):    auto defn = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(471):    DebugFtCode(static_cast< const Function* >(log.item_), defn, call);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1087):    auto decl = static_cast< const Data* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1238):    auto etor = static_cast< const Enumerator* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1280):    auto eNum = static_cast< const Enum* >(etor->AutoType());
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1345):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1648):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2013):    auto cls = static_cast< const Class* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2832):    DebugFtCode(static_cast< const Function* >(log.item_), defn, call);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3235):    auto cls = static_cast< const Class* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3631):       ns = static_cast< const Namespace* >(ref)->OuterSpace();
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(4039):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(4168):    auto defn = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(4280):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2029):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2033):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(417):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(453):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(748):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(821):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(860):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(992):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(993):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1156):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1444):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1612):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1637):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1665):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1875):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1983):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2033):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2039):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2324):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2330):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2492):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2534):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2609):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3030):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3076):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3322):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3348):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3437):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3473):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3535):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3838):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4222):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(211):    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(283):    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(338):    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(250):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(94):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(118):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(76):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(145):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(95):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(229):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(568):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(582):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(601):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(625):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(672):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(790):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(812):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(830):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(905):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(72):       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(67):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(453):          auto ft = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(484):          auto ft = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(199):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(68):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.cpp(94):    auto daemon = static_cast< TcpIoDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.cpp(185):    auto daemon = static_cast< UdpIoDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(296):    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(179):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(189):    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(294):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(459):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(69):    auto thread = static_cast< TcpIoThread* >(GetThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(75):       thread = static_cast< TcpIoThread* >(CreateIoThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(81):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(112):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(118):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(122):       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(255):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(60):    auto svc = static_cast< const UdpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(446):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(584):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(643):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(750):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(776):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(870):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(958):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(806):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(921):             (m)->FindParm(Parameter::Timeout);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(194):    invokersCfg_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(556):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(84):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(79):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(155):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(219):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(276):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(438):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(49):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.cpp(110):    auto daemon = static_cast< InvokerDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(50):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(126):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(140):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(820):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(907):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1119):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1351):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1564):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(112):    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(65):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(77):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(226):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(287):    auto psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(304):       psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(353):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(850):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(853):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(880):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(466):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(470):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(471):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(522):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(528):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(530):             (sapEvent)->CurrInitiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(782):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(784):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(887):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(891):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(954):                (initEvent)->GetModifier();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(994):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(99):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(68):       auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(100):       auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(75):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(61):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(64):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(101):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(117):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(119):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(139):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(154):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(155):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(170):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(172):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(178):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(199):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(227):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(257):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(274):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(298):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(313):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(327):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(342):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(357):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(359):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(378):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(399):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(414):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(430):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(447):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(448):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(479):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(481):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(511):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(526):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(527):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(542):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(543):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(564):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(583):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(598):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(600):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(625):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(654):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(669):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(685):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(701):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(703):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(724):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(739):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(755):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(757):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(774):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(801):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(820):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(835):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(854):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(869):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(885):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(887):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(896):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(924):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(925):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(963):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(979):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(995):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(996):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1011):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1012):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1046):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1067):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(75):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(80):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(88):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(92):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(132):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(112):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(193):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(195):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(199):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(200):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(275):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(95):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(116):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(106):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(178):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(213):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(206):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(266):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(289):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(305):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(60):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(60):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(60):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(286):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(291):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(293):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(314):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(315):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(367):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(394):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(474):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(476):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(489):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(511):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(525):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(531):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(537):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(571):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(574):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(629):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(636):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(652):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(660):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(678):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(449):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1166):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1203):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1273):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1300):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1314):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1380):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1424):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1967):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1968):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1997):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2012):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2014):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2021):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2118):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2120):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2121):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2122):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2217):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2231):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2245):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2259):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2275):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2290):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2304):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2319):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2334):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2335):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2350):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2351):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2365):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2387):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(290):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(618):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(623):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(624):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(641):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(649):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(687):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(717):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(812):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(814):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(909):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(931):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(954):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(956):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(962):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(985):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1010):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1011):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1031):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1032):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1036):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1055):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1057):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1061):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1102):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1103):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1105):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1152):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(131):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(133):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(85):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(175):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(181):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(198):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(249):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(252):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(364):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(417):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(751):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(754):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(827):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(895):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(996):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(997):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1019):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1050):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1051):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1074):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(55):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(56):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(58):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(108):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(110):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(138):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(176):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(186):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(210):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(228):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(250):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(298):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(317):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(319):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(362):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(363):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(365):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(417):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(435):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(453):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(471):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(489):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(522):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(523):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(553):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(572):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(573):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(603):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(623):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(624):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(83):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(253):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(297):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(327):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(191):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(436):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(463):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(470):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(542):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(545):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(605):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(625):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(654):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(659):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(661):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(682):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(683):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(150):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(158):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(711):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(728):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(740):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(757):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(778):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(785):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(946):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(982):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(137):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(69):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(506):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(523):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(577):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(855):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(977):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(978):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1016):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1025):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1036):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1054):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1071):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1072):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(597):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(629):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1299):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1446):    return static_cast< CxxScope* >(const_cast< Class* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2121):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(164):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(491):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(528):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(844):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(962):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1143):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1726):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3099):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(878):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1374):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2479):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3754):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4000):       (const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4010):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(365):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1285):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(646):    if(n == 0) return const_cast< CxxScoped* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1528):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1742):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2155):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2174):    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2186):    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2442):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2531):    return (CxxScoped*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2544):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(195):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(526):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(645):    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1281):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1379):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(359):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(354):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2033):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4443):       func->SetTemplate(const_cast< Function* >(tmplt));
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(71):    objects.push_back(const_cast< Base* >(this));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(163):       (void*) client,                    // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(357):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(694):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W009 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(216):       dest = payload + received;
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(328):    auto after = (ptr_t) next_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(329):    auto wrap = after >= (buff_ + size_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(356):       after = buff_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3323):    ptrdiff_t stacksize = &local - priv_->stackBase_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(197):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(145):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(145):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(246):       bytes = buff_ + hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(272):    bytes += hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(101):    NodeBase::byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(181):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(276):    auto fence = layout->bytes + layout->header.length;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.win.cpp(24): #include "SysSignals.h"
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(30): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(27): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(64): #include "AnModule.h"
W018 Remove #include directive
  C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h(21): #include "BaseBot.h"
W020 Using statement in header
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(35): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(36): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(50): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(51): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(52): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(37): using NodeBase::fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(38): using NodeBase::SPACE;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(39): using NodeBase::word;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxCharLiteral.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(45): using NodeBase::CliThread;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(46): using NodeBase::word;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(47): using std::string;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(40): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(26): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h(21): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace SessionTools;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(37): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(47): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(48): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(49): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(45): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(47): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeTools;
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(44): using namespace SessionBase;
W022 Add using statement
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeTools
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace SessionBase
W024 Add forward declaration
  C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h(1): class Diplomacy::BaseBot
W026 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(366/3):       const CxxNamed* item, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(839/1):    static void Shutdown(NodeBase::RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(843/1):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(84/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1506/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(75/3):       const std::string& prefix, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(316/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(325/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(135/3):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(140/1):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(93/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(60/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(88/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(131/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151/1):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151/2):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(167/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(301/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(307/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(313/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(79/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(187/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(187/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(48/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(436/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(156/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(191): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(38): class DipModule : public Module
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(43): class SysLock
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(37): class TextTlvMessage : public TlvMessage
W028 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(62):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(218):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(302):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(387):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(177): extern const std::string SingleRule;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(617): extern const NodeBase::Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(618): extern const NodeBase::Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(622): extern const NodeBase::Flags Stats_Mask;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(162): constexpr ProtocolError IM_TIMEOUT = 0x01;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(163): constexpr ProtocolError IM_EXPECTED = 0x02;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(164): constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(165): constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(166): constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(167): constexpr ProtocolError IM_REPEATED = 0x06;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(168): constexpr ProtocolError IM_FROM_SERVER = 0x07;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(169): constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(170): constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(171): constexpr ProtocolError DM_BEFORE_RM = 0x0A;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(172): constexpr ProtocolError RM_EXPECTED = 0x0B;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(173): constexpr ProtocolError RM_REPEATED = 0x0C;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(174): constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(175): constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(197): constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(212): constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(213): constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(214): constexpr category_t CATEGORY_BRACKET = 0x40;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(217): constexpr category_t CATEGORY_ORDER = 0x43;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(219): constexpr category_t CATEGORY_RESULT = 0x45;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(222): constexpr category_t CATEGORY_COMMAND = 0x48;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(223): constexpr category_t CATEGORY_PARAMETER = 0x49;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(224): constexpr category_t CATEGORY_PRESS = 0x4A;
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(194): extern const Duration ONE_uSEC;
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(199): extern const int64_t TICKS_PER_SEC;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h(68): constexpr FlagId FirstAppDebugFlag = 11;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(72): extern fixed_string NotImplementedExpl;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(194):    static const id_t LastNbIndex = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(63): constexpr size_t GBs = 1024 * 1024 * 1024;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(80):    static const id_t LastNtIndex = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(106):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(134):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(55):    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(85):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(72):    enum Location
W030 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(145):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(62):       FIRST_BOT_SPECIFIC_ERROR
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(186):    MemInaccessible = 0,      // ---
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(187):    MemExecuteOnly = 1,       // --x
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(189):    MemReadExecute = 5,       // r-x
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(191):    MemReadWriteExecute = 7,  // rwx
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.h(66):    TraceFailed,        // operation failed for some other reason
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(80):       PortAllocFailed,      // failed to create PSM for context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(88):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(90):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(93):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(118):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(96):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(98):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(99):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(64):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(214):    Digit At(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(182):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(249):    void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(318):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(363):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(194):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(163):    static std::string Demangle(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(128):    bool operator!=(const CodeWarning& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(577):    bool IsImplemented() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(148):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(311):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(603):    bool operator<(const Tracepoint& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1089):    bool IsExtern() const { return GetDecl()->extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1094):    bool IsFinal() const { return GetDecl()->final_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(105):    std::string& Prefix(std::string&& scope,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(339):    CxxToken& operator=(const CxxToken& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(436):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(478):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(117):       bool operator<(const Wakeup& that) const
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(69):    DipHeader* Header() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(250):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(75):    bool operator<(const Location& that) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(48):    explicit TokenMessage(const Token* stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(56):    TokenMessage(const TokenMessage& that);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(91):    Token operator[](size_t index) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(140):    void set_as_ascii(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(170):    bool operator<(const TokenMessage& that) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h(52):    size_t get_number_of_results() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(119):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(70):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(143):    const T& Back() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(151):    T& Back()
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(159):    const T& At(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(167):    T& At(size_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(191):    const T* Data() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(57):    word GetCurrValue() const { return *curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(63):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(72):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(76):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(80):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(140):    bool SetVptr(const Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(147):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(155):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(97):    word IntPrompt(const std::string& prompt, word min, word max);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(131):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(117):    Duration operator+();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(121):    Duration operator-();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(125):    Duration& operator++();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(126):    Duration operator++(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(130):    Duration& operator--();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(131):    Duration operator--(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(143):    Duration& operator*=(int64_t rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(147):    Duration& operator/=(int64_t rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(151):    Duration& operator%=(const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(156):    Duration& operator>>=(int8_t shift);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(180): Duration operator*(const Duration& lhs, int64_t rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(184): Duration operator%(const Duration& lhs, const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(66):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(67):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(66):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(171):    PerThreadInfo()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(48):    FunctionTrace();
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h(58):    Log* FindLog(const std::string& name, LogId id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(49):    size_t Words(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(57):    void Set(void* dest, byte_t value, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(92):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(127): std::ostream& operator<<(std::ostream& stream, AlarmStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(97):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(109):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(115):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(131):    void MorphTo(const Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(145): Flags PS_Delayed();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(62):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(63):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(80):    std::string Normalize(const std::string& path);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(95):    void GetCurrDir(std::string& dirName);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(48):    SysLock();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(62):    void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(66):    void Release();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(70):    SysThreadId Owner() const { return owner_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(74):    void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.h(50):    bool Lock(void* addr, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.h(55):    bool Unlock(void* addr, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.h(113):    Thread* Owner() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(68):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(77):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(751):    ThreadInfo(const ThreadInfo& info) = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(752):    ThreadInfo(ThreadInfo&& info) = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(754):    ThreadInfo& operator=(ThreadInfo&& info) = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(118):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(122):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(126):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(147):    Faction GetFaction() const { return faction_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(151):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(481):    SysMutex* BlockingMutex() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(489):    uint8_t MutexCount() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(45):    explicit TimePoint(const SysTime& time);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(91):    TimePoint& operator++();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(92):    TimePoint operator++(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(96):    TimePoint& operator--();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(97):    TimePoint operator--(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(105):    TimePoint& operator-=(const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(114): bool operator==(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(115): bool operator!=(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(117): bool operator<=(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(118): bool operator>(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(119): bool operator>=(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(124): TimePoint operator+(const Duration& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(125): Duration operator-(const TimePoint& lhs, const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(183):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(48):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(54):    SysIpL2Addr(SysIpL2Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(59):    SysIpL2Addr& operator=(SysIpL2Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(65):    SysIpL3Addr(SysIpL3Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(70):    SysIpL3Addr& operator=(SysIpL3Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(117):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(50): uint64_t htonll(uint64_t hostllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(53): uint64_t ntohll(uint32_t netllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(134):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(190):    IpBuffer* IcMsg() const { return icMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(91):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(95):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(100):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(292):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(446):    void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(104): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(231):    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(47):    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(66):    GlobalAddress(GlobalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(71):    GlobalAddress& operator=(GlobalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(87):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(51):    LocalAddress(LocalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(56):    LocalAddress& operator=(LocalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(65):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(181):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(86):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(79):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(68):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(137):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(195):    bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(325):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(86):    void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(104):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(213):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(217):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(358):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(369):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(128):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(132):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(132):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(82):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(61):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(58):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(62):    TextTlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(68):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(167):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(173):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(187):    TlvParmPtr AddBytes
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(194):    TlvParmPtr CopyParm
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(247):    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(254):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(269):    size_t ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(75):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(75):    CliText* CreateText() const override;
W033 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(226): using PersistentStr =
W037 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(314):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(881):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(62):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(212):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(218):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(302):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(74):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(166):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(52):    static ptrdiff_t LinkDiff();
W042 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(146):    typedef uint8_t DigitCount;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(183):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(202):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(226):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(236):    void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(240):    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(411):    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1149):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(494):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(46):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(216):    size_t CalcGroup(const Include& incl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(117):    std::string GetNewFuncName(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(468):    Numeric(NumericType type, size_t width, bool sign) :
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(135):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(184):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(188):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(406):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(924):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(285):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(310):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(769):    static bool CompilingTemplateFunction();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(223):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1034):    bool IsUnboundedArray() const { return array_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1050):    bool IsDefaulted() const { return GetDefn()->defaulted_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1116):    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1149):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1207):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(181):    bool IsSubscopeOf(const std::string& fqSuper) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h(88):    static DataPtr CreateRef()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(52):    CxxNamedSet inherits;   // types not needed to calculate #include or using
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(214):    std::string NextOperator() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(67):    CodeDir* FindDir(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(88):    LibrarySet* FindVar(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(69):    bool IsReadOnly() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(173):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(99):    bool is_number() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(127):    size_t set_from(const Token* stream, size_t length);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(37):    typedef std::map< Token, std::string > TokenToTextMap;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(38):    typedef std::map< std::string, Token > TextToTokenMap;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(52):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(131):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(169):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(188):    Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(192):    void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(66):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    bool SetNext(c_string input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(68):    bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(81):    bool SetNext(c_string input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(65):    c_string Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(80):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(57):    CfgTuple* FindTuple(const std::string& key) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(67):    virtual MemoryType ObjType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(134):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    c_string HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(89):    id_t Did() const { return did_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(52):    static const std::string RscPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(95):    int SetAttrs(MemoryProtection attrs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(123):    bool IsFixedSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(81):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(85):    bool Suppressed() const { return suppressed_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexRegistry.h(53):    SysMutex* Find(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(72):    typedef uint32_t InstanceId;  // identifies an object within a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(73):    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(103):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(186):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(56):    bool NullifyObjectData() const { return nullifyObjectData_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(73):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(63):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(67):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(81):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(136):    c_string strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(142):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(130):    static void ResetFlags();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(143):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(226):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(192):    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(87):    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(55):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(59):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(88):    NodeBase::word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(129):    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(181):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(73):    NodeBase::word SendTo
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(76):    void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(86):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(59):    void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(59):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(132):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(69):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(77):    c_string FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(81):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(97):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(64):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(68):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(112):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(123):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(129):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(157):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(161):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(165):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(95):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(57):    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(65):    static ptrdiff_t CellDiff2();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(329):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(333):    virtual bool SendFailure
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(60):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(112):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(68):    typedef uint8_t Priority;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(251):    bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(528):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(76):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(118):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(122):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(95):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(52):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(156):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(161):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(241):    typedef uint16_t Fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(259):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(274):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(278):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(77):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(158):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(422):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(45):    typedef uint8_t Id;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(50):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(93):    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(345):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(118):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(87):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(95):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(99):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(119):    const AsmPtrVector* Assembly() const { return &assembly_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(123):    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(744):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(245):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(254):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(286):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(375):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(379):    std::string strLocation() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(384):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1140):    Cxx::ItemType GetUserType() const { return user_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(317):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(321):    bool IsThreadLocal() const { return thread_local_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(325):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(329):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(87):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(92):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(114):    size_t XrefSize() const { return xref_.size() * 3 * sizeof(CxxNamed*); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(118):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(75):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(98):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(158):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(168):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(178):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(204):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(253):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(39):    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(50):    typedef uint8_t sel_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(71):    typedef id_t ClassId;         // identifies a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(69):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(81):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(99):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(241):    NodeBase::MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(64):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(76):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(85):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(131):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(66):    typedef ServicePortId PortId;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(84):    virtual NodeBase::c_string PortName(PortId pid) const;
W044 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(51): typedef void* StackFrames[MaxFrames];
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(95): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(96): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(113): typedef const char* c_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(114): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(119): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(120): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(58): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(59): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W048 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(121):    bool game_started;                // set when the game has begun
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(147):    word our_number_of_disbands;    // disbands required (negative for builds)
W050 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(310):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(319):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(323):    TypeName* name;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(847):    static bool Tracing;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1079):    bool ptrDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1083):    bool refDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(201):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(205):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(96):    std::atomic_size_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(100):    std::atomic_size_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(104):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(108):    size_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(130):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(91):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(96):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(100):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(104):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(108):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(113):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(117):    NodeBase::TimePoint time_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(121):    NodeBase::byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(490):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(494):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(524):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(528):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(532):    const EventHandler::Rc rc_;
W052 DATA CANNOT BE CONST POINTER
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(169):    LogGroup* const group_;
W053 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(172):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(338):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(354):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(192):    Warning warning_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(200):    size_t line_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(204):    size_t pos_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(212):    word offset_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(216):    std::string info_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(220):    bool hide_;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(230):    LibraryVarSet* varSet_;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(221):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(112):       BotEvent event;       // event
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(144):    DipHeader header;  // no parameters (length = 0)
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(129):    RegCell aid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(93):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(97):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(119):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(106):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(171):    RegCell did_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(175):    size_t size_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(181):    RegCell lid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(142):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(130):    RegCell mid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(54):    Q2Link link;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(136):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(132):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(40):    MemoryType type;    // the type of memory that the singleton uses
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(120):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(102):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(54):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(59):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(66):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static Duration SleepInterval;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(109):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.h(138):    RegCell mid_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(83):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1637):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2149):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(194):    NodeBase::Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(150):    NodeBase::RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(96):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(59):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(313):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(337):    NodeBase::Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(134):    NodeBase::Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(132):    NodeBase::RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(158):    static NodeBase::word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(372):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(134):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(146):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(187):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(149):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(162):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(166):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(195):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(199):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(145):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W054 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(196):    const CodeFile* file_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(208):    const CxxNamed* item_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(220):    PotsProfile* profile_;
W055 Data need not be mutable
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(113):       mutable secs_t secs;  // delay
W056 Default constructor invoked: POD members not initialized
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(42):    LARGE_INTEGER frequency;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(75):       LARGE_INTEGER now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(81):       _timeb now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(41):    _timeb timebuff;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    tm timeofday;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(54):    in_addr result;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(50):    addrinfo hints;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(109):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(70):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(284):    WSAData wsaData;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(44):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(69):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(133):    sockaddr_in host;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(240):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(69):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(101):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(168):    struct SignalEntry
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(232):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(224):    struct MessageEntry
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(361):    MessageEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(198):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(308):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(328):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(389):    ParmIterator locpit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(309):    struct ParmIterator
W057 Default constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(168):    std::unique_ptr< pollfd[] > list(new pollfd[size]);
W060 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(279):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, ProtectedStr* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(c_string help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(39):    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(c_string help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(44):    FunctionTrace(fn_name_arg func, fn_depth depth);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(48):    FunctionTrace();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(41):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(56):    LogsAction();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(75):    explicit LogsCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(92):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(106):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(123):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(137):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(154):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(167):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(198):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(215):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(227):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(244):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(262):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(136):    explicit Counter(const std::string& expl, size_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(54):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(44):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(56):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(98):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(110):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(124):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(139):    TestcaseAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(160):    explicit TestcaseCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(50):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(54):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(39):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(54):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(69):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(97):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(110):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(127):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(142):    NwStatusCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(40):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(44):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(49):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(53):    SysIpL2Addr(const SysIpL2Addr& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(54):    SysIpL2Addr(SysIpL2Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(40):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(45):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(51):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(64):    SysIpL3Addr(const SysIpL3Addr& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(65):    SysIpL3Addr(SysIpL3Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(40):    PbSizesCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(272):    PotsMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(466):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(511):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(50):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(54):    TlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(40):    StSizesCommand() = default;
W062 Member not included in member initialization list
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(40):    FileWalker(const char* dirName, const char* fileSpec);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
W065 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(189):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(87):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(123):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(85):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(71):    virtual ~Exception();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(126):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(213):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(108):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(255):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(97):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(137):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(184):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(114):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(81):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(188):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(124):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(215):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(96):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(120):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(176):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(135):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(143):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(183):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(167):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(112):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(94):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(102):    virtual ~Trigger();
W075 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1074):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1210):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(475):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(511):    void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(144):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(151):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(308):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(316):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(321):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(338):    virtual Class* GetClassTemplate() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(353):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(478):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(508):    Class* DirectClass() const override { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(949):    CxxScoped* FindItem(const std::string& name) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(245):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(251):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(285):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(420):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(424):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(433):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(474):    void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(64):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(76):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(92):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(108):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(128):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(126):    virtual void SetLoc(CodeFile* file, size_t pos);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(139):    virtual void CopyContext(const CxxNamed* that);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(157):    virtual size_t GetRange(size_t& begin, size_t& end) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(162):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(170):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(175):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(185):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(190):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(198):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(204):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(210):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(216):    virtual void GetScopedNames(stringVector& names, bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(223):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(229):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(234):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(238):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(245):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(249):    virtual NodeBase::id_t GetDeclFid() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(254):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(263):    virtual CxxNamed* GetMate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(276):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(286):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(292):    virtual CxxScoped* DirectType() const { return Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(296):    virtual void FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(302):    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(306):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(311):    virtual void Instantiate() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(315):    virtual CxxScope* GetTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(324):    virtual CxxScoped* FindTemplateAnalog(const CxxNamed* item) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(331):    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(336):    virtual StackArg MemberToArg
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(349):    virtual void GetDirectClasses(CxxUsageSets& symbols) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(356):    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(370):    virtual std::string XrefName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(678):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(907):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(911):    bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1136):    virtual void SetUserType(Cxx::ItemType user);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1148):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1158):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1162):    virtual TypeTags* Tags() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1163):    virtual const TypeTags* Tags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1167):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1173):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1179):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1184):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1188):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1192):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1196):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1201):    virtual TypeTags GetAllTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1206):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1211):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1215):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1221):    virtual void SetPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1226):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1230):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1234):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1245):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1251):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1256):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1260):    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1266):    virtual void Instantiating(CxxScopedVector& locals) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1270):    virtual void GetNames(stringVector& names) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1275):    virtual bool NamesReferToArgs(const NameVector& names,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(78):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(83):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(91):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(352):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(357):    virtual bool IsUnionMember() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1241):    void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1245):    void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1398):    void WasCalled() override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(59):    virtual bool NameRefersToItem(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(69):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(78):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(96):    virtual void AddFiles(SetOfIds& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(102):    virtual bool IncludeInXref() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(106):    virtual void AddReference(const CxxNamed* item) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(118):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(124):    virtual bool CheckIfUnused(Warning warning) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(199):    void SetAccess(Cxx::Access access) override { access_ = access; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(203):    void SetScope(CxxScope* scope) override { scope_ = scope; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(535):    void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(977):    bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1577):    bool ResolveTypedef(Typedef* type, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(95):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(101):    virtual bool IsForward() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(107):    virtual const std::string* Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(111):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(116):    virtual std::string TypeString(bool arg) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(121):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(125):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(129):    virtual bool IsVolatile() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(133):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(137):    virtual bool IsVolatilePtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(141):    virtual bool IsConstPtr(size_t n) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(145):    virtual bool IsVolatilePtr(size_t n) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(150):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(155):    virtual bool IsIndirect() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(159):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(164):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(169):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(174):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(179):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(185):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(190):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(194):    virtual void GetConvertibleTypes(StackArgVector& types) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(199):    virtual CxxScoped* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(205):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(210):    virtual void ExitBlock() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(216):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(220):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(225):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(237):    virtual bool WasWritten(const StackArg* arg, bool passed);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(242):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(247):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(253):    virtual void RecordUsage() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(257):    virtual void AddToXref() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(262):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(267):    virtual bool LocateItem(const CxxNamed* item, size_t& n)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(273):    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(278):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(282):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(286):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(291):    virtual void Print
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(297):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(527):    virtual void PushBack(uint32_t c) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(77):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(83):    virtual NodeBase::word Check(NodeBase::CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(90):    virtual NodeBase::word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(96):    virtual NodeBase::word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(102):    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(108):    virtual NodeBase::word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(114):    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(122):    virtual NodeBase::word Parse
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(129):    virtual NodeBase::word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(136):    virtual NodeBase::word Show(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(142):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* Assign(LibrarySet* rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* Union(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(164):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(165):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(166):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(167):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(168):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(169):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(91):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(97):    virtual std::string report_command_line_parameters();
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(69):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(73):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(75):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(93):    virtual void GetSubtended(std::vector< Base* >& objects) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(104):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(122):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(129):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(137):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(141):    virtual MemoryType MemType() const { return MemPermanent; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(69):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(63):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(67):    virtual MemoryType ObjType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(72):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(76):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(80):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(66):    virtual void EventOccurred(Event evt);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(76):    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(71):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(76):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(135):    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(143):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(153):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(163):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(173):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(183):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(211):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(221):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(231):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(51):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(49):    virtual void* Addr() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(53):    virtual size_t Size() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(57):    virtual MemoryType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(61):    virtual void* Alloc(size_t size) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(65):    virtual void Free(void* addr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(70):    virtual size_t BlockToSize(const void* addr) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(75):    virtual bool Validate(const void* addr) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(79):    virtual bool CanBeProtected() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(86):    virtual int SetPermissions(MemoryProtection attrs);
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(62):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(84):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(92):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(103):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(99):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(104):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(172):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(65):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(69):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(75):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(47):    virtual void GetName(std::string& fileName) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(51):    virtual bool IsSubdir() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(55):    virtual bool AtEnd() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(60):    virtual bool Advance() = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(168):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(222):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(61):    virtual c_string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(65):    virtual c_string Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(71):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(93):    virtual bool Display(std::ostream& stream, const std::string& opts);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(98):    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(106):    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(125):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(134):    virtual NodeBase::byte_t* HostToNetwork
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(140):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(114):    virtual size_t PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(133):    virtual bool AddBytes
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(99):    virtual SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(138):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(57):    virtual NodeBase::c_string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(61):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(66):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(70):    virtual NodeBase::Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(74):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(78):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(91):    virtual bool HasSharedSocket() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(99):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(79):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(91):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(117):    virtual AllocRc SetService(const IpService* service, bool shared);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(121):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(173):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(177):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(45):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(50):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(92):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(60):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(98):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(102):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(106):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(110):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(112):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(123):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(129):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(115):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(125):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(131):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(138):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(144):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(161):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(183):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(90):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(152):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(157):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(176):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(262):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(266):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(96):    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(105):    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(134):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(147):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(79):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(111):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(52):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(56):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(93):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(102):    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(112):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(44):    bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(84):    virtual NodeBase::c_string PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(114):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(67):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(73):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(79):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(100):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(107):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(121):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(127):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(89):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(42):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(48):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(143):    virtual EventHandler::Rc ApplyTreatment
W077 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(115):    virtual std::string GetInput() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(63):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(67):    virtual MemoryType ObjType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(72):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(76):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(80):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(76):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(140):    virtual void Recover() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(84):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(92):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(103):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(99):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(104):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(222):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(268):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(274):    virtual MsgBuffer* DeqMsg(const Duration& timeout);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(138):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(74):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(78):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(173):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(177):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(88):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(183):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(90):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(152):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(157):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(176):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(266):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(316):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(329):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(333):    virtual bool SendFailure
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(342):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(241):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(296):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(301):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(307):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(313):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(254):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(259):    virtual void AddFence();
W082 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1214):    BcFactory(Id fid, ProtocolId prid, c_string name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(382):    void LogCode(Warning warning, size_t line, size_t pos,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(305):    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(586): size_t LineMergeLength
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(594): bool InsertSpaceOnMerge
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(93):    CodeWarning(Warning warning, const CodeFile* file,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(273):    TypeMatch CalcMatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(332):    TypeMatch MatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(586):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(831):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(991):    bool SetPointer(size_t n, bool readonly, bool unstable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1245):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(352):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1475):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1496):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(40): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(130):    size_t CompareScopes
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(168):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(680):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(396):    Iter UpdateFuncDeclLoc
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(419):    Iter UpdateFuncDefnLoc
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(484):    word InsertNamespaceForward(const Iter& iter,
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(512):    void DebugFtCode
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(222):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(408):    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(62):    NodeBase::word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(401):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(447):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion(SetOfIds& lhs, const SetOfIds& rhs1, const SetOfIds& rhs2);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(502):    virtual void report_failed_press
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(190):    bool set_move_by_convoy_order(ProvinceId unit,
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(399):    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(63):    Alarm(c_string name, c_string expl, secs_t delay);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(51):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(55):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(63):    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(c_string key, c_string def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(95):    CfgParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, ProtectedStr* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(104):    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(59):    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(98):    CliIncrement(c_string name, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(91):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(231):    void Report1
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(95):    static void SwLog(fn_name_arg func, debug64_t errval,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(63):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(100):    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(123): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(129): bool ValidateOptions
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(239):    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(244):    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(102):    PosixSignal(signal_t value, c_string name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(57):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(107):    bool FindFiles(const char* dirName,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(113):    static SysThread_t Create(const ThreadEntry entry,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(89):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(72):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(627):    void DisplaySummary(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(88):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(224):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(50):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(46):    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(109):    PotsFeature(PotsFeature::Id fid, bool deactivation,
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(132):    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(168):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(51):    GlobalAddress
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(91):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(172):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(482):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(128):    NodeBase::TraceRc SelectSignal
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(182):       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(178):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(56):    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(113):    template< class T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(75):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(351):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1245/1):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(241/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(335/1):    bool GetFuncSpecial(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(348/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(369/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(402/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(469/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(470/1):    bool GetChar(ExprPtr& expr, Cxx::Encoding code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(471/1):    bool GetStr(ExprPtr& expr, Cxx::Encoding code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(481/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(482/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(489/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(493/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(502/1):    bool GetAlignOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(503/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(504/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(505/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(506/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(507/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(508/1):    bool GetNoExcept(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(509/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(510/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(511/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59/2):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(87/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(108/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(130/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(165/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(322/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(147/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(275/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1246/2): word CheckHeap(bool shouldExist, CliThread& cli, Heap*& heap)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(127/1):    virtual void DisplaySizes(CliThread& cli, bool all) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(135/1):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55/1):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(292/1):    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(161/1):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(105/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(132/1):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(107/1):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199/1):    virtual void DeleteParm(TlvParmLayout& parm);
W090 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1165):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(808):    void SetTemplateArgs(const TemplateParms* tparms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(128):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(129):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(130):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(131):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(132):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(133):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(134):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(135):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(136):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(137):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(138):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(149):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(150):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(151):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(152):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(72):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(206):    virtual void process_ccd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(212):    virtual void process_drw_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(243):    virtual void process_out_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(251):    virtual void process_smr_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(268):    virtual void process_adm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(467):    virtual void process_hlo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(472):    virtual void process_map_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(476):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(484):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(488):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(492):    virtual void process_slo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(113):    void SetStatus(AlarmStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(134):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(110):    void SetInterval(uint8_t interval);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.h(143):    void SetState(index_t index, BlockState state);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(182):    bool Corrupt(size_t n);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(252):    void UpdateAlarm();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(147):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(73):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(168):    DelayRc Suspend(SysSentry_t& sentry, const Duration& timeout);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(172):    bool Resume(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(114):    bool Interrupt(const Flags& mask = NoFlags);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(155):    void SetStatus(TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(262):    void SetInitialized();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(402):    void Reset(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(406):    void Ready();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(410):    void Preempt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(433):    void Proceed();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(477):    void UpdateMutex(SysMutex* mutex);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(485):    void UpdateMutexCount(bool acquired);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(542):    bool LogTrap(const Exception* ex,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(588):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(596):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(600):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h(112):    void AssociateIds(const Thread& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(110):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(82):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(82):    void Reset();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(176):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(146):    virtual IpPort* CreatePort(ipport_t pid) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(79):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(58):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(104):    void SetState(const ProtocolSM* psm, State state);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(114):    bool SetObjAddr(const MsgPort& port);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(158):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(196):    virtual void EndOfTransaction() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(161):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(257):    virtual Rc ReceiveMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(158):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(162):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(181):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(189):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(110):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(114):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(225):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(229):    void SetPriority(MsgPriority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(359):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(184):    virtual Message* UnwrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(191):    virtual Message* WrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(118):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(186):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(235):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(246):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
W092 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(168):    static c_string strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(87):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(101):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(117):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(121):    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(112):    static NodeBase::word Report
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(193):    size_t IndentSize() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(197):    size_t LineLengthMax() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(284):    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(320):    const stringVector& Prolog() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(118):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(206):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(649):    static size_t CreateCodeError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(343):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(698):    static void Enter(const CxxScoped* owner);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(731):    static void WasCalled(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(739):    static void SetPos(const CxxLocation& loc);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(769):    static bool CompilingTemplateFunction();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(798):    static void Trace(CxxTrace::Action act);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(799):    static void Trace(CxxTrace::Action act, const CxxToken* token);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(800):    static void Trace(CxxTrace::Action act, const StackArg& arg);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(801):    static void Trace(CxxTrace::Action act, const CodeFile& file);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(802):    static void Trace(CxxTrace::Action act, NodeBase::word err,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(843):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(885):    static bool StartTracing();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(901):    static std::string Location();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1475):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1488):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(669):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(405):    const CodeFile* FindFuncDefnFile
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(57):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(62):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(193):    static NodeBase::word Counted(std::string& result, const size_t* count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(198):    static NodeBase::word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(401):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(593):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(75):    static BaseBot* instance();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(101):    static void send_to_console(std::ostringstream& report);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(179):    void cancel_event(BotEvent event);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(524):    static void report_ccd(const Token& power, bool disorder);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(544):    static void report_out(const Token& power);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(556):    void report_exit(fixed_string reason);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(716):    static bool send_buff(DipIpBuffer& buff);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(157):    static MapAndUnits* instance();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(162):    static MapAndUnits* create_clone();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(166):    static void delete_clone(MapAndUnits*& clone);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(260):    std::string display_retreat_order(const UnitOrder& unit) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(42):    static TokenTextMap* instance();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(66):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(123):    bool LoadNextTuple(std::string& key, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(84):    static const std::string& ValidKeyChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(89):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(94):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(136):    static Rc Exhausted(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(323):    static Rc Mismatch(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(48):    static void Spool(c_string s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(102):    static void Assert(bool condition, debug64_t errval = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(106):    static void Progress(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(110):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(116):    static void noft() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(150):    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(96):    static Duration Immed();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(100):    static Duration Never();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(52):    static const std::string RscPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(57):    static const std::string HelpPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(63):    static const std::string InputPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(68):    static const std::string OutputPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(72):    static const std::string ConsoleFileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(45):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(58):    static void Spool(const std::string& name, ostringstreamPtr& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(63):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(68):    static void Record(const std::string& s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(72):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(115):    static Log* Find(fixed_string groupName, LogId id, LogGroup*& group);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(120):    static Log* Find(fixed_string log);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(128):    static size_t Count();
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h(70):    static void CopyToConsole(const ostringstreamPtr& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.h(53):    static void PushBack(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static c_string TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(82):    void SetLevel(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(86):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2752):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(115):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(266):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(99):    template< class T > static bool Release(std::unique_ptr< T >& obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(109):    static RestartLevel LevelToClear(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(115):    static void Initiate
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(58):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(63):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(86):    static void ListHeaps(std::set< void* >& heaps, std::ostringstream& expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(55):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(120):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(124):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(129):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(133):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(79):    static fn_depth GetFrames(StackFramesPtr& frames);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(89):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(158):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(132):    static void CaptureEvent(fn_name_arg func, Id rid, int32_t info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(90):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(213):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(288):    static void CauseTrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(460):    static bool ClearActiveThread(Thread* active);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(494):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(620):    static void EnableFactions(const FactionFlags& enabled);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(636):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(644):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(91):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(62):    static TimePoint TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(66):    static std::string TimeZeroStr();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(70):    static TimePoint Now();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(74):    static TimePoint Never();
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(88):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(224):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3913):    static void AcquireMutex();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3914):    static void DoAbort();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3915):    static void DoDelete();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3916):    static int DoDivide();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3917):    static void DoSwerr();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3918):    static void DoTerminate();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3919):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(4377):    static RecoveryThread* EnsureThread(id_t subcommand);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(168):    static size_t BuffSize(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.h(72):    static std::string MakeName(ipport_t port);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.h(119):    static std::string MakeName(ipport_t port);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(67):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(83):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(140):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(211):    static void SetStatus(bool ok, const std::string& err);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(119):    static void Kill(const std::string& errstr, NodeBase::debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(54):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(70):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(84):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(92):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(193):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(205):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(60):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(180):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(152):    static NodeBase::c_string ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.h(65):    static std::string MakeName(NodeBase::Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(241):    static std::string OutputId(const std::string& label, NodeBase::id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(482):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(76):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(63):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(86):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(221):    static size_t Pad(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(77):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(456):    static EventHandler::Rc SendFacilityNack(PotsMuxPsm* npsm, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(136):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(52):    static StTestData* Access(CliThread& cli);
W097 Line indentation is not a multiple of the standard value
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(248):     const string& line2, size_t begin2, size_t end2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(588):     const std::string& line2, size_t begin2, size_t end2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(468):                     ((move == nullptr) || move->IsDeleted()));
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(297):        tagpos = loc.iter->code.find(tag, tagpos + 1))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(373):        loc.pos != string::npos;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(374):        loc = FindWord(loc.iter, loc.pos + 1, *defnName, &range))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1045):        tag.pos != string::npos;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1046):        tag = FindWord(tag.iter, tag.pos + 1, CONST_STR))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1390):        next->code, 0, next->code.size() - 1);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1598):        arg = FindWord(arg.iter, arg.pos + 1, VOID_STR))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3664):           loc = FindWord(loc.iter, loc.pos, name))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(113):           a != orders.adjustments.end(); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(424):           a != orders.adjustments.end(); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(740):        a != attacks.upper_bound(to_prov); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(954):                     (client.order_type_copy != MOVE_BY_CONVOY_ORDER))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1008):              f != subverted_army.convoyers.end(); ++f)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1526):        a != attacks.upper_bound(province); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1689):                  (attacker.order_type_copy != MOVE_BY_CONVOY_ORDER))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2047):        b != balanced_head_to_heads.end(); ++b)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2144):                 f != subverting_army.convoyers.end(); ++f)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2147):                    a != attacks.upper_bound(*f); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2201):        u != unbalanced_head_to_heads.end(); ++u)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(127):              (our_winter_orders.number_of_waives != 0));
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(240):           o != our_winter_orders.adjustments.end(); ++o)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(928):           b != r->second.adjustments.end(); ++b)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1060):           o != orders.adjustments.end(); ++o, ++count)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1431):                       loc != n->second.end(); ++loc)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2129):               winter->number_of_waives >= winter->number_of_orders_required)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2151):               game_map[build_loc.province].home_powers.end())
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2158):               game_map[build_loc.province].neighbours.end())
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2197):               winter->number_of_waives >= winter->number_of_orders_required)
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(387):              that.length_ * sizeof(Token));
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(431):              that.length_ * sizeof(Token));
W099 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(67):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(70):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(122):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(163):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(193):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(196):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(480):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(481):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(483):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(512):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(513):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(515):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(516):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(856):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(857):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(858):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(859):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(861):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(862):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(986):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(987):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(988):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(990):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(991):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(379):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(380):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(381):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(382):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(384):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(163):    CxxWord("D",   "D",    "D",  F),  // ALIGNAS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(164):    CxxWord("@",   "@",    "@",  T),  // ASM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(165):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(166):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(167):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(168):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(169):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(170):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(171):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(172):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(173):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(174):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(175):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(176):    CxxWord("DP",  "-",    "-",  F),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(177):    CxxWord("-",   "-",    "-",  F),  // FINAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(178):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(179):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(180):    CxxWord("-",   "-",    "g",  T),  // GOTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(181):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(182):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(183):    CxxWord("P",   "P",    "-",  F),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(184):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(185):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(186):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(187):    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(188):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(189):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(190):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(191):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(192):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(193):    CxxWord("$",   "$",    "$",  T),  // STATIC_ASSERT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(194):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(195):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(196):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(197):    CxxWord("D",   "D",    "D",  F),  // THREAD_LOCAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(198):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(199):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(200):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(201):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(202):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(203):    CxxWord("DP",  "DP",   "D",  F),  // VOLATILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(204):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(205):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(206):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(228):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(229):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(230):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(231):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(232):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(233):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(234):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(235):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(236):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(237):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(238):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(240):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(241):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(242):    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F),  // ALIGNOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(243):    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F),  // NOEXCEPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(244):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(245):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(246):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(247):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(248):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(249):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(250):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(251):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(252):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(253):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(254):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(255):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(256):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(257):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(258):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(259):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(260):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(261):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(262):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(263):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(264):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(265):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(266):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(267):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(268):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(269):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(270):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(271):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(272):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(273):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(274):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(275):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(276):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(277):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(278):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(279):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(280):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(281):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(282):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(283):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(284):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(285):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(286):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(287):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(288):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(289):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(290):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(291):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(292):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(293):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(294):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(295):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(102):    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(207):    inline static fn_name Array_ctor()    { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(208):    inline static fn_name Array_dtor()    { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(209):    inline static fn_name Array_Init()    { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(183): int64_t  operator/(const Duration& lhs, const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(617):                case Split:     c = 'S'; break;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(618):                case Merged:    c = 'm'; break;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(103):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(104):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(105):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(106):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(107):    CounterPtr      expansions_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(383):    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(384):    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(385):    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(386):    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(392):    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(369):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(370):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(373):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(623):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(624):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(628):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(125):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(40): fixed_string StatisticsGroup::ReportHeader =  "     Curr      Prev         All";
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(272):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(273):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(274):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(275):    CounterPtr       interrupts_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(279):    AccumulatorPtr   totTime_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(183):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(184):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(186):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(189):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(191):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(192):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(194):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(195):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(58):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(63):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(65):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(67):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(581):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(582):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(584):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(642):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(643):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(645):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(646):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(748):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(750):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(775):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(776):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(777):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(869):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(870):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(872):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(873):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(957):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(958):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(960):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(961):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(962):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(963):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(51):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(54):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(58):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(59):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(71):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(72):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(73):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(42):    LocalAddress   txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(43):    LocalAddress   rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(44):    MsgPriority    priority : 2;   // message's priority
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    bool           initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(46):    bool           final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool           join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool           self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool           injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool           kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    Message::Route route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    ProtocolId     protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    SignalId       signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    uint16_t       length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(138):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(140):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(249):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(250):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(252):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(317):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(318):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(319):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(321):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(362):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(363):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(364):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(365):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(367):    CauseInfo*    cci;
W102 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(293):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2761):       (lpar.iter->code.find_first_not_of(WhitespaceChars, lpar.pos + 1) == rpar))
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(3331): "Alloc  Low kB     kB       Bytes                            Memory        Prot\n"
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(3332): "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
W103 Function not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(164): size_t LevelToSize(NbHeap::level_t level)
W104 File heading is not standard
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.cpp(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.cpp(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Province.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Province.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
W106 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1378): void PotsTrafficThread::RecordHoldingTime(const Duration& time)
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(148): Digit DigitString::At(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(228): bool IsSortedByPosition(const Function* func1, const Function* func2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(237): char LastCodeChar(const string& s, size_t slashSlashPos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1796): int8_t CodeFile::GetDepth(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1841): void CodeFile::GetLineCounts() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1857): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2009): size_t CodeFile::IndentSize() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2032): void CodeFile::InsertAsm(Asm* code)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2040): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2048): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2056): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2065): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2073): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2081): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2089): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2117): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2125): void CodeFile::InsertSpace(SpaceDefnPtr& space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2133): void CodeFile::InsertStaticAssert(StaticAssert* assert)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2141): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2149): void CodeFile::InsertUsing(Using* use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2157): size_t CodeFile::LineLengthMax() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(235): bool InsertSpaceOnMerge(const string& line1, const string& line2, size_t begin2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(246): size_t LineMergeLength
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(177): word CodeWarning::FindWarning(const CodeWarning& log)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(813): bool CodeWarning::IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(832): bool CodeWarning::IsSortedByType
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(851): bool CodeWarning::IsSortedToFix
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(949): bool CodeWarning::Suppress() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(396): void Class::AddItem(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1296): Class* Class::GetClassTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1328): Cxx::Access Class::GetCurrAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1428): size_t Class::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1443): CxxScope* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1836): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2772): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(46): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(152): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(798): bool Macro::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(850): CxxScope* MacroName::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(193): bool Context::CompilingTemplateFunction()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(247): const TypeName* Context::FindXrefItem(const string& name)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(259): const Parser* Context::GetParser()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(267): XrefUpdater Context::GetXrefUpdater()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(329): void Context::OnLine(size_t line, bool compiling)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(343): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(350): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(377): void Context::PopXrefFrame()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(412): void Context::PushXrefFrame(XrefUpdater updater)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(419): void Context::PushXrefItem(const TypeName* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(466): void Context::SetPos(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(481): void Context::SetPos(const CxxLocation& loc)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(581): void Context::Trace(CxxTrace::Action act)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(590): void Context::Trace(CxxTrace::Action act, const StackArg& arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(599): void Context::Trace(CxxTrace::Action act, word err, const string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(608): void Context::Trace(CxxTrace::Action act, const CodeFile& file)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(617): void Context::Trace(CxxTrace::Action act, const CxxToken* token)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(899): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1087): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1493): bool StackArg::IsBool() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2211): const TypeName* XrefFrame::FindItem(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2223): void XrefFrame::PushItem(const TypeName* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(72): size_t CxxLocation::GetPos() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(79): void CxxLocation::SetLoc(CodeFile* file, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(245): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(254): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(263): id_t CxxNamed::GetDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(298): size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(307): void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(314): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(323): CxxScope* CxxNamed::GetTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(332): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(696): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1065): TypeTags DataSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1141): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1279): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2114): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2298): TypeName* QualName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2374): TypeName* QualName::Last() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2585): size_t QualName::Size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3017): CxxScoped* TypeName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3096): TypeName* TypeName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3282): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3814): int TypeTags::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3823): bool TypeTags::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3832): int TypeTags::IsVolatilePtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3841): bool TypeTags::IsVolatilePtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(118): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(254): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(262): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(298): bool Block::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(774): void ClassData::SetMemInit(const MemberInit* init)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(885): id_t CxxScope::GetDistinctDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1276): CodeFile* Data::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1283): const Data* Data::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1292): CodeFile* Data::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1339): TypeName* Data::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1492): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1635): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3887): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3924): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3935): Cxx::Access Function::GetAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3943): CodeFile* Function::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3950): const Function* Function::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3959): CodeFile* Function::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3968): size_t Function::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3984): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3996): CxxScope* Function::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4008): CxxScope* Function::GetTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4016): TemplateType Function::GetTemplateType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4519): bool Function::IsImplemented() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5355): bool Function::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5406): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5420): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5434): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5456): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5475): void FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5483): TypeTags FuncSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5490): void FuncSpec::GetNames(stringVector& names) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5498): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5505): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5512): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5519): void FuncSpec::Instantiating(CxxScopedVector& locals) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5527): bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5535): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5543): TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5553): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5561): bool FuncSpec::NamesReferToArgs(const NameVector& names,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5577): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5584): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5591): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5598): void FuncSpec::SetPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5605): void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5613): const TypeTags* FuncSpec::Tags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5620): TypeTags* FuncSpec::Tags()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(373): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(466): void CxxScoped::AddFiles(SetOfIds& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(476): void CxxScoped::AddReference(const CxxNamed* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(652): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(661): size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(676): bool CxxScoped::IncludeInXref() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(683): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(692): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(701): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(710): bool CxxScoped::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(719): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(727): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(740): bool CxxScoped::IsIndirect() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1176): TypeSpec* Enum::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1524): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1613): bool Forward::IncludeInXref() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1738): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2017): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2026): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2035): CxxScoped* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2105): bool Friend::IncludeInXref() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2389): CxxScoped* MemberInit::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2434): CxxToken* TemplateParm::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2523): CxxScoped* TemplateParm::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2536): CxxToken* TemplateParm::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2827): TypeName* Typedef::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(308): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(399): bool Do::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(640): bool For::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(807): bool If::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(1302): bool While::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(223): template< typename T > void GetSymbols
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(235): bool IsSortedByName(const CxxScoped* item1, const CxxScoped* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(272): bool IsSortedByPos(const CxxNamed* item1, const CxxNamed* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(302): bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(441): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(448): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(455): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(462): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(469): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(476): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(483): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(490): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(497): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(504): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(511): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(818): void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(825): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(832): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(839): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(846): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(853): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(860): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(867): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(874): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(881): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(888): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(895): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(295): bool CxxToken::IsPointer(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(405): void EraseTemplateArgs
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(437): void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(447): void CxxUsageSets::AddBase(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(455): void CxxUsageSets::AddDirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(463): void CxxUsageSets::AddForward(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(474): void CxxUsageSets::AddIndirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(482): void CxxUsageSets::AddInherit(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(490): void CxxUsageSets::AddUser(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(905): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(966): Numeric IntLiteral::BaseNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1109): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1134): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1150): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(101): bool IncludesAreSorted(const string& line1, const string& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(133): bool IsValidIndex(word index, size_t size)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(143): word NotFound(string& expl, fixed_string text, bool quotes = false)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(156): word Report(string& expl, fixed_string text, word rc = 0)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2612): LineType Editor::GetLineType(const Iter& iter) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2663): bool Editor::IncludesSorted(const SourceLine& line1, const SourceLine& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3608): void Editor::PushBack(const string& code)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(134): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(142): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(58): IndentRule ClassifyIndent(string& id)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(837): void Lexer::GetDepth(size_t line, int8_t& depth, bool& cont) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1085): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1109): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1188): bool Lexer::GetNthLine(size_t n, string& s) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2085): void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(103): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(76): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(83): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(90): LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(108): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(155): LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(162): LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(169): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(188): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(195): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(202): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(231): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(250): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(257): LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(264): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(271): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(298): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(305): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(312): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(321): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(347): LibrarySet* LibrarySet::OpError() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(452): LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(459): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(466): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(257): size_t Parser::CurrPos() const
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(455): BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(462): BaseBot* BaseBot::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(29): void ConvoySubversion::clear()  // <b>
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(37): void ConvoySubversion::decrement()
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(446): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(272): bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(290): bool MapAndUnits::can_move_to_province
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(586): TokenMessage MapAndUnits::encode_location(const Location& location) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(864): TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1197): const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1446): MapAndUnits* MapAndUnits::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2547): Token MapAndUnits::province_token(ProvinceId province) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2677): bool MapAndUnits::set_move_by_single_step_convoy_order
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(32): Token::Token(const category_t cat, const subtoken_t sub)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(40): int Token::get_number() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(49): bool Token::is_number() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(56): bool Token::is_power() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(63): bool Token::is_province() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(70): Token& Token::operator=(const Token& that)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(126): Token::SeasonType Token::order_season() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(137): PowerId Token::power_id() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(145): ProvinceId Token::province_id() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(268): Token power_token(PowerId power)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(281): Token province_token(ProvinceId province)
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(125): Token TokenMessage::at(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(132): void TokenMessage::clear()
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(262): Token TokenMessage::front() const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(347): Token TokenMessage::operator[](size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp(333): TokenTextMap* TokenTextMap::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(37): size_t WinterOrders::get_number_of_results() const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(256): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(91): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(81): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(204): AlarmStatus Alarm::Status() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(96): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(146): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(52): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(71): bool CfgFlagParm::GetCurrValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(73): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(272): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(66): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(72): void CinThread::ClearClient(const Thread* client)
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(95): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(136): uint32_t CliCookie::Index(uint32_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(53): void Debug::Assert(bool condition, debug64_t errval)
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.cpp(195): bool Element::RunningInLab()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(193): CtorChain::CtorChain(FunctionTrace* inner) :
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(210): bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(263): CtorChain::Action CtorChain::CalcAction
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(331): TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(350): bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(393): bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(411): TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(460): void CtorChain::HandleFunction(FunctionTrace* func)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(487): void CtorChain::MoveOuterAboveInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(501): void CtorChain::MoveOuterAboveInner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(514): void CtorChain::SetOuter(FunctionTrace* outer)
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp(126): void Heap::Freed(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp(134): bool Heap::IsFixedSize() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp(172): void Heap::Requested(size_t size, bool ok)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::ImmediateTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(57): bool InitFlags::SuspendRoot()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(64): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(138): size_t Log::Count()
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(518): void LogBuffer::UpdateMax()
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp(178): void LogGroup::SetSuppressed(bool suppressed)
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.cpp(197): LogGroup* LogGroupRegistry::Group(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.cpp(150): size_t MainArgs::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(218): Heap* AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(237): Heap* EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(254): MemoryType Memory::AddrToType(const void* addr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(271): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(420): const Heap* Memory::GetHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(429): bool Memory::Protect(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(514): bool Memory::Unprotect(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(547): size_t Memory::Words(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(58): const FactionFlags& AllFactions()
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(75): const FactionFlags& ShutdownFactions()
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(171): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(74): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(125): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(126): NbHeap::index_t IndexToChild(NbHeap::index_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(135): NbHeap::index_t IndexToParent(NbHeap::index_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(144): NbHeap::index_t IndexToSibling(NbHeap::index_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(155): size_t Log2Size(NbHeap::level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(164): size_t LevelToSize(NbHeap::level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(173): NbHeap::level_t SizeToLevel(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(394): bool NbHeap::AddrIsValid(const void* addr, bool header) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(435): HeapBlock* NbHeap::AllocBlock(level_t level, size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(467): NbHeap::index_t NbHeap::BlockToIndex
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(536): NbHeap::BlockState NbHeap::Corrupt(int reason, bool restart) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(548): HeapBlock* NbHeap::Dequeue(level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(649): void NbHeap::EnqBlock(HeapBlock* block, index_t index, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(658): HeapBlock* NbHeap::Enqueue(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(701): void NbHeap::FreeBlock(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(720): NbHeap::BlockState NbHeap::GetState(index_t index) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(736): HeapBlock* NbHeap::IndexToBlock(index_t index, level_t level) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(756): void NbHeap::ReleaseBlock(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(772): void NbHeap::ReserveBlock(const HeapBlock* block)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(785): void NbHeap::SetState(index_t index, BlockState state)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(801): void NbHeap::SplitAncestors(index_t block)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(851): NbHeap::BlockState NbHeap::ValidateBlock
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(174): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(75): char BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(98): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(61): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(72): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(99): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(332): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(501): size_t ObjectPool::AvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(508): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(809): size_t ObjectPool::Expansions() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(816): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(861): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(868): bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(880): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(887): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(894): ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(913): Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(986): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(995): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(1004): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(293): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(48): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(126): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(131): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(136): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(141): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(146): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(151): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(156): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(60): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(93): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(105): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(159): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(40): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(38): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(50): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.cpp(38): bool Restart::ClearsMemory(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.cpp(68): RestartLevel Restart::LevelToClear(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(124): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(114): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(259): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(337): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(127): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(33): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(40): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(99): bool FileWalker::AtEnd() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(106): void FileWalker::GetName(string& fileName) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(115): bool FileWalker::IsSubdir() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(91): void* SysHeap::Addr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(127): bool SysHeap::CanBeProtected() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(161): void SysHeap::ListHeaps(std::set< void* >& heaps, std::ostringstream& expl)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(33): SysLock::SysLock() :
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(45): SysLock::~SysLock()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(63): void SysLock::Acquire()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(95): void SysLock::Release()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(49): DWORD GetMemoryProtection(MemoryProtection attrs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(62): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(49): signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(237): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(277): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(119): fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(135): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(144): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(257): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(71): TimePoint SysTickTimer::Now() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(180): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(190): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(206): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(214): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(244): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(264): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(31): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(32): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(39): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(46): void ThisThread::IncludeInTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(53): DelayRc ThisThread::Pause(const Duration& timeout)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(60): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(67): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(74): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(81): TraceRc ThisThread::StartTracing(const string& opts)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(88): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(100): std::atomic_flag& AccessFtLock()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(456): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(959): bool Threads::IsDeleted() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1425): Thread* Thread::ActiveThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1437): SysMutex* Thread::BlockingMutex() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1444): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1460): bool Thread::CanBeScheduled() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1532): bool Thread::ClearActiveThread(Thread* active)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2059): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2105): BlockingReason Thread::GetBlockingReason() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2112): TraceStatus Thread::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2277): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2284): bool Thread::IsScheduled() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2291): bool Thread::IsTraceable() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2338): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2400): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2583): uint8_t Thread::MutexCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2590): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2609): DelayRc Thread::Pause(Duration time)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2653): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2954): void Thread::ResetDebugFlags()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3063): Thread* Thread::RunningThread(bool assert)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3209): void Thread::SetStatus(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3312): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3571): TraceRc Thread::StartTracing(const string& opts)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3605): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3767): void Thread::Trace(Thread* thr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3784): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3812): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(4005): void Thread::UpdateMutex(SysMutex* mutex)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(4012): void Thread::UpdateMutexCount(bool acquired)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(350): const ThreadAdminValues* ThreadAdmin::AccessConfig()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(365): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(472): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(562): bool ThreadAdmin::ReinitOnSchedTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(571): word ThreadAdmin::RtcInterval()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(580): word ThreadAdmin::RtcLimit()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(589): Duration ThreadAdmin::RtcTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(599): Duration ThreadAdmin::SchedTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(622): word ThreadAdmin::StackCheckInterval()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(631): word ThreadAdmin::StackUsageLimit()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(668): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(680): word ThreadAdmin::TrapInterval()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(689): word ThreadAdmin::TrapLimit()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(698): bool ThreadAdmin::TrapOnRtcTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(194): Thread* ThreadRegistry::FindThread(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(209): ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(220): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(118): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(110): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(141): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(161): void* TraceBuffer::AddFunction()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(229): size_t TraceBuffer::AllocSlot()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(385): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(405): bool TraceBuffer::Insert(TraceRecord* record)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(442): fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(474): const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(494): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(501): void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(521): void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(642): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(838): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(98): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(47): int FunctionStats::Compare(const FunctionStats& that) const
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(65): void FunctionStats::IncrCalls(const Duration& net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1246): word CheckHeap(bool shouldExist, CliThread& cli, Heap*& heap)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1752): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1786): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1815): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2272): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2306): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2335): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2836): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2867): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(154): TestDatabase::State TestDatabase::GetState(const string& testcase)
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(207): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(210): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(289): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(81): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(138): void SysSocket::SetStatus(bool ok, const string& err)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(162): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(170): bool SysSocket::Trace(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(181): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(41): uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(43): uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(45): uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(47): uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(49): uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(51): uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(479): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(97): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(82): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(80): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(98): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(80): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(514): void PotsCircuit::Trace(const SignalEntry& entry)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(77): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(78): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(150): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(113): void DnRouteFeatureProfile::SetActive(bool on)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(121): void DnRouteFeatureProfile::SetDN(Address::DN dn)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(85): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(115): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(75): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(94): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(97): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(94): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(90): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(355): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(992): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(1002): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(143): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(220): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(227): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(157): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(92): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(733): void InvokerPool::RecordDelay(MsgPriority prio, const Duration& delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(832): size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(840): Duration InvokerPool::WorkQMaxDelay(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(848): size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(182): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(121): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(251): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(340): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(375): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(432): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(200): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(135): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(148): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(161): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(173): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(185): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(198): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(82): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(409): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(379): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(82): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(321): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(133): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(168): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(251): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(259): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(66): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(384): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(123): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(206): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(77): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(86): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(57): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2138):    Debug::ft(Tracepoint_OnLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(113):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(84):    Debug::ft(Debug_GenerateSwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(44):    Debug::ft(Exception_ctor1);  //@
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(38):    Debug::ft(MutexGuard_ctor);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(62):       Debug::ft(MutexGuard_Release);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ft(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(75):    Debug::ft(NodeBase_SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1977):    Debug::ft(Thread_ExitIfSafe);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2830):    Debug::ft(Thread_Ready);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3284):    Debug::ft(Thread_SignalHandler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3352):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3831):       Debug::ft(Thread_TrapHandler);  //@
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(4138):       Debug::ft(RecoveryThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(738):    Debug::ft(Context_ProcessWork);
W110 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(44): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(224): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(337): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(87): class CxxSymbols: public NodeBase::Base
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(44): class Interpreter : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(43): struct AlarmDynamic : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(48): struct ClassDynamic : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(55): struct LogDynamic : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(83): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(96): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(187): struct ObjectPoolDynamic : public Persistent
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(37): class FileWalker : public FileList
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(38): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(266): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(358): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(770): class Threads : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(55): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(218): struct ThreadAdminValues : public Persistent
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(63): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1097): class TestHeap : public NbHeap
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1499): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3258): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h(41): class TestDatabase : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(52): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(50): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(77):    struct PotsProfileDynamic : public Persistent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(45): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(64): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(105): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(192): class TimerPool : public NodeBase::ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(113): class SbTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(55): class PotsCallIpService : public UdpIpService
W111 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(61): class ProtectedHeap : public NbHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(358): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(770): class Threads : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(994): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(48): class EventHandler : public NodeBase::Immutable
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(40): class SbAnalyzeMessage : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(54): class SbAnalyzeSap : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(68): class SbAnalyzeSnp : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(82): class SbForceTransition : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(96): class SbInitiationReq : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
W117 Line can merge with the next line and be under the length limit
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(242):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(304): const SymbolView DeclaredLocally
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1178):          (Keywords->lower_bound(name) == Keywords->cend()))
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(1859):          (press->message == contents))
  C:/Users/gregu/Documents/rsc/rsc/nb/CliStack.h(65):    const CliCommand* FindCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(322):       "F", &Debug::FcFlags_, Debug::StackChecking,
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(606):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(622):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(626):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(628):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(630):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(634):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(642):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(644):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(443):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(484):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(486):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(500):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(662):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(678):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(379):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(391):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(393):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(760):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(764):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(766):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(778):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(782):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(784):    BindEventHandler
W119 Argument passed by value is modified
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(48/1): DigitString::DigitString(Address::DN dn) : size_(0)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(248/5):     const string& line2, size_t begin2, size_t end2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1796/3):    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(364/2): void CxxNamed::Log(Warning warning, const CxxNamed* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2114/1): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(3101/1): void Using::SetScope(CxxScope* scope)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(233/2): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(255/2): size_t FindTemplateEnd(const string& name, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(737/5):    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(771/2): size_t RfindFirstNotOf(const string& str, size_t pos, const string& elems)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1622/3): Editor::CodeLocation Editor::Find(Iter iter, const string& str, size_t off)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1673/2):    (Iter iter, size_t off, const string& chars)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1944/2): Editor::CodeLocation Editor::FindNonBlank(Iter iter, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2144/2):    (Iter iter, size_t pos, const string& id, size_t* range)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3953/2): Editor::CodeLocation Editor::RfindNonBlank(Iter iter, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(475/1): LibExprErr Interpreter::ApplyOperator(bool operand)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(590/1): LibrarySet* Interpreter::Error(LibExprErr err) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(355/3): size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(591/1): size_t Lexer::FindLineEnd(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(959/2): size_t Lexer::GetHexNum(int64_t& num, size_t max)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(985/1): bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1859/1): size_t Lexer::NextPos(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2137/1): size_t Lexer::SkipCharLiteral(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2157/1): size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2192/1): size_t Lexer::SkipTemplateSpec(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1070/2): bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2422/1): size_t Parser::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4274/2): void Parser::Log(Warning warning, size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(155/1): bool Token::set_number(int number)
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(30/1): size_t find_first_one(uword n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(55/1): size_t log2(size_t n, bool up)
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(118/1): size_t round_to_2_exp_n(size_t n, size_t e, bool up)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(96/1): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp(151/3):    const string& expl, std::streamsize p) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.cpp(41/2): CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.cpp(144/2): void CliTextParm::Explain(ostream& stream, col_t indent) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(778/2):    (const string& expl, size_t begin, size_t end, col_t indent) const
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(99/1): LogBuffer::LogBuffer(size_t size) :
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(243/2): NbHeap::NbHeap(MemoryType type, size_t size) : Heap(),
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(418/1): void* NbHeap::Alloc(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(701/1): void NbHeap::FreeBlock(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(801/1): void NbHeap::SplitAncestors(index_t block)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(508/1): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(524/1): Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(550/1): bool ObjectPool::Corrupt(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(71/1): void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(105/1): void SysTime::AddDays(size_t days)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(140/1): void SysTime::AddMsecs(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(402/1): void SysTime::SubDays(size_t days)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(437/1): void SysTime::SubMsecs(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2121/1): bool Thread::HandleSignal(signal_t sig, uint32_t code)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3767/1): void Thread::Trace(Thread* thr,
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(181/1): bool TraceBuffer::AllocBuffers(size_t n, bool ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(366/1): TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(151/2):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(151/3):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp(265/1): SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(105/1): bool SysTcpSocket::Listen(size_t backlog)
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(411/3): void Context::Enqueue(Q2Way< Context >& whichq, MsgPriority prio, bool henq)
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(732/1): void Context::ProcessWork(InvokerThread* inv)
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(628/1): bool Message::Retrieve(ProtocolSM* psm)
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(703/1): bool Message::Send(Route route)
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(337/1):    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(410/1): EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(854/2):    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(922/2):    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(79/1): Timer::QId TimerRegistry::CalcQId(secs_t secs) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(246/2): TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(114/3):       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1079/1):    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
W120 Function returns non-const reference or pointer to member data
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(998):    DigitString& DialedDigits() { return dialed_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(110):    CxxNamedSet& Xref() const { return xref_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(82):    Registry< CliParm >& Parms() { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(169):    CliCookie& Cookie() { return cookie_; }
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h
  W005 Functional cast
    51:    ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    34: using namespace SessionBase;
    35: using namespace MediaBase;
    36: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    64:    CliText* CreateText() const override;
  W110 Override of Base.Display not found
    44: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    142:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    155:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    177:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    187:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    72:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    73:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    70:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    503:    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
    1070:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDynamic);
  W006 reinterpret_cast
    491:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W053 Data could be const
    172:    Q1Link link_;
  W092 Function could be free
    168:    static c_string strState(State state);
  W106 Function does not invoke Debug::ft
    1378: void PotsTrafficThread::RecordHoldingTime(const Duration& time)
  W110 Override of Base.Display not found
    224: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace CallBase;
  W092 Function could be free
    87:    static void DisplayStateCounts
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    114:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    164:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W032 Unused function
    214:    Digit At(DigitCount i) const;
  W042 Member could be private
    146:    typedef uint8_t DigitCount;
    176:    static bool IsValidDigit(Digit d)
    183:    Rc AddDigit(Digit d);
    202:    DigitCount Size() const;
    226:    bool operator==(const DigitString& that) const;
  W043 Member could be protected
    125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W092 Function could be free
    101:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    117:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    121:    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
    125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    176:    static bool IsValidDigit(Digit d)
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    132:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    41:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    43:    auto& bcssm = static_cast< BcSsm& >(ssm);
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    67:    auto          sid = msg->GetSignal();
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    70:    CauseInfo*    cci;
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    122:    auto       sid = msg->GetSignal();
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    163:    auto       sid = msg->GetSignal();
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    193:    auto          sid = msg->GetSignal();
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    196:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    119:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp
  W006 reinterpret_cast
    468:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    483:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    513:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    825:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    857:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    987:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1384:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1389:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    480:    id_t        idx;
    481:    word        fid, rid;
    483:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    512:    TestRc       rc;
    513:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    515:    id_t         idx;
    516:    word         fid, rid;
    856:    auto          state = GetState();
    857:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    858:    auto          sig = tmsg.GetSignal();
    859:    TimeoutInfo*  toi = nullptr;
    861:    auto          err = true;
    862:    debug64_t     error;
    986:    auto          state = GetState();
    987:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    988:    auto          sig = msg.GetSignal();
    990:    auto          err = true;
    991:    debug64_t     error;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h
  W005 Functional cast
    305:    ipport_t Port() const override { return ipport_t(port_); }
    344:    ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    50: using namespace NodeBase;
    51: using namespace NetworkBase;
    52: using namespace SessionBase;
    53: using namespace MediaBase;
  W027 Unused class
    298: class CipUdpService : public UdpIpService
  W032 Unused function
    182:    MediaInfo* AddMedia(const MediaInfo& media);
    249:    void InjectFinalMsg() override;
    318:    CliText* CreateText() const override;
    363:    CliText* CreateText() const override;
  W042 Member could be private
    236:    void EnsureMediaMsg() override;
    240:    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    411:    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W110 Override of Base.Display not found
    298: class CipUdpService : public UdpIpService
    337: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h
  W020 Using statement in header
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h
  W020 Using statement in header
    53: using namespace MediaBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W037 Member hides inherited name
    314:    static const Id NextId = FirstId + 50;
    881:    static const Id NextId                 = FirstUn + 7;
  W042 Member could be private
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1149:    CipPsm* AllocNPsm();
  W043 Member could be protected
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W053 Data could be const
    338:    Progress::Ind progress_;
    354:    Cause::Ind cause_;
  W075 Virtual function is public
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1074:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1210:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W082 Adjacent arguments have the same type
    1214:    BcFactory(Id fid, ProtocolId prid, c_string name);
  W090 Function could be const
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1165:    CipMessage* BuildCipRel(Cause::Ind cause);
  W120 Function returns non-const reference or pointer to member data
    998:    DigitString& DialedDigits() { return dialed_; }
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    394:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    909:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W102 Line length exceeds the standard maximum
    293:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    139:       auto rc = AddDigit(Digit(ds.digits_[i]));
    150:    if(i < Size()) return Digit(digits_[i]);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    148: Digit DigitString::At(DigitCount i) const
  W119 Argument passed by value is modified
    48/1: DigitString::DigitString(Address::DN dn) : size_(0)
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    379:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    380:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    382:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    414:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    423:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    451:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    452:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    567:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    724:          return static_cast< ProxyBcPsm* >(p);
    760:          ppsm = static_cast< ProxyBcPsm* >(psm);
    987:    auto& tmsg = static_cast< const CipMessage& >(msg);
    992:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    379:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    380:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    381:    auto          sid = msg->GetSignal();
    382:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    384:    CauseInfo*    cci;
  W117 Line can merge with the next line and be under the length limit
    242:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W022 Add using statement
    1: namespace MediaBase
    1: namespace SessionBase
  W027 Unused class
    191: class ProxyBcDisconnecting : public BcDisconnecting
  W028 Unused data
    62:    static const ServicePortId NextPortId = FirstPortId + 1;
    218:    static const Id NextId        = FirstId + 4;
    302:    static const Id NextId              = FirstId + 7;
    387:    static const Id NextId          = FirstId + 3;
  W032 Unused function
    194:    explicit ProxyBcDisconnecting(ServiceId sid);
  W037 Member hides inherited name
    62:    static const ServicePortId NextPortId = FirstPortId + 1;
    212:    static const Id FirstId = BcEvent::NextId;
    218:    static const Id NextId        = FirstId + 4;
    302:    static const Id NextId              = FirstId + 7;
  W042 Member could be private
    494:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    471:    virtual EventHandler::Rc RaiseReleaseUser
    473:    virtual EventHandler::Rc RaiseProxyProgress
    475:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    476:    virtual EventHandler::Rc RaiseProxyRelease
    511:    void SetUPsm(MediaPsm& psm) override;
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
  W042 Member could be private
    46:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h
  W032 Unused function
    163:    static std::string Demangle(const std::string& s);
  W092 Function could be free
    112:    static NodeBase::word Report
  W110 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp
  W006 reinterpret_cast
    66:    auto fake = reinterpret_cast< const CodeDir* >(&local);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp
  W006 reinterpret_cast
    617:    auto fake = reinterpret_cast< const CodeFile* >(&local);
  W007 Cast down the inheritance hierarchy
    84:          auto base = static_cast< const Class* >(*b);
    217:       auto base = static_cast< const Class* >(*b);
    273:                auto type = static_cast< const Typedef* >(*item2);
    296:          auto type = static_cast< const Typedef* >(*item1);
    553:    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
    2538:    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
    2676:       auto base = static_cast< const Class* >(*b);
  W106 Function does not invoke Debug::ft
    228: bool IsSortedByPosition(const Function* func1, const Function* func2)
    237: char LastCodeChar(const string& s, size_t slashSlashPos)
    1796: int8_t CodeFile::GetDepth(size_t line) const
    1841: void CodeFile::GetLineCounts() const
    1857: LineType CodeFile::GetLineType(size_t n) const
    2009: size_t CodeFile::IndentSize() const
    2032: void CodeFile::InsertAsm(Asm* code)
    2040: void CodeFile::InsertClass(Class* cls)
    2048: void CodeFile::InsertData(Data* data)
    2056: bool CodeFile::InsertDirective(DirectivePtr& dir)
    2065: void CodeFile::InsertEnum(Enum* item)
    2073: void CodeFile::InsertForw(Forward* forw)
    2081: void CodeFile::InsertFunc(Function* func)
    2089: void CodeFile::InsertInclude(IncludePtr& incl)
    2117: void CodeFile::InsertMacro(Macro* macro)
    2125: void CodeFile::InsertSpace(SpaceDefnPtr& space)
    2133: void CodeFile::InsertStaticAssert(StaticAssert* assert)
    2141: void CodeFile::InsertType(Typedef* type)
    2149: void CodeFile::InsertUsing(Using* use)
    2157: size_t CodeFile::LineLengthMax() const
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h
  W026 Unused argument
    366/3:       const CxxNamed* item, const CxxScope* scope) const;
  W042 Member could be private
    216:    size_t CalcGroup(const Include& incl) const;
  W082 Adjacent arguments have the same type
    382:    void LogCode(Warning warning, size_t line, size_t pos,
  W092 Function could be free
    193:    size_t IndentSize() const;
    197:    size_t LineLengthMax() const;
    284:    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
    320:    const stringVector& Prolog() const;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    597:    LibrarySet* nbSet = (LibrarySet*) this;
    629:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    82:    auto curr = static_cast< CodeFileSet* >(Users(true));
    94:       curr = static_cast< CodeFileSet* >(prev->Users(true));
    114:    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
    126:       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
    158:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    159:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    464:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
    496:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    497:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    608:       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
    640:       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
    675:    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  W008 Cast removes const qualification
    597:    LibrarySet* nbSet = (LibrarySet*) this;
    629:    LibrarySet* nsSet = (LibrarySet*) this;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp
  W007 Cast down the inheritance hierarchy
    64:    auto that = static_cast< CodeSet* >(rhs);
    100:    auto that = static_cast< const CodeSet* >(rhs);
    137:    auto that = static_cast< const CodeSet* >(rhs);
    151:    auto that = static_cast< const CodeSet* >(rhs);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp
  W097 Line indentation is not a multiple of the standard value
    248:     const string& line2, size_t begin2, size_t end2)
  W106 Function does not invoke Debug::ft
    235: bool InsertSpaceOnMerge(const string& line1, const string& line2, size_t begin2)
    246: size_t LineMergeLength
  W117 Line can merge with the next line and be under the length limit
    304: const SymbolView DeclaredLocally
  W119 Argument passed by value is modified
    248/5:     const string& line2, size_t begin2, size_t end2)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h
  W028 Unused data
    177: extern const std::string SingleRule;
    617: extern const NodeBase::Flags NoLF_Mask;
    618: extern const NodeBase::Flags Last_Mask;
    622: extern const NodeBase::Flags Stats_Mask;
  W082 Adjacent arguments have the same type
    305:    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
    586: size_t LineMergeLength
    594: bool InsertSpaceOnMerge
  W097 Line indentation is not a multiple of the standard value
    588:     const std::string& line2, size_t begin2, size_t end2);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp
  W005 Functional cast
    262:          << spaces(3) << LineType(t) << CRLF;
    273:          *stream << (Attrs_.at(Warning(w)).fixable ? '*' : SPACE);
    274:          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
    275:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  W007 Cast down the inheritance hierarchy
    909:       if(static_cast< const Function* >(item_)->IsVirtual())
    982:       auto data = static_cast< const Data* >(item_);
    1024:       auto func = static_cast< const Function* >(item_);
    1098:       auto cls = static_cast< const Class* >(item_);
    1122:       auto cls = static_cast< const Class* >(item_);
    1153:          auto func = static_cast< const Function* >(item_);
  W106 Function does not invoke Debug::ft
    177: word CodeWarning::FindWarning(const CodeWarning& log)
    813: bool CodeWarning::IsSortedByFile
    832: bool CodeWarning::IsSortedByType
    851: bool CodeWarning::IsSortedToFix
    949: bool CodeWarning::Suppress() const
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h
  W020 Using statement in header
    37: using NodeBase::fixed_string;
    38: using NodeBase::SPACE;
    39: using NodeBase::word;
  W032 Unused function
    128:    bool operator!=(const CodeWarning& that) const;
  W042 Member could be private
    117:    std::string GetNewFuncName(std::string& expl) const;
  W053 Data could be const
    192:    Warning warning_;
    200:    size_t line_;
    204:    size_t pos_;
    212:    word offset_;
    216:    std::string info_;
    220:    bool hide_;
  W054 Data could be const pointer
    196:    const CodeFile* file_;
    208:    const CxxNamed* item_;
  W082 Adjacent arguments have the same type
    93:    CodeWarning(Warning warning, const CodeFile* file,
C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp
  W005 Functional cast
    1575:       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
    1589:    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  W043 Member could be protected
    118:    static LibrarySet* Evaluate(const CliThread& cli);
  W092 Function could be free
    118:    static LibrarySet* Evaluate(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    335:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    387:          oper = Cxx::Operator(i);
    438:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    444:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    449:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W099 Line contains adjacent spaces
    163:    CxxWord("D",   "D",    "D",  F),  // ALIGNAS
    164:    CxxWord("@",   "@",    "@",  T),  // ASM
    165:    CxxWord("-",   "-",    "D",  F),  // AUTO
    166:    CxxWord("-",   "-",    "b",  T),  // BREAK
    167:    CxxWord("-",   "-",    "c",  T),  // CASE
    168:    CxxWord("C",   "C",    "-",  T),  // CLASS
    169:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    170:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    171:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    172:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    173:    CxxWord("-",   "-",    "d",  T),  // DO
    174:    CxxWord("E",   "E",    "E",  T),  // ENUM
    175:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    176:    CxxWord("DP",  "-",    "-",  F),  // EXTERN
    177:    CxxWord("-",   "-",    "-",  F),  // FINAL
    178:    CxxWord("-",   "-",    "f",  T),  // FOR
    179:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    180:    CxxWord("-",   "-",    "g",  T),  // GOTO
    181:    CxxWord("H",   "H",    "H",  F),  // HASH
    182:    CxxWord("-",   "-",    "i",  T),  // IF
    183:    CxxWord("P",   "P",    "-",  F),  // INLINE
    184:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    185:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    186:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    187:    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
    188:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    189:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    190:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    191:    CxxWord("-",   "-",    "r",  T),  // RETURN
    192:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    193:    CxxWord("$",   "$",    "$",  T),  // STATIC_ASSERT
    194:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    195:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    196:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    197:    CxxWord("D",   "D",    "D",  F),  // THREAD_LOCAL
    198:    CxxWord("-",   "-",    "t",  T),  // TRY
    199:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    200:    CxxWord("C",   "C",    "-",  T),  // UNION
    201:    CxxWord("U",   "U",    "U",  T),  // USING
    202:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    203:    CxxWord("DP",  "DP",   "D",  F),  // VOLATILE
    204:    CxxWord("-",   "-",    "w",  T),  // WHILE
    205:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    206:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    228:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    229:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    230:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    231:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    232:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    233:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    234:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    235:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    236:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    237:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    238:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    240:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    241:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    242:    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F),  // ALIGNOF_TYPE
    243:    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F),  // NOEXCEPT
    244:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    245:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    246:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    247:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    248:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    249:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    250:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    251:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    252:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    253:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    254:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    255:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    256:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    257:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    258:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    259:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    260:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    261:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    262:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    263:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    264:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    265:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    266:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    267:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    268:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    269:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    270:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    271:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    272:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    273:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    274:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    275:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    276:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    277:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    278:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    279:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    280:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    281:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    282:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    283:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    284:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    285:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    286:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    287:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    288:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    289:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    290:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    291:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    292:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    293:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    294:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    295:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h
  W042 Member could be private
    468:    Numeric(NumericType type, size_t width, bool sign) :
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    211:          static_cast< const Function* >(item)->IsInline())
    1025:    auto area = static_cast< CxxArea* >(GetScope());
    1028:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1045:          auto c = static_cast< Class* >(*s);
    2125:       auto func = static_cast< const Function* >(item);
    2169:       auto func = static_cast< const Function* >(item);
    2179:       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  W008 Cast removes const qualification
    1299:    return const_cast< Class* >(this);
    1446:    return static_cast< CxxScope* >(const_cast< Class* >(this));
    2121:       return const_cast< ClassInst* >(this);
  W106 Function does not invoke Debug::ft
    396: void Class::AddItem(const CxxNamed* item)
    1296: Class* Class::GetClassTemplate() const
    1328: Cxx::Access Class::GetCurrAccess() const
    1428: size_t Class::GetRange(size_t& begin, size_t& end) const
    1443: CxxScope* Class::GetTemplate() const
    1836: Class* Class::OuterClass() const
    2772: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  W119 Argument passed by value is modified
    1796/3:    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    491:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    844:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  W007 Cast down the inheritance hierarchy
    919:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    164:       override { return const_cast< CxxArea* >(this); }
    491:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    528:       override { return const_cast< Class* >(this); }
    844:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
    962:       override { return const_cast< Namespace* >(this); }
  W032 Unused function
    577:    bool IsImplemented() const override;
  W042 Member could be private
    135:    Typedef* FindType(const std::string& name) const;
    184:    Enum* FindEnum(const std::string& name) const;
    188:    Enumerator* FindEnumerator(const std::string& name) const;
    406:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    924:    Namespace* FindNamespace(const std::string& name) const;
  W043 Member could be protected
    87:    const ClassPtrVector* Classes() const { return &classes_; }
    95:    const EnumPtrVector* Enums() const { return &enums_; }
    99:    const ForwardPtrVector* Forws() const { return &forws_; }
    119:    const AsmPtrVector* Assembly() const { return &assembly_; }
    123:    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
  W060 Base class constructor is public
    279:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W075 Virtual function is public
    144:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    151:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    308:    virtual ClassInst* EnsureInstance(const TypeName* type);
    316:    virtual Class* BaseClass()
    321:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    338:    virtual Class* GetClassTemplate() const;
    353:    virtual bool DerivesFrom(const Class* cls) const;
    478:    bool AddAnonymousUnion(const ClassPtr& cls) override;
    508:    Class* DirectClass() const override { return GetClass(); }
    949:    CxxScoped* FindItem(const std::string& name) const override;
  W092 Function could be free
    206:    static Function* FoundFunc
    649:    static size_t CreateCodeError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxCharLiteral.h
  W020 Using statement in header
    35: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    896:       auto macro = static_cast< Macro* >(ref_);
    909:       auto macro = static_cast< Macro* >(ref_);
  W106 Function does not invoke Debug::ft
    46: void AlignLeft(ostream& stream, const string& prefix)
    152: CxxToken* Define::AutoType() const
    798: bool Macro::WasRead()
    850: CxxScope* MacroName::GetScope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h
  W042 Member could be private
    240:    virtual CxxToken* GetValue() const = 0;
    285:    CxxToken* RootType() const override { return GetValue(); }
  W043 Member could be protected
    744:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    310:    size_t refs_ : 16;
  W075 Virtual function is public
    240:    virtual CxxToken* GetValue() const = 0;
    245:    virtual bool IsDefined() const { return true; }
    251:    virtual void SetExpr(ExprPtr& rhs);
    285:    CxxToken* RootType() const override { return GetValue(); }
    420:    virtual bool AddElif(Elif* e) { return false; }
    424:    virtual bool AddElse(const Else* e) { return false; }
    433:    virtual bool HasCompiledCode() const { return compile_; }
    474:    void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp
  W007 Cast down the inheritance hierarchy
    1530:          auto derived = static_cast< const Class* >(root);
    1635:       auto thisClass = static_cast< Class* >(thisRoot);
    1643:             auto thatClass = static_cast< Class* >(thatRoot);
    1808:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    1866:       auto type = static_cast< TypeSpec* >(item);
    1876:       spec->SetReferent(static_cast< CxxScoped* >(item), nullptr);
    2068:          static_cast< Class* >(root)->BlockCopied(this);
  W075 Virtual function is public
    64:    bool Display(ostream& stream, const string& opts) override;
    76:    bool Display(ostream& stream, const string& opts) override;
    92:    bool Display(ostream& stream, const string& opts) override;
    108:    bool Display(ostream& stream, const string& opts) override;
    128:    bool Display(ostream& stream, const string& opts) override;
  W106 Function does not invoke Debug::ft
    193: bool Context::CompilingTemplateFunction()
    247: const TypeName* Context::FindXrefItem(const string& name)
    259: const Parser* Context::GetParser()
    267: XrefUpdater Context::GetXrefUpdater()
    329: void Context::OnLine(size_t line, bool compiling)
    343: bool Context::OptionIsOn(char opt)
    350: bool Context::ParsingTemplateInstance()
    377: void Context::PopXrefFrame()
    412: void Context::PushXrefFrame(XrefUpdater updater)
    419: void Context::PushXrefItem(const TypeName* item)
    466: void Context::SetPos(size_t pos)
    481: void Context::SetPos(const CxxLocation& loc)
    581: void Context::Trace(CxxTrace::Action act)
    590: void Context::Trace(CxxTrace::Action act, const StackArg& arg)
    599: void Context::Trace(CxxTrace::Action act, word err, const string& expl)
    608: void Context::Trace(CxxTrace::Action act, const CodeFile& file)
    617: void Context::Trace(CxxTrace::Action act, const CxxToken* token)
    899: OptionalCode* ParseFrame::Optional() const
    1087: CxxScope* ParseFrame::Scope() const
    1493: bool StackArg::IsBool() const
    2211: const TypeName* XrefFrame::FindItem(const string& name) const
    2223: void XrefFrame::PushItem(const TypeName* item)
  W107 Function does not invoke Debug::ft as first statement
    2138:    Debug::ft(Tracepoint_OnLine);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h
  W026 Unused argument
    839/1:    static void Shutdown(NodeBase::RestartLevel level);
    843/1:    static void Startup(NodeBase::RestartLevel level) { }
  W032 Unused function
    148:    size_t Arrays() const;
    311:    bool operator!=(const StackArg& that) const;
    603:    bool operator<(const Tracepoint& that) const;
  W042 Member could be private
    310:    bool operator==(const StackArg& that) const;
    769:    static bool CompilingTemplateFunction();
  W050 Data is not private
    319:    CxxToken* item;
    323:    TypeName* name;
    847:    static bool Tracing;
  W082 Adjacent arguments have the same type
    273:    TypeMatch CalcMatchWith(const StackArg& that,
    332:    TypeMatch MatchWith(const StackArg& that,
  W092 Function could be free
    343:    static void ContextFunctionIsNonConst();
    698:    static void Enter(const CxxScoped* owner);
    731:    static void WasCalled(Function* func);
    739:    static void SetPos(const CxxLocation& loc);
    769:    static bool CompilingTemplateFunction();
    798:    static void Trace(CxxTrace::Action act);
    799:    static void Trace(CxxTrace::Action act, const CxxToken* token);
    800:    static void Trace(CxxTrace::Action act, const StackArg& arg);
    801:    static void Trace(CxxTrace::Action act, const CodeFile& file);
    802:    static void Trace(CxxTrace::Action act, NodeBase::word err,
    843:    static void Startup(NodeBase::RestartLevel level) { }
    885:    static bool StartTracing();
    901:    static std::string Location();
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp
  W007 Cast down the inheritance hierarchy
    488:          space = static_cast< Namespace* >(item);
    512:          cls = static_cast< Class* >(item);
    566:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    577:             auto tdef = static_cast< Typedef* >(item);
    582:             item = static_cast< CxxScoped* >(root);
    893:    return static_cast< Class* >(root);
    2178:             static_cast< Function* >(tfunc)->SetTemplateParm();
    2348:       ref = static_cast< Function* >(ref)->FindRootFunc();
  W008 Cast removes const qualification
    1143:    return const_cast< DataSpec* >(this);
    1726:    const_cast< DataSpec* >(this)->FindReferent();
    3099:    return const_cast< TypeName* >(this);
  W106 Function does not invoke Debug::ft
    72: size_t CxxLocation::GetPos() const
    79: void CxxLocation::SetLoc(CodeFile* file, size_t pos)
    245: CxxArea* CxxNamed::GetArea() const
    254: Class* CxxNamed::GetClass() const
    263: id_t CxxNamed::GetDeclFid() const
    298: size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
    307: void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
    314: Namespace* CxxNamed::GetSpace() const
    323: CxxScope* CxxNamed::GetTemplateInstance() const
    332: bool CxxNamed::IsInTemplateInstance() const
    696: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    1065: TypeTags DataSpec::GetAllTags() const
    1141: TypeSpec* DataSpec::GetTypeSpec() const
    1279: bool DataSpec::IsAutoDecl() const
    2114: TypeName* QualName::At(size_t n) const
    2298: TypeName* QualName::GetTemplateArgs() const
    2374: TypeName* QualName::Last() const
    2585: size_t QualName::Size() const
    3017: CxxScoped* TypeName::DirectType() const
    3096: TypeName* TypeName::GetTemplateArgs() const
    3282: void TypeName::PushBack(TypeNamePtr& type)
    3814: int TypeTags::IsConstPtr() const
    3823: bool TypeTags::IsConstPtr(size_t n) const
    3832: int TypeTags::IsVolatilePtr() const
    3841: bool TypeTags::IsVolatilePtr(size_t n) const
  W119 Argument passed by value is modified
    364/2: void CxxNamed::Log(Warning warning, const CxxNamed* item,
    2114/1: TypeName* QualName::At(size_t n) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1374:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1574:    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  W008 Cast removes const qualification
    878:       override { return const_cast< QualName* >(this); }
    1374:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W042 Member could be private
    223:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    1034:    bool IsUnboundedArray() const { return array_; }
  W043 Member could be protected
    245:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    254:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    286:    virtual bool IsImplemented() const { return true; }
    375:    void DisplayReferent(std::ostream& stream, bool fq) const;
    379:    std::string strLocation() const;
    384:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    1140:    Cxx::ItemType GetUserType() const { return user_; }
  W050 Data is not private
    1079:    bool ptrDet_: 1;
    1083:    bool refDet_: 1;
  W075 Virtual function is public
    126:    virtual void SetLoc(CodeFile* file, size_t pos);
    139:    virtual void CopyContext(const CxxNamed* that);
    157:    virtual size_t GetRange(size_t& begin, size_t& end) const;
    162:    virtual CxxScope* GetScope() const { return nullptr; }
    170:    virtual bool IsStatic() const { return true; }
    175:    virtual bool IsDeclaredInFunction() const { return false; }
    185:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    190:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    198:    virtual CxxScope* GetTemplate() const { return nullptr; }
    204:    virtual std::string QualifiedName(bool scopes, bool templates)
    210:    virtual std::string ScopedName(bool templates) const;
    216:    virtual void GetScopedNames(stringVector& names, bool templates) const;
    223:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    229:    virtual CxxArea* GetArea() const;
    234:    virtual Function* GetFunction() const { return nullptr; }
    238:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    245:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    249:    virtual NodeBase::id_t GetDeclFid() const;
    254:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    263:    virtual CxxNamed* GetMate() const { return nullptr; }
    276:    virtual bool EnterScope() { return true; }
    286:    virtual bool IsImplemented() const { return true; }
    292:    virtual CxxScoped* DirectType() const { return Referent(); }
    296:    virtual void FindReferent();
    302:    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
    306:    virtual void SetAsReferent(const CxxNamed* user) { }
    311:    virtual void Instantiate() { }
    315:    virtual CxxScope* GetTemplateInstance() const;
    324:    virtual CxxScoped* FindTemplateAnalog(const CxxNamed* item) const;
    331:    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
    336:    virtual StackArg MemberToArg
    349:    virtual void GetDirectClasses(CxxUsageSets& symbols) const;
    356:    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
    370:    virtual std::string XrefName(bool templates) const;
    678:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    907:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    911:    bool ResolveTemplate
    1136:    virtual void SetUserType(Cxx::ItemType user);
    1148:    virtual Function* GetFuncSpec() const { return nullptr; }
    1158:    virtual TypeSpec* Clone() const = 0;
    1162:    virtual TypeTags* Tags() = 0;
    1163:    virtual const TypeTags* Tags() const = 0;
    1167:    virtual void AddArray(ArraySpecPtr& array) = 0;
    1173:    virtual TagCount Ptrs(bool arrays) const = 0;
    1179:    virtual TagCount Refs() const = 0;
    1184:    virtual TagCount Arrays() const = 0;
    1188:    virtual bool HasArrayDefn() const = 0;
    1192:    virtual void EnteringScope(const CxxScope* scope) = 0;
    1196:    virtual void EnterArrays() const = 0;
    1201:    virtual TypeTags GetAllTags() const = 0;
    1206:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1211:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1215:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1221:    virtual void SetPtrs(TagCount count) = 0;
    1226:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1230:    virtual StackArg ResultType() const = 0;
    1234:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1245:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    1251:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1256:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1260:    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
    1266:    virtual void Instantiating(CxxScopedVector& locals) const = 0;
    1270:    virtual void GetNames(stringVector& names) const = 0;
    1275:    virtual bool NamesReferToArgs(const NameVector& names,
  W082 Adjacent arguments have the same type
    586:    TypeMatch MatchTemplate(const TypeName* that,
    831:    TypeMatch MatchTemplate(const QualName* that,
    991:    bool SetPointer(size_t n, bool readonly, bool unstable);
    1245:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  W088 Argument could be const
    1245/1:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  W090 Function could be const
    808:    void SetTemplateArgs(const TemplateParms* tparms);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp
  W004 C-style cast
    4010:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W007 Cast down the inheritance hierarchy
    706:       auto cls = static_cast<const Class*>(scope);
    1397:    auto cls = static_cast< Class* >(root);
    1464:          auto op = static_cast< Operation* >(expr);
    1595:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1611:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1639:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1654:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1798:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    1840:    auto data = static_cast< FuncData* >(next_.get());
    3046:       if(!static_cast< Function* >(item)->virtual_)
    3785:       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
    3798:       auto i = FindArg(static_cast< const Argument* >(item), false);
    3849:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    4573:    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
    5017:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    5031:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    5262:                auto item = static_cast< CxxNamed* >(args.front().item);
    5348:       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  W008 Cast removes const qualification
    2479:    return FoundFunc(const_cast< Function* >(this), args, match);
    3754:    auto prev = const_cast< Function* >(this);
    4000:       (const_cast< Function* >(this));
    4010:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W097 Line indentation is not a multiple of the standard value
    468:                     ((move == nullptr) || move->IsDeleted()));
  W106 Function does not invoke Debug::ft
    118: bool Block::CrlfOver(Form form) const
    254: CxxToken* Block::FirstStatement() const
    262: Function* Block::GetFunction() const
    298: bool Block::InLine() const
    774: void ClassData::SetMemInit(const MemberInit* init)
    885: id_t CxxScope::GetDistinctDeclFid() const
    1276: CodeFile* Data::GetDeclFile() const
    1283: const Data* Data::GetDefn() const
    1292: CodeFile* Data::GetDefnFile() const
    1339: TypeName* Data::GetTemplateArgs() const
    1492: bool Data::IsConst() const
    1635: bool Data::WasRead()
    3887: FunctionRole Function::FuncRole() const
    3924: FunctionType Function::FuncType() const
    3935: Cxx::Access Function::GetAccess() const
    3943: CodeFile* Function::GetDeclFile() const
    3950: const Function* Function::GetDefn() const
    3959: CodeFile* Function::GetDefnFile() const
    3968: size_t Function::GetRange(size_t& begin, size_t& end) const
    3984: CxxScope* Function::GetScope() const
    3996: CxxScope* Function::GetTemplate() const
    4008: CxxScope* Function::GetTemplateInstance() const
    4016: TemplateType Function::GetTemplateType() const
    4519: bool Function::IsImplemented() const
    5355: bool Function::WasRead()
    5406: void FuncSpec::AddArray(ArraySpecPtr& array)
    5420: TagCount FuncSpec::Arrays() const
    5434: TypeSpec* FuncSpec::Clone() const
    5456: void FuncSpec::EnterArrays() const
    5475: void FuncSpec::FindReferent()
    5483: TypeTags FuncSpec::GetAllTags() const
    5490: void FuncSpec::GetNames(stringVector& names) const
    5498: TypeName* FuncSpec::GetTemplateArgs() const
    5505: TypeSpec* FuncSpec::GetTypeSpec() const
    5512: bool FuncSpec::HasArrayDefn() const
    5519: void FuncSpec::Instantiating(CxxScopedVector& locals) const
    5527: bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
    5535: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    5543: TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    5553: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    5561: bool FuncSpec::NamesReferToArgs(const NameVector& names,
    5577: TagCount FuncSpec::Ptrs(bool arrays) const
    5584: TagCount FuncSpec::Refs() const
    5591: StackArg FuncSpec::ResultType() const
    5598: void FuncSpec::SetPtrs(TagCount count)
    5605: void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
    5613: const TypeTags* FuncSpec::Tags() const
    5620: TypeTags* FuncSpec::Tags()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    365:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    365:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1285:       const override { return const_cast< Function* >(this); }
  W026 Unused argument
    84/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  W030 Unused enumerator
    145:       Multiple   // two statements or more
  W032 Unused function
    1089:    bool IsExtern() const { return GetDecl()->extern_; }
    1094:    bool IsFinal() const { return GetDecl()->final_; }
  W042 Member could be private
    1050:    bool IsDefaulted() const { return GetDefn()->defaulted_; }
    1116:    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
    1149:    size_t MaxArgs() const { return args_.size(); }
    1207:    bool IsInvokedInBase() const;
  W043 Member could be protected
    317:    bool IsExtern() const { return extern_; }
    321:    bool IsThreadLocal() const { return thread_local_; }
    325:    bool IsConstexpr() const { return constexpr_; }
    329:    bool WasInited() const { return GetDecl()->inited_; }
  W075 Virtual function is public
    78:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    83:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    91:    virtual void AccessibilityOf
    352:    virtual void Promote
    357:    virtual bool IsUnionMember() const { return false; }
    1241:    void CheckAccessControl() const override;
    1245:    void CheckIfHiding() const override;
    1398:    void WasCalled() override;
  W082 Adjacent arguments have the same type
    352:    virtual void Promote
    1475:    static TypeMatch MatchTemplate
  W092 Function could be free
    1475:    static TypeMatch MatchTemplate
    1488:    static Function* InstantiateError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1528:    return (CxxToken*) this;
    1742:    return (CxxToken*) this;
    2442:    return (CxxToken*) this;
    2531:    return (CxxScoped*) this;
    2544:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    101:          auto func = static_cast< Function* >(GetScope());
    172:    auto cls = static_cast< Class* >(ref);
    187:    auto func = static_cast< Function* >(GetScope());
    231:       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    265:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    279:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    341:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    375:    return static_cast< Class* >(name_->GetReferent());
    501:          ref = static_cast< const Function* >(ref)->FindRootFunc();
    1232:    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
    1443:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1475:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1657:    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
    1881:          space = static_cast< Namespace* >(item);
    1894:          cls = static_cast< Class* >(item);
    1933:             auto tdef = static_cast< Typedef* >(item);
    1938:             item = static_cast< CxxScoped* >(root);
    2123:    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
    2243:       static_cast< CxxArea* >(scope)->AddFunc(func);
    2394:    ref_ = static_cast< ClassData* >(cls->FindData(name_));
    2891:    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
    3059:          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  W008 Cast removes const qualification
    646:    if(n == 0) return const_cast< CxxScoped* >(this);
    1528:    return (CxxToken*) this;
    1742:    return (CxxToken*) this;
    2155:    const_cast< Friend* >(this)->FindReferent();
    2174:    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
    2186:    const_cast< Friend* >(this)->SetScope(cls->GetScope());
    2442:    return (CxxToken*) this;
    2531:    return (CxxScoped*) this;
    2544:    return (CxxToken*) this;
  W106 Function does not invoke Debug::ft
    373: Class* BaseDecl::GetClass() const
    466: void CxxScoped::AddFiles(SetOfIds& imSet) const
    476: void CxxScoped::AddReference(const CxxNamed* item) const
    652: CodeFile* CxxScoped::GetImplFile() const
    661: size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
    676: bool CxxScoped::IncludeInXref() const
    683: bool CxxScoped::IsAuto() const
    692: bool CxxScoped::IsConst() const
    701: bool CxxScoped::IsConstPtr() const
    710: bool CxxScoped::IsConstPtr(size_t n) const
    719: bool CxxScoped::IsDeclaredInFunction() const
    727: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    740: bool CxxScoped::IsIndirect() const
    1176: TypeSpec* Enum::GetTypeSpec() const
    1524: CxxToken* Forward::AutoType() const
    1613: bool Forward::IncludeInXref() const
    1738: CxxToken* Friend::AutoType() const
    2017: Function* Friend::GetFunction() const
    2026: QualName* Friend::GetQualName() const
    2035: CxxScoped* Friend::GetReferent() const
    2105: bool Friend::IncludeInXref() const
    2389: CxxScoped* MemberInit::Referent() const
    2434: CxxToken* TemplateParm::AutoType() const
    2523: CxxScoped* TemplateParm::Referent() const
    2536: CxxToken* TemplateParm::RootType() const
    2827: TypeName* Typedef::GetTemplateArgs() const
  W119 Argument passed by value is modified
    3101/1: void Using::SetScope(CxxScope* scope)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    195:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    526:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    645:    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
    1281:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1379:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    195:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    526:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    645:    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
    1281:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1379:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1506/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  W042 Member could be private
    181:    bool IsSubscopeOf(const std::string& fqSuper) const;
  W043 Member could be protected
    87:    CxxScoped* FindInheritedName() const;
    92:    void DisplayFiles(std::ostream& stream) const;
    114:    size_t XrefSize() const { return xref_.size() * 3 * sizeof(CxxNamed*); }
    118:    virtual bool IsUnused() const { return false; }
  W075 Virtual function is public
    59:    virtual bool NameRefersToItem(const std::string& name,
    69:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
    78:    virtual void RecordAccess(Cxx::Access access) const;
    96:    virtual void AddFiles(SetOfIds& imSet) const;
    102:    virtual bool IncludeInXref() const;
    106:    virtual void AddReference(const CxxNamed* item) const;
    118:    virtual bool IsUnused() const { return false; }
    124:    virtual bool CheckIfUnused(Warning warning) const;
    199:    void SetAccess(Cxx::Access access) override { access_ = access; }
    203:    void SetScope(CxxScope* scope) override { scope_ = scope; }
    535:    void CheckAccessControl() const override;
    977:    bool ResolveTemplate
    1577:    bool ResolveTypedef(Typedef* type, size_t n) const
  W082 Adjacent arguments have the same type
    1496:    Using(QualNamePtr& name, bool space, bool added = false);
  W120 Function returns non-const reference or pointer to member data
    110:    CxxNamedSet& Xref() const { return xref_; }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp
  W106 Function does not invoke Debug::ft
    308: void CxxStatement::EnterBlock()
    399: bool Do::InLine() const
    640: bool For::InLine() const
    807: bool If::InLine() const
    1302: bool While::InLine() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    40: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  W119 Argument passed by value is modified
    233/2: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
    255/2: size_t FindTemplateEnd(const string& name, size_t pos)
    737/5:    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
    771/2: size_t RfindFirstNotOf(const string& str, size_t pos, const string& elems)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h
  W032 Unused function
    105:    std::string& Prefix(std::string&& scope,
  W082 Adjacent arguments have the same type
    130:    size_t CompareScopes
    168:    size_t Replace(std::string& code,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h
  W020 Using statement in header
    41: using namespace NodeBase;
  W042 Member could be private
    88:    static DataPtr CreateRef()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W004 C-style cast
    393:    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  W007 Cast down the inheritance hierarchy
    535:    return static_cast< Macro* >(macros.front());
    574:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    582:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    590:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    596:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W106 Function does not invoke Debug::ft
    223: template< typename T > void GetSymbols
    235: bool IsSortedByName(const CxxScoped* item1, const CxxScoped* item2)
    272: bool IsSortedByPos(const CxxNamed* item1, const CxxNamed* item2)
    302: bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
    441: void CxxSymbols::EraseClass(const Class* cls)
    448: void CxxSymbols::EraseData(const Data* data)
    455: void CxxSymbols::EraseEnum(const Enum* item)
    462: void CxxSymbols::EraseEtor(const Enumerator* etor)
    469: void CxxSymbols::EraseForw(const Forward* forw)
    476: void CxxSymbols::EraseFriend(const Friend* frnd)
    483: void CxxSymbols::EraseFunc(const Function* func)
    490: void CxxSymbols::EraseMacro(const Macro* macro)
    497: void CxxSymbols::EraseSpace(const Namespace* space)
    504: void CxxSymbols::EraseTerm(const Terminal* term)
    511: void CxxSymbols::EraseType(const Typedef* type)
    818: void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
    825: void CxxSymbols::InsertClass(Class* cls)
    832: void CxxSymbols::InsertData(Data* data)
    839: void CxxSymbols::InsertEnum(Enum* item)
    846: void CxxSymbols::InsertEtor(Enumerator* etor)
    853: void CxxSymbols::InsertForw(Forward* forw)
    860: void CxxSymbols::InsertFriend(Friend* frnd)
    867: void CxxSymbols::InsertFunc(Function* func)
    874: void CxxSymbols::InsertMacro(Macro* macro)
    881: void CxxSymbols::InsertSpace(Namespace* space)
    888: void CxxSymbols::InsertTerm(Terminal* term)
    895: void CxxSymbols::InsertType(Typedef* type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h
  W090 Function could be const
    128:    void InsertClass(Class* cls);
    129:    void InsertData(Data* data);
    130:    void InsertEtor(Enumerator* etor);
    131:    void InsertEnum(Enum* item);
    132:    void InsertForw(Forward* forw);
    133:    void InsertFriend(Friend* frnd);
    134:    void InsertFunc(Function* func);
    135:    void InsertMacro(Macro* macro);
    136:    void InsertSpace(Namespace* space);
    137:    void InsertTerm(Terminal* term);
    138:    void InsertType(Typedef* type);
    142:    void EraseClass(const Class* cls);
    143:    void EraseData(const Data* data);
    144:    void EraseEtor(const Enumerator* etor);
    145:    void EraseEnum(const Enum* item);
    146:    void EraseForw(const Forward* forw);
    147:    void EraseFriend(const Friend* frnd);
    148:    void EraseFunc(const Function* func);
    149:    void EraseMacro(const Macro* macro);
    150:    void EraseSpace(const Namespace* space);
    151:    void EraseTerm(const Terminal* term);
    152:    void EraseType(const Typedef* type);
  W110 Override of Base.Display not found
    87: class CxxSymbols: public NodeBase::Base
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp
  W007 Cast down the inheritance hierarchy
    570:    auto oper = static_cast< Operation* >(item.get());
    596:          auto ante = static_cast< Operation* >(prev.get());
    648:       auto oper = static_cast< Operation* >(item.get());
    681:    auto oper = static_cast< Operation* >(prev.get());
    718:    auto oper = static_cast< Operation* >(item.get());
    776:    auto oper = static_cast< Operation* >(item.get());
    799:       auto ante = static_cast< Operation* >(prev.get());
    891:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1354:       inClass = static_cast< Class* >(inRoot);
    1359:       outClass = static_cast< Class* >(outRoot);
    1384:    auto call = static_cast< Operation* >(args_.front().get());
    1788:       func = static_cast< Function* >(proc.item);
    1802:       cls = static_cast< Class* >(proc.item);
    1901:    auto cls = static_cast< Class* >(arg.item->Root());
    1951:       auto newCall = static_cast< Operation* >(args_.front().get());
    1972:    auto cls = static_cast< Class* >(spec.item->Root());
    1994:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    2018:       cls = static_cast< Class* >(root);
    2211:       area = static_cast< Class* >(targ);
    2213:       static_cast< Class* >(targ)->Instantiate();
    2570:    auto cls = static_cast< Class* >(root);
    2634:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    359:    CxxToken* prev = const_cast< CxxToken* >(this);
  W106 Function does not invoke Debug::ft
    295: bool CxxToken::IsPointer(bool arrays) const
    405: void EraseTemplateArgs
    437: void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
    447: void CxxUsageSets::AddBase(const CxxNamed* item)
    455: void CxxUsageSets::AddDirect(const CxxNamed* item)
    463: void CxxUsageSets::AddForward(const CxxNamed* item)
    474: void CxxUsageSets::AddIndirect(const CxxNamed* item)
    482: void CxxUsageSets::AddInherit(const CxxNamed* item)
    490: void CxxUsageSets::AddUser(const CxxNamed* item)
    905: Numeric FloatLiteral::GetNumeric() const
    966: Numeric IntLiteral::BaseNumeric() const
    1109: CxxToken* Literal::AutoType() const
    1134: CxxToken* Literal::RootType() const
    1150: Cxx::ItemType Literal::Type() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    354:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W032 Unused function
    339:    CxxToken& operator=(const CxxToken& that) = default;
    436:       Tags& operator=(const Tags& that) = default;
    478:       Tags& operator=(const Tags& that) = default;
  W042 Member could be private
    52:    CxxNamedSet inherits;   // types not needed to calculate #include or using
  W075 Virtual function is public
    95:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    101:    virtual bool IsForward() const { return false; }
    107:    virtual const std::string* Name() const;
    111:    virtual QualName* GetQualName() const { return nullptr; }
    116:    virtual std::string TypeString(bool arg) const
    121:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    125:    virtual bool IsConst() const { return false; }
    129:    virtual bool IsVolatile() const { return false; }
    133:    virtual bool IsConstPtr() const { return false; }
    137:    virtual bool IsVolatilePtr() const { return false; }
    141:    virtual bool IsConstPtr(size_t n) const { return false; }
    145:    virtual bool IsVolatilePtr(size_t n) const { return false; }
    150:    virtual bool IsAuto() const { return false; }
    155:    virtual bool IsIndirect() const { return false; }
    159:    virtual bool IsInitializing() const { return false; }
    164:    virtual CxxToken* AutoType() const { return nullptr; }
    169:    virtual Namespace* GetSpace() const { return nullptr; }
    174:    virtual Class* GetClass() const { return nullptr; }
    179:    virtual Class* Declarer() const { return GetClass(); }
    185:    virtual TypeName* GetTemplateArgs() const;
    190:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    194:    virtual void GetConvertibleTypes(StackArgVector& types) { }
    199:    virtual CxxScoped* Referent() const;
    205:    virtual void EnterBlock();
    210:    virtual void ExitBlock() const { }
    216:    virtual bool AppendUnary() { return false; }
    220:    virtual CxxToken* Back() { return this; }
    225:    virtual bool WasRead() { return false; }
    237:    virtual bool WasWritten(const StackArg* arg, bool passed);
    242:    virtual bool SetNonConst() { return true; }
    247:    virtual void WasMutated(const StackArg* arg) { }
    253:    virtual void RecordUsage() const { }
    257:    virtual void AddToXref() const { }
    262:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
    267:    virtual bool LocateItem(const CxxNamed* item, size_t& n)
    273:    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
    278:    virtual void Check() const { }
    282:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    286:    virtual bool InLine() const { return true; }
    291:    virtual void Print
    297:    virtual void Shrink() { }
    527:    virtual void PushBack(uint32_t c) = 0;
  W082 Adjacent arguments have the same type
    680:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W092 Function could be free
    669:    static void PushType(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp
  W005 Functional cast
    767:    *cli.obuf << ": " << Warning(log.warning_);
  W007 Cast down the inheritance hierarchy
    337:    auto defn = static_cast< const Function* >(log.item_);
    471:    DebugFtCode(static_cast< const Function* >(log.item_), defn, call);
    1087:    auto decl = static_cast< const Data* >(log.item_);
    1238:    auto etor = static_cast< const Enumerator* >(log.item_);
    1280:    auto eNum = static_cast< const Enum* >(etor->AutoType());
    1345:    auto func = static_cast< const Function* >(log.item_);
    1648:    auto func = static_cast< const Function* >(log.item_);
    2013:    auto cls = static_cast< const Class* >(log.item_);
    2832:    DebugFtCode(static_cast< const Function* >(log.item_), defn, call);
    3235:    auto cls = static_cast< const Class* >(log.item_);
    3631:       ns = static_cast< const Namespace* >(ref)->OuterSpace();
    4039:    auto func = static_cast< const Function* >(log.item_);
    4168:    auto defn = static_cast< const Function* >(log.item_);
    4280:    auto func = static_cast< const Function* >(log.item_);
  W097 Line indentation is not a multiple of the standard value
    297:        tagpos = loc.iter->code.find(tag, tagpos + 1))
    373:        loc.pos != string::npos;
    374:        loc = FindWord(loc.iter, loc.pos + 1, *defnName, &range))
    1045:        tag.pos != string::npos;
    1046:        tag = FindWord(tag.iter, tag.pos + 1, CONST_STR))
    1390:        next->code, 0, next->code.size() - 1);
    1598:        arg = FindWord(arg.iter, arg.pos + 1, VOID_STR))
    3664:           loc = FindWord(loc.iter, loc.pos, name))
  W102 Line length exceeds the standard maximum
    2761:       (lpar.iter->code.find_first_not_of(WhitespaceChars, lpar.pos + 1) == rpar))
  W106 Function does not invoke Debug::ft
    101: bool IncludesAreSorted(const string& line1, const string& line2)
    133: bool IsValidIndex(word index, size_t size)
    143: word NotFound(string& expl, fixed_string text, bool quotes = false)
    156: word Report(string& expl, fixed_string text, word rc = 0)
    2612: LineType Editor::GetLineType(const Iter& iter) const
    2663: bool Editor::IncludesSorted(const SourceLine& line1, const SourceLine& line2)
    3608: void Editor::PushBack(const string& code)
  W119 Argument passed by value is modified
    1622/3: Editor::CodeLocation Editor::Find(Iter iter, const string& str, size_t off)
    1673/2:    (Iter iter, size_t off, const string& chars)
    1944/2: Editor::CodeLocation Editor::FindNonBlank(Iter iter, size_t pos)
    2144/2:    (Iter iter, size_t pos, const string& id, size_t* range)
    3953/2: Editor::CodeLocation Editor::RfindNonBlank(Iter iter, size_t pos)
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h
  W020 Using statement in header
    45: using NodeBase::CliThread;
    46: using NodeBase::word;
    47: using std::string;
  W082 Adjacent arguments have the same type
    396:    Iter UpdateFuncDeclLoc
    419:    Iter UpdateFuncDefnLoc
    484:    word InsertNamespaceForward(const Iter& iter,
    512:    void DebugFtCode
  W092 Function could be free
    405:    const CodeFile* FindFuncDefnFile
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    148:          type = LibTokenType(i);
  W092 Function could be free
    57:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W099 Line contains adjacent spaces
    94:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    95:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    96:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    97:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    98:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    99:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    100:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    101:    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
    102:    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  W106 Function does not invoke Debug::ft
    134: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    142: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  W119 Argument passed by value is modified
    475/1: LibExprErr Interpreter::ApplyOperator(bool operand)
    590/1: LibrarySet* Interpreter::Error(LibExprErr err) const
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h
  W092 Function could be free
    62:    static bool IsOperator(const std::string& s);
  W110 Override of Base.Display not found
    44: class Interpreter : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    1286:          fp *= std::pow(10.0, int(num));
    1396:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    2029:          auto def = static_cast< Define* >(item);
    2033:             auto code = const_cast< string* >(source_);
  W008 Cast removes const qualification
    2033:             auto code = const_cast< string* >(source_);
  W106 Function does not invoke Debug::ft
    58: IndentRule ClassifyIndent(string& id)
    837: void Lexer::GetDepth(size_t line, int8_t& depth, bool& cont) const
    1085: size_t Lexer::GetLineNum(size_t pos) const
    1109: size_t Lexer::GetLineStart(size_t line) const
    1188: bool Lexer::GetNthLine(size_t n, string& s) const
    2085: void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  W117 Line can merge with the next line and be under the length limit
    1178:          (Keywords->lower_bound(name) == Keywords->cend()))
  W119 Argument passed by value is modified
    355/3: size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
    591/1: size_t Lexer::FindLineEnd(size_t pos) const
    959/2: size_t Lexer::GetHexNum(int64_t& num, size_t max)
    985/1: bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
    1859/1: size_t Lexer::NextPos(size_t pos) const
    2137/1: size_t Lexer::SkipCharLiteral(size_t pos) const
    2157/1: size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
    2192/1: size_t Lexer::SkipTemplateSpec(size_t pos) const
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h
  W042 Member could be private
    214:    std::string NextOperator() const;
  W082 Adjacent arguments have the same type
    222:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
    408:    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h
  W042 Member could be private
    67:    CodeDir* FindDir(const std::string& name) const;
    88:    LibrarySet* FindVar(const std::string& name) const;
  W053 Data could be const
    230:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    62:    NodeBase::word Import
    104:    NodeBase::word Assign(const std::string& name,
  W090 Function could be const
    72:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    104:    NodeBase::word Assign(const std::string& name,
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp
  W106 Function does not invoke Debug::ft
    103: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp
  W006 reinterpret_cast
    281:    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  W106 Function does not invoke Debug::ft
    76: LibrarySet* LibrarySet::AffectedBy() const
    83: LibrarySet* LibrarySet::Affecters() const
    90: LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
    108: LibrarySet* LibrarySet::CommonAffecters() const
    155: LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
    162: LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
    169: LibrarySet* LibrarySet::Directories() const
    188: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    195: LibrarySet* LibrarySet::Files() const
    202: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    231: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    250: LibrarySet* LibrarySet::Implements() const
    257: LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
    264: bool LibrarySet::IsReadOnly() const
    271: bool LibrarySet::IsTemporary() const
    298: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    305: LibrarySet* LibrarySet::NeededBy() const
    312: LibrarySet* LibrarySet::Needers() const
    321: word LibrarySet::NotImplemented(string& expl) const
    347: LibrarySet* LibrarySet::OpError() const
    452: LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
    459: LibrarySet* LibrarySet::UsedBy(bool self) const
    466: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h
  W042 Member could be private
    69:    bool IsReadOnly() const;
    173:    static ptrdiff_t LinkDiff();
  W043 Member could be protected
    151:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  W053 Data could be const
    221:    NodeBase::Q2Link link_;
  W065 Base class virtual destructor is not public
    189:    virtual ~LibrarySet();
  W075 Virtual function is public
    77:    virtual LibSetType GetType() const;
    83:    virtual NodeBase::word Check(NodeBase::CliThread& cli,
    90:    virtual NodeBase::word Count(std::string& result) const;
    96:    virtual NodeBase::word Countlines(std::string& result) const;
    102:    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
    108:    virtual NodeBase::word Format(std::string& expl) const;
    114:    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
    122:    virtual NodeBase::word Parse
    129:    virtual NodeBase::word Scan(std::ostream& stream,
    136:    virtual NodeBase::word Show(std::string& result) const;
    142:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    151:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
    152:    virtual LibrarySet* Assign(LibrarySet* rhs);
    153:    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
    154:    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
    155:    virtual LibrarySet* Union(const LibrarySet* rhs) const;
    156:    virtual LibrarySet* Directories() const;
    157:    virtual LibrarySet* Files() const;
    158:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    159:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    160:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    161:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    162:    virtual LibrarySet* Implements() const;
    163:    virtual LibrarySet* UsedBy(bool self) const;
    164:    virtual LibrarySet* Users(bool self) const;
    165:    virtual LibrarySet* AffectedBy() const;
    166:    virtual LibrarySet* Affecters() const;
    167:    virtual LibrarySet* CommonAffecters() const;
    168:    virtual LibrarySet* NeededBy() const;
    169:    virtual LibrarySet* Needers() const;
  W092 Function could be free
    193:    static NodeBase::word Counted(std::string& result, const size_t* count);
    198:    static NodeBase::word Shown(std::string& result);
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    417:    auto op = static_cast< Operation* >(token.get());
    453:    auto op = static_cast< Operation* >(call.get());
    748:    auto brace = static_cast< BraceInit* >(token.get());
    821:    auto cast = static_cast< Operation* >(token.get());
    860:    auto c = static_cast< Catch* >(statement.get());
    992:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    993:    static_cast< ClassData* >(data.get())->SetWidth(width);
    1156:    auto cond = static_cast< Operation* >(token.get());
    1444:    auto cast = static_cast< Operation* >(token.get());
    1612:    auto op = static_cast< Operation* >(token.get());
    1637:    auto delOp = static_cast< Operation* >(token.get());
    1665:    auto d = static_cast< Do* >(statement.get());
    1875:    auto f = static_cast< For* >(statement.get());
    1983:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    2033:          curr = static_cast< FuncData* >(data.get());
    2039:          curr = static_cast< FuncData* >(subseq.get());
    2324:             static_cast< If* >(first)->SetElseIf();
    2330:    auto i = static_cast< If* >(statement.get());
    2492:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2534:    auto newOp = static_cast< Operation* >(token.get());
    2609:    auto op = static_cast< Operation* >(token.get());
    3030:    static_cast< Return* >(statement.get())->AddExpr(expr);
    3076:    auto op = static_cast< Operation* >(token.get());
    3322:    auto op = static_cast< Operation* >(token.get());
    3348:    auto s = static_cast< Switch* >(statement.get());
    3437:    auto op = static_cast< Operation* >(token.get());
    3473:    auto t = static_cast< Try* >(statement.get());
    3535:    auto op = static_cast< Operation* >(token.get());
    3838:    auto w = static_cast< While* >(statement.get());
    4222:          auto op = static_cast< Operation* >(token)->Op();
  W008 Cast removes const qualification
    4443:       func->SetTemplate(const_cast< Function* >(tmplt));
  W106 Function does not invoke Debug::ft
    257: size_t Parser::CurrPos() const
  W119 Argument passed by value is modified
    1070/2: bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
    2422/1: size_t Parser::GetLineNum(size_t pos) const
    4274/2: void Parser::Log(Warning warning, size_t pos) const
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h
  W082 Adjacent arguments have the same type
    401:    static bool SetCompoundType
    447:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W088 Argument could be const
    241/1:    bool GetStatements(BlockPtr& block, bool braced);
    335/1:    bool GetFuncSpecial(FunctionPtr& func);
    348/1:    bool GetCtorInit(FunctionPtr& func);
    369/1:    bool GetArguments(FunctionPtr& func);
    402/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    469/1:    bool GetNum(ExprPtr& expr);
    470/1:    bool GetChar(ExprPtr& expr, Cxx::Encoding code);
    471/1:    bool GetStr(ExprPtr& expr, Cxx::Encoding code);
    481/1:    bool GetCast(ExprPtr& expr);
    482/1:    bool GetPrecedence(ExprPtr& expr);
    489/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    493/1:    bool GetSubscript(ExprPtr& expr);
    502/1:    bool GetAlignOf(ExprPtr& expr);
    503/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    504/1:    bool GetConditional(ExprPtr& expr);
    505/1:    bool GetDefined(ExprPtr& expr);
    506/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    507/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    508/1:    bool GetNoExcept(ExprPtr& expr);
    509/1:    bool GetSizeOf(ExprPtr& expr);
    510/1:    bool GetThrow(ExprPtr& expr);
    511/1:    bool GetTypeId(ExprPtr& expr);
  W092 Function could be free
    401:    static bool SetCompoundType
    593:    static std::string Indent();
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion(SetOfIds& lhs, const SetOfIds& rhs1, const SetOfIds& rhs2);
C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp
  W097 Line indentation is not a multiple of the standard value
    113:           a != orders.adjustments.end(); ++a)
    424:           a != orders.adjustments.end(); ++a)
    740:        a != attacks.upper_bound(to_prov); ++a)
    954:                     (client.order_type_copy != MOVE_BY_CONVOY_ORDER))
    1008:              f != subverted_army.convoyers.end(); ++f)
    1526:        a != attacks.upper_bound(province); ++a)
    1689:                  (attacker.order_type_copy != MOVE_BY_CONVOY_ORDER))
    2047:        b != balanced_head_to_heads.end(); ++b)
    2144:                 f != subverting_army.convoyers.end(); ++f)
    2147:                    a != attacks.upper_bound(*f); ++a)
    2201:        u != unbalanced_head_to_heads.end(); ++u)
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp
  W006 reinterpret_cast
    227:    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
    550:    auto& dm = reinterpret_cast< const DM_Message& >(message);
    551:    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
    681:    auto& em = reinterpret_cast< const EM_Message& >(message);
    1417:       auto& rm = reinterpret_cast< const RM_Message& >(message);
    2257:    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
    2333:    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
    2490:    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
    2494:    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    455: BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
    462: BaseBot* BaseBot::instance()
  W117 Line can merge with the next line and be under the length limit
    1859:          (press->message == contents))
C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W030 Unused enumerator
    62:       FIRST_BOT_SPECIFIC_ERROR
  W075 Virtual function is public
    91:    virtual bool process_command_line_parameter(char token, std::string& value);
    97:    virtual std::string report_command_line_parameters();
  W082 Adjacent arguments have the same type
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    502:    virtual void report_failed_press
  W090 Function could be const
    206:    virtual void process_ccd_message
    212:    virtual void process_drw_message(const TokenMessage& message);
    243:    virtual void process_out_message(const TokenMessage& message);
    251:    virtual void process_smr_message(const TokenMessage& message);
    268:    virtual void process_adm_message(const TokenMessage& message);
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    467:    virtual void process_hlo_message(const TokenMessage& message);
    472:    virtual void process_map_message(const TokenMessage& message);
    476:    virtual void process_mdf_message(const TokenMessage& message);
    484:    virtual void process_sco_message(const TokenMessage& message);
    488:    virtual void process_now_message(const TokenMessage& message);
    492:    virtual void process_slo_message(const TokenMessage& message);
  W092 Function could be free
    75:    static BaseBot* instance();
    101:    static void send_to_console(std::ostringstream& report);
    179:    void cancel_event(BotEvent event);
    524:    static void report_ccd(const Token& power, bool disorder);
    544:    static void report_out(const Token& power);
    556:    void report_exit(fixed_string reason);
    716:    static bool send_buff(DipIpBuffer& buff);
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp
  W006 reinterpret_cast
    193:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
    224:    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  W007 Cast down the inheritance hierarchy
    211:    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W032 Unused function
    117:       bool operator<(const Wakeup& that) const
  W053 Data could be const
    112:       BotEvent event;       // event
  W055 Data need not be mutable
    113:       mutable secs_t secs;  // delay
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp
  W006 reinterpret_cast
    102:       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
    131:    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  W022 Add using statement
    1: namespace NodeBase
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W032 Unused function
    69:    DipHeader* Header() const;
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.cpp
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h
  W018 Remove #include directive
    21: #include "BaseBot.h"
  W024 Add forward declaration
    1: class Diplomacy::BaseBot
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    29: void ConvoySubversion::clear()  // <b>
    37: void ConvoySubversion::decrement()
C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.h
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.cpp
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W027 Unused class
    38: class DipModule : public Module
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp
  W005 Functional cast
    446: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  W006 reinterpret_cast
    62:       reinterpret_cast < const IM_Message* >(this)->Display(stream);
    65:       reinterpret_cast < const RM_Message* >(this)->Display(stream);
    68:       reinterpret_cast < const DM_Message* >(this)->Display(stream);
    71:       reinterpret_cast < const FM_Message* >(this)->Display(stream);
    74:       reinterpret_cast < const EM_Message* >(this)->Display(stream);
    77:       reinterpret_cast < const BM_Message* >(this)->Display(stream);
    203:       auto header = reinterpret_cast< const DipHeader* >(source);
    213:       auto header = reinterpret_cast< const DipHeader* >(payload);
    234:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    240:       auto im = reinterpret_cast< IM_Message* >(src);
    248:       auto dm = reinterpret_cast< DM_Message* >(src);
    259:       auto em = reinterpret_cast< EM_Message* >(src);
    288:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    297:       auto rm = reinterpret_cast< RM_Message* >(msg);
    308:       auto dm = reinterpret_cast< DM_Message* >(msg);
    319:       auto em = reinterpret_cast< EM_Message* >(msg);
    342:    auto header = reinterpret_cast< const DipHeader* >(payload);
    369:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  W007 Cast down the inheritance hierarchy
    283:    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
    338:    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  W009 Pointer arithmetic
    216:       dest = payload + received;
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
  W106 Function does not invoke Debug::ft
    446: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h
  W020 Using statement in header
    39: using namespace NodeBase;
    40: using namespace NetworkBase;
  W028 Unused data
    162: constexpr ProtocolError IM_TIMEOUT = 0x01;
    163: constexpr ProtocolError IM_EXPECTED = 0x02;
    164: constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
    165: constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
    166: constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
    167: constexpr ProtocolError IM_REPEATED = 0x06;
    168: constexpr ProtocolError IM_FROM_SERVER = 0x07;
    169: constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
    170: constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
    171: constexpr ProtocolError DM_BEFORE_RM = 0x0A;
    172: constexpr ProtocolError RM_EXPECTED = 0x0B;
    173: constexpr ProtocolError RM_REPEATED = 0x0C;
    174: constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
    175: constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
    197: constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  W032 Unused function
    250:    CliText* CreateText() const override;
  W042 Member could be private
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
  W053 Data could be const
    144:    DipHeader header;  // no parameters (length = 0)
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h
  W020 Using statement in header
    26: using namespace NetworkBase;
    27: using namespace NodeBase;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Location.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Location.h
  W032 Unused function
    75:    bool operator<(const Location& that) const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp
  W097 Line indentation is not a multiple of the standard value
    127:              (our_winter_orders.number_of_waives != 0));
    240:           o != our_winter_orders.adjustments.end(); ++o)
    928:           b != r->second.adjustments.end(); ++b)
    1060:           o != orders.adjustments.end(); ++o, ++count)
    1431:                       loc != n->second.end(); ++loc)
    2129:               winter->number_of_waives >= winter->number_of_orders_required)
    2151:               game_map[build_loc.province].home_powers.end())
    2158:               game_map[build_loc.province].neighbours.end())
    2197:               winter->number_of_waives >= winter->number_of_orders_required)
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    272: bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
    290: bool MapAndUnits::can_move_to_province
    586: TokenMessage MapAndUnits::encode_location(const Location& location) const
    864: TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
    1197: const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
    1446: MapAndUnits* MapAndUnits::instance()
    2547: Token MapAndUnits::province_token(ProvinceId province) const
    2677: bool MapAndUnits::set_move_by_single_step_convoy_order
C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W048 Data is write-only
    121:    bool game_started;                // set when the game has begun
    147:    word our_number_of_disbands;    // disbands required (negative for builds)
  W082 Adjacent arguments have the same type
    190:    bool set_move_by_convoy_order(ProvinceId unit,
    399:    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  W092 Function could be free
    157:    static MapAndUnits* instance();
    162:    static MapAndUnits* create_clone();
    166:    static void delete_clone(MapAndUnits*& clone);
    260:    std::string display_retreat_order(const UnitOrder& unit) const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Province.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Province.h
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h
  W020 Using statement in header
    21: using namespace NetworkBase;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    32: Token::Token(const category_t cat, const subtoken_t sub)
    40: int Token::get_number() const
    49: bool Token::is_number() const
    56: bool Token::is_power() const
    63: bool Token::is_province() const
    70: Token& Token::operator=(const Token& that)
    126: Token::SeasonType Token::order_season() const
    137: PowerId Token::power_id() const
    145: ProvinceId Token::province_id() const
    268: Token power_token(PowerId power)
    281: Token province_token(ProvinceId province)
  W119 Argument passed by value is modified
    155/1: bool Token::set_number(int number)
C:/Users/gregu/Documents/rsc/rsc/dip/Token.h
  W020 Using statement in header
    27: using namespace NodeBase;
  W028 Unused data
    212: constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
    213: constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
    214: constexpr category_t CATEGORY_BRACKET = 0x40;
    217: constexpr category_t CATEGORY_ORDER = 0x43;
    219: constexpr category_t CATEGORY_RESULT = 0x45;
    222: constexpr category_t CATEGORY_COMMAND = 0x48;
    223: constexpr category_t CATEGORY_PARAMETER = 0x49;
    224: constexpr category_t CATEGORY_PRESS = 0x4A;
  W042 Member could be private
    99:    bool is_number() const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp
  W097 Line indentation is not a multiple of the standard value
    387:              that.length_ * sizeof(Token));
    431:              that.length_ * sizeof(Token));
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    125: Token TokenMessage::at(size_t index) const
    132: void TokenMessage::clear()
    262: Token TokenMessage::front() const
    347: Token TokenMessage::operator[](size_t index) const
C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h
  W032 Unused function
    48:    explicit TokenMessage(const Token* stream);
    56:    TokenMessage(const TokenMessage& that);
    91:    Token operator[](size_t index) const;
    140:    void set_as_ascii(const std::string& text);
    170:    bool operator<(const TokenMessage& that) const;
  W042 Member could be private
    127:    size_t set_from(const Token* stream, size_t length);
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    333: TokenTextMap* TokenTextMap::instance()
C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h
  W042 Member could be private
    37:    typedef std::map< Token, std::string > TokenToTextMap;
    38:    typedef std::map< std::string, Token > TextToTokenMap;
  W092 Function could be free
    42:    static TokenTextMap* instance();
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.h
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp
  W022 Add using statement
    1: namespace NodeBase
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    37: size_t WinterOrders::get_number_of_results() const
C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h
  W032 Unused function
    52:    size_t get_number_of_results() const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    62:    auto fake = reinterpret_cast< const Circuit* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W053 Data could be const
    90:    RegCell port_;
  W075 Virtual function is public
    69:    virtual std::string Name() const = 0;
    73:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h
  W020 Using statement in header
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
  W032 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    92:    explicit MediaEndpt(MediaPsm& psm);
  W042 Member could be private
    104:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
  W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W027 Unused class
    42: class MediaFailureEvent : public Event
  W032 Unused function
    48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    56:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    118:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    52:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    573:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    250:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    256: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h
  W020 Using statement in header
    37: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    119:    MediaEndpt* Mep() const { return mep_; }
  W042 Member could be private
    131:    Tone::Id GetOgTone() const { return ogTone_; }
    169:    void SetOgPort(Switch::PortId ogport);
    188:    Event* ReceiveMsg(Message& msg) override;
    192:    void PrepareOgMsgq() override;
  W075 Virtual function is public
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
  W077 Virtual function has no overrides
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto mpsm = static_cast< MediaPsm* >(psm);
    118:       auto mpsm = static_cast< MediaPsm* >(psm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W077 Virtual function has no overrides
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    91: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W042 Member could be private
    66:    static bool IsValidPort(PortId pid)
  W092 Function could be free
    66:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    81: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Tone* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    70:    Id Tid() const { return Id(tid_.GetId()); }
  W020 Using statement in header
    31: using namespace NodeBase;
  W032 Unused function
    70:    Id Tid() const { return Id(tid_.GetId()); }
  W037 Member hides inherited name
    74:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    87:    virtual ~Tone();
C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp
  W006 reinterpret_cast
    112:    auto fake = reinterpret_cast< const Alarm* >(&local);
  W106 Function does not invoke Debug::ft
    204: AlarmStatus Alarm::Status() const
  W110 Override of Base.Display not found
    43: struct AlarmDynamic : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h
  W053 Data could be const
    129:    RegCell aid_;
  W082 Adjacent arguments have the same type
    63:    Alarm(c_string name, c_string expl, secs_t delay);
  W090 Function could be const
    113:    void SetStatus(AlarmStatus status);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    104:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
    104:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W119 Argument passed by value is modified
    30/1: size_t find_first_one(uword n)
    55/1: size_t log2(size_t n, bool up)
    118/1: size_t round_to_2_exp_n(size_t n, size_t e, bool up)
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h
  W082 Adjacent arguments have the same type
    51:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    55:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
    63:    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h
  W032 Unused function
    143:    const T& Back() const
    151:    T& Back()
    159:    const T& At(size_t index) const
    167:    T& At(size_t index)
    191:    const T* Data() const
  W099 Line contains adjacent spaces
    207:    inline static fn_name Array_ctor()    { return "Array.ctor"; }
    208:    inline static fn_name Array_dtor()    { return "Array.dtor"; }
    209:    inline static fn_name Array_Init()    { return "Array.Init"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    101:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    150:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    71:    objects.push_back(const_cast< Base* >(this));
  W106 Function does not invoke Debug::ft
    96: void Base::Nullify(size_t n)
    146: Base::vptr_t Base::Vptr() const
  W119 Argument passed by value is modified
    96/1: void Base::Nullify(size_t n)
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h
  W043 Member could be protected
    75:    virtual void Display(std::ostream& stream,
    98:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    75:    virtual void Display(std::ostream& stream,
    93:    virtual void GetSubtended(std::vector< Base* >& objects) const;
    104:    virtual void ClaimBlocks();
    122:    virtual void Cleanup() { }
    129:    virtual void Startup(RestartLevel level) { }
    137:    virtual void Shutdown(RestartLevel level) { }
    141:    virtual MemoryType MemType() const { return MemPermanent; }
C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h
  W075 Virtual function is public
    44:    virtual void Callback() { }
  W090 Function could be const
    44:    virtual void Callback() { }
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp
  W106 Function does not invoke Debug::ft
    52: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h
  W042 Member could be private
    66:    bool SetNext(c_string input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(c_string key, c_string def, c_string expl);
  W092 Function could be free
    76:    static fixed_string ValidTrueChars();
    81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h
  W042 Member could be private
    68:    bool SetNextValue(bool value) override;
  W060 Base class constructor is public
    39:    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
  W082 Adjacent arguments have the same type
    39:    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp
  W106 Function does not invoke Debug::ft
    71: bool CfgFlagParm::GetCurrValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h
  W042 Member could be private
    65:    bool SetNextValue(bool value) override;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(c_string key, c_string def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp
  W106 Function does not invoke Debug::ft
    73: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h
  W032 Unused function
    57:    word GetCurrValue() const { return *curr_; }
  W042 Member could be private
    81:    bool SetNext(c_string input) override;
  W053 Data could be const
    93:    word min_;
    97:    word max_;
  W060 Base class constructor is public
    39:    CfgIntParm(c_string key, c_string def, word* field,
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(c_string key, c_string def, word* field,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    139:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h
  W042 Member could be private
    65:    c_string Key() const;
    80:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    155:    Q1Link link_;
  W075 Virtual function is public
    69:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W077 Virtual function has no overrides
    115:    virtual std::string GetInput() const;
  W082 Adjacent arguments have the same type
    95:    CfgParm(c_string key, c_string def, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
  W106 Function does not invoke Debug::ft
    272: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h
  W042 Member could be private
    57:    CfgTuple* FindTuple(const std::string& key) const;
  W092 Function could be free
    123:    bool LoadNextTuple(std::string& key, std::string& value);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp
  W106 Function does not invoke Debug::ft
    66: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h
  W060 Base class constructor is public
    40:    CfgStrParm(c_string key, c_string def, ProtectedStr* field, c_string expl);
  W082 Adjacent arguments have the same type
    40:    CfgStrParm(c_string key, c_string def, ProtectedStr* field, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h
  W053 Data could be const
    119:    Q1Link link_;
  W092 Function could be free
    84:    static const std::string& ValidKeyChars();
    89:    static const std::string& ValidValueChars();
    94:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp
  W106 Function does not invoke Debug::ft
    72: void CinThread::ClearClient(const Thread* client)
  W107 Function does not invoke Debug::ft as first statement
    113:       Debug::ft(CinThread_Enter);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    237:    return (Object*) addr;
  W006 reinterpret_cast
    95:    auto fake = reinterpret_cast< const Class* >(&local);
  W110 Override of Base.Display not found
    48: struct ClassDynamic : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h
  W032 Unused function
    63:    virtual void Initialize();
    72:    virtual Object* Create();
    76:    virtual Object* GetQuasiSingleton();
    80:    virtual void FreeQuasiSingleton(Object* obj);
    140:    bool SetVptr(const Object& obj);
    147:    bool SetTemplate(Object& obj);
    155:    bool SetQuasiSingleton(Object& obj);
  W042 Member could be private
    67:    virtual MemoryType ObjType() const = 0;
    134:    virtual Object* New(size_t size);
  W065 Base class virtual destructor is not public
    123:    virtual ~Class();
  W075 Virtual function is public
    63:    virtual void Initialize();
    67:    virtual MemoryType ObjType() const = 0;
    72:    virtual Object* Create();
    76:    virtual Object* GetQuasiSingleton();
    80:    virtual void FreeQuasiSingleton(Object* obj);
  W077 Virtual function has no overrides
    63:    virtual void Initialize();
    67:    virtual MemoryType ObjType() const = 0;
    72:    virtual Object* Create();
    76:    virtual Object* GetQuasiSingleton();
    80:    virtual void FreeQuasiSingleton(Object* obj);
  W090 Function could be const
    134:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp
  W106 Function does not invoke Debug::ft
    95: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h
  W065 Base class virtual destructor is not public
    85:    virtual ~CliAppData();
  W075 Virtual function is public
    66:    virtual void EventOccurred(Event evt);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h
  W060 Base class constructor is public
    39:    explicit CliBoolParm(c_string help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp
  W119 Argument passed by value is modified
    151/3:    const string& expl, std::streamsize p) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h
  W043 Member could be protected
    40:    CliCharParm(c_string help, c_string chars,
  W060 Base class constructor is public
    40:    CliCharParm(c_string help, c_string chars,
  W082 Adjacent arguments have the same type
    40:    CliCharParm(c_string help, c_string chars,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h
  W075 Virtual function is public
    76:    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  W082 Adjacent arguments have the same type
    104:    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  W092 Function could be free
    136:    static Rc Exhausted(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    76:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    145:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    76:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    145:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h
  W082 Adjacent arguments have the same type
    59:    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp
  W106 Function does not invoke Debug::ft
    136: uint32_t CliCookie::Index(uint32_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    104:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h
  W053 Data could be const
    106:    RegCell iid_;
  W075 Virtual function is public
    71:    virtual void Enter();
    76:    virtual void Exit();
  W077 Virtual function has no overrides
    76:    virtual void Exit();
  W082 Adjacent arguments have the same type
    98:    CliIncrement(c_string name, c_string help, uint32_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h
  W053 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
  W060 Base class constructor is public
    49:    CliIntParm(c_string help, word min, word max,
  W082 Adjacent arguments have the same type
    49:    CliIntParm(c_string help, word min, word max,
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h
  W043 Member could be protected
    158:    bool GetBoolParm(bool& b, CliThread& cli) const;
    168:    bool GetCharParm(char& c, CliThread& cli) const;
    178:    bool GetPtrParm(void*& p, CliThread& cli) const;
    204:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    253:    bool IsOptional() const { return opt_; }
  W075 Virtual function is public
    135:    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
    143:    virtual void Explain(std::ostream& stream, col_t indent) const;
    153:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    163:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    173:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    183:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    211:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    221:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    231:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W092 Function could be free
    323:    static Rc Mismatch(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    97:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h
  W043 Member could be protected
    39:    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  W060 Base class constructor is public
    39:    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
C:/Users/gregu/Documents/rsc/rsc/nb/CliStack.h
  W117 Line can merge with the next line and be under the length limit
    65:    const CliCommand* FindCommand
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.cpp
  W119 Argument passed by value is modified
    41/2: CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h
  W042 Member could be private
    61:    c_string HelpText() const;
  W043 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
  W060 Base class constructor is public
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W120 Function returns non-const reference or pointer to member data
    82:    Registry< CliParm >& Parms() { return parms_; }
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.cpp
  W119 Argument passed by value is modified
    144/2: void CliTextParm::Explain(ostream& stream, col_t indent) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h
  W060 Base class constructor is public
    49:    explicit CliTextParm(c_string help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp
  W119 Argument passed by value is modified
    778/2:    (const string& expl, size_t begin, size_t end, col_t indent) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h
  W032 Unused function
    97:    word IntPrompt(const std::string& prompt, word min, word max);
    131:    word Result() const { return result_; }
  W050 Data is not private
    201:    std::unique_ptr< CliBuffer > ibuf;
    205:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    91:    char CharPrompt(const std::string& prompt,
    231:    void Report1
  W120 Function returns non-const reference or pointer to member data
    169:    CliCookie& Cookie() { return cookie_; }
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    95:       auto req = static_cast< StreamRequest* >(msg);
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h
  W092 Function could be free
    48:    static void Spool(c_string s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.cpp
  W006 reinterpret_cast
    76:    auto fake = reinterpret_cast< const Daemon* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h
  W042 Member could be private
    89:    id_t Did() const { return did_.GetId(); }
  W053 Data could be const
    171:    RegCell did_;
    175:    size_t size_;
  W077 Virtual function has no overrides
    140:    virtual void Recover() { }
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp
  W106 Function does not invoke Debug::ft
    53: void Debug::Assert(bool condition, debug64_t errval)
  W107 Function does not invoke Debug::ft as first statement
    84:    Debug::ft(Debug_GenerateSwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h
  W082 Adjacent arguments have the same type
    95:    static void SwLog(fn_name_arg func, debug64_t errval,
  W092 Function could be free
    102:    static void Assert(bool condition, debug64_t errval = 0);
    106:    static void Progress(const std::string& s);
    110:    static void noop();
    116:    static void noft() { }
    150:    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h
  W028 Unused data
    194: extern const Duration ONE_uSEC;
    199: extern const int64_t TICKS_PER_SEC;
  W032 Unused function
    117:    Duration operator+();
    121:    Duration operator-();
    125:    Duration& operator++();
    126:    Duration operator++(int);
    130:    Duration& operator--();
    131:    Duration operator--(int);
    143:    Duration& operator*=(int64_t rhs);
    147:    Duration& operator/=(int64_t rhs);
    151:    Duration& operator%=(const Duration& rhs);
    156:    Duration& operator>>=(int8_t shift);
    180: Duration operator*(const Duration& lhs, int64_t rhs);
    184: Duration operator%(const Duration& lhs, const Duration& rhs);
  W092 Function could be free
    96:    static Duration Immed();
    100:    static Duration Never();
  W099 Line contains adjacent spaces
    183: int64_t  operator/(const Duration& lhs, const Duration& rhs);
C:/Users/gregu/Documents/rsc/rsc/nb/Element.cpp
  W106 Function does not invoke Debug::ft
    195: bool Element::RunningInLab()
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h
  W042 Member could be private
    52:    static const std::string RscPath();
  W092 Function could be free
    46:    static std::string strTimePlace();
    52:    static const std::string RscPath();
    57:    static const std::string HelpPath();
    63:    static const std::string InputPath();
    68:    static const std::string OutputPath();
    72:    static const std::string ConsoleFileName();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    44:    Debug::ft(Exception_ctor1);  //@
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h
  W032 Unused function
    66:    Exception(const Exception& that);
    67:    Exception(Exception&& that);
  W065 Base class virtual destructor is not public
    71:    virtual ~Exception();
  W075 Virtual function is public
    51:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    229:       auto req = static_cast< FileRequest* >(msg);
  W032 Unused function
    66:    FileRequest(const FileRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h
  W082 Adjacent arguments have the same type
    63:    static void Spool(const std::string& name,
  W092 Function could be free
    45:    static ostringstreamPtr CreateStream();
    58:    static void Spool(const std::string& name, ostringstreamPtr& stream,
    63:    static void Spool(const std::string& name,
    68:    static void Record(const std::string& s, bool eol = false);
    72:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.cpp
  W004 C-style cast
    151:       auto base = (const Base*) obj;
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h
  W082 Adjacent arguments have the same type
    100:    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W007 Cast down the inheritance hierarchy
    568:       auto curr = static_cast< FunctionTrace* >(rec);
    582:       auto curr = static_cast< FunctionTrace* >(rec);
    601:       auto curr = static_cast< FunctionTrace* >(rec);
    625:       auto curr = static_cast< FunctionTrace* >(rec);
    672:       auto curr = static_cast< FunctionTrace* >(rec);
    790:       auto curr = static_cast< FunctionTrace* >(rec);
    812:       auto curr = static_cast< FunctionTrace* >(rec);
    830:       auto curr = static_cast< FunctionTrace* >(rec);
    905:       auto curr = static_cast< FunctionTrace* >(rec);
  W032 Unused function
    171:    PerThreadInfo()
  W106 Function does not invoke Debug::ft
    193: CtorChain::CtorChain(FunctionTrace* inner) :
    210: bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
    263: CtorChain::Action CtorChain::CalcAction
    331: TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
    350: bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
    393: bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
    411: TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
    460: void CtorChain::HandleFunction(FunctionTrace* func)
    487: void CtorChain::MoveOuterAboveInit()
    501: void CtorChain::MoveOuterAboveInner() const
    514: void CtorChain::SetOuter(FunctionTrace* outer)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h
  W032 Unused function
    48:    FunctionTrace();
  W060 Base class constructor is public
    44:    FunctionTrace(fn_name_arg func, fn_depth depth);
    48:    FunctionTrace();
C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp
  W106 Function does not invoke Debug::ft
    126: void Heap::Freed(size_t size)
    134: bool Heap::IsFixedSize() const
    172: void Heap::Requested(size_t size, bool ok)
C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h
  W042 Member could be private
    95:    int SetAttrs(MemoryProtection attrs);
    123:    bool IsFixedSize() const;
  W075 Virtual function is public
    49:    virtual void* Addr() const = 0;
    53:    virtual size_t Size() const = 0;
    57:    virtual MemoryType Type() const = 0;
    61:    virtual void* Alloc(size_t size) = 0;
    65:    virtual void Free(void* addr) = 0;
    70:    virtual size_t BlockToSize(const void* addr) const = 0;
    75:    virtual bool Validate(const void* addr) const = 0;
    79:    virtual bool CanBeProtected() const { return true; }
    86:    virtual int SetPermissions(MemoryProtection attrs);
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp
  W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::ImmediateTrace()
    57: bool InitFlags::SuspendRoot()
    64: bool InitFlags::TraceInit()
C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp
  W006 reinterpret_cast
    132:    auto fake = reinterpret_cast< const Log* >(&local);
  W106 Function does not invoke Debug::ft
    138: size_t Log::Count()
  W110 Override of Base.Display not found
    55: struct LogDynamic : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h
  W052 DATA CANNOT BE CONST POINTER
    169:    LogGroup* const group_;
  W053 Data could be const
    181:    RegCell lid_;
  W090 Function could be const
    110:    void SetInterval(uint8_t interval);
  W092 Function could be free
    115:    static Log* Find(fixed_string groupName, LogId id, LogGroup*& group);
    120:    static Log* Find(fixed_string log);
    128:    static size_t Count();
C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp
  W004 C-style cast
    328:    auto after = (ptr_t) next_ + size;
    341:       if(wrap && (after > (const_ptr_t) first)) return nullptr;
    348:       if(wrap || (after > (const_ptr_t) first)) return nullptr;
    525:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    525:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    527:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
    527:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  W006 reinterpret_cast
    126:    SetNext(reinterpret_cast< Entry* >(buff_));
    355:       where = reinterpret_cast< Entry* >(buff_);
    363:    SetNext(reinterpret_cast< Entry* >(after));
    404:          SetNext(reinterpret_cast< Entry* >(buff_));
  W009 Pointer arithmetic
    328:    auto after = (ptr_t) next_ + size;
    329:    auto wrap = after >= (buff_ + size_);
    356:       after = buff_ + size;
  W106 Function does not invoke Debug::ft
    518: void LogBuffer::UpdateMax()
  W119 Argument passed by value is modified
    99/1: LogBuffer::LogBuffer(size_t size) :
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp
  W006 reinterpret_cast
    116:    auto fake = reinterpret_cast< const LogGroup* >(&local);
  W106 Function does not invoke Debug::ft
    178: void LogGroup::SetSuppressed(bool suppressed)
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h
  W042 Member could be private
    81:    id_t Gid() const { return gid_.GetId(); }
    85:    bool Suppressed() const { return suppressed_; }
  W053 Data could be const
    142:    RegCell gid_;
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.cpp
  W106 Function does not invoke Debug::ft
    197: LogGroup* LogGroupRegistry::Group(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h
  W032 Unused function
    58:    Log* FindLog(const std::string& name, LogId id) const;
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    72:       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h
  W092 Function could be free
    70:    static void CopyToConsole(const ostringstreamPtr& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.cpp
  W106 Function does not invoke Debug::ft
    150: size_t MainArgs::Size()
C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.h
  W092 Function could be free
    53:    static void PushBack(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp
  W005 Functional cast
    258:       auto type = MemoryType(m);
  W106 Function does not invoke Debug::ft
    218: Heap* AccessHeap(MemoryType type)
    237: Heap* EnsureHeap(MemoryType type)
    254: MemoryType Memory::AddrToType(const void* addr)
    271: size_t Memory::Align(size_t size, size_t log2align)
    420: const Heap* Memory::GetHeap(MemoryType type)
    429: bool Memory::Protect(MemoryType type)
    514: bool Memory::Unprotect(MemoryType type)
    547: size_t Memory::Words(size_t size)
  W111 Override of Object.Patch not found
    61: class ProtectedHeap : public NbHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h
  W032 Unused function
    49:    size_t Words(size_t size);
    57:    void Set(void* dest, byte_t value, size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    67:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h
  W092 Function could be free
    57:    static c_string TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h
  W032 Unused function
    92:    ModuleId Mid() const { return mid_.GetId(); }
  W053 Data could be const
    130:    RegCell mid_;
  W065 Base class virtual destructor is not public
    126:    virtual ~Module();
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp
  W106 Function does not invoke Debug::ft
    58: const FactionFlags& AllFactions()
    75: const FactionFlags& ShutdownFactions()
    171: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h
  W092 Function could be free
    82:    void SetLevel(RestartLevel level);
    86:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp
  W106 Function does not invoke Debug::ft
    74: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h
  W060 Base class constructor is public
    41:    MsgBuffer();
    45:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    62:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp
  W107 Function does not invoke Debug::ft as first statement
    38:    Debug::ft(MutexGuard_ctor);
    62:       Debug::ft(MutexGuard_Release);
C:/Users/gregu/Documents/rsc/rsc/nb/MutexRegistry.h
  W042 Member could be private
    53:    SysMutex* Find(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h
  W028 Unused data
    68: constexpr FlagId FirstAppDebugFlag = 11;
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp
  W106 Function does not invoke Debug::ft
    125: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h
  W028 Unused data
    72: extern fixed_string NotImplementedExpl;
  W082 Adjacent arguments have the same type
    123: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
    129: bool ValidateOptions
C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp
  W004 C-style cast
    285:    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
    326:    heap_->state = (uint8_t*) (heapAddr + infoSize);
    358:          ReleaseBlock((HeapBlock*) addr, level);
    369:       ReserveBlock((HeapBlock*) addr);
    453:       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
    500:    auto block = (const HeapBlock*) addr;
    625:                   if(block < (HeapBlock*) heap_)
    627:                   else if(block < (HeapBlock*) heap_->minAddr)
    695:    FreeBlock((HeapBlock*) addr, level);
    744:    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
    826:       auto size = BlockToSize((const HeapBlock*) addr);
    829:       auto index = BlockToIndex((const HeapBlock*) addr, level);
    881:          if((HeapBlock*) block->link.prev->next != block)
    883:          if((HeapBlock*) block->link.next->prev != block)
  W005 Functional cast
    731:    return BlockState(state);
  W026 Unused argument
    75/3:       const std::string& prefix, const Flags& options) const;
  W053 Data could be const
    54:    Q2Link link;
  W099 Line contains adjacent spaces
    617:                case Split:     c = 'S'; break;
    618:                case Merged:    c = 'm'; break;
  W103 Function not sorted in standard order
    164: size_t LevelToSize(NbHeap::level_t level)
  W106 Function does not invoke Debug::ft
    126: NbHeap::index_t IndexToChild(NbHeap::index_t index)
    135: NbHeap::index_t IndexToParent(NbHeap::index_t index)
    144: NbHeap::index_t IndexToSibling(NbHeap::index_t index)
    155: size_t Log2Size(NbHeap::level_t level)
    164: size_t LevelToSize(NbHeap::level_t level)
    173: NbHeap::level_t SizeToLevel(size_t size)
    394: bool NbHeap::AddrIsValid(const void* addr, bool header) const
    435: HeapBlock* NbHeap::AllocBlock(level_t level, size_t size)
    467: NbHeap::index_t NbHeap::BlockToIndex
    536: NbHeap::BlockState NbHeap::Corrupt(int reason, bool restart) const
    548: HeapBlock* NbHeap::Dequeue(level_t level)
    649: void NbHeap::EnqBlock(HeapBlock* block, index_t index, level_t level)
    658: HeapBlock* NbHeap::Enqueue(HeapBlock* block, level_t level)
    701: void NbHeap::FreeBlock(HeapBlock* block, level_t level)
    720: NbHeap::BlockState NbHeap::GetState(index_t index) const
    736: HeapBlock* NbHeap::IndexToBlock(index_t index, level_t level) const
    756: void NbHeap::ReleaseBlock(HeapBlock* block, level_t level)
    772: void NbHeap::ReserveBlock(const HeapBlock* block)
    785: void NbHeap::SetState(index_t index, BlockState state)
    801: void NbHeap::SplitAncestors(index_t block)
    851: NbHeap::BlockState NbHeap::ValidateBlock
  W119 Argument passed by value is modified
    243/2: NbHeap::NbHeap(MemoryType type, size_t size) : Heap(),
    418/1: void* NbHeap::Alloc(size_t size)
    701/1: void NbHeap::FreeBlock(HeapBlock* block, level_t level)
    801/1: void NbHeap::SplitAncestors(index_t block)
C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.h
  W090 Function could be const
    143:    void SetState(index_t index, BlockState state);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    650:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    1007:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1101:          auto type = MemoryType(m);
    1112:          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
    1467:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    3356:       auto heap = Memory::GetHeap(MemoryType(m));
  W092 Function could be free
    2752:    static void SendAckToOutputFile(const CliThread& cli);
  W102 Line length exceeds the standard maximum
    3331: "Alloc  Low kB     kB       Bytes                            Memory        Prot\n"
    3332: "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h
  W028 Unused data
    194:    static const id_t LastNbIndex = 3;
  W060 Base class constructor is public
    41:    StatusCommand();
    56:    LogsAction();
    75:    explicit LogsCommand(bool bind = true);
    92:    SetWhatParm();
    106:    explicit SetCommand(bool bind = true);
    123:    IncludeWhatParm();
    137:    explicit IncludeCommand(bool bind = true);
    154:    ExcludeWhatParm();
    167:    explicit ExcludeCommand(bool bind = true);
    198:    explicit QueryCommand(bool bind = true);
    215:    SaveWhatParm();
    227:    explicit SaveCommand(bool bind = true);
    244:    ClearWhatParm();
    262:    explicit ClearCommand(bool bind = true);
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    216:             stream << Faction(f) << CRLF;
  W106 Function does not invoke Debug::ft
    174: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h
  W042 Member could be private
    77:    static bool ThreadsEmpty();
  W092 Function could be free
    73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    77:    static bool ThreadsEmpty();
  W110 Override of Base.Display not found
    63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp
  W106 Function does not invoke Debug::ft
    75: char BlockingReasonChar(BlockingReason reason)
    98: char FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h
  W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
  W032 Unused function
    127: std::ostream& operator<<(std::ostream& stream, AlarmStatus status);
  W033 Unused typedef
    226: using PersistentStr =
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    120:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W106 Function does not invoke Debug::ft
    61: Object::ClassId Object::GetClassId() const
    72: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    99: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h
  W032 Unused function
    97:    ClassId GetClassId() const;
    109:    ObjectId GetObjectId() const;
    115:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    131:    void MorphTo(const Class& target);
  W042 Member could be private
    72:    typedef uint32_t InstanceId;  // identifies an object within a Class
    73:    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
    103:    virtual InstanceId GetInstanceId() const;
  W043 Member could be protected
    50:    typedef uint8_t sel_t;
    59:    virtual void Patch(sel_t selector, void* arguments) { }
    71:    typedef id_t ClassId;         // identifies a Class
  W053 Data could be const
    136:    uintptr_t patchArea_;
  W075 Virtual function is public
    59:    virtual void Patch(sel_t selector, void* arguments) { }
    84:    virtual Class* GetClass() const;
    92:    virtual void PostInitialize() { }
    103:    virtual InstanceId GetInstanceId() const;
  W077 Virtual function has no overrides
    84:    virtual Class* GetClass() const;
    92:    virtual void PostInitialize() { }
    103:    virtual InstanceId GetInstanceId() const;
  W088 Argument could be const
    59/2:    virtual void Patch(sel_t selector, void* arguments) { }
  W090 Function could be const
    59:    virtual void Patch(sel_t selector, void* arguments) { }
  W092 Function could be free
    115:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    292:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, false);
    316:          auto b = (ObjectBlock*) &seg[j];
    368:             auto b = (ObjectBlock*) &seg[j];
    404:             auto curr = (Pooled*) getptr1(item, diff);
    832:       return (ObjectBlock*) &blocks_[0][0];
    902:       return (ObjectBlock*) &blocks_[i][j];
    927:             auto b = (ObjectBlock*) &seg[j];
    959:    auto block = (const_ptr_t) ObjToBlock(obj);
    960:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    964:       auto b0 = (const_ptr_t) &blocks_[i][0];
    1007:    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
    1037:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    117:       reinterpret_cast< word* >(&pool->targSegments_), 0,
    542:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W099 Line contains adjacent spaces
    103:    CounterPtr      allocCount_;
    104:    CounterPtr      freeCount_;
    105:    CounterPtr      failCount_;
    106:    CounterPtr      auditCount_;
    107:    CounterPtr      expansions_;
  W106 Function does not invoke Debug::ft
    332: size_t ObjectPool::AllocCount() const
    501: size_t ObjectPool::AvailCount() const
    508: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    809: size_t ObjectPool::Expansions() const
    816: size_t ObjectPool::FailCount() const
    861: size_t ObjectPool::FreeCount() const
    868: bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
    880: size_t ObjectPool::InUseCount() const
    887: size_t ObjectPool::LowAvailCount() const
    894: ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
    913: Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
    986: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    995: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    1004: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W110 Override of Base.Display not found
    83: class ObjectPoolSizeCfg : public CfgIntParm
    96: class ObjectPoolStats : public Dynamic
    187: struct ObjectPoolDynamic : public Persistent
  W119 Argument passed by value is modified
    508/1: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    524/1: Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
    550/1: bool ObjectPool::Corrupt(size_t n)
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    94:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W042 Member could be private
    186:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    213:    virtual ~ObjectPool();
  W075 Virtual function is public
    99:    virtual Pooled* DeqBlock(size_t size);
    104:    virtual void EnqBlock(Pooled* obj, bool deleted);
    172:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  W077 Virtual function has no overrides
    99:    virtual Pooled* DeqBlock(size_t size);
    104:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    239:    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
    244:    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  W090 Function could be const
    182:    bool Corrupt(size_t n);
    252:    void UpdateAlarm();
  W092 Function could be free
    266:    static ObjectBlock* ObjToBlock(const Pooled* obj);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
  W106 Function does not invoke Debug::ft
    293: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
  W042 Member could be private
    56:    bool NullifyObjectData() const { return nullifyObjectData_; }
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp
  W106 Function does not invoke Debug::ft
    48: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h
  W092 Function could be free
    41:    static PermanentHeap* Instance();
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    146:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    120:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
  W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    73:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W106 Function does not invoke Debug::ft
    126: Flags PS_Break()
    131: Flags PS_Delayed()
    136: Flags PS_Final()
    141: Flags PS_Interrupt()
    146: Flags PS_Native()
    151: Flags PS_NoError()
    156: Flags PS_NoLog()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h
  W032 Unused function
    145: Flags PS_Delayed();
  W053 Data could be const
    132:    RegCell sid_;
  W065 Base class virtual destructor is not public
    108:    virtual ~PosixSignal();
  W082 Adjacent arguments have the same type
    102:    PosixSignal(signal_t value, c_string name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
  W106 Function does not invoke Debug::ft
    60: Flags PosixSignalRegistry::Attrs(signal_t value) const
    93: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    105: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    159: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ft(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h
  W032 Unused function
    62:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h
  W004 C-style cast
    138:          getptr2(prev, diff_);                   // put item after previous
    160:       return (T*) getptr1(item, diff_);  // location of item's vptr
    206:       return (T*) getptr1(item, diff_);     // location of item's vptr
    228:             getptr2(elem, diff_);           // start at the current item
    241:       elem = (T*) getptr1(item, diff_);     // location of item's vptr
    254:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    326:          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
    335:          getptr2(elem, diff_);
    336:       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
    354:       return (Q1Link*) getptr2(&elem, diff_);
  W088 Argument could be const
    87/1:    bool Enq(T& elem)
    108/1:    bool Henq(T& elem)
    130/1:    bool Insert(T* prev, T& elem)
    165/1:    bool Exq(T& elem)
    322/1:    void Corrupt(T* elem)
  W099 Line contains adjacent spaces
    383:    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
    384:    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
    385:    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
    386:    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
    388:    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
    389:    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
    390:    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
    391:    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
    392:    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
    393:    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp
  W106 Function does not invoke Debug::ft
    40: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h
  W032 Unused function
    63:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h
  W004 C-style cast
    142:       return (T*) getptr1(item, diff_);    // location of item's vptr
    171:       return (T*) getptr1(item, diff_);     // location of item's vptr
    189:             getptr2(elem, diff_);           // start at current element
    194:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    205:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    215:       return (T*) getptr1(item, diff_);     // location of item's vptr
    233:             getptr2(elem, diff_);           // start at current element
    238:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    249:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    333:       return (Q2Link*) getptr2(&elem, diff_);
  W088 Argument could be const
    147/1:    bool Exq(T& elem)
  W090 Function could be const
    147:    bool Exq(T& elem)
  W099 Line contains adjacent spaces
    363:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    364:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    365:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    366:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    367:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    368:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    369:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    370:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    371:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    373:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp
  W106 Function does not invoke Debug::ft
    38: RegCell::~RegCell()
    50: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h
  W004 C-style cast
    114:       registry_ = (T**) Memory::Alloc(size, mem);
    504:                auto cell = (RegCell*) getptr2(item, diff_);
    562:       return (RegCell*) getptr2(&item, diff_);
    576:       auto table = (T**) Memory::Alloc(size, mem_);
  W088 Argument could be const
    275/1:    bool Erase(T& item)
  W099 Line contains adjacent spaces
    623:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    624:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    625:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    627:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    628:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    629:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    630:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    631:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    632:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    633:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.cpp
  W106 Function does not invoke Debug::ft
    38: bool Restart::ClearsMemory(MemoryType type)
    68: RestartLevel Restart::LevelToClear(MemoryType type)
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h
  W092 Function could be free
    99:    template< class T > static bool Release(std::unique_ptr< T >& obj)
    109:    static RestartLevel LevelToClear(MemoryType type);
    115:    static void Initiate
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h
  W004 C-style cast
    80:       reg->BindInstance((const Base**) &Instance_, type);
    99:       reg->UnbindInstance((const Base**) &Instance_);
  W099 Line contains adjacent spaces
    125:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp
  W053 Data could be const
    40:    MemoryType type;    // the type of memory that the singleton uses
  W106 Function does not invoke Debug::ft
    124: Singletons* Singletons::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h
  W060 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
  W082 Adjacent arguments have the same type
    41:    SoftwareException
  W117 Line can merge with the next line and be under the length limit
    41:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    86:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W106 Function does not invoke Debug::ft
    114: uint64_t Statistic::Overall() const
    259: uint64_t HighWatermark::Overall() const
    337: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h
  W042 Member could be private
    73:    static ptrdiff_t CellDiff();
  W043 Member could be protected
    69:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  W050 Data is not private
    96:    std::atomic_size_t curr_;
    100:    std::atomic_size_t prev_;
    104:    std::atomic_uint64_t total_;
    108:    size_t divisor_;
  W053 Data could be const
    120:    RegCell sid_;
  W060 Base class constructor is public
    136:    explicit Counter(const std::string& expl, size_t divisor = 1);
  W075 Virtual function is public
    65:    virtual uint64_t Overall() const;
    69:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    80:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  W099 Line contains adjacent spaces
    40: fixed_string StatisticsGroup::ReportHeader =  "     Curr      Prev         All";
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h
  W042 Member could be private
    63:    id_t Gid() const { return gid_.GetId(); }
    67:    static ptrdiff_t CellDiff();
  W053 Data could be const
    102:    RegCell gid_;
  W075 Virtual function is public
    75:    virtual void DisplayStats
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
  W106 Function does not invoke Debug::ft
    127: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h
  W090 Function could be const
    73:    void StartInterval(bool first);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h
  W053 Data could be const
    54:    static secs_t LongIntervalSecs;
    59:    static secs_t ShortIntervalSecs;
    66:    static size_t WakeupsBetweenReports;
    70:    static Duration SleepInterval;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h
  W043 Member could be protected
    59:    StreamRequest(const StreamRequest& that);
  W060 Base class constructor is public
    54:    StreamRequest();
    59:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h
  W053 Data could be const
    109:    Q1Link link_;
  W092 Function could be free
    58:    static const std::string& ValidNameChars();
    63:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    57:    bool BindSymbol
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp
  W106 Function does not invoke Debug::ft
    33: std::istream& SysConsole::In()
    40: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h
  W032 Unused function
    80:    std::string Normalize(const std::string& path);
    95:    void GetCurrDir(std::string& dirName);
  W075 Virtual function is public
    47:    virtual void GetName(std::string& fileName) const = 0;
    51:    virtual bool IsSubdir() const = 0;
    55:    virtual bool AtEnd() const = 0;
    60:    virtual bool Advance() = 0;
  W082 Adjacent arguments have the same type
    107:    bool FindFiles(const char* dirName,
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp
  W056 Default constructor invoked: POD members not initialized
    57:    _finddata_t attributes_;
  W062 Member not included in member initialization list
    40:    FileWalker(const char* dirName, const char* fileSpec);
    57:    _finddata_t attributes_;
  W106 Function does not invoke Debug::ft
    99: bool FileWalker::AtEnd() const
    106: void FileWalker::GetName(string& fileName) const
    115: bool FileWalker::IsSubdir() const
  W110 Override of Base.Display not found
    37: class FileWalker : public FileList
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h
  W092 Function could be free
    86:    static void ListHeaps(std::set< void* >& heaps, std::ostringstream& expl);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    204:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  W106 Function does not invoke Debug::ft
    91: void* SysHeap::Addr() const
    127: bool SysHeap::CanBeProtected() const { return false; }
    161: void SysHeap::ListHeaps(std::set< void* >& heaps, std::ostringstream& expl)
C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h
  W027 Unused class
    43: class SysLock
  W032 Unused function
    48:    SysLock();
    62:    void Acquire();
    66:    void Release();
    70:    SysThreadId Owner() const { return owner_; }
    74:    void Display(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp
  W106 Function does not invoke Debug::ft
    33: SysLock::SysLock() :
    45: SysLock::~SysLock()
    63: void SysLock::Acquire()
    95: void SysLock::Release()
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.h
  W032 Unused function
    50:    bool Lock(void* addr, size_t size);
    55:    bool Unlock(void* addr, size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp
  W106 Function does not invoke Debug::ft
    49: DWORD GetMemoryProtection(MemoryProtection attrs)
  W119 Argument passed by value is modified
    71/1: void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp
  W006 reinterpret_cast
    41:    auto fake = reinterpret_cast< const SysMutex* >(&local);
  W106 Function does not invoke Debug::ft
    62: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.h
  W032 Unused function
    113:    Thread* Owner() const;
  W053 Data could be const
    138:    RegCell mid_;
C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.win.cpp
  W015 #include not sorted in standard order
    24: #include "SysSignals.h"
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h
  W082 Adjacent arguments have the same type
    113:    static SysThread_t Create(const ThreadEntry entry,
  W090 Function could be const
    168:    DelayRc Suspend(SysSentry_t& sentry, const Duration& timeout);
    172:    bool Resume(SysSentry_t& sentry);
  W092 Function could be free
    55:    static SysThreadId RunningThreadId();
    120:    static SysThread_t Wrap();
    124:    static void Delete(SysThread_t& thread);
    129:    static SysSentry_t CreateSentry();
    133:    static void DeleteSentry(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    162:       (_beginthreadex_proc_type) entry,  // thread entry function
    163:       (void*) client,                    // argument to entry function
    167:    auto handle = (HANDLE) result;
    331:    _set_se_translator((_se_translator_function) SE_Handler);
  W008 Cast removes const qualification
    163:       (void*) client,                    // argument to entry function
  W106 Function does not invoke Debug::ft
    49: signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
    237: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    277: SysThreadId SysThread::RunningThreadId()
  W107 Function does not invoke Debug::ft as first statement
    75:    Debug::ft(NodeBase_SE_Handler);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h
  W026 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    153:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, false);
  W015 #include not sorted in standard order
    30: #include <dbghelp.h>
  W044 Typedef of pointer type
    51: typedef void* StackFrames[MaxFrames];
  W082 Adjacent arguments have the same type
    89:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W092 Function could be free
    79:    static fn_depth GetFrames(StackFramesPtr& frames);
  W106 Function does not invoke Debug::ft
    119: fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
    135: void StackInfo::Shutdown()
    144: DWORD StackInfo::Startup()
    257: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h
  W032 Unused function
    68:    bool TickTimingAvailable() const { return available_; }
  W110 Override of Base.Display not found
    38: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W056 Default constructor invoked: POD members not initialized
    42:    LARGE_INTEGER frequency;
    75:       LARGE_INTEGER now;
    81:       _timeb now;
  W106 Function does not invoke Debug::ft
    71: TimePoint SysTickTimer::Now() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    361:          Truncate(TimeField(int(field) + 1));
    542:          return OutOfRange(TimeField(f));
  W106 Function does not invoke Debug::ft
    180: int16_t SysTime::DayOfWeek() const
    190: int16_t SysTime::DayOfYear() const
    206: const int16_t* SysTime::DaysPerMonth(int16_t year)
    214: size_t SysTime::DaysSinceT0() const
    244: bool SysTime::IsLeapYear(int16_t year)
    264: int64_t SysTime::MsecsSinceT0() const
  W119 Argument passed by value is modified
    105/1: void SysTime::AddDays(size_t days)
    140/1: void SysTime::AddMsecs(msecs_t msecs)
    402/1: void SysTime::SubDays(size_t days)
    437/1: void SysTime::SubMsecs(msecs_t msecs)
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h
  W032 Unused function
    77:    int16_t Get(TimeField field) const { return time_[field]; }
  W042 Member could be private
    81:    int16_t DayOfWeek() const;
    136:    c_string strMonth() const;
  W082 Adjacent arguments have the same type
    72:    SysTime(int16_t year, int16_t month, int16_t day,
  W092 Function could be free
    89:    static bool IsLeapYear(int16_t year);
    158:    static const int16_t* DaysPerMonth(int16_t year);
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp
  W056 Default constructor invoked: POD members not initialized
    41:    _timeb timebuff;
    42:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    34:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W106 Function does not invoke Debug::ft
    31: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h
  W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
    63: constexpr size_t GBs = 1024 * 1024 * 1024;
  W030 Unused enumerator
    186:    MemInaccessible = 0,      // ---
    187:    MemExecuteOnly = 1,       // --x
    189:    MemReadExecute = 5,       // r-x
    191:    MemReadWriteExecute = 7,  // rwx
  W044 Typedef of pointer type
    95: typedef char* ptr_t;
    96: typedef const char* const_ptr_t;
    113: typedef const char* c_string;
    114: typedef const char* const fixed_string;
    119: typedef const char* const fn_name;      // for defining a function name
    120: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp
  W106 Function does not invoke Debug::ft
    32: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    39: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    46: void ThisThread::IncludeInTrace()
    53: DelayRc ThisThread::Pause(const Duration& timeout)
    60: void ThisThread::PauseOver(word limit)
    67: word ThisThread::RtcPercentUsed()
    74: ThreadId ThisThread::RunningThreadId()
    81: TraceRc ThisThread::StartTracing(const string& opts)
    88: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1474:    auto p = reinterpret_cast< char* >(BAD_POINTER);
    1483:    auto fake = reinterpret_cast< const Thread* >(&local);
  W009 Pointer arithmetic
    3323:    ptrdiff_t stacksize = &local - priv_->stackBase_;
  W032 Unused function
    751:    ThreadInfo(const ThreadInfo& info) = default;
    752:    ThreadInfo(ThreadInfo&& info) = default;
    754:    ThreadInfo& operator=(ThreadInfo&& info) = default;
  W042 Member could be private
    142:    static void* operator new(size_t size);
  W092 Function could be free
    132:    static void CaptureEvent(fn_name_arg func, Id rid, int32_t info = 0);
  W099 Line contains adjacent spaces
    272:    CounterPtr       traps_;
    273:    CounterPtr       exceeds_;
    274:    CounterPtr       yields_;
    275:    CounterPtr       interrupts_;
    279:    AccumulatorPtr   totTime_;
  W106 Function does not invoke Debug::ft
    100: std::atomic_flag& AccessFtLock()
    456: ContextSwitch* ContextSwitches::AddSwitch()
    959: bool Threads::IsDeleted() const
    1425: Thread* Thread::ActiveThread()
    1437: SysMutex* Thread::BlockingMutex() const
    1444: TraceStatus Thread::CalcStatus(bool dynamic) const
    1460: bool Thread::CanBeScheduled() const
    1532: bool Thread::ClearActiveThread(Thread* active)
    2059: void Thread::FunctionInvoked(fn_name_arg func)
    2105: BlockingReason Thread::GetBlockingReason() const
    2112: TraceStatus Thread::GetStatus() const
    2277: bool Thread::IsLocked() const
    2284: bool Thread::IsScheduled() const
    2291: bool Thread::IsTraceable() const
    2338: Thread* Thread::LockedThread()
    2400: TraceRc Thread::LogContextSwitches(bool on)
    2583: uint8_t Thread::MutexCount() const
    2590: SysThreadId Thread::NativeThreadId() const
    2609: DelayRc Thread::Pause(Duration time)
    2653: double Thread::PercentIdle()
    2954: void Thread::ResetDebugFlags()
    3063: Thread* Thread::RunningThread(bool assert)
    3209: void Thread::SetStatus(TraceStatus status)
    3312: void Thread::StackCheck()
    3571: TraceRc Thread::StartTracing(const string& opts)
    3605: void Thread::StopTracing()
    3767: void Thread::Trace(Thread* thr,
    3784: bool Thread::TraceRunningThread(Thread*& thr)
    3812: void Thread::TrapCheck()
    4005: void Thread::UpdateMutex(SysMutex* mutex)
    4012: void Thread::UpdateMutexCount(bool acquired)
  W107 Function does not invoke Debug::ft as first statement
    1977:    Debug::ft(Thread_ExitIfSafe);
    2830:    Debug::ft(Thread_Ready);
    3284:    Debug::ft(Thread_SignalHandler);
    3352:          Debug::ft(Thread_Start);
    3831:       Debug::ft(Thread_TrapHandler);  //@
  W110 Override of Base.Display not found
    266: class ThreadStats : public Dynamic
    358: class ContextSwitches : public Permanent
    770: class Threads : public Permanent
  W111 Override of Object.Patch not found
    358: class ContextSwitches : public Permanent
    770: class Threads : public Permanent
    994: class ThreadPriv : public Permanent
  W119 Argument passed by value is modified
    2121/1: bool Thread::HandleSignal(signal_t sig, uint32_t code)
    3767/1: void Thread::Trace(Thread* thr,
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h
  W005 Functional cast
    139:    ThreadId Tid() const { return ThreadId(tid_.GetId()); }
  W026 Unused argument
    316/2:       (BlockingReason why, fn_name_arg func) { return true; }
    325/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W032 Unused function
    118:    static std::atomic_uint32_t* Vector();
    122:    static bool TestFlag(FlagId fid);
    126:    static void ResetFlag(FlagId fid);
    147:    Faction GetFaction() const { return faction_; }
    151:    bool ChangeFaction(Faction faction);
    481:    SysMutex* BlockingMutex() const;
    489:    uint8_t MutexCount() const;
  W042 Member could be private
    130:    static void ResetFlags();
    143:    SysThreadId NativeThreadId() const;
    226:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    255:    virtual ~Thread();
  W075 Virtual function is public
    168:    virtual TraceStatus CalcStatus(bool dynamic) const;
    222:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  W077 Virtual function has no overrides
    222:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
    268:    virtual bool EnqMsg(MsgBuffer& msg);
    274:    virtual MsgBuffer* DeqMsg(const Duration& timeout);
  W082 Adjacent arguments have the same type
    627:    void DisplaySummary(std::ostream& stream,
  W090 Function could be const
    114:    bool Interrupt(const Flags& mask = NoFlags);
    155:    void SetStatus(TraceStatus status);
    262:    void SetInitialized();
    402:    void Reset(FlagId fid);
    406:    void Ready();
    410:    void Preempt();
    433:    void Proceed();
    477:    void UpdateMutex(SysMutex* mutex);
    485:    void UpdateMutexCount(bool acquired);
    542:    bool LogTrap(const Exception* ex,
    588:    void SetTrap(bool on);
    596:    void StackCheck();
    600:    void SetSignal(signal_t sig);
  W092 Function could be free
    90:    static void PauseOver(word limit);
    213:    static double PercentIdle();
    288:    static void CauseTrap();
    460:    static bool ClearActiveThread(Thread* active);
    494:    static SysThread::Priority FactionToPriority(Faction& faction);
    620:    static void EnableFactions(const FactionFlags& enabled);
    636:    static TraceRc LogContextSwitches(bool on);
    644:    static void DisplayContextSwitches(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp
  W106 Function does not invoke Debug::ft
    350: const ThreadAdminValues* ThreadAdmin::AccessConfig()
    365: bool ThreadAdmin::BreakEnabled()
    472: void ThreadAdmin::Incr(Register r)
    562: bool ThreadAdmin::ReinitOnSchedTimeout()
    571: word ThreadAdmin::RtcInterval()
    580: word ThreadAdmin::RtcLimit()
    589: Duration ThreadAdmin::RtcTimeout()
    599: Duration ThreadAdmin::SchedTimeout()
    622: word ThreadAdmin::StackCheckInterval()
    631: word ThreadAdmin::StackUsageLimit()
    668: word ThreadAdmin::TrapCount()
    680: word ThreadAdmin::TrapInterval()
    689: word ThreadAdmin::TrapLimit()
    698: bool ThreadAdmin::TrapOnRtcTimeout()
  W110 Override of Base.Display not found
    55: class ThreadsStats : public Dynamic
    218: struct ThreadAdminValues : public Persistent
  W117 Line can merge with the next line and be under the length limit
    322:       "F", &Debug::FcFlags_, Debug::StackChecking,
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h
  W092 Function could be free
    91:    static int WarpFactor();
  W099 Line contains adjacent spaces
    183:    CfgIntParmPtr  initTimeoutMsecs_;
    184:    CfgIntParmPtr  schedTimeoutMsecs_;
    186:    CfgIntParmPtr  rtcTimeoutMsecs_;
    188:    CfgIntParmPtr  rtcLimit_;
    189:    CfgIntParmPtr  rtcInterval_;
    191:    CfgIntParmPtr  trapLimit_;
    192:    CfgIntParmPtr  trapInterval_;
    194:    CfgIntParmPtr  stackUsageLimit_;
    195:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp
  W106 Function does not invoke Debug::ft
    194: Thread* ThreadRegistry::FindThread(SysThreadId nid) const
    209: ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
    220: Thread* ThreadRegistry::GetThread(ThreadId tid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h
  W090 Function could be const
    112:    void AssociateIds(const Thread& thread);
C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h
  W032 Unused function
    45:    explicit TimePoint(const SysTime& time);
    91:    TimePoint& operator++();
    92:    TimePoint operator++(int);
    96:    TimePoint& operator--();
    97:    TimePoint operator--(int);
    105:    TimePoint& operator-=(const Duration& rhs);
    114: bool operator==(const TimePoint& lhs, const TimePoint& rhs);
    115: bool operator!=(const TimePoint& lhs, const TimePoint& rhs);
    117: bool operator<=(const TimePoint& lhs, const TimePoint& rhs);
    118: bool operator>(const TimePoint& lhs, const TimePoint& rhs);
    119: bool operator>=(const TimePoint& lhs, const TimePoint& rhs);
    124: TimePoint operator+(const Duration& lhs, const TimePoint& rhs);
    125: Duration operator-(const TimePoint& lhs, const Duration& rhs);
  W092 Function could be free
    62:    static TimePoint TimeZero();
    66:    static std::string TimeZeroStr();
    70:    static TimePoint Now();
    74:    static TimePoint Never();
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h
  W065 Base class virtual destructor is not public
    97:    virtual ~Tool();
  W075 Virtual function is public
    61:    virtual c_string Name() const = 0;
    65:    virtual c_string Expl() const = 0;
    71:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp
  W106 Function does not invoke Debug::ft
    118: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.h
  W030 Unused enumerator
    66:    TraceFailed,        // operation failed for some other reason
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    210:       Memory::Alloc(size * sizeof(TraceRecord*), MemPermanent, ex);
    214:       Memory::Alloc(size * sizeof(FunctionTrace), MemPermanent, ex);
  W005 Functional cast
    601:    stream << indent << "buffsize : " << int(std::log2(size_));
  W007 Cast down the inheritance hierarchy
    453:          auto ft = static_cast< FunctionTrace* >(rec);
    484:          auto ft = static_cast< FunctionTrace* >(rec);
  W106 Function does not invoke Debug::ft
    110: TraceBuffer::TraceBuffer() :
    141: TraceBuffer::~TraceBuffer()
    161: void* TraceBuffer::AddFunction()
    229: size_t TraceBuffer::AllocSlot()
    385: bool TraceBuffer::Empty() const
    405: bool TraceBuffer::Insert(TraceRecord* record)
    442: fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
    474: const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
    494: void TraceBuffer::Lock()
    501: void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
    521: void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
    642: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    838: void TraceBuffer::Unlock()
  W119 Argument passed by value is modified
    181/1: bool TraceBuffer::AllocBuffers(size_t n, bool ex)
    366/1: TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h
  W032 Unused function
    183:    const SysTime& StartTimeFull() const { return startTime_; }
  W042 Member could be private
    192:    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  W110 Override of Base.Display not found
    63: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h
  W043 Member could be protected
    81:    void Nullify() { owner_ = NIL_ID; }
  W050 Data is not private
    130:    Id rid_ : 8;
  W075 Virtual function is public
    93:    virtual bool Display(std::ostream& stream, const std::string& opts);
  W090 Function could be const
    110:    virtual void ClaimBlocks() { }
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    59:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemporary);
  W007 Cast down the inheritance hierarchy
    199:             auto ft = static_cast<FunctionTrace*>(rec);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    98: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W082 Adjacent arguments have the same type
    88:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W090 Function could be const
    82:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W092 Function could be free
    88:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W110 Override of Base.Display not found
    49: class FunctionProfiler : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    76:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    47: int FunctionStats::Compare(const FunctionStats& that) const
    65: void FunctionStats::IncrCalls(const Duration& net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W053 Data could be const
    83:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3627:    pool->time_[id1].Truncate(TimeField(field - 1));
    3658:    pool->time_[id1].Round(TimeField(field - 1), interval);
    4589:    auto test = RecoveryThread::Test(index);
  W006 reinterpret_cast
    1773:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    2293:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2846:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W053 Data could be const
    1637:    Q1Link link_;
    2149:    Q2Link link_;
  W082 Adjacent arguments have the same type
    224:    word Sort(const string& input, const string& output, string& expl) const;
  W088 Argument could be const
    1246/2: word CheckHeap(bool shouldExist, CliThread& cli, Heap*& heap)
  W092 Function could be free
    224:    word Sort(const string& input, const string& output, string& expl) const;
    3913:    static void AcquireMutex();
    3914:    static void DoAbort();
    3915:    static void DoDelete();
    3916:    static int DoDivide();
    3917:    static void DoSwerr();
    3918:    static void DoTerminate();
    3919:    static void LoopForever();
    4377:    static RecoveryThread* EnsureThread(id_t subcommand);
  W106 Function does not invoke Debug::ft
    1246: word CheckHeap(bool shouldExist, CliThread& cli, Heap*& heap)
    1752: Q1WayItem::~Q1WayItem()
    1786: Q1WayPool::Q1WayPool()
    1815: void Q1WayPool::Reallocate()
    2272: Q2WayItem::~Q2WayItem()
    2306: Q2WayPool::Q2WayPool()
    2335: void Q2WayPool::Reallocate()
    2836: RegistryItem::~RegistryItem()
    2867: RegistryPool::RegistryPool()
  W107 Function does not invoke Debug::ft as first statement
    4138:       Debug::ft(RecoveryThread_Enter);
  W110 Override of Base.Display not found
    1097: class TestHeap : public NbHeap
    1499: class LbcPool : public Temporary
    3258: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W028 Unused data
    80:    static const id_t LastNtIndex = FuncTraceScope;
  W060 Base class constructor is public
    44:    CorruptWhatParm();
    56:    explicit CorruptCommand(bool bind = true);
    98:    NtSaveWhatParm();
    110:    explicit NtSaveCommand(bool bind = true);
    124:    SizesCommand();
    139:    TestcaseAction();
    160:    explicit TestcaseCommand(bool bind = true);
  W088 Argument could be const
    127/1:    virtual void DisplaySizes(CliThread& cli, bool all) const;
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    68:    return static_cast< NtTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W090 Function could be const
    82:    void Reset();
  W092 Function could be free
    45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp
  W106 Function does not invoke Debug::ft
    154: TestDatabase::State TestDatabase::GetState(const string& testcase)
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h
  W110 Override of Base.Display not found
    41: class TestDatabase : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h
  W026 Unused argument
    135/3:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
    140/1:    virtual void SocketFailed(SysSocket* socket) const { }
  W075 Virtual function is public
    98:    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
    106:    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
    125:    virtual void ReceiveBuff
    134:    virtual NodeBase::byte_t* HostToNetwork
    140:    virtual void SocketFailed(SysSocket* socket) const { }
  W088 Argument could be const
    135/1:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    79:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  W009 Pointer arithmetic
    197:       source += rcvd;
  W119 Argument passed by value is modified
    151/2:    (const IpPort& port, const byte_t* source, size_t size) const
    151/3:    (const IpPort& port, const byte_t* source, size_t size) const
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h
  W042 Member could be private
    87:    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  W050 Data is not private
    91:    const ipport_t port_;
    96:    IpPort* ipPort_;
    100:    SysIpL2Addr host_;
    104:    size_t recvs_;
    108:    SysIpL3Addr txAddr_;
    113:    SysIpL3Addr rxAddr_;
    117:    NodeBase::TimePoint time_;
    121:    NodeBase::byte_t* buffer_;
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    73:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
    92:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
    133:          Memory::Realloc(buff_, BuffSize(newSize), MemDynamic);
  W009 Pointer arithmetic
    145:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    145:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    246:       bytes = buff_ + hdrSize_;
    272:    bytes += hdrSize_;
  W106 Function does not invoke Debug::ft
    207: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h
  W009 Pointer arithmetic
    101:    NodeBase::byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  W060 Base class constructor is public
    50:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
    54:    IpBuffer(const IpBuffer& that);
  W075 Virtual function is public
    114:    virtual size_t PayloadSize() const;
    133:    virtual bool AddBytes
  W082 Adjacent arguments have the same type
    50:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  W092 Function could be free
    168:    static size_t BuffSize(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    304:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W099 Line contains adjacent spaces
    58:    CounterPtr       recvs_;
    59:    AccumulatorPtr   bytesRcvd_;
    62:    CounterPtr       discards_;
    63:    CounterPtr       rejects_;
    64:    CounterPtr       sends_;
    65:    AccumulatorPtr   bytesSent_;
    67:    CounterPtr       overflows_;
  W106 Function does not invoke Debug::ft
    210: size_t IpPort::Discards() const
  W110 Override of Base.Display not found
    52: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h
  W053 Data could be const
    194:    NodeBase::Q1Link link_;
  W075 Virtual function is public
    99:    virtual SysTcpSocket* CreateAppSocket();
    138:    virtual void DisplayStats
  W077 Virtual function has no overrides
    138:    virtual void DisplayStats
  W090 Function could be const
    176:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W082 Adjacent arguments have the same type
    46:    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp
  W106 Function does not invoke Debug::ft
    289: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W110 Override of Base.Display not found
    50: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    74:    auto fake = reinterpret_cast< const IpService* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h
  W032 Unused function
    85:    virtual NodeBase::CliText* CreateText() const = 0;
  W053 Data could be const
    150:    NodeBase::RegCell sid_;
  W065 Base class virtual destructor is not public
    137:    virtual ~IpService();
  W075 Virtual function is public
    57:    virtual NodeBase::c_string Name() const = 0;
    61:    virtual IpProtocol Protocol() const = 0;
    66:    virtual ipport_t Port() const = 0;
    70:    virtual NodeBase::Faction GetFaction() const = 0;
    74:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    78:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
    85:    virtual NodeBase::CliText* CreateText() const = 0;
    91:    virtual bool HasSharedSocket() const = 0;
    99:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W077 Virtual function has no overrides
    74:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    78:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  W090 Function could be const
    146:    virtual IpPort* CreatePort(ipport_t pid) = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    81: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h
  W032 Unused function
    48:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.cpp
  W007 Cast down the inheritance hierarchy
    94:    auto daemon = static_cast< TcpIoDaemon* >(reg->FindDaemon(name.c_str()));
    185:    auto daemon = static_cast< UdpIoDaemon* >(reg->FindDaemon(name.c_str()));
C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.h
  W092 Function could be free
    72:    static std::string MakeName(ipport_t port);
    119:    static std::string MakeName(ipport_t port);
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h
  W060 Base class constructor is public
    39:    NwClearWhatParm();
    54:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    97:    NwIncludeWhatParm();
    110:    explicit NwIncludeCommand(bool bind = true);
    127:    explicit NwQueryCommand(bool bind = true);
    142:    NwStatusCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h
  W042 Member could be private
    55:    bool PeersEmpty() const;
    59:    bool PortsEmpty() const;
  W110 Override of Base.Display not found
    40: class NwTracer : public NodeBase::Permanent
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h
  W032 Unused function
    54:    SysIpL2Addr(SysIpL2Addr&& that) = default;
    59:    SysIpL2Addr& operator=(SysIpL2Addr&& that) = default;
  W060 Base class constructor is public
    40:    SysIpL2Addr();
    44:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    49:    explicit SysIpL2Addr(const std::string& text);
    53:    SysIpL2Addr(const SysIpL2Addr& that) = default;
    54:    SysIpL2Addr(SysIpL2Addr&& that) = default;
  W075 Virtual function is public
    79:    virtual std::string to_str() const;
  W092 Function could be free
    67:    static SysIpL2Addr LoopbackAddr();
    83:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W056 Default constructor invoked: POD members not initialized
    54:    in_addr result;
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W032 Unused function
    65:    SysIpL3Addr(SysIpL3Addr&& that) = default;
    70:    SysIpL3Addr& operator=(SysIpL3Addr&& that) = default;
    117:    bool operator!=(const SysIpL3Addr& that) const;
  W060 Base class constructor is public
    40:    SysIpL3Addr();
    45:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    51:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    59:    SysIpL3Addr
    64:    SysIpL3Addr(const SysIpL3Addr& that) = default;
    65:    SysIpL3Addr(SysIpL3Addr&& that) = default;
  W082 Adjacent arguments have the same type
    59:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    60:          auto netaddr = (sockaddr_in*) info->ai_addr;
    118:       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  W056 Default constructor invoked: POD members not initialized
    50:    addrinfo hints;
    109:    sockaddr_in addr;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp
  W106 Function does not invoke Debug::ft
    138: void SysSocket::SetStatus(bool ok, const string& err)
    162: bool SysSocket::SetTracing(bool tracing)
    170: bool SysSocket::Trace(TraceStatus status)
    181: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h
  W032 Unused function
    50: uint64_t htonll(uint64_t hostllong);
    53: uint64_t ntohll(uint32_t netllong);
  W043 Member could be protected
    99:    bool IsValid() const;
  W065 Base class virtual destructor is not public
    184:    virtual ~SysSocket();
  W075 Virtual function is public
    91:    virtual IpProtocol Protocol() const { return IpAny; }
    117:    virtual AllocRc SetService(const IpService* service, bool shared);
    121:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W092 Function could be free
    140:    static void StopLayer();
    211:    static void SetStatus(bool ok, const std::string& err);
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    106:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    241:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    248:       (char*) &max, &maxsize) == SOCKET_ERROR)
    258:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    265:       (char*) &max, &maxsize) == SOCKET_ERROR)
  W015 #include not sorted in standard order
    27: #include <windows.h>
  W056 Default constructor invoked: POD members not initialized
    70:    sockaddr_in addr;
    284:    WSAData wsaData;
  W106 Function does not invoke Debug::ft
    41: uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
    43: uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
    45: uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
    47: uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
    49: uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
    51: uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp
  W119 Argument passed by value is modified
    265/1: SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h
  W032 Unused function
    134:    bool LocAddr(SysIpL3Addr& locAddr);
    190:    IpBuffer* IcMsg() const { return icMsg_; }
  W042 Member could be private
    88:    NodeBase::word Connect(const SysIpL3Addr& remAddr);
    129:    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
    181:    bool IsOpen() const;
  W075 Virtual function is public
    173:    virtual void Acquire();
    177:    virtual void Release();
  W077 Virtual function has no overrides
    173:    virtual void Acquire();
    177:    virtual void Release();
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    47:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    75:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    136:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    243:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
    299:       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
    309:       (char*) &val, &valsize) == SOCKET_ERROR)
  W006 reinterpret_cast
    225:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
    270:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  W007 Cast down the inheritance hierarchy
    296:    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  W056 Default constructor invoked: POD members not initialized
    44:    sockaddr_in peer;
    69:    sockaddr_in peer;
    133:    sockaddr_in host;
    240:    sockaddr_in peer;
  W057 Default constructor invoked
    168:    std::unique_ptr< pollfd[] > list(new pollfd[size]);
  W119 Argument passed by value is modified
    105/1: bool SysTcpSocket::Listen(size_t backlog)
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h
  W042 Member could be private
    73:    NodeBase::word SendTo
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    50:          (char*) &max, &maxsize) == SOCKET_ERROR)
    79:       size, 0, (sockaddr*) &peer, &peersize);
    117:       size, 0, (sockaddr*) &peer, peersize);
  W006 reinterpret_cast
    78:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    116:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W056 Default constructor invoked: POD members not initialized
    69:    sockaddr_in peer;
    101:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    179:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    189:    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
    294:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    459:    auto sock = static_cast< SysTcpSocket* >(socket);
  W106 Function does not invoke Debug::ft
    479: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h
  W042 Member could be private
    76:    void Unblock() override;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    69:    auto thread = static_cast< TcpIoThread* >(GetThread());
    75:       thread = static_cast< TcpIoThread* >(CreateIoThread());
    81:    auto svc = static_cast< const TcpIpService* >(GetService());
    112:    auto svc = static_cast< const TcpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h
  W042 Member could be private
    86:    IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    40:    virtual bool AcceptsConns() const { return true; }
    45:    virtual size_t MaxConns() const = 0;
    50:    virtual size_t MaxBacklog() const = 0;
    54:    virtual bool Keepalive() const { return false; }
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    118:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    122:       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
    255:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h
  W042 Member could be private
    59:    void Unblock() override;
  W090 Function could be const
    79:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    60:    auto svc = static_cast< const UdpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h
  W042 Member could be private
    59:    IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    82: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    80: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    98: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    80: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    514: void PotsCircuit::Trace(const SignalEntry& entry)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h
  W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W032 Unused function
    91:    bool IsRinging() const { return ringing_; }
    95:    bool CanFlash() const { return flash_; }
    100:    Cause::Ind GetCause() const { return cause_; }
  W042 Member could be private
    132:    void ResetCircuit();
  W054 Data could be const pointer
    220:    PotsProfile* profile_;
  W056 Default constructor invoked: POD members not initialized
    168:    struct SignalEntry
    232:    SignalEntry trace_[TraceSize];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    77: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    78: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    86:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    69:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    39: using namespace NodeBase;
  W026 Unused argument
    93/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W042 Member could be private
    69:    Id Fid() const { return Id(fid_.GetId()); }
    77:    c_string FullName() const { return name_; }
    81:    bool CanBeDeactivated() const { return deactivation_; }
    97:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    114:    virtual ~PotsFeature();
  W075 Virtual function is public
    92:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    109:    PotsFeature(PotsFeature::Id fid, bool deactivation,
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    98:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    60/1:    virtual bool Deactivate(PotsProfile& profile);
    88/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W042 Member could be private
    64:    PotsFeature::Id Fid() const { return fid_; }
    68:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    96:    Q1Link link_;
  W065 Base class virtual destructor is not public
    81:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    55:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    60:    virtual bool Deactivate(PotsProfile& profile);
  W077 Virtual function has no overrides
    88:    virtual bool Unsubscribe(PotsProfile& profile);
  W088 Argument could be const
    55/1:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    150: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W090 Function could be const
    58:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    113: void DnRouteFeatureProfile::SetActive(bool on)
    121: void DnRouteFeatureProfile::SetDN(Address::DN dn)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h
  W020 Using statement in header
    29: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    85: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W053 Data could be const
    59:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    446:       auto mep = static_cast< MediaEndpt* >(obj);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h
  W020 Using statement in header
    29: using namespace SessionTools;
  W022 Add using statement
    1: namespace NodeBase
  W060 Base class constructor is public
    40:    PbSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h
  W020 Using statement in header
    36: using namespace NodeBase;
    37: using namespace CallBase;
  W022 Add using statement
    1: namespace SessionBase
  W090 Function could be const
    104:    void SetState(const ProtocolSM* psm, State state);
    114:    bool SetObjAddr(const MsgPort& port);
  W110 Override of Base.Display not found
    77:    struct PotsProfileDynamic : public Persistent
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    115: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    569:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    736:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    857:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    945:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    584:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    643:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    750:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    776:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    870:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    958:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    581:    id_t             index;
    582:    word             sid, ind;
    584:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    642:    TestRc            rc;
    643:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    645:    id_t              index;
    646:    word              sid, ind;
    748:    word           port;
    750:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    775:    TestRc          rc;
    776:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    777:    word            port;
    869:    TestRc        rc;
    870:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    872:    bool          ring = false;
    873:    auto          exists = false;
    957:    TestRc        rc;
    958:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    960:    string        scan;
    961:    auto          digits = false;
    962:    auto          flash = false;
    963:    auto          exists = false;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h
  W020 Using statement in header
    46: using namespace NodeBase;
    47: using namespace SessionBase;
    48: using namespace MediaBase;
    49: using namespace CallBase;
  W028 Unused data
    106:    static const Id LastId    = NextId + 9;  // range constant
    134:    static const Id LastId   = NextId + 7;  // range constant
  W032 Unused function
    292:    MediaInfo* AddMedia(const MediaInfo& media);
    446:    void InjectFinalMsg() override;
  W043 Member could be protected
    268:    explicit PotsMessage(SbIpBufferPtr& buff);
  W060 Base class constructor is public
    268:    explicit PotsMessage(SbIpBufferPtr& buff);
    272:    PotsMessage(ProtocolSM* psm, size_t size);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    75: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    94: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp
  W015 #include not sorted in standard order
    64: #include "AnModule.h"
  W032 Unused function
    104: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
  W106 Function does not invoke Debug::ft
    94: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
  W106 Function does not invoke Debug::ft
    90: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    618:    auto fake = reinterpret_cast< const Context* >(&local);
    925:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    806:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    921:             (m)->FindParm(Parameter::Timeout);
  W106 Function does not invoke Debug::ft
    355: void Context::Dump() const
    992: bool Context::TraceOn()
    1002: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    738:    Debug::ft(Context_ProcessWork);
  W119 Argument passed by value is modified
    411/3: void Context::Enqueue(Q2Way< Context >& whichq, MsgPriority prio, bool henq)
    732/1: void Context::ProcessWork(InvokerThread* inv)
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h
  W032 Unused function
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
  W037 Member hides inherited name
    166:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    313:    NodeBase::Q2Link link_;
    337:    NodeBase::Faction faction_;
  W056 Default constructor invoked: POD members not initialized
    224:    struct MessageEntry
    361:    MessageEntry trace_[TraceSize];
  W065 Base class virtual destructor is not public
    188:    virtual ~Context();
  W075 Virtual function is public
    98:    virtual ContextType Type() const = 0;
    102:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    106:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    110:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    132:    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  W088 Argument could be const
    292/1:    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  W090 Function could be const
    158:    bool StopTimer(const Base& owner, TimerId tid);
    196:    virtual void EndOfTransaction() { }
  W092 Function could be free
    119:    static void Kill(const std::string& errstr, NodeBase::debug64_t offset);
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp
  W106 Function does not invoke Debug::ft
    143: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h
  W042 Member could be private
    112:    virtual bool SaveContext();
    123:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    129:    virtual void FreeContext(bool freeMsg);
    157:    virtual bool Save();
    161:    virtual Event* Restore(EventHandler::Rc& rc);
    165:    virtual void Free();
  W075 Virtual function is public
    112:    virtual bool SaveContext();
    123:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    129:    virtual void FreeContext(bool freeMsg);
  W092 Function could be free
    54:    static bool IsValidId(Id eid)
    70:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h
  W065 Base class virtual destructor is not public
    124:    virtual ~EventHandler();
  W075 Virtual function is public
    115:    virtual Rc ProcessEvent
  W092 Function could be free
    84:    static bool AppCanRegister(Id ehid)
    92:    static bool AppCanUse(Id ehid)
  W111 Override of Object.Patch not found
    48: class EventHandler : public NodeBase::Immutable
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    203:    auto fake = reinterpret_cast< const Factory* >(&local);
  W099 Line contains adjacent spaces
    51:    CounterPtr       icMsgsIntra_;
    52:    CounterPtr       icMsgsInter_;
    54:    CounterPtr       ogMsgsIntra_;
    55:    CounterPtr       ogMsgsInter_;
    57:    CounterPtr       contexts_;
    58:    CounterPtr       msgsDeleted_;
    59:    CounterPtr       ctxsDeleted_;
  W106 Function does not invoke Debug::ft
    220: size_t Factory::DiscardedContextCount() const
    227: size_t Factory::DiscardedMessageCount() const
  W110 Override of Base.Display not found
    45: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    91:    Id Fid() const { return Id(fid_.GetId()); }
  W026 Unused argument
    131/1:    virtual Message* AllocOgMsg(SignalId sid) const;
    151/1:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    151/2:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  W030 Unused enumerator
    80:       PortAllocFailed,      // failed to create PSM for context
  W032 Unused function
    231:    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  W042 Member could be private
    151:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  W065 Base class virtual destructor is not public
    215:    virtual ~Factory();
  W075 Virtual function is public
    125:    virtual NodeBase::CliText* CreateText() const;
    131:    virtual Message* AllocOgMsg(SignalId sid) const;
    138:    virtual bool InjectMsg(Message& msg) const;
    144:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    151:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    161:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    183:    virtual void DisplayStats
  W077 Virtual function has no overrides
    183:    virtual void DisplayStats
  W082 Adjacent arguments have the same type
    168:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W088 Argument could be const
    161/1:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  W090 Function could be const
    161:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    257:    virtual Rc ReceiveMsg
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp
  W106 Function does not invoke Debug::ft
    157: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h
  W032 Unused function
    47:    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
    66:    GlobalAddress(GlobalAddress&& that) = default;
    71:    GlobalAddress& operator=(GlobalAddress&& that) = default;
    87:    bool operator!=(const GlobalAddress& that) const;
  W082 Adjacent arguments have the same type
    51:    GlobalAddress
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
  W106 Function does not invoke Debug::ft
    92: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    217:    auto fake = reinterpret_cast< const Initiator* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h
  W053 Data could be const
    134:    NodeBase::Q1Link link_;
  W065 Base class virtual destructor is not public
    96:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    91:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W088 Argument could be const
    105/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    199:          reinterpret_cast< word* >(&poolSize_), 1,
    240:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    194:    invokersCfg_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    556:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W099 Line contains adjacent spaces
    71:    CounterPtr       requeues_;
    72:    CounterPtr       trojans_;
    73:    CounterPtr       lockouts_;
  W106 Function does not invoke Debug::ft
    733: void InvokerPool::RecordDelay(MsgPriority prio, const Duration& delay) const
    832: size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
    840: Duration InvokerPool::WorkQMaxDelay(MsgPriority prio) const
    848: size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  W110 Override of Base.Display not found
    64: class InvokerPoolStats : public Dynamic
    105: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    72:       { return NodeBase::Faction(faction_.GetId()); }
  W042 Member could be private
    95:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    120:    virtual ~InvokerPool();
  W075 Virtual function is public
    90:    virtual void DisplayStats
  W077 Virtual function has no overrides
    90:    virtual void DisplayStats
  W090 Function could be const
    158:    void KickThread();
    162:    Context* FindWork();
    181:    void Requeue(Context& ctx);
    189:    void ScheduledOut();
  W092 Function could be free
    193:    static bool GenerateLog(Factory::Rc rc);
    205:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    94:       auto p = reg->Pool(Faction(id));
  W106 Function does not invoke Debug::ft
    182: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    132:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W106 Function does not invoke Debug::ft
    121: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h
  W042 Member could be private
    57:    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
    65:    static ptrdiff_t CellDiff2();
  W053 Data could be const
    132:    NodeBase::RegCell iid_;
    158:    static NodeBase::word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h
  W032 Unused function
    51:    LocalAddress(LocalAddress&& that) = default;
    56:    LocalAddress& operator=(LocalAddress&& that) = default;
    65:    bool operator!=(const LocalAddress& that) const;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp
  W106 Function does not invoke Debug::ft
    251: MsgDirection Message::Dir() const
    340: ProtocolId Message::GetProtocol() const
    375: SignalId Message::GetSignal() const
    432: MsgHeader* Message::Header() const
  W119 Argument passed by value is modified
    628/1: bool Message::Retrieve(ProtocolSM* psm)
    703/1: bool Message::Send(Route route)
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h
  W029 Unused enum
    72:    enum Location
  W030 Unused enumerator
    88:       IllegalSignal,   // illegal signal found              0000  sid
    89:       IllegalParm,     // illegal parameter found          index  pid
    90:       IncompleteParm,  // parameter too short              index  pid
    91:       MissingParm,     // mandatory parameter missing       0000  pid
    92:       Overflow,        // last parameter extends past end  index  pid
    93:       Trampled         // last parameter trampled fence    index  pid
  W032 Unused function
    181:    Message* FindSignal(SignalId sid) const;
  W042 Member could be private
    329:    virtual void Handled(bool retain);
    333:    virtual bool SendFailure
  W043 Member could be protected
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    241:    NodeBase::MsgDirection Dir() const;
  W075 Virtual function is public
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    262:    virtual bool Send(Route route);
    266:    virtual bool Restore();
  W077 Virtual function has no overrides
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    266:    virtual bool Restore();
    316:    virtual void Refresh();
    329:    virtual void Handled(bool retain);
    333:    virtual bool SendFailure
    342:    virtual void ClearContext() const;
  W088 Argument could be const
    132/1:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  W090 Function could be const
    110:    void SetSignal(SignalId sid);
    114:    void SetJoin(bool join);
    225:    void SetProtocol(ProtocolId prid);
    229:    void SetPriority(MsgPriority prio);
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    359:    void SetRxAddr(const LocalAddress& rxaddr);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    84:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h
  W042 Member could be private
    60:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W092 Function could be free
    60:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h
  W042 Member could be private
    51:    uint8_t        spare    : 6;   // reserved for future use
  W099 Line contains adjacent spaces
    42:    LocalAddress   txAddr;         // source address
    43:    LocalAddress   rxAddr;         // destination address
    44:    MsgPriority    priority : 2;   // message's priority
    45:    bool           initial  : 1;   // true for initial message
    46:    bool           final    : 1;   // true for final message
    47:    bool           join     : 1;   // true to create PSM and join root SSM
    48:    bool           self     : 1;   // true for message to self
    49:    bool           injected : 1;   // true if sent by InjectCommand
    50:    bool           kill     : 1;   // true to kill context on arrival
    51:    uint8_t        spare    : 6;   // reserved for future use
    52:    Message::Route route    : 2;   // the route that the message took
    53:    ProtocolId     protocol : 16;  // message's protocol
    54:    SignalId       signal   : 16;  // message's signal
    55:    uint16_t       length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    79:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    155:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    219:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    276:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    357:    return const_cast< MsgPort* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h
  W092 Function could be free
    180:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    108:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W106 Function does not invoke Debug::ft
    200: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    82:    Id Pid() const { return Id(pid_.GetId()); }
  W030 Unused enumerator
    118:       StreamContainsIllegalParm,
  W032 Unused function
    86:    ProtocolId Prid() const { return prid_; }
  W065 Base class virtual destructor is not public
    176:    virtual ~Parameter();
  W075 Virtual function is public
    96:    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
    105:    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
    134:    virtual TestRc InjectMsg
    147:    virtual TestRc VerifyMsg
  W092 Function could be free
    152:    static NodeBase::c_string ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    94:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W106 Function does not invoke Debug::ft
    135: Parameter* Protocol::FirstParm() const
    148: Signal* Protocol::FirstSignal() const
    161: Parameter* Protocol::GetParameter(ParameterId pid) const
    173: Signal* Protocol::GetSignal(SignalId sid) const
    185: void Protocol::NextParm(Parameter*& parm) const
    198: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h
  W032 Unused function
    79:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W065 Base class virtual destructor is not public
    135:    virtual ~Protocol();
  W075 Virtual function is public
    79:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    111:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h
  W026 Unused argument
    167/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W032 Unused function
    68:    bool IsLowermost() const { return lower_ == nullptr; }
  W042 Member could be private
    112:    virtual ProtocolLayer* JoinPeer
    119:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W043 Member could be protected
    64:    bool IsUppermost() const { return upper_ == nullptr; }
    89:    virtual FactoryId GetFactory() const = 0;
  W065 Base class virtual destructor is not public
    143:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    52:    virtual MsgPort* Port() const = 0;
    56:    virtual ProtocolSM* UppermostPsm() const = 0;
    89:    virtual FactoryId GetFactory() const = 0;
    93:    virtual Message::Route Route() const = 0;
    102:    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
    112:    virtual ProtocolLayer* JoinPeer
    119:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W090 Function could be const
    184:    virtual Message* UnwrapMsg(Message& msg);
    191:    virtual Message* WrapMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
  W106 Function does not invoke Debug::ft
    82: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    438:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    694:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h
  W026 Unused argument
    301/1:    virtual void MsgHandled(Message& msg) { }
    307/1:    virtual void RestoreIcMsg(Message& msg) { }
    313/1:    virtual void RefreshMsg(Message& msg) { }
  W030 Unused enumerator
    96:       SignalUnknown,     // signal not recognized
    98:       ParameterUnknown,  // parameter not recognized
    99:       ParameterInvalid,  // parameter not valid for this signal
  W032 Unused function
    137:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    195:    bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    325:    virtual void InjectFinalMsg();
  W042 Member could be private
    68:    typedef uint8_t Priority;
    251:    bool SendMsg(Message& msg) override;
  W043 Member could be protected
    76:    enum IncomingRc
    85:    enum OutgoingRc
    131:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W053 Data could be const
    372:    FactoryId fid_;
  W077 Virtual function has no overrides
    241:    virtual void SetState(StateId stid);
    296:    virtual Priority GetPriority() const { return NormalPriority; }
    301:    virtual void MsgHandled(Message& msg) { }
    307:    virtual void RestoreIcMsg(Message& msg) { }
    313:    virtual void RefreshMsg(Message& msg) { }
  W090 Function could be const
    118:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h
  W032 Unused function
    86:    void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    49:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h
  W026 Unused argument
    50/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    50:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.cpp
  W007 Cast down the inheritance hierarchy
    110:    auto daemon = static_cast< InvokerDaemon* >(reg->FindDaemon(name.c_str()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.h
  W092 Function could be free
    65:    static std::string MakeName(NodeBase::Faction faction);
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h
  W032 Unused function
    91:    StateId CurrState() const { return currState_; }
    104:    Message* SavedMsg() const { return savedMsg_; }
    213:    StateId CurrState() const { return currState_; }
    217:    StateId NextState() const { return nextState_; }
    358:    bool IsInitiation() const { return initiation_; }
    369:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    50:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    126:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    140:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h
  W111 Override of Object.Patch not found
    40: class SbAnalyzeMessage : public EventHandler
    54: class SbAnalyzeSap : public EventHandler
    68: class SbAnalyzeSnp : public EventHandler
    82: class SbForceTransition : public EventHandler
    96: class SbInitiationReq : public EventHandler
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    753:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    702:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    820:       auto msg = static_cast< Message* >(obj);
    907:       auto port = static_cast< MsgPort* >(obj);
    1119:       auto psm = static_cast< ProtocolSM* >(obj);
    1351:       auto ssm = static_cast< ServiceSM* >(obj);
    1564:       auto tmr = static_cast< Timer* >(obj);
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h
  W028 Unused data
    55:    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
    85:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    82:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    112:    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    65:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    77:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h
  W075 Virtual function is public
    44:    bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    62:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    226:       auto port = static_cast< MsgPort* >(obj);
    287:    auto psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
    304:       psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  W106 Function does not invoke Debug::ft
    409: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h
  W110 Override of Base.Display not found
    192: class TimerPool : public NodeBase::ObjectPool
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    141:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    146:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    466:    width -= col_t(label.size());
  W007 Cast down the inheritance hierarchy
    353:          bt = static_cast< BuffTrace* >(rec);
    850:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    853:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    880:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W119 Argument passed by value is modified
    337/1:    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h
  W042 Member could be private
    528:    const StateId stid_;
  W050 Data is not private
    490:    ServiceId owner_;
    494:    const EventId eid_;
    524:    const ServiceId sid_;
    528:    const StateId stid_;
    532:    const EventHandler::Rc rc_;
  W060 Base class constructor is public
    466:    EventTrace(Id rid, const Event& evt);
    511:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    172:    static BuffTrace* NextIcMsg
    482:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W092 Function could be free
    241:    static std::string OutputId(const std::string& label, NodeBase::id_t id);
    482:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h
  W082 Adjacent arguments have the same type
    128:    NodeBase::TraceRc SelectSignal
    182:       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  W110 Override of Base.Display not found
    113: class SbTracer : public NodeBase::Permanent
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    289:    auto fake = reinterpret_cast< const Service* >(&local);
  W106 Function does not invoke Debug::ft
    379: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    62:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    128:    bool Disable();
    132:    bool Enable();
  W042 Member could be private
    76:    static bool IsValidPortId(PortId pid)
    118:    bool IsModifiable() const { return modifiable_; }
    122:    bool IsModifier() const { return modifier_; }
  W043 Member could be protected
    66:    typedef ServicePortId PortId;
    84:    virtual NodeBase::c_string PortName(PortId pid) const;
  W065 Base class virtual destructor is not public
    183:    virtual ~Service();
  W075 Virtual function is public
    84:    virtual NodeBase::c_string PortName(PortId pid) const;
    114:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    178:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W092 Function could be free
    76:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    82: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp
  W004 C-style cast
    782:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    784:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  W007 Cast down the inheritance hierarchy
    466:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    470:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    471:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    522:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    528:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    530:             (sapEvent)->CurrInitiator();
    782:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    784:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
    887:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    891:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    954:                (initEvent)->GetModifier();
    994:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  W106 Function does not invoke Debug::ft
    321: Service* ServiceSM::GetService() const
  W119 Argument passed by value is modified
    410/1: EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
    854/2:    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
    922/2:    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h
  W026 Unused argument
    79/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    187/1:       (Event& currEvent, Event*& nextEvent);
    187/2:       (Event& currEvent, Event*& nextEvent);
  W032 Unused function
    132:    bool HasTriggered(TriggerId tid) const;
  W042 Member could be private
    95:    StateId NextState() const { return nextState_; }
  W065 Base class virtual destructor is not public
    167:    virtual ~ServiceSM();
  W075 Virtual function is public
    67:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    73:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    79:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    100:    virtual void SetNextState(StateId stid);
    107:    virtual void PsmDeleted(ProtocolSM& exPsm);
    121:    virtual void SetNextSap(TriggerId sap);
    127:    virtual void SetNextSnp(TriggerId snp);
    139:    virtual void MorphToService(ServiceId sid);
  W077 Virtual function has no overrides
    139:    virtual void MorphToService(ServiceId sid);
  W088 Argument could be const
    107/1:    virtual void PsmDeleted(ProtocolSM& exPsm);
  W090 Function could be const
    186:    virtual EventHandler::Rc ProcessInitNack
    235:    EventHandler::Rc ProcessSsmqSap
    246:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    81:    auto fake = reinterpret_cast< const Signal* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    78:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    82:    ProtocolId Prid() const { return prid_; }
  W065 Base class virtual destructor is not public
    112:    virtual ~Signal();
  W075 Virtual function is public
    89:    virtual NodeBase::CliText* CreateText() const;
  W092 Function could be free
    63:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    99:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h
  W092 Function could be free
    86:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h
  W026 Unused argument
    48/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    42:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    48:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    56:    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    204:    auto fake = reinterpret_cast< const State* >(&local);
  W106 Function does not invoke Debug::ft
    133: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    168: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    251: EventHandlerId State::GetHandler(EventId eid) const
    259: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    57:    Id Stid() const { return Id(stid_.GetId()); }
  W032 Unused function
    61:    ServiceId Sid() const { return sid_; }
  W065 Base class virtual destructor is not public
    94:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h
  W027 Unused class
    37: class TextTlvMessage : public TlvMessage
  W032 Unused function
    58:    explicit TextTlvMessage(SbIpBufferPtr& text);
    62:    TextTlvMessage(ProtocolSM* psm, size_t size);
    68:    bool Receive();
  W077 Virtual function has no overrides
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
  W090 Function could be const
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    198:    auto fake = reinterpret_cast< const Timer* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h
  W037 Member hides inherited name
    52:    static ptrdiff_t LinkDiff();
  W042 Member could be private
    52:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    134:    TimerId tid_;
    146:    NodeBase::Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    120:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h
  W111 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W006 reinterpret_cast
    148:          auto psm = reinterpret_cast< const Base* >(t->Psm());
    160:          auto psm = reinterpret_cast< const Base* >(t->Psm());
  W119 Argument passed by value is modified
    79/1: Timer::QId TimerRegistry::CalcQId(secs_t secs) const
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp
  W106 Function does not invoke Debug::ft
    66: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h
  W007 Cast down the inheritance hierarchy
    68:       auto& tlvmsg = static_cast< TlvMessage& >(msg);
    100:       auto& tlvmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    181:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    277:    return (Fence*) fence;
    435:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    70:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    503:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W009 Pointer arithmetic
    181:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    276:    auto fence = layout->bytes + layout->header.length;
  W056 Default constructor invoked: POD members not initialized
    198:    ParmIterator pit;
    308:    ParmIterator pit;
    328:    ParmIterator pit;
    389:    ParmIterator locpit;
  W119 Argument passed by value is modified
    246/2: TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h
  W006 reinterpret_cast
    88:       return reinterpret_cast< T* >(pptr->bytes);
    102:       auto dest = reinterpret_cast< T* >(pptr->bytes);
    137:       parm = (pptr == nullptr ? nullptr : reinterpret_cast< T* >(pptr->bytes));
    264:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W032 Unused function
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    167:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    173:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    187:    TlvParmPtr AddBytes
    194:    TlvParmPtr CopyParm
    247:    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
    254:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    269:    size_t ParmOffset(ParmIterator& pit) const;
  W042 Member could be private
    156:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    161:    TlvParmPtr NextParm(ParmIterator& pit) const;
    182:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    241:    typedef uint16_t Fence;
    259:    virtual void AddFence();
    263:    TlvMsgLayout* TlvLayout() const
    274:    Fence* FencePtr() const;
    278:    void CheckFence() const;
  W056 Default constructor invoked: POD members not initialized
    309:    struct ParmIterator
  W060 Base class constructor is public
    50:    explicit TlvMessage(SbIpBufferPtr& buff);
    54:    TlvMessage(ProtocolSM* psm, size_t size);
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W075 Virtual function is public
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    182:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    199:    virtual void DeleteParm(TlvParmLayout& parm);
  W077 Virtual function has no overrides
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    182:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    199:    virtual void DeleteParm(TlvParmLayout& parm);
    254:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    259:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    113:    template< class T > T* CopyType
  W088 Argument could be const
    199/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W092 Function could be free
    221:    static size_t Pad(size_t size)
  W119 Argument passed by value is modified
    114/3:       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    75:    auto& tmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h
  W032 Unused function
    71:    static Id ExtractPid(const TlvParmLayout& parm);
  W044 Typedef of pointer type
    58: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    59: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W092 Function could be free
    71:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    70:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h
  W032 Unused function
    39:    SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h
  W042 Member could be private
    77:    static bool IsValidId(Id tid)
  W065 Base class virtual destructor is not public
    102:    virtual ~Trigger();
  W092 Function could be free
    77:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    61:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    64:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    101:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    117:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    119:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    139:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    154:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    155:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    170:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    172:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    178:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    199:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    227:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    257:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    274:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    298:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    313:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    327:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    342:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    357:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    359:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    378:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    399:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    414:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    430:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    447:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    448:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    465:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    479:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    481:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    511:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    526:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    527:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    542:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    543:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    564:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    583:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    598:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    600:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    625:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    654:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    669:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    685:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    701:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    703:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    724:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    739:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    755:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    757:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    774:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    801:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    820:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    835:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    854:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    869:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    885:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    887:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    896:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    924:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    925:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    963:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    979:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    995:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    996:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    1011:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    1012:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1046:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1067:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    75:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    80:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    88:       SetNPsm(static_cast< CipPsm& >(psm));
    92:       SetUPsm(static_cast< MediaPsm& >(psm));
    132:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    384: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    112:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    193:       auto pmsg = static_cast< const PotsMessage* >(msg);
    195:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    199:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    200:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    275:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    97:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    98:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    95:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    116:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    106:       return static_cast< PotsCallPsm* >(psm);
    178:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    213:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    206:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    266:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    289:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    305:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    286:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    291:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    293:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    314:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    315:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    367:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    394:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    474:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    476:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    489:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    511:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    525:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    531:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    537:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    571:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    574:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    629:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    636:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    652:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    660:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    678:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h
  W020 Using statement in header
    42: using namespace NodeBase;
    43: using namespace SessionBase;
    44: using namespace CallBase;
  W026 Unused argument
    61/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1465:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    449:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1166:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1203:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1273:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1300:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1314:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1380:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1424:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1967:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1968:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1997:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    2012:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2014:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2021:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    2118:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2120:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2121:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    2122:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2217:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2231:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2245:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2259:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2275:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2290:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2304:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2319:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2334:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2335:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2350:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2351:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2365:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2387:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    436/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W053 Data could be const
    187:    Cause::Ind cause_;
  W092 Function could be free
    456:    static EventHandler::Rc SendFacilityNack(PotsMuxPsm* npsm, ServiceId sid);
  W117 Line can merge with the next line and be under the length limit
    606:    BindEventHandler
    622:    BindEventHandler
    626:    BindEventHandler
    628:    BindEventHandler
    630:    BindEventHandler
    634:    BindEventHandler
    642:    BindEventHandler
    644:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    290:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    618:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    623:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    624:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    641:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    649:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    687:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    717:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    812:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    814:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    909:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    931:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    954:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    956:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    962:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    985:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    1010:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1011:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    1031:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1032:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1036:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1055:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1057:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1061:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1102:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1103:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1105:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1152:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W042 Member could be private
    252:    void StartTimer(TimerId tid, secs_t duration);
  W053 Data could be const
    149:    Facility::Ind ind_;
  W075 Virtual function is public
    257:    void Cancel() override;
  W117 Line can merge with the next line and be under the length limit
    443:    BindEventHandler
    484:    BindEventHandler
    486:    BindEventHandler
    500:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h
  W020 Using statement in header
    30: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    131:    auto& pssm = static_cast< BcSsm& >(*Parent());
    133:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    85:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    175:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    181:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    198:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    249:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    252:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    364:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    417:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    751:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    754:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    827:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    895:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    996:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    997:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1019:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1050:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1051:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1074:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    662:    BindEventHandler
    678:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h
  W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    156/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W032 Unused function
    75:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W042 Member could be private
    158:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    55:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    56:    auto msg = static_cast< CipMessage* >(ame.Msg());
    58:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    91:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    108:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    110:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    135:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    136:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    138:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    176:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    186:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    210:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    228:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    247:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    248:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    250:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    298:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    316:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    317:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    319:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    362:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    363:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    365:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    417:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    435:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    453:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    471:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    489:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    522:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    523:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    553:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    572:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    573:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    603:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    623:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    624:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    135:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    136:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    137:    auto          sid = msg->GetSignal();
    138:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    140:    CauseInfo*    cci;
    247:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    248:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    249:    auto          sid = msg->GetSignal();
    250:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    252:    CauseInfo*    cci;
    316:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    317:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    318:    auto          sid = msg->GetSignal();
    319:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    321:    CauseInfo*    cci;
    362:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    363:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    364:    auto          sid = msg->GetSignal();
    365:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    367:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h
  W020 Using statement in header
    28: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h
  W005 Functional cast
    62:    ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    44: using namespace CallBase;
    45: using namespace NetworkBase;
    46: using namespace NodeBase;
    47: using namespace SessionBase;
  W032 Unused function
    75:    CliText* CreateText() const override;
  W042 Member could be private
    422:    ProtocolSM* TimerPsm(TimerId tid) const;
  W092 Function could be free
    136:    static void SendRelease(const Message& msg1);
  W110 Override of Base.Display not found
    55: class PotsCallIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W042 Member could be private
    45:    typedef uint8_t Id;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    83:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    123: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    206: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
  W042 Member could be private
    50:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    86:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    204:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    253:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    297:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    327:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h
  W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
  W042 Member could be private
    93:    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
  W053 Data could be const
    162:    PotsTreatmentQueue::QId qid_;
    166:    Q1Link link_;
    195:    Tone::Id tone_;
    199:    secs_t duration_;
  W075 Virtual function is public
    143:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    191:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    193:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    436:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    463:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    465:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    470:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    542:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    545:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    605:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    625:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    654:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    659:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    661:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    682:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    683:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    379:    BindMsgAnalyzer
    391:    BindMsgAnalyzer
    393:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    77: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h
  W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
  W053 Data could be const
    128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    150:          tt = static_cast< const TransTrace* >(rec);
    158:          auto mt = static_cast< const MsgTrace* >(rec);
    711:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    728:             trans = static_cast< const TransTrace* >(rec);
    740:             return static_cast< const MsgTrace* >(rec);
    757:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    778:             trans = static_cast< const TransTrace* >(rec);
    785:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    946:          tt = static_cast< const TransTrace* >(rec);
    982:             mt = static_cast< const MsgTrace* >(rec);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W119 Argument passed by value is modified
    1079/1:    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h
  W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    97:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    86: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W053 Data could be const
    145:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    93:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    57: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W053 Data could be const
    85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    137:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace NodeTools
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h
  W020 Using statement in header
    29: using namespace NodeTools;
  W022 Add using statement
    1: namespace NodeBase
  W060 Base class constructor is public
    40:    StSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    69:    return static_cast< StTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W082 Adjacent arguments have the same type
    75:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W092 Function could be free
    52:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    506:    auto tpsm = static_cast< TestPsm* >(Psm());
    523:    auto tssm = static_cast< TestSsm* >(RootSsm());
    577:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    855:       SetTestPsm(static_cast< TestPsm* >(&psm));
    977:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    978:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    1016:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1025:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    1036:    auto& tssm = static_cast< TestSsm& >(ssm);
    1054:    auto& tssm = static_cast< TestSsm& >(ssm);
    1071:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1072:    auto& tssm = static_cast< TestSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    760:    BindMsgAnalyzer
    764:    BindEventHandler
    766:    BindEventHandler
    778:    BindMsgAnalyzer
    782:    BindEventHandler
    784:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h
  W020 Using statement in header
    43: using namespace NodeBase;
    44: using namespace SessionBase;
  W042 Member could be private
    265:    void UpdateTestPsm();
    345:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    351:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W090 Function could be const
    265:    void UpdateTestPsm();
