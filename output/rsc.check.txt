LINE COUNTS
   77383   source code not in one of the categories below
   40337   blank line
   17876   blank comment
   10386   comment at the top of a file (e.g. for the file's name or license info)
    7744   comment followed by repeated characters to draw a rule (e.g. //---- ...)
     158   comment followed by a character that classifies it (e.g. //c <text>)
   20288   comment not in one of the categories above (e.g. //  <text>)
       0   C-style comment
   15708   bare left brace
   13906   bare right brace
    1803   bare right brace with semicolon
    2160   access control
    4752   invocation of Debug::ft
     691   definition of an fn_name
    6223   #include directive
    1131   preprocessor directive other than #include
     939   using statement
  221485   TOTAL

WARNING COUNTS (* if supported by >fix)
  W004   123  C-style cast
  W005    50  Functional cast
  W006   118  reinterpret_cast
  W007   601  Cast down the inheritance hierarchy
  W008    44  Cast removes const qualification
  W009    15  Pointer arithmetic
* W015     3  #include not sorted in standard order
* W020   174  Using statement in header
* W022   201  Add using statement
  W026    67  Unused argument
  W027     8  Unused class
* W028    45  Unused data
* W029     1  Unused enum
* W030    20  Unused enumerator
* W032   189  Unused function
* W033     1  Unused typedef
* W035     1  No referent for friend declaration
  W037     9  Member hides inherited name
  W042   137  Member could be private
  W043    48  Member could be protected
  W044    13  Typedef of pointer type
* W048     2  Data is write-only
  W050    26  Data is not private
* W053    64  Data could be const
* W054     2  Data could be const pointer
* W055     1  Data need not be mutable
  W056     3  Implicit constructor invoked: POD members not initialized
  W060    72  Base class constructor is public
  W062     2  Member not included in member initialization list
* W064     8  Implicit destructor invoked
  W065    27  Base class virtual destructor is not public
  W075   399  Virtual function is public
* W077    57  Virtual function has no overrides
  W082    99  Adjacent arguments have the same type
* W088    39  Argument could be const
* W090    98  Function could be const
  W092   209  Function could be free
* W097    26  Line indentation is not a multiple of the standard value
* W099   293  Line contains adjacent spaces
  W102     9  Line length exceeds the standard maximum
  W103     1  Function not sorted in standard order
* W106   623  Function does not invoke Debug::ft
  W107    15  Function does not invoke Debug::ft as first statement
  W110    35  Override of Base.Display not found
* W111     5  Override of Object.Patch not found
* W117    28  Line can merge with the next line and be under the length limit
  W119    82  Argument passed by value is modified
  W120     6  Function returns non-const reference or pointer to member data
  W125     1  Non-const cast is not a downcast
  W127    90  Data could be free
* W130     9  Redundant scope
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE (i = informational)
W004 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(486):    Singleton< TrafficCallPool >::Extant()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1023):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(587):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(615):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(505):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(877):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1315):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1516):    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3966):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(369):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1494):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1697):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2394):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2475):    return (CxxScoped*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2488):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(190):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(543):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(671):    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1421):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1518):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(392):    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(108):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(108):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(227):    return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(91):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.cpp(151):       auto base = (const Base*) obj;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(310):    auto after = (ptr_t) next_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(323):       if(wrap && (after > (const_ptr_t) first)) return nullptr;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(330):       if(wrap || (after > (const_ptr_t) first)) return nullptr;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(503):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(503):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(505):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(505):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(285):    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(326):    heap_->state = (uint8_t*) (heapAddr + infoSize);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(358):          ReleaseBlock((HeapBlock*) addr, level);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(369):       ReserveBlock((HeapBlock*) addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(451):       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(496):    auto block = (const HeapBlock*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(621):                   if(block < (HeapBlock*) heap_)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(623):                   else if(block < (HeapBlock*) heap_->minAddr)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(692):    FreeBlock((HeapBlock*) addr, level);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(740):    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(820):       auto size = BlockToSize((const HeapBlock*) addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(823):       auto index = BlockToIndex((const HeapBlock*) addr, level);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(875):          if((HeapBlock*) block->link.prev->next != block)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(877):          if((HeapBlock*) block->link.next->prev != block)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(279):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, std::nothrow);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(303):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(353):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(389):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(806):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(874):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(899):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(929):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(930):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(934):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(977):    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(1005):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(136):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(136):          getptr2(prev, diff_);                   // put item after previous
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(158):       return (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(204):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(226):             getptr2(elem, diff_);           // start at the current item
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(239):       elem = (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(252):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(324):          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(333):          getptr2(elem, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(334):       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(357):       return (Q1Link*) getptr2(&elem, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(137):       return (T*) getptr1(item, diff_);    // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(166):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(184):             getptr2(elem, diff_);           // start at current element
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(189):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(200):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(210):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(228):             getptr2(elem, diff_);           // start at current element
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(233):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(244):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(333):       return (Q2Link*) getptr2(&elem, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(109):       registry_ = (T**) Memory::Alloc(size, mem);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(499):                auto cell = (RegCell*) getptr2(item, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(562):       return (RegCell*) getptr2(&item, diff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(576):       auto table = (T**) Memory::Alloc(size, mem_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(85):       reg->BindInstance((const Base**) &Instance_, type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(104):       reg->UnbindInstance((const Base**) &Instance_);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(213):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(158):       (_beginthreadex_proc_type) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(159):       (void*) client,                    // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(163):    auto handle = (HANDLE) result;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(319):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(154):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, std::nothrow);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(215):       Memory::Alloc(size * sizeof(TraceRecord*), MemPermanent, std::nothrow);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(219):       Memory::Alloc(size * sizeof(FunctionTrace), MemPermanent, std::nothrow);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(57):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemporary);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(79):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(71):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(88):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(125):          Memory::Realloc(buff_, BuffSize(newSize), MemDynamic);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(60):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(116):       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(106):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(227):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(234):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(244):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(251):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(45):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(71):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(128):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(237):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(299):       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(309):       (char*) &val, &valsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(48):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(83):       size, 0, (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(127):       size, 0, (sockaddr*) &peer, peersize);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(733):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(167):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(251):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(395):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(127):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(138):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(207):          << spaces(3) << LineType(t) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(218):          *stream << (Attrs_.at(Warning(w)).fixable ? '*' : SPACE);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(219):          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(220):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(1479):       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(1493):    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(558):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(606):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(655):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(661):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(666):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1137):    *cli.obuf << ": " << Warning(log.warning_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(152):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1380):          fp *= std::pow(10.0, int(num));
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1485):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(425): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(70):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(234):       auto type = MemoryType(m);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(727):    return BlockState(state);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(643):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1027):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1219):          auto type = MemoryType(memtype);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1233):          auto type = MemoryType(memtype);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1263):          auto type = MemoryType(m);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1274):          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1679):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(3456):       auto heap = Memory::AccessHeap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(212):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(94):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(353):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(526):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(587):    stream << indent << "buffsize : " << int(std::log2(size_));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3522):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3551):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(4437):    auto test = RecoveryThread::Test(index);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(51):    ipport_t GetPort() const { return ipport_t(GetValue()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(64):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(88):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(73):       { return NodeBase::Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(87):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(82):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(684):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(141):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(146):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(460):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(62):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(78):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(57):    Id Stid() const { return Id(stid_.GetId()); }
W006 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(67):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(68):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(476):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(89):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(126):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(113):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(445):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(214):    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(516):    auto& dm = reinterpret_cast< const DM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(517):    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(643):    auto& em = reinterpret_cast< const EM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(1296):       auto& rm = reinterpret_cast< const RM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2085):    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2157):    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2300):    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2304):    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(185):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(214):    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(100):       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(129):    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(62):       reinterpret_cast < const IM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(65):       reinterpret_cast < const RM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(68):       reinterpret_cast < const DM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(71):       reinterpret_cast < const FM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(74):       reinterpret_cast < const EM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(77):       reinterpret_cast < const BM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(198):       auto header = reinterpret_cast< const DipHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(208):       auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(227):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(233):       auto im = reinterpret_cast< IM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(241):       auto dm = reinterpret_cast< DM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(252):       auto em = reinterpret_cast< EM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(279):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(288):       auto rm = reinterpret_cast< RM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(299):       auto dm = reinterpret_cast< DM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(310):       auto em = reinterpret_cast< EM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(331):    auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(356):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(58):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(112):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(529):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(61):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(112):    auto fake = reinterpret_cast< const Alarm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(95):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(158):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(135):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(93):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(73):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(173):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(102):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(98):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.cpp(74):    auto fake = reinterpret_cast< const Daemon* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(133):    auto fake = reinterpret_cast< const Log* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(122):    SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(337):       where = reinterpret_cast< Entry* >(buff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(345):    SetNext(reinterpret_cast< Entry* >(after));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(382):          SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp(117):    auto fake = reinterpret_cast< const LogGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(65):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(114):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(525):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(114):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(71):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(84):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(80):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(96):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(41):    auto fake = reinterpret_cast< const SysMutex* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(34):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1213):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(76):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1740):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2240):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2771):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(280):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(72):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(221):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(270):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(82):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(126):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(84):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(94):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(84):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(565):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(726):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(841):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(925):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(577):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(867):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(199):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(217):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(229):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(128):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(108):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(88):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(75):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(62):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(287):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(81):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(204):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(189):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(106):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(64):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(459):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(88):       return reinterpret_cast< T* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(102):       auto dest = reinterpret_cast< T* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(137):       parm = (pptr == nullptr ? nullptr : reinterpret_cast< T* >(pptr->bytes));
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(277):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(66):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(89):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(90):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1363):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(80):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(189):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(85):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(91):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(87):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(132):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(145):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(165):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(175):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(65):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(106):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(154):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(41):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(43):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(458):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(486):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(772):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(802):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(932):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1287):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1292):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(382):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(827):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(359):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(360):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(362):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(391):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(400):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(427):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(531):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(672):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(704):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(909):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(914):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(69):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(139):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(156):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.cpp(94):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.cpp(121):       auto dir = static_cast< CodeDir* >(*d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.cpp(130):       auto dir = static_cast< CodeDir* >(*d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(78):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(207):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(246):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(269):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1189):       auto f = static_cast< const CodeFile* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1197):       auto f = static_cast< const CodeFile* >(*u);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1455):       auto file = static_cast< const CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1623):          auto file = static_cast< const CodeFile* >(*d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1914):       auto file = static_cast< const CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2068):       const auto& name = static_cast< const CodeFile* >(*f)->Name();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2226):                auto incl = static_cast< const CodeFile* >(*a);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2323):          auto file = static_cast< const CodeFile* >(*d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2352):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2374):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(156):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(178):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(230):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(255):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(286):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(312):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(340):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(383):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(431):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(458):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(492):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Items();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(499):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(539):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(566):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(738):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(766):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(884):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(964):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(991):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(1021):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(122):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(148):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(176):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(198):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(217):       auto item = static_cast< CxxScoped* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(238):       auto item = static_cast< CxxScoped* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(260):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(921):       auto func = static_cast< const Function* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(951):       auto data = static_cast< const Data* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(973):       auto func = static_cast< const Function* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(998):       auto func = static_cast< const Function* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1075):       auto cls = static_cast< const Class* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1099):       auto cls = static_cast< const Class* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(1130):          auto func = static_cast< const Function* >(item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(1159):             auto dir = static_cast< CodeDir* >(*d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(1182):             auto file = static_cast< CodeFile* >(*f);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(171):          static_cast< const Function* >(item)->IsInline())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1034):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1037):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1054):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2199):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2241):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2251):       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(952):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(870):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(883):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1543):          auto derived = static_cast< const Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1641):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1649):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1802):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1856):       auto type = static_cast< TypeSpec* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1866):       spec->SetReferent(static_cast< CxxScoped* >(item), nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2052):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(479):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(503):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(557):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(568):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(573):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(886):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2122):             static_cast< Function* >(tfunc)->SetTemplateParm();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2289):       auto func = static_cast< Function* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(720):       auto cls = static_cast<const Class*>(scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1426):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1540):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1554):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1596):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1611):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1767):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1808):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3009):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3742):       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3755):       auto i = FindArg(static_cast< const Argument* >(item), false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3802):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4513):    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4923):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4935):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5180):                auto item = static_cast< CxxNamed* >(args.front().item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5270):       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(100):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(163):    auto cls = static_cast< Class* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(176):    auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(218):       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(261):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(273):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(331):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(365):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(482):          ref = static_cast< const Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1175):    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1405):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1445):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1607):    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1832):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1845):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1884):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1889):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2064):    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2174):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2338):    ref_ = static_cast< ClassData* >(cls->FindData(name_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2983):    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(3149):          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(575):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(612):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(620):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(628):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(634):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(428):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(454):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(506):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(539):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(576):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(634):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(657):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(744):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1203):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1208):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1249):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1639):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1653):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1753):    auto cls = static_cast< Class* >(arg.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1791):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1812):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1833):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1857):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2054):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2056):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2407):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2471):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(260):    auto defn = static_cast< const Function* >(func->GetMate());
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(626):    DebugFtNames(static_cast< const Function* >(log.item_), flit, fvar);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1438):    auto decl = static_cast< const Data* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2121):    return FindSigEnd(static_cast< const Function* >(log.item_));
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2144):    auto cls = static_cast< const Class* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2409):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2901):    auto data = static_cast< const Data* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3074):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3479):    auto cls = static_cast< const Class* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3859):       ns = static_cast< const Namespace* >(ref)->OuterSpace();
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3924):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2091):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2095):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(397):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(433):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(728):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(801):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(840):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(968):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(969):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1130):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1418):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1584):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1609):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1637):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1845):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1953):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2003):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2009):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2292):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2298):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2441):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2483):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2558):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2969):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3015):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3257):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3283):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3372):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3406):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3468):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3764):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4120):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(201):    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(274):    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(327):    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(228):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(86):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(108):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(73):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(173):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(87):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(212):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(568):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(582):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(601):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(629):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(676):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(796):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(818):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(836):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(907):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(69):       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(67):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(441):          auto ft = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(472):          auto ft = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(193):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(62):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.cpp(86):    auto daemon = static_cast< TcpIoDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.cpp(163):    auto daemon = static_cast< UdpIoDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(296):    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(173):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(183):    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(284):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(447):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(65):    auto thread = static_cast< TcpIoThread* >(GetThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(71):       thread = static_cast< TcpIoThread* >(CreateIoThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(77):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(106):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(114):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(118):       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(247):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(53):    auto svc = static_cast< const UdpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(432):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(578):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(635):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(738):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(762):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(852):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(936):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(757):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(863):             (m)->FindParm(Parameter::Timeout);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(186):    invokersCfg_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(524):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(75):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(74):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(146):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(204):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(259):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(404):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(47):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.cpp(101):    auto daemon = static_cast< InvokerDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(50):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(120):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(134):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(798):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(883):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1089):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1313):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1520):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(103):    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(61):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(72):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(203):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(258):    auto psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(275):       psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(351):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(844):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(847):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(874):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(448):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(452):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(453):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(504):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(510):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(512):             (sapEvent)->CurrInitiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(764):             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(767):             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(865):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(869):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(932):                (initEvent)->GetModifier();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(972):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(95):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(68):       auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(100):       auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(67):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(58):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(61):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(96):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(109):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(111):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(128):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(140):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(141):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(156):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(158):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(164):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(185):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(210):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(237):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(251):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(272):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(284):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(296):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(308):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(320):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(322):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(339):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(358):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(370):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(383):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(397):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(398):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(412):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(424):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(426):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(453):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(466):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(478):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(479):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(497):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(514):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(526):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(528):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(551):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(577):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(589):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(602):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(615):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(617):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(635):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(647):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(663):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(665):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(682):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(707):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(723):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(736):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(752):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(765):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(781):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(783):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(792):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(817):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(818):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(854):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(868):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(882):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(883):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(896):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(897):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(929):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(950):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(75):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(80):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(88):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(92):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(128):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(79):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(79):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(104):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(179):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(181):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(185):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(186):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(253):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(87):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(108):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(96):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(162):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(197):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(184):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(242):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(263):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(276):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(53):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(55):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(53):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(55):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(53):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(55):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(258):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(263):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(265):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(284):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(285):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(329):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(354):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(432):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(434):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(447):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(469):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(483):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(489):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(495):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(525):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(528):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(583):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(590):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(604):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(612):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(628):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(449):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1076):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1113):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1183):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1208):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1220):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1280):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1322):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1842):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1843):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1870):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1882):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1884):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1891):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1985):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1987):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1988):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1989):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2082):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2094):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2106):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2118):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2132):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2144):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2156):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2168):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2180):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2181):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2193):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2194):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2206):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2226):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(286):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(558):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(563):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(564):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(579):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(587):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(619):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(647):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(734):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(736):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(829):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(851):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(871):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(873):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(879):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(902):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(925):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(926):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(944):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(945):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(949):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(968):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(970):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(974):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1015):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1016):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1018):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1063):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(114):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(116):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(80):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(154):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(160):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(190):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(233):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(236):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(336):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(389):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(689):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(692):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(757):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(819):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(915):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(916):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(936):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(961):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(962):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(983):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(56):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(57):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(59):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(105):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(107):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(132):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(171):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(181):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(202):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(217):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(236):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(237):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(239):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(284):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(302):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(303):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(305):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(348):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(349):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(351):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(400):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(415):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(430):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(445):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(460):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(491):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(492):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(519):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(535):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(536):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(563):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(581):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(582):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(78):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(236):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(275):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(301):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(187):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(189):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(388):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(413):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(415):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(420):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(488):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(491):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(551):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(569):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(592):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(597):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(599):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(618):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(619):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(139):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(147):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(674):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(691):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(703):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(718):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(739):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(746):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(899):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(935):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(134):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(63):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(472):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(487):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(535):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(777):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(882):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(883):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(916):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(925):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(936):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(952):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(967):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(968):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(587):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(615):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1283):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1439):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2195):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(172):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(505):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(542):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(877):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(999):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1121):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1663):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2846):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(813):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1315):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2431):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3711):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3956):    if(IsTemplate()) return const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3966):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(369):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1353):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(612):    if(n == 0) return const_cast< CxxScoped* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1494):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1697):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2094):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2111):    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2121):    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2394):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2475):    return (CxxScoped*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2488):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(190):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(543):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(671):    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1421):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1518):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(370):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(320):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2095):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4344):       func->SetTemplate(const_cast< Function* >(tmplt));
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(67):    objects.push_back(const_cast< Base* >(this));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(334):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(638):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W009 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(211):       dest = payload + received;
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(310):    auto after = (ptr_t) next_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(311):    auto wrap = after >= (buff_ + size_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(338):       after = buff_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2962):    ptrdiff_t stacksize = &local - priv_->stackBase_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(189):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(137):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(137):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(228):       bytes = buff_ + hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(252):    bytes += hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(101):    NodeBase::byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(167):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(250):    auto fence = layout->bytes + layout->header.length;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(31): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(27): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(64): #include "AnModule.h"
W020 Using statement in header
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(35): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(36): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(51): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(52): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(53): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(54): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(34): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(36): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(35): using std::string;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(38): using NodeBase::fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(39): using NodeBase::word;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxCharLiteral.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(47): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(48): using std::string;
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(47): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(44): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(40): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(26): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h(21): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(32): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(38): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(30): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(30): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(43): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(30): using namespace SessionTools;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(37): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(38): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(47): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(48): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(49): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(47): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(48): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(45): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(46): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(47): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(48): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(30): using namespace NodeTools;
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(44): using namespace SessionBase;
W022 Add using statement
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(0): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(0): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(0): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(0): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(0): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(0): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(0): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(0): namespace NodeTools
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(0): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(0): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(0): namespace SessionBase
W026 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(365/3):       const CxxNamed* item, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(892/1):    static void Shutdown(NodeBase::RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(896/1):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(83/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1654/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(164/1):    word ChangeAccess(const CodeWarning& log, Cxx::Access acc, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(164/2):    word ChangeAccess(const CodeWarning& log, Cxx::Access acc, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(165/1):    word ChangeClassToNamespace(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(168/1):    word ChangeOperator(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(172/2):    word EraseBlankLine(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(173/1):    word EraseClass(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(188/1):    word InsertCopyCtorCall(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(189/1):    word InsertDataInit(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(192/1):    word InsertDisplay(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(192/2):    word InsertDisplay(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(193/1):    word InsertEnumName(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(198/1):    word InsertMemberInit(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(200/1):    word InsertPODCtor(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(201/1):    word InsertPureVirtual(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(203/1):    word MoveDefine(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(204/1):    word MoveFunction(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(205/1):    word MoveMemberInit(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(208/1):    word ReplaceHeading(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(209/1):    word ReplaceName(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(377/1):    word FixInvokers(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(377/2):    word FixInvokers(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(387/1):    word ChangeFunctionToFree(const Function* func, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(388/1):    word ChangeFunctionToMember(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(388/2):    word ChangeFunctionToMember(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(389/1):    word ChangeInvokerToFree(const Function* func, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(390/1):    word ChangeInvokerToMember(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(390/2):    word ChangeInvokerToMember(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(391/1):    word EraseArgument(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(391/2):    word EraseArgument(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(392/1):    word EraseDefault(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(392/2):    word EraseDefault(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(393/1):    word EraseParameter(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(393/2):    word EraseParameter(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(395/1):    word InsertArgument(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(395/2):    word InsertArgument(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(396/1):    word SplitVirtualFunction(const Function* func, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(75/3):       const std::string& prefix, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(316/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(325/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(149/1):    TraceRc StartTracing(const std::string& opts);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(135/3):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(140/1):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(87/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(60/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(84/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(128/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(148/1):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(148/2):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(167/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(301/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(307/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(313/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(79/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(187/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(187/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(48/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(436/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(158/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(299): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(193): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h(62): struct LibItemSort
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(37): class DipModule : public Module
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(43): class SysLock
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(37): class TextTlvMessage : public TlvMessage
W028 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(64):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(220):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(304):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(389):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(182): extern const std::string SingleRule;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(682): extern const NodeBase::Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(683): extern const NodeBase::Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(687): extern const NodeBase::Flags Stats_Mask;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(162): constexpr ProtocolError IM_TIMEOUT = 0x01;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(163): constexpr ProtocolError IM_EXPECTED = 0x02;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(164): constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(165): constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(166): constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(167): constexpr ProtocolError IM_REPEATED = 0x06;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(168): constexpr ProtocolError IM_FROM_SERVER = 0x07;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(169): constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(170): constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(171): constexpr ProtocolError DM_BEFORE_RM = 0x0A;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(172): constexpr ProtocolError RM_EXPECTED = 0x0B;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(173): constexpr ProtocolError RM_REPEATED = 0x0C;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(174): constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(175): constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(197): constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(212): constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(213): constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(214): constexpr category_t CATEGORY_BRACKET = 0x40;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(217): constexpr category_t CATEGORY_ORDER = 0x43;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(219): constexpr category_t CATEGORY_RESULT = 0x45;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(222): constexpr category_t CATEGORY_COMMAND = 0x48;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(223): constexpr category_t CATEGORY_PARAMETER = 0x49;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(224): constexpr category_t CATEGORY_PRESS = 0x4A;
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(198): extern const Duration ONE_uSEC;
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(203): extern const int64_t TICKS_PER_SEC;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h(68): constexpr FlagId FirstAppDebugFlag = 11;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(72): extern fixed_string NotImplementedExpl;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(195):    static const id_t LastNbIndex = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(63): constexpr size_t GBs = 1024 * 1024 * 1024;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(125): const SysTickTimer* TickTimer = SysTickTimer::Instance();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(80):    static const id_t LastNtIndex = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(106):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(134):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(55):    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(85):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(72):    enum Location
W030 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(144):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(62):       FIRST_BOT_SPECIFIC_ERROR
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(188):    MemInaccessible = 0,      // ---
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(189):    MemExecuteOnly = 1,       // --x
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(191):    MemReadExecute = 5,       // r-x
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(193):    MemReadWriteExecute = 7,  // rwx
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.h(66):    TraceFailed,        // operation failed for some other reason
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(77):       PortAllocFailed,      // failed to create PSM for context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(88):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(90):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(93):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(118):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(96):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(98):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(99):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(64):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(214):    Digit At(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(183):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(250):    void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(319):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(360):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(196):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(144):    bool operator!=(const CodeWarning& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(596):    bool IsImplemented() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(152):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(314):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(638):    bool operator<(const Tracepoint& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(730):    static const CxxScope* OuterScope();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxLocation.h(49):    CxxLocation& operator=(const CxxLocation& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1143):    bool IsExtern() const { return GetDecl()->extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1148):    bool IsFinal() const { return GetDecl()->final_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(46):    size_t rfind_first_of
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(114):    std::string& Prefix(std::string&& scope,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(311):    CxxToken& operator=(const CxxToken& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(398):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(440):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(382):    word FixInvoker(const Function* func, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(354):    const LineInfo* GetLineInfo(size_t pos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(429):    size_t LineFindFirstOf(size_t pos, const std::string& chars);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(437):    size_t LineFindNonBlank(size_t pos);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h(64):    bool operator() (const LibraryItem* item1, const LibraryItem* item2) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(117):       bool operator<(const Wakeup& that) const
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(69):    DipHeader* Header() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(250):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(75):    bool operator<(const Location& that) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(48):    explicit TokenMessage(const Token* stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(56):    TokenMessage(const TokenMessage& that);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(65):    TokenMessage& operator=(TokenMessage&& that);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(92):    Token operator[](size_t index) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(141):    void set_as_ascii(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(171):    bool operator<(const TokenMessage& that) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h(52):    size_t get_number_of_results() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(120):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(70):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(136):    const T& Back() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(144):    T& Back()
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(152):    const T& At(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(160):    T& At(size_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(184):    const T* Data() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(63):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(72):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(76):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(80):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(140):    bool SetVptr(const Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(147):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(155):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(134):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(121):    Duration operator+();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(125):    Duration operator-();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(129):    Duration& operator++();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(130):    Duration operator++(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(134):    Duration& operator--();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(135):    Duration operator--(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(147):    Duration& operator*=(int64_t rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(151):    Duration& operator/=(int64_t rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(155):    Duration& operator%=(const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(160):    Duration& operator>>=(int8_t shift);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(184): Duration operator*(const Duration& lhs, int64_t rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(188): Duration operator%(const Duration& lhs, const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(66):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(67):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(67):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(171):    PerThreadInfo()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(48):    FunctionTrace();
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h(58):    Log* FindLog(const std::string& name, LogId id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(50):    size_t Words(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(58):    void Set(void* dest, byte_t value, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(92):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(127): std::ostream& operator<<(std::ostream& stream, AlarmStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(97):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(109):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(115):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(131):    void MorphTo(const Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(145): Flags PS_Delayed();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(62):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(63):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(290):    void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(80):    std::string Normalize(const std::string& path);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(95):    void GetCurrDir(std::string& dirName);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(48):    SysLock();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(62):    void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(66):    void Release();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(70):    SysThreadId Owner() const { return owner_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h(74):    void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.h(50):    bool Lock(void* addr, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.h(55):    bool Unlock(void* addr, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.h(113):    Thread* Owner() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(75):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(77):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(116):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(120):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(124):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(147):    Faction GetFaction() const { return faction_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(151):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(485):    SysMutex* BlockingMutex() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(493):    uint8_t MutexCount() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(45):    explicit TimePoint(const SysTime& time);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(95):    TimePoint& operator++();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(96):    TimePoint operator++(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(100):    TimePoint& operator--();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(101):    TimePoint operator--(int);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(109):    TimePoint& operator-=(const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(118): bool operator==(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(119): bool operator!=(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(121): bool operator<=(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(122): bool operator>(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(123): bool operator>=(const TimePoint& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(128): TimePoint operator+(const Duration& lhs, const TimePoint& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(129): Duration operator-(const TimePoint& lhs, const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(179):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(80):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(48):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(54):    SysIpL2Addr(SysIpL2Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(59):    SysIpL2Addr& operator=(SysIpL2Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(65):    SysIpL3Addr(SysIpL3Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(70):    SysIpL3Addr& operator=(SysIpL3Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(117):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(50): uint64_t htonll(uint64_t hostllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(53): uint64_t ntohll(uint32_t netllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(134):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(190):    IpBuffer* IcMsg() const { return icMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(93):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(97):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(102):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(292):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(446):    void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(102): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(228):    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(47):    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(66):    GlobalAddress(GlobalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(71):    GlobalAddress& operator=(GlobalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(87):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(51):    LocalAddress(LocalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(56):    LocalAddress& operator=(LocalAddress&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(65):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(181):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(86):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(74):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(68):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(137):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(195):    bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(325):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(86):    void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(104):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(213):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(217):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(358):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(369):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(128):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(132):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(132):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(82):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(61):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(58):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(62):    TextTlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(68):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(180):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(186):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(200):    TlvParmPtr AddBytes
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(207):    TlvParmPtr CopyParm
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(260):    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(267):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(282):    size_t ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(77):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(76):    CliText* CreateText() const override;
W033 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(226): using PersistentStr =
W035 No referent for friend declaration
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(39):    friend class Singleton< DipModule >;
W037 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(316):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(883):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(64):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(214):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(220):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(304):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(74):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(166):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(111):    static ptrdiff_t LinkDiff();
W042 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(183):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(202):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(226):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(237):    void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(241):    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(404):    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1151):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(496):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(46):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.h(54):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(194):    size_t CalcGroup(const Include& incl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(241):    NodeBase::istreamPtr InputStream() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(252):    void LogLine(size_t line, Warning warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.h(104):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.h(64):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(94):    CodeFile* File() const { return loc_.GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(98):    size_t Pos() const { return loc_.GetPos(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(128):    std::string GetNewFuncName(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(133):    void UpdatePos(EditorAction action,
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(525):    Numeric(NumericType type, size_t width, bool sign) :
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(139):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(201):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(205):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(414):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(957):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(246):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(291):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(313):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(715):    static Cxx::Access ScopeAccess() { return Frame_->ScopeAccess(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(822):    static bool CompilingTemplateFunction();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(846):    static bool OptionIsOn(char opt);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(159):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(974):    bool IsUnboundedArray() const { return array_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1093):    bool IsDefaulted() const { return GetDefn()->defaulted_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1142):    Function* GetBase() const { return GetDecl()->base_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1144):    bool IsVirtual() const { return GetDecl()->virtual_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1170):    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1203):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1262):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(176):    bool IsSubscopeOf(const std::string& fqSuper) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h(83):    static DataPtr CreateRef()
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(433):    size_t LineRfindFirstOf(size_t pos, const std::string& chars);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(441):    size_t LineRfindNonBlank(size_t pos);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryVarSet.h(53):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(111):    enum SourceType
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(99):    bool is_number() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(128):    size_t set_from(const Token* stream, size_t length);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(52):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(132):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(170):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(189):    Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(193):    void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(66):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    bool SetNext(c_string input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(68):    bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(80):    bool SetNext(c_string input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(60):    c_string Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(57):    CfgTuple* FindTuple(const std::string& key) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(67):    virtual MemoryType ObjType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(134):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(130):    bool ReadingFromFile() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    c_string HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(89):    id_t Did() const { return did_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(52):    static const std::string RscPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(93):    int SetAttrs(MemoryProtection attrs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(121):    bool IsFixedSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(81):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(85):    bool Suppressed() const { return suppressed_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexRegistry.h(53):    SysMutex* Find(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(103):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(57):    bool NullifyObjectData() const { return nullifyObjectDataCfg_->GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(63):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(81):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(136):    c_string strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(150):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(128):    static void ResetFlags();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(143):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(87):    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(55):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(59):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(88):    NodeBase::word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(129):    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(181):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(73):    NodeBase::word SendTo
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(76):    void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(86):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(59):    void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(59):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(134):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(64):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(72):    c_string FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(76):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(64):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(112):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(123):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(129):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(157):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(161):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(165):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(148):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(57):    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(329):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(333):    virtual bool SendFailure(NodeBase::debug64_t errval);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(60):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(112):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(251):    bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(528):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(76):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(118):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(122):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(95):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(169):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(174):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(195):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(272):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(276):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(287):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(291):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(77):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(160):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(419):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(50):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(93):    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(345):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(119):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(91):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(99):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(103):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(123):    const AsmPtrVector* Assembly() const { return &assembly_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(127):    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(775):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(218):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(323):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(337):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1076):    TypeSpecUser GetUserType() const { return user_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(321):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(325):    bool IsThreadLocal() const { return thread_local_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(329):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(333):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(88):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(93):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(109):    size_t XrefSize() const { return xref_.size() * 3 * sizeof(CxxNamed*); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(113):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(75):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(98):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(158):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(168):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(178):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(204):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(253):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(39):    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(69):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(81):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(99):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(241):    NodeBase::MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(64):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(76):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(85):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(131):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(84):    virtual NodeBase::c_string PortName(PortId pid) const;
W044 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(52): typedef void* StackFrames[MaxFrames];
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(95): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(96): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(113): typedef const char* c_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(114): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(119): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(120): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(58): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(59): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W048 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(121):    bool game_started;                // set when the game has begun
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(147):    word our_number_of_disbands;    // disbands required (negative for builds)
W050 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(316):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(322):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(326):    TypeName* name;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(900):    static bool Tracing;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1019):    bool ptrDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1023):    bool refDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(203):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(207):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(92):    std::atomic_size_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(96):    std::atomic_size_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(100):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(104):    size_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(130):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(91):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(96):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(100):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(104):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(108):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(113):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(117):    NodeBase::TimePoint time_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(121):    NodeBase::byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(490):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(494):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(524):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(528):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(532):    const EventHandler::Rc rc_;
W053 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(171):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(340):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(356):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(205):    Warning warning_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(220):    word offset_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(224):    std::string info_;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(45):    size_t begin;  // offset where line starts; it ends at a CRLF
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(228):    LibraryVarSet* varSet_;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(64):    size_t level;    // the file's level in the build
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(112):       BotEvent event;       // event
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(144):    DipHeader header;  // no parameters (length = 0)
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(129):    RegCell aid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(92):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(96):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(119):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp(61):    istreamPtr file_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(107):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(171):    RegCell did_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(175):    size_t size_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(181):    RegCell lid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(142):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(130):    RegCell mid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(54):    Q2Link link;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(136):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(132):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(40):    MemoryType type;    // the type of memory that the singleton uses
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(120):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(102):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(54):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(59):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(66):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static Duration SleepInterval;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(109):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.h(138):    RegCell mid_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(83):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1604):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2096):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(194):    NodeBase::Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(150):    NodeBase::RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(96):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(59):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(313):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(337):    NodeBase::Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(134):    NodeBase::Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(132):    NodeBase::RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(158):    static NodeBase::word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(372):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(134):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(146):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(187):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(149):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(162):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(166):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(195):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(199):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(145):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W054 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(213):    const CxxNamed* item_;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(63):    CodeFile* file;  // the file
W055 Data need not be mutable
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(113):       mutable secs_t secs;  // delay
W056 Implicit constructor invoked: POD members not initialized
i C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
i C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(40):    LARGE_INTEGER frequency;
i C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(62):       LARGE_INTEGER now;
i C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(68):       _timeb now;
i C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(41):    _timeb timebuff;
i C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    tm timeofday;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(52):    in_addr result;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(50):    addrinfo hints;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(107):    sockaddr_in addr;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(70):    sockaddr_in addr;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(268):    WSAData wsaData;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(42):    sockaddr_in peer;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(65):    sockaddr_in peer;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(125):    sockaddr_in host;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(158):    std::unique_ptr< pollfd[] > list(new pollfd[size]);
i C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(234):    sockaddr_in peer;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(67):    sockaddr_in peer;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(105):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(170):    struct SignalEntry
i C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(234):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(224):    struct MessageEntry
i C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(361):    MessageEntry trace_[TraceSize];
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(182):    ParmIterator pit;
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(278):    ParmIterator pit;
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(296):    ParmIterator pit;
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(351):    ParmIterator locpit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(152):    class ParmIterator
W060 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(292):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(66):    Lexer();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(c_string help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(39):    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(c_string help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(44):    FunctionTrace(fn_name_arg func, fn_depth depth);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(48):    FunctionTrace();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(41):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(56):    LogsAction();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(76):    explicit LogsCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(93):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(107):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(124):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(138):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(155):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(168):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(199):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(216):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(228):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(245):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(263):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(136):    explicit Counter(const std::string& expl, size_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(54):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(44):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(56):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(98):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(110):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(124):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(139):    TestsAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(160):    explicit TestsCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(50):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(54):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(39):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(54):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(69):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(97):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(110):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(127):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(142):    NwStatusCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(40):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(44):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(49):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(53):    SysIpL2Addr(const SysIpL2Addr& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(54):    SysIpL2Addr(SysIpL2Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(40):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(45):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(51):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(64):    SysIpL3Addr(const SysIpL3Addr& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(65):    SysIpL3Addr(SysIpL3Addr&& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(41):    PbSizesCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(272):    PotsMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(466):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(511):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(50):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(54):    TlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(41):    StSizesCommand() = default;
W062 Member not included in member initialization list
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(40):    FileWalker(const char* dirName, const char* fileSpec);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
W064 Implicit destructor invoked
i C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2008):    CodeWarning log(warning, this, pos, item, offset, info);
i C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(913):                FileLevel item(files[i], level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(82): class CodeWarning
i C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1415):       DataInitAttrs attrs(mem, init, 0);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(271): struct DataInitAttrs
i C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(237):    Tracepoint loc(file, line, action);
i C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(276):    Tracepoint loc(file, line, action);
i C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(417):    ActiveScope active(scope, access);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(422): struct ActiveScope
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(619): class Tracepoint
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(61): struct FileLevel
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(37): struct SingletonTuple
i C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(89):    SingletonTuple entry(addr, type);
i C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(50):    addrinfo hints;
i C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(268):    WSAData wsaData;
i C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(266):    TimeoutInfo info;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(75): struct TimeoutInfo
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(182):    ParmIterator pit;
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(278):    ParmIterator pit;
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(296):    ParmIterator pit;
i C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(351):    ParmIterator locpit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(152):    class ParmIterator
W065 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(195):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(87):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(123):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(82):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(71):    virtual ~Exception();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(126):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(209):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(108):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(251):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(92):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(132):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(184):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(103):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(77):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(188):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(124):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(212):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(96):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(117):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(176):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(130):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(143):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(183):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(167):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(112):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(94):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(102):    virtual ~Trigger();
W075 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1076):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1212):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(475):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(477):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(478):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(513):    void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.h(54):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.h(104):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.h(46):    void CopyUsages(const CxxUsageSets& usages) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.h(64):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(148):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(155):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(159):    virtual CxxScoped* FindItem(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(317):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(325):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(330):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(351):    virtual Class* GetClassTemplate() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(366):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(492):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(246):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(251):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(257):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(291):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(431):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(435):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(439):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(490):    void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(66):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(78):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(94):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(110):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(130):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(58):    virtual void SetLoc(CodeFile* file, size_t pos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(70):    virtual void CopyContext(const CxxNamed* that);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(93):    virtual bool GetRange(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(98):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(106):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(111):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(121):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(126):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(134):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(140):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(146):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(152):    virtual void GetScopedNames(stringVector& names, bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(159):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(165):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(170):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(174):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(181):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(186):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(195):    virtual CxxNamed* GetMate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(208):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(218):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(224):    virtual CxxScoped* DirectType() const { return Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(228):    virtual void FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(234):    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(238):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(243):    virtual void Instantiate() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(247):    virtual CxxScope* GetTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(256):    virtual CxxScoped* FindTemplateAnalog(const CxxNamed* item) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(263):    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(270):    virtual std::string EndChars() const { return NodeBase::EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(279):    virtual std::string BeginChars(char end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(285):    virtual StackArg MemberToArg
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(298):    virtual void GetDirectClasses(CxxUsageSets& symbols);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(305):    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(318):    virtual std::string XrefName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(608):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(842):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(846):    bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1084):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1094):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1098):    virtual TypeTags* Tags() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1099):    virtual const TypeTags* Tags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1103):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1109):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1115):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1120):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1124):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1128):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1132):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1137):    virtual TypeTags GetAllTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1142):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1147):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1151):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1157):    virtual void SetPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1162):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1166):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1170):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1174):    virtual void SetUserType(TypeSpecUser user) const { user_ = user; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1185):    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1192):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1197):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1201):    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1207):    virtual void Instantiating(CxxScopedVector& locals) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1211):    virtual void GetNames(stringVector& names) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1216):    virtual bool NamesReferToArgs(const NameVector& names,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(77):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(82):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(90):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(356):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(361):    virtual bool IsUnionMember() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1300):    void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1304):    void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(60):    virtual bool NameRefersToItem(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(70):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView& view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(79):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(97):    virtual void AddFiles(LibItemSet& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(101):    virtual void AddReference(CxxNamed* item) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(113):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(119):    virtual bool CheckIfUnused(Warning warning) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(194):    void SetAccess(Cxx::Access access) override { access_ = access; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(198):    void SetScope(CxxScope* scope) override { scope_ = scope; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(552):    void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1026):    bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1725):    bool ResolveTypedef(Typedef* type, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(54):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(60):    virtual bool IsForward() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(64):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(69):    virtual std::string TypeString(bool arg) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(74):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(80):    virtual Class* DirectClass() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(84):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(88):    virtual bool IsVolatile() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(92):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(96):    virtual bool IsVolatilePtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(100):    virtual bool IsConstPtr(size_t n) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(104):    virtual bool IsVolatilePtr(size_t n) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(109):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(114):    virtual bool IsIndirect(bool arrays) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(118):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(123):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(128):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(133):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(138):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(144):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(149):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(154):    virtual void GetConvertibleTypes(StackArgVector& types, bool expl) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(159):    virtual CxxScoped* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(165):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(170):    virtual void ExitBlock() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(176):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(180):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(185):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(197):    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(202):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(207):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(213):    virtual void RecordUsage() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(217):    virtual void AddToXref() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(222):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(227):    virtual bool LocateItem(const CxxNamed* item, size_t& n)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(233):    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(238):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(242):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(246):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(251):    virtual void Print
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(257):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(287):    virtual void UpdatePos(EditorAction action,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(489):    virtual void PushBack(uint32_t c) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h(46):    virtual const std::string& Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h(51):    virtual void GetDecls(std::set< CxxNamed* >& items);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(79):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(85):    virtual NodeBase::word Check(NodeBase::CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(92):    virtual NodeBase::word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(98):    virtual NodeBase::word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(104):    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(110):    virtual NodeBase::word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(118):    virtual NodeBase::word Parse
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(125):    virtual NodeBase::word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(132):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(136):    virtual BuildOrder SortInBuildOrder() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(141):    virtual LibrarySet* Assign(LibrarySet* that);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(142):    virtual LibrarySet* Intersection(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(143):    virtual LibrarySet* Difference(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(144):    virtual LibrarySet* Union(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(145):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(146):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(147):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(148):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(149):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* DeclaredBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* Declarers() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* Definitions() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* ReferencedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* Referencers() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryVarSet.h(53):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(91):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(97):    virtual std::string report_command_line_parameters();
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(64):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(68):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(75):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(93):    virtual void GetSubtended(std::vector< Base* >& objects) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(104):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(122):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(129):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(137):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(141):    virtual MemoryType MemType() const { return MemPermanent; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(47):    bool GetValue() const override { return curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(64):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(63):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(67):    virtual MemoryType ObjType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(72):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(76):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(80):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(63):    virtual void EventOccurred(Event event);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(76):    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(94):    virtual word ExplainCommand(std::ostream& stream, bool verbose) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(72):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(77):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(135):    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(143):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(153):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(163):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(173):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(183):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(211):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(221):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(231):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(51):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(47):    virtual void* Addr() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(51):    virtual size_t Size() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(55):    virtual MemoryType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(59):    virtual void* Alloc(size_t size) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(63):    virtual void Free(void* addr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(68):    virtual size_t BlockToSize(const void* addr) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(73):    virtual bool Validate(const void* addr) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(77):    virtual bool CanBeProtected() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h(84):    virtual int SetPermissions(MemoryProtection attrs);
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(62):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(84):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(92):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(103):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(99):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(104):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(172):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(65):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(69):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(71):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(47):    virtual void GetName(std::string& fileName) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(51):    virtual bool IsSubdir() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(55):    virtual bool AtEnd() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(60):    virtual bool Advance() = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(168):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(222):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(56):    virtual c_string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(60):    virtual c_string Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(66):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(93):    virtual bool Display(std::ostream& stream, const std::string& opts);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(98):    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(106):    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(125):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(134):    virtual NodeBase::byte_t* HostToNetwork
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(140):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(114):    virtual size_t PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(133):    virtual bool AddBytes
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(99):    virtual SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(138):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(52):    virtual NodeBase::c_string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(56):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(61):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(65):    virtual NodeBase::Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(69):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(73):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(80):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(86):    virtual bool HasSharedSocket() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(94):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(79):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(91):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(117):    virtual AllocRc SetService(const IpService* service, bool shared);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(121):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(173):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(177):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(45):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(50):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(86):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(60):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(98):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(102):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(106):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(110):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(112):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(123):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(129):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(115):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(122):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(128):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(135):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(141):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(148):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(158):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(180):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(91):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(152):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(157):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(176):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(262):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(266):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(96):    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(105):    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(134):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(147):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(74):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(106):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(52):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(56):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(93):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(102):    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(112):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(43):    bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(84):    virtual NodeBase::c_string PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(114):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(67):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(73):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(79):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(100):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(107):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(121):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(127):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(89):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(42):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(48):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(195):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(212):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(138):    virtual EventHandler::Rc ApplyTreatment
W077 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(111):    virtual std::string GetInput() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(63):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(67):    virtual MemoryType ObjType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(72):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(76):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(80):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(77):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h(140):    virtual void Recover() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(84):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(92):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(103):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(99):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(104):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(222):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(264):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(270):    virtual MsgBuffer* DeqMsg(const Duration& timeout);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(138):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(69):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(73):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(173):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(177):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(84):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(180):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(91):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(152):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(157):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(176):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(266):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(316):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(329):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(333):    virtual bool SendFailure(NodeBase::debug64_t errval);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(341):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(241):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(296):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(301):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(307):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(313):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(195):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(212):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(267):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(272):    virtual void AddFence();
W082 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1216):    BcFactory(Id fid, ProtocolId prid, c_string name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(287):    void UpdatePos(EditorAction action,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(311):    SymbolView(Accessibility a, TypeMatch m,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(627): size_t LineMergeLength
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(635): bool InsertSpaceOnMerge
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(133):    void UpdatePos(EditorAction action,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(276):    TypeMatch CalcMatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(335):    TypeMatch MatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxLocation.h(71):    void UpdatePos(EditorAction action, size_t begin, size_t count, size_t from);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(93):    virtual bool GetRange(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(512):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(762):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(931):    bool SetPointer(size_t n, bool readonly, bool unstable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1185):    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(356):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1549):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1644):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(40): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(139):    size_t CompareScopes
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(177):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(197):    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(287):    virtual void UpdatePos(EditorAction action,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(647):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(102): string ChooseArgumentName
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(119): void DebugFtNames(const Function* func, string& flit, string& fvar)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(345):    word InsertNamespaceForward(size_t pos,
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(439):    size_t UpdateFuncDeclLoc
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(468):    size_t UpdateFuncDefnLoc
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(510):    size_t CutCode(const CxxNamed* item, string& expl, string& code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(527):    size_t Replace(size_t pos, size_t count, const std::string& code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(552):    void UpdateWarnings(EditorAction action,
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(248):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(560):    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(67):    NodeBase::word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(101):    NodeBase::word Assign(CliThread& cli, const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(406):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(452):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(502):    virtual void report_failed_press
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(190):    bool set_move_by_convoy_order(ProvinceId unit,
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(399):    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(63):    Alarm(c_string name, c_string expl, secs_t delay);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(51):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(55):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(63):    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(c_string key, c_string def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(86):    CfgParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(104):    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(59):    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(99):    CliIncrement(c_string name, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(91):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(98):    word IntPrompt(const std::string& prompt, word min, word max);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(243):    void Report1
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(63):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(94):    int strCompare
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(102):    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(123): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(129): bool ValidateOptions
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(235):    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(240):    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(102):    PosixSignal(signal_t value, c_string name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(57):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(107):    bool FindFiles(const char* dirName,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(112):    static SysThread_t Create
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(90):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(72):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(633):    void DisplaySummary(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(88):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(220):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(50):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(42):    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(99):    PotsFeature(Id fid, bool deactivation, c_string abbr, c_string name);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(132):    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(165):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(51):    GlobalAddress
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(91):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(172):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(482):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(128):    NodeBase::TraceRc SelectSignal
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(182):       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(178):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(56):    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(113):    template< class T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(75):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(351):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(242/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(340/1):    bool GetFuncSpecial(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(353/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(374/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(407/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(474/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(475/1):    bool GetChar(ExprPtr& expr, Cxx::Encoding code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(476/1):    bool GetStr(ExprPtr& expr, Cxx::Encoding code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(486/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(487/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(494/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(498/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(507/1):    bool GetAlignOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(508/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(509/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(510/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(511/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(512/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(513/1):    bool GetNoExcept(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(514/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(515/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(516/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59/2):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(82/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(106/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(128/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(163/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(320/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(142/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(270/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(113/2):       (ThreadEntry entry, Thread* client, size_t stackSize, SysThreadId& nid);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(135/1):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55/1):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(292/1):    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(158/1):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(105/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(132/1):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(107/1):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(212/1):    virtual void DeleteParm(TlvParmLayout& parm);
W090 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1167):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(203):    void AddToXref();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(138):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(139):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(140):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(141):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(152):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(153):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(154):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(155):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(156):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(157):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(158):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(159):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(160):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(161):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(162):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(73):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(101):    NodeBase::word Assign(CliThread& cli, const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(118):    NodeBase::word Purge(const std::string& name, std::string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(150):    void Shrink();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(206):    virtual void process_ccd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(212):    virtual void process_drw_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(243):    virtual void process_out_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(251):    virtual void process_smr_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(268):    virtual void process_adm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(467):    virtual void process_hlo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(472):    virtual void process_map_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(476):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(484):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(488):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(492):    virtual void process_slo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(113):    void SetStatus(AlarmStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(134):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(110):    void SetInterval(uint8_t interval);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.h(143):    void SetState(index_t index, BlockState state);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(182):    bool Corrupt(size_t n);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(248):    void UpdateAlarm();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(142):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(73):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(167):    DelayRc Suspend(SysSentry_t& sentry, const Duration& timeout);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(112):    bool Interrupt(const Flags& mask = NoFlags);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(155):    void SetStatus(TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(258):    void SetInitialized();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(410):    void Reset(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(414):    void Ready();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(418):    void Preempt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(437):    void Proceed();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(481):    void UpdateMutex(SysMutex* mutex);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(489):    void UpdateMutexCount(bool acquired);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(546):    bool LogTrap(const Exception* ex,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(594):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(602):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(606):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(110):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(82):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(81):    void Reset();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(176):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(146):    virtual IpPort* CreatePort(ipport_t pid) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(79):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(58):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(105):    void SetState(const ProtocolSM* psm, State state);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(115):    bool SetObjAddr(const MsgPort& port);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(158):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(196):    virtual void EndOfTransaction() { }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(158):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(254):    virtual Rc ReceiveMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(155):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(159):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(178):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(186):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(110):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(114):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(225):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(229):    void SetPriority(MsgPriority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(358):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(184):    virtual Message* UnwrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(191):    virtual Message* WrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(118):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(186):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(235):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(246):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
W092 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(115):    static void DiscardMsg(const Message& msg, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(167):    static c_string strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(88):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(101):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(117):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(121):    static uint32_t DNToIndex(DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(114):    static NodeBase::word Report
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(171):    size_t IndentSize() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(175):    size_t LineLengthMax() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(265):    static void GenerateReport(std::ostream* stream, const LibItemSet& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(319):    const stringVector& Prolog() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(405):    void AddIndirectExternalTypes
  C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp(119):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(451):    static void UpdateOperator(Cxx::Operator& oper, size_t args);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(455):    static std::string OperatorToName(Cxx::Operator oper);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(468):    static Cxx::Operator NameToOperator(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(219):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(663):    static bool MemberIsAccessibleTo
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(678):    static size_t CreateCodeError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(346):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(726):    static Cxx::Access ScopeVisibility();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(751):    static void Enter(const CxxScoped* owner);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(784):    static void WasCalled(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(792):    static void SetPos(const CxxLocation& loc);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(822):    static bool CompilingTemplateFunction();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(851):    static void Trace(CxxTrace::Action act);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(852):    static void Trace(CxxTrace::Action act, const CxxToken* token);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(853):    static void Trace(CxxTrace::Action act, const StackArg& arg);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(854):    static void Trace(CxxTrace::Action act, const CodeFile& file);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(855):    static void Trace(CxxTrace::Action act, NodeBase::word err,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(896):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(938):    static bool StartTracing();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(954):    static std::string Location();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(881):    void CheckIfTemplateArgument(const CxxScoped* ref) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1539):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1549):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1562):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(315):    static void ShrinkTokens(const TokenPtrVector& tokens);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(636):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(640):    static void ExecuteCall();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(684):    static void Record(Cxx::Operator op, StackArg& arg1, const StackArg* arg2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(164):    word ChangeAccess(const CodeWarning& log, Cxx::Access acc, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(165):    word ChangeClassToNamespace(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(168):    word ChangeOperator(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(173):    word EraseClass(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(188):    word InsertCopyCtorCall(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(189):    word InsertDataInit(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(192):    word InsertDisplay(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(193):    word InsertEnumName(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(198):    word InsertMemberInit(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(200):    word InsertPODCtor(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(201):    word InsertPureVirtual(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(203):    word MoveDefine(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(204):    word MoveFunction(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(205):    word MoveMemberInit(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(208):    word ReplaceHeading(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(209):    word ReplaceName(const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(377):    word FixInvokers(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(387):    word ChangeFunctionToFree(const Function* func, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(388):    word ChangeFunctionToMember(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(389):    word ChangeInvokerToFree(const Function* func, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(390):    word ChangeInvokerToMember(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(391):    word EraseArgument(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(392):    word EraseDefault(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(393):    word EraseParameter(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(395):    word InsertArgument(const Function* func, word offset, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(396):    word SplitVirtualFunction(const Function* func, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(53):    static bool GetType(const string& op, LibTokenType& type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(58):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(68):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(206):    static NodeBase::word Counted(std::string& result, const size_t count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(239):    static NodeBase::word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(406):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(598):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(75):    static BaseBot* instance();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(101):    static void send_to_console(std::ostringstream& report);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(179):    void cancel_event(BotEvent event);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(524):    static void report_ccd(const Token& power, bool disorder);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(544):    static void report_out(const Token& power);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(556):    void report_exit(fixed_string reason);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(716):    static bool send_buff(DipIpBuffer& buff);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(157):    static MapAndUnits* instance();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(162):    static MapAndUnits* create_clone();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(166):    static void delete_clone(MapAndUnits*& clone);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(260):    std::string display_retreat_order(const UnitOrder& unit) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(42):    static TokenTextMap* instance();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(66):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(46):    static Switch::PortId ToneToPort(Tone::Id tid);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(123):    bool LoadNextTuple(std::string& key, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(84):    static const std::string& ValidKeyChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(89):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(94):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(93):    static CliParm::Rc GetInt(const std::string& s, word& n, bool hex);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(136):    static Rc Exhausted(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(324):    static Rc Mismatch(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(48):    static void Spool(c_string s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(83):    static void SwLog(fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(89):    static void SwErr(const std::string& errstr, debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(93):    static void Assert(bool condition, debug64_t errval = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(97):    static void Progress(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(103):    static void noft() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(128):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(100):    static Duration Immed();
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(104):    static Duration Never();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(52):    static const std::string RscPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(57):    static const std::string HelpPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(63):    static const std::string InputPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(68):    static const std::string OutputPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(72):    static const std::string ConsoleFileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(45):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(58):    static void Spool(const std::string& name, ostringstreamPtr& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(63):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(68):    static void Record(const std::string& s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(72):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(115):    static Log* Find(fixed_string groupName, LogId id, LogGroup*& group);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(120):    static Log* Find(fixed_string log);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(128):    static size_t Count();
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h(68):    static void Spool(ostringstreamPtr& stream, const Log* log);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h(72):    static void CopyToConsole(const ostringstreamPtr& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.h(53):    static void PushBack(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static c_string TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(82):    void SetLevel(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(86):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(115):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(262):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(99):    template< class T > static bool Release(std::unique_ptr< T >& obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(109):    static RestartLevel LevelToClear(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(115):    static void Initiate
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(58):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(63):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(86):    static void ListHeaps(std::set< void* >& heaps, std::ostringstream& expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(55):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(119):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(123):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(128):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(132):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(171):    bool Resume(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(80):    static fn_depth GetFrames(StackFramesPtr& frames);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(89):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(158):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(140):    static void CaptureEvent(fn_name_arg func, Id rid, int32_t info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(88):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(213):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(288):    static void CauseTrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(464):    static bool ClearActiveThread(Thread* active);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(498):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(626):    static void EnableFactions(const FactionFlags& enabled);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(642):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(650):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(90):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(66):    static TimePoint TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(70):    static std::string TimeZeroStr();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(74):    static TimePoint Now();
  C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h(78):    static TimePoint Never();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(102):    void QueryTools(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(88):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(220):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2636):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3791):    static void AcquireMutex();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3792):    static void DoAbort();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3793):    static void DoDelete();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3794):    static int DoDivide();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3795):    static void DoSwErr();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3796):    static void DoTerminate();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3797):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(4225):    static RecoveryThread* EnsureThread(id_t subcommand);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(168):    static size_t BuffSize(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.h(72):    static std::string MakeName(ipport_t port);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.h(119):    static std::string MakeName(ipport_t port);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(67):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(83):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(140):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(211):    static void SetStatus(bool ok, const std::string& err);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(374):    static PotsCallPsm* Cast(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(84):    static RootServiceSM* ContextRoot();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(119):    static void Kill(const std::string& errstr, NodeBase::debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(54):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(70):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(84):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(92):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(190):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(202):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(60):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(181):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(152):    static NodeBase::c_string ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.h(65):    static std::string MakeName(NodeBase::Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(241):    static std::string OutputId(const std::string& label, NodeBase::id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(482):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(76):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(63):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(86):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(234):    static size_t Pad(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(77):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(456):    static EventHandler::Rc SendFacilityNack(PotsMuxPsm* npsm, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(133):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(52):    static StTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(113):    static TestPsm* Find(const MsgPort& port);
W097 Line indentation is not a multiple of the standard value
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(441):     const string& line2, size_t begin2, size_t end2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(629):     const std::string& line2, size_t begin2, size_t end2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(457):                     ((move == nullptr) || move->IsDeleted()));
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1637):        GetCode(next), 0, LineSize(next) - 1);
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(111):           a != orders.adjustments.end(); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(412):           a != orders.adjustments.end(); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(712):        a != attacks.upper_bound(to_prov); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(920):                     (client.order_type_copy != MOVE_BY_CONVOY_ORDER))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(971):              f != subverted_army.convoyers.end(); ++f)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1470):        a != attacks.upper_bound(province); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1625):                  (attacker.order_type_copy != MOVE_BY_CONVOY_ORDER))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1968):        b != balanced_head_to_heads.end(); ++b)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2062):                 f != subverting_army.convoyers.end(); ++f)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2065):                    a != attacks.upper_bound(*f); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2116):        u != unbalanced_head_to_heads.end(); ++u)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(123):              (our_winter_orders.number_of_waives != 0));
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(230):           o != our_winter_orders.adjustments.end(); ++o)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(895):           b != r->second.adjustments.end(); ++b)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1019):           o != orders.adjustments.end(); ++o, ++count)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1369):                       loc != n->second.end(); ++loc)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2054):               winter->number_of_waives >= winter->number_of_orders_required)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2076):               game_map[build_loc.province].home_powers.end())
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2083):               game_map[build_loc.province].neighbours.end())
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2122):               winter->number_of_waives >= winter->number_of_orders_required)
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(374):              that.length_ * sizeof(Token));
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(414):              that.length_ * sizeof(Token));
W099 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(67):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(70):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(122):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(163):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(193):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(196):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(455):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(456):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(458):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(485):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(486):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(488):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(489):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(801):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(802):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(803):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(804):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(806):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(807):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(931):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(932):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(933):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(935):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(936):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(359):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(360):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(361):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(362):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(364):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(392):    CxxWord("D",   "D",    "D",  F),  // ALIGNAS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(393):    CxxWord("@",   "@",    "@",  T),  // ASM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(394):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(395):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(396):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(397):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(398):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(399):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(400):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(401):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(402):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(403):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(404):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(405):    CxxWord("DP",  "-",    "-",  F),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(406):    CxxWord("-",   "-",    "-",  F),  // FINAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(407):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(408):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(409):    CxxWord("-",   "-",    "g",  T),  // GOTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(410):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(411):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(412):    CxxWord("P",   "P",    "-",  F),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(413):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(414):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(415):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(416):    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(417):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(418):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(419):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(420):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(421):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(422):    CxxWord("$",   "$",    "$",  T),  // STATIC_ASSERT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(423):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(424):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(425):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(426):    CxxWord("D",   "D",    "D",  F),  // THREAD_LOCAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(427):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(428):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(429):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(430):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(431):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(432):    CxxWord("DP",  "DP",   "D",  F),  // VOLATILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(433):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(434):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(435):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(455):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(456):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(457):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(458):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(459):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(460):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(461):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(462):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(463):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(464):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(465):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(467):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(468):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(469):    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F),  // ALIGNOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(470):    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F),  // NOEXCEPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(471):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(472):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(473):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(474):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(475):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(476):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(477):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(478):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(479):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(480):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(481):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(482):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(483):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(484):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(485):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(486):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(487):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(488):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(489):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(490):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(491):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(492):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(493):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(494):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(495):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(496):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(497):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(498):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(499):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(500):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(501):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(502):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(503):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(504):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(505):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(506):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(507):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(508):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(509):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(510):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(511):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(512):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(513):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(514):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(515):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(516):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(517):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(518):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(519):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(520):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(521):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(522):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(102):    OperatorInfo("d",  1, DIR_SET,  ANY_SET,  ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(103):    OperatorInfo("f",  1, FILE_SET, ANY_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(116):    OperatorInfo("db", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpDeclaredBy
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(119):    OperatorInfo("rb", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpReferencedBy
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(205):    inline static fn_name Array_ctor()    { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(206):    inline static fn_name Array_dtor()    { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(207):    inline static fn_name Array_Init()    { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h(187): int64_t  operator/(const Duration& lhs, const Duration& rhs);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(613):                case Split:     c = 'S'; break;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(614):                case Merged:    c = 'm'; break;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(104):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(105):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(106):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(107):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(108):    CounterPtr      expansions_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(386):    inline static fn_name Q1Way_dtor()    { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(387):    inline static fn_name Q1Way_Init()    { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_Enq()     { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Henq()    { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Insert()  { return "Q1Way.Insert"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Deq()     { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(392):    inline static fn_name Q1Way_Exq()     { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Next()    { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(394):    inline static fn_name Q1Way_Size()    { return "Q1Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(395):    inline static fn_name Q1Way_Purge()   { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(397):    inline static fn_name Q1Way_Item()    { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(369):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(370):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(373):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(623):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(624):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(628):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(131):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(278):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(279):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(280):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(281):    CounterPtr       interrupts_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(285):    AccumulatorPtr   totTime_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(174):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(175):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(177):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(179):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(180):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(183):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(186):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(58):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(63):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(65):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(67):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(575):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(576):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(578):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(634):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(635):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(637):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(638):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(736):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(738):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(762):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(763):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(851):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(852):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(854):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(855):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(935):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(936):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(938):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(939):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(940):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(941):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(51):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(54):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(58):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(59):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(70):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(71):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(72):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(42):    LocalAddress   txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(43):    LocalAddress   rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(44):    MsgPriority    priority : 2;   // message's priority
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    bool           initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(46):    bool           final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool           join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool           self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool           injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool           kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    Message::Route route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    ProtocolId     protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    SignalId       signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    uint16_t       length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(132):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(236):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(237):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(238):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(239):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(241):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(302):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(303):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(304):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(305):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(307):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(348):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(349):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(350):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(351):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(353):    CauseInfo*    cci;
W102 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(283):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2034): void CodeFile::LogRemoveForwards(ostream* stream, const CxxNamedSet& items) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(980):       if((item->Type() == Cxx::Function) && (endchars.find('}') != string::npos))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1124): bool Editor::DisplayLog(const CliThread& cli, const CodeWarning& log, bool file) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1340):       if(IsBlankLine(b1) && (IsBlankLine(b2) || (GetLineType(b1) == EmptyComment)))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(143):    bool DisplayLog(const CliThread& cli, const CodeWarning& log, bool file) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(367):    static word FixFunctions(CliThread& cli, const CodeWarning& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(3433): "Alloc  Low kB     kB       Bytes                            Memory        Prot\n"
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(3434): "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
W103 Function not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(164): size_t LevelToSize(NbHeap::level_t level)
W106 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1319): void PotsTrafficThread::RecordHoldingTime(const Duration& time)
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(136): Digit DigitString::At(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(187): bool CodeCoverage::Defined(const string& func) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(218): bool IsSortedByPosition(const Function* func1, const Function* func2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1540): const Lexer& CodeFile::GetLexer() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1547): void CodeFile::GetLineCounts() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1563): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1705): size_t CodeFile::IndentSize() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1726): void CodeFile::InsertAsm(Asm* code)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1734): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1742): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1750): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1759): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1767): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1775): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1783): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1811): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1819): void CodeFile::InsertSpace(SpaceDefnPtr& space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1827): void CodeFile::InsertStaticAssert(StaticAssert* assert)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1835): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1843): void CodeFile::InsertUsing(Using* use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1851): size_t CodeFile::LineLengthMax() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(56): bool IsSortedByFileLevel(const FileLevel& item1, const FileLevel& item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(55): void CodeItemSet::CopyItems(const CxxNamedSet& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp(67): void CodeItemSet::CopyUsages(const CxxUsageSets& usages)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(411): IndentRule ClassifyIndent(string& id)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(428): bool InsertSpaceOnMerge(const string& line1, const string& line2, size_t begin2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(439): size_t LineMergeLength
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(707): template< typename T > size_t IndexOf(const std::vector< T >& v, const T& item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(127): word CodeWarning::FindWarning(const CodeWarning& log)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(338): bool CodeWarning::HasCodeToDisplay() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(345): bool CodeWarning::HasInfoToDisplay() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(352): bool CodeWarning::HasWarning(const CodeFile* file, Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(786): bool CodeWarning::IsInformational() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(793): bool CodeWarning::IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(812): bool CodeWarning::IsSortedByType
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(831): bool CodeWarning::IsSortedToFix
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(850): size_t CodeWarning::Line() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(912): bool CodeWarning::Suppress() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(755): void EraseTemplateArgs
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(787): void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(797): void CxxUsageSets::AddBase(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(805): void CxxUsageSets::AddDirect(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(813): void CxxUsageSets::AddForward(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(824): void CxxUsageSets::AddIndirect(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(832): void CxxUsageSets::AddInherit(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(840): void CxxUsageSets::AddUser(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(390): void Class::AddItem(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1280): Class* Class::GetClassTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1316): Cxx::Access Class::GetCurrAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1333): void Class::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1422): bool Class::GetRange(size_t& begin, size_t& left, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1436): CxxScope* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1830): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2794): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2812): void CxxArea::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2852): void CxxArea::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(44): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(155): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(780): bool Macro::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(826): CxxScope* MacroName::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(193): bool Context::CompilingTemplateFunction()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(243): TypeName* Context::FindXrefItem(const string& name)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(255): const Parser* Context::GetParser()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(263): XrefUpdater Context::GetXrefUpdater()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(321): void Context::OnLine(size_t line, bool compiling)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(335): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(363): bool Context::ParsingSourceCode()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(371): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(396): void Context::PopXrefFrame()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(414): void Context::PushScope(CxxScope* scope, bool hidden)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(423): void Context::PushXrefFrame(XrefUpdater updater)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(430): void Context::PushXrefItem(TypeName* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(452): CxxScope* Context::Scope()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(503): void Context::SetPos(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(518): void Context::SetPos(const CxxLocation& loc)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(918): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1109): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1116): Cxx::Access ParseFrame::ScopeAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1123): Cxx::Access ParseFrame::SetAccess(Cxx::Access access)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1508): bool StackArg::IsBool() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2191): TypeName* XrefFrame::FindItem(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2203): void XrefFrame::PushItem(TypeName* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxLocation.cpp(41): void CxxLocation::SetLoc(CodeFile* file, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(249): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(258): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(289): bool CxxNamed::GetRange(size_t& begin, size_t& left, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(299): void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(306): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(315): CxxScope* CxxNamed::GetTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(324): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(680): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1051): TypeTags DataSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1119): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1255): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1658): CxxScoped* DataSpec::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2062): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2239): TypeName* QualName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2314): TypeName* QualName::Last() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2495): size_t QualName::Size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2763): CxxScoped* TypeName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2843): TypeName* TypeName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3017): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3527): int TypeTags::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3536): bool TypeTags::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3545): int TypeTags::IsVolatilePtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3554): bool TypeTags::IsVolatilePtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3594): TagCount TypeTags::PtrCount(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(111): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(243): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(251): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(692): void ClassData::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(782): void ClassData::SetMemInit(const MemberInit* init)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(890): CodeFile* CxxScope::GetDistinctDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1259): CodeFile* Data::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1266): const Data* Data::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1275): CodeFile* Data::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1318): TypeName* Data::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1454): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1592): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3838): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3875): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3886): Cxx::Access Function::GetAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3894): CodeFile* Function::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3901): void Function::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3908): const Function* Function::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3917): CodeFile* Function::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3926): bool Function::GetRange(size_t& begin, size_t& left, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3941): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3953): CxxScope* Function::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3964): CxxScope* Function::GetTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3972): TemplateType Function::GetTemplateType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4465): bool Function::IsImplemented() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4672): size_t Function::LogOffsetToArgIndex(word offset) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5277): bool Function::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5330): void SpaceDefn::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5364): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5378): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5392): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5414): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5431): void FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5439): TypeTags FuncSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5446): void FuncSpec::GetNames(stringVector& names) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5454): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5461): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5468): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5475): void FuncSpec::Instantiating(CxxScopedVector& locals) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5483): bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5491): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5499): TypeMatch FuncSpec::MatchTemplate(const TypeSpec* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5509): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5517): bool FuncSpec::NamesReferToArgs(const NameVector& names,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5533): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5540): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5547): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5554): void FuncSpec::SetPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5561): void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5577): const TypeTags* FuncSpec::Tags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5584): TypeTags* FuncSpec::Tags()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5765): void SpaceData::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(363): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(446): void CxxScoped::AddFiles(LibItemSet& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(456): void CxxScoped::AddReference(CxxNamed* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(618): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(627): bool CxxScoped::GetRange(size_t& begin, size_t& left, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(648): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(657): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(666): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(675): bool CxxScoped::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(684): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(692): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(705): bool CxxScoped::IsIndirect(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1113): void Enum::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1125): TypeSpec* Enum::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1348): void Enumerator::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1490): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1561): void Forward::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1693): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1954): void Friend::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1971): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1980): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1989): CxxScoped* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2333): CxxScoped* MemberInit::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2386): CxxToken* TemplateParm::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2467): CxxScoped* TemplateParm::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2480): CxxToken* TemplateParm::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2918): void Typedef::GetDecls(std::set< CxxNamed* >& items)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2925): TypeName* Typedef::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(331): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(239): template< typename T > void GetSymbols
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(251): bool IsSortedByName(const CxxScoped* item1, const CxxScoped* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(282): bool IsSortedByPos(const CxxNamed* item1, const CxxNamed* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(312): bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(440): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(447): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(454): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(461): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(468): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(475): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(482): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(489): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(496): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(503): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(510): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(854): void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(861): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(868): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(875): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(882): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(889): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(896): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(903): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(910): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(917): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(924): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(931): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(247): template< typename T > void EraseSymbol(const CxxScoped* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(267): template< typename T > void ListSymbols(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(320): bool CxxToken::IsPointer(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(771): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(830): Numeric IntLiteral::BaseNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(967): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(990): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1006): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(77): bool AreInSameStatement(const CxxNamed* item1, const CxxNamed* item2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(275): bool IncludesAreSorted(const string& line1, const string& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(308): word NotFound(string& expl, fixed_string text, bool quotes = false)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(322): word Report(string& expl, fixed_string text, word rc = 0)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(333): word Report(string& expl, const std::ostringstream& stream, word rc = 0)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(344): void ReportFix(CliThread& cli, word rc, string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(381): word Unimplemented(string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3709): bool Editor::IsDirective(size_t pos, fixed_string hash) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(138): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(146): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(316): size_t Lexer::CurrBegin(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(342): size_t Lexer::CurrEnd(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1128): const LineInfo* Lexer::GetLineInfo(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1137): LineInfo* Lexer::GetLineInfo(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1146): size_t Lexer::GetLineInfoIndex(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1170): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1177): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1195): LineType Lexer::GetLineType(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1284): bool Lexer::GetNthLine(size_t n, string& s, bool crlf) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1776): size_t Lexer::LineSize(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1800): size_t Lexer::NextBegin(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1900): size_t Lexer::NextPos(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2119): size_t Lexer::PrevBegin(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2195): void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(94): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.cpp(74): bool LibItemSort::operator()
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(40): bool IsSortedAlphabetically(const string& s1, const string& s2)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(82): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(89): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(96): LibrarySet* LibrarySet::Assign(LibrarySet* that)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(113): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(166): LibrarySet* LibrarySet::Create
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(174): LibrarySet* LibrarySet::DeclaredBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(181): LibrarySet* LibrarySet::Declarers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(188): LibrarySet* LibrarySet::Definitions() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(195): LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(202): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(227): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(234): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(241): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(266): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(285): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(292): LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(299): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(306): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(338): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(345): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(352): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(369): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(381): LibrarySet* LibrarySet::OpError(fixed_string op) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(409): LibrarySet* LibrarySet::ReferencedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(416): LibrarySet* LibrarySet::Referencers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(526): LibrarySet* LibrarySet::Union(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(533): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(540): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(245): size_t Parser::CurrPos() const
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.cpp(35): bool IsSortedByName(const LibraryItem* item1, const LibraryItem* item2)
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(434): BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(441): BaseBot* BaseBot::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(29): void ConvoySubversion::clear()  // <b>
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(37): void ConvoySubversion::decrement()
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(425): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(262): bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(280): bool MapAndUnits::can_move_to_province
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(562): TokenMessage MapAndUnits::encode_location(const Location& location) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(838): TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1145): const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1384): MapAndUnits* MapAndUnits::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2455): Token MapAndUnits::province_token(ProvinceId province) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2574): bool MapAndUnits::set_move_by_single_step_convoy_order
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(32): Token::Token(const category_t cat, const subtoken_t sub)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(40): int Token::get_number() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(49): bool Token::is_number() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(56): bool Token::is_power() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(63): bool Token::is_province() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(70): Token& Token::operator=(const Token& that)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(118): Token::SeasonType Token::order_season() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(129): PowerId Token::power_id() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(137): ProvinceId Token::province_id() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(260): Token power_token(PowerId power)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(273): Token province_token(ProvinceId province)
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(111): Token TokenMessage::at(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(118): void TokenMessage::clear()
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(245): Token TokenMessage::front() const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(338): Token TokenMessage::operator[](size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp(328): TokenTextMap* TokenTextMap::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(37): size_t WinterOrders::get_number_of_results() const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(234): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(85): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(77): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(198): AlarmStatus Alarm::Status() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(90): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(154): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(48): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(67): bool CfgFlagParm::GetValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(68): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(260): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(60): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(65): void CinThread::ClearClient(const Thread* client)
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(89): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp(596): bool CliBuffer::ReadingFromFile() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(118): uint32_t CliCookie::Index(uint32_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(55): void Debug::Assert(bool condition, debug64_t errval)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(71): void Debug::ft(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(79): void Debug::ftnt(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.cpp(189): bool Element::RunningInLab()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(193): CtorChain::CtorChain(FunctionTrace* inner) :
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(210): bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(263): CtorChain::Action CtorChain::CalcAction
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(331): TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(350): bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(393): bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(411): TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(460): void CtorChain::HandleFunction(FunctionTrace* func)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(487): void CtorChain::MoveOuterAboveInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(501): void CtorChain::MoveOuterAboveInner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(514): void CtorChain::SetOuter(FunctionTrace* outer)
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp(145): void Heap::Freeing(void* addr, size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp(161): bool Heap::IsFixedSize() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp(195): void Heap::Requested(size_t size, void* addr)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::SuspendRoot()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(55): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(139): size_t Log::Count()
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(496): void LogBuffer::UpdateMax()
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp(176): void LogGroup::SetSuppressed(bool suppressed)
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.cpp(188): LogGroup* LogGroupRegistry::Group(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.cpp(142): size_t MainArgs::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(196): Heap* EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(213): Heap* Memory::AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(230): MemoryType Memory::AddrToType(const void* addr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(247): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(427): bool Memory::Protect(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(508): bool Memory::Unprotect(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(539): size_t Memory::Words(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(59): const FactionFlags& AllFactions()
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(76): const FactionFlags& ShutdownFactions()
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(168): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(68): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(125): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(126): NbHeap::index_t IndexToChild(NbHeap::index_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(135): NbHeap::index_t IndexToParent(NbHeap::index_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(144): NbHeap::index_t IndexToSibling(NbHeap::index_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(155): size_t Log2Size(NbHeap::level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(164): size_t LevelToSize(NbHeap::level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(173): NbHeap::level_t SizeToLevel(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(392): bool NbHeap::AddrIsValid(const void* addr, bool header) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(433): HeapBlock* NbHeap::AllocBlock(level_t level, size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(465): NbHeap::index_t NbHeap::BlockToIndex
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(532): NbHeap::BlockState NbHeap::Corrupt(int reason, bool restart) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(544): HeapBlock* NbHeap::Dequeue(level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(645): void NbHeap::EnqBlock(HeapBlock* block, index_t index, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(654): HeapBlock* NbHeap::Enqueue(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(697): void NbHeap::FreeBlock(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(716): NbHeap::BlockState NbHeap::GetState(index_t index) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(732): HeapBlock* NbHeap::IndexToBlock(index_t index, level_t level) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(752): void NbHeap::ReleaseBlock(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(768): void NbHeap::ReserveBlock(const HeapBlock* block)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(781): void NbHeap::SetState(index_t index, BlockState state)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(797): void NbHeap::SplitAncestors(index_t block)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(845): NbHeap::BlockState NbHeap::ValidateBlock
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(172): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(75): char BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(98): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(59): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(70): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(95): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(319): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(486): size_t ObjectPool::AvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(493): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(693): void ObjectPool::EnqBlock(Pooled* obj, bool deleted)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(785): size_t ObjectPool::Expansions() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(792): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(833): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(840): bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(852): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(859): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(866): ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(885): Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(956): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(965): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(974): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(279): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(43): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(124): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(129): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(134): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(139): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(144): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(149): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(154): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(58): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(89): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(101): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(40): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(38): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(50): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.cpp(38): bool Restart::ClearsMemory(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.cpp(69): RestartLevel Restart::LevelToClear(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(120): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(112): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(243): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(315): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(119): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(33): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(40): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(93): bool FileWalker::AtEnd() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(100): void FileWalker::GetName(string& fileName) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(109): bool FileWalker::IsSubdir() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(104): void* SysHeap::Addr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(136): bool SysHeap::CanBeProtected() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(171): void SysHeap::ListHeaps(std::set< void* >& heaps, std::ostringstream& expl)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(33): SysLock::SysLock() :
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(45): SysLock::~SysLock()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(63): void SysLock::Acquire()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp(95): void SysLock::Release()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(49): DWORD GetMemoryProtection(MemoryProtection attrs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(62): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(49): signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(227): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(267): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(120): fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(136): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(145): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(256): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.cpp(46): SysTickTimer* SysTickTimer::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(58): TimePoint SysTickTimer::Now() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(174): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(184): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(200): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(208): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(238): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(256): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(31): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(32): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(39): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(46): void ThisThread::IncludeInTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(53): DelayRc ThisThread::Pause(const Duration& timeout)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(60): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(67): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(74): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(81): TraceRc ThisThread::StartTracing(const string& opts)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(88): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(106): std::atomic_flag& AccessFtLock()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(455): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1164): Thread* Thread::ActiveThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1176): SysMutex* Thread::BlockingMutex() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1183): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1201): bool Thread::CanBeScheduled() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1260): bool Thread::ClearActiveThread(Thread* active)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1743): Thread* Thread::FindRunningThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1769): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1815): void Thread::FunctionInvoked(fn_name_arg func, const std::nothrow_t&)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1835): BlockingReason Thread::GetBlockingReason() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1842): signal_t Thread::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1849): TraceStatus Thread::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2010): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2017): bool Thread::IsScheduled() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2024): bool Thread::IsTraceable() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2080): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2140): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2321): uint8_t Thread::MutexCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2328): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2347): DelayRc Thread::Pause(Duration time)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2389): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2672): void Thread::ResetDebugFlags()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2769): Thread* Thread::RunningThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2797): Thread* Thread::RunningThread(const std::nothrow_t&)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2853): void Thread::SetStatus(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2951): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3241): TraceRc Thread::StartTracing(const string& opts)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3273): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3442): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3470): bool Thread::TraceRunningThread(Thread*& thr, const std::nothrow_t&)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3497): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3688): void Thread::UpdateMutex(SysMutex* mutex)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3695): void Thread::UpdateMutexCount(bool acquired)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(204): ThreadAdmin* AccessAdminData()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(290): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(366): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(453): bool ThreadAdmin::ReinitOnSchedTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(461): word ThreadAdmin::RtcInterval()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(469): word ThreadAdmin::RtcLimit()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(477): Duration ThreadAdmin::RtcTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(486): Duration ThreadAdmin::SchedTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(506): word ThreadAdmin::StackCheckInterval()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(514): word ThreadAdmin::StackUsageLimit()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(546): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(558): word ThreadAdmin::TrapInterval()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(566): word ThreadAdmin::TrapLimit()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(574): bool ThreadAdmin::TrapOnRtcTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(48): bool IsSortedByThreadId(const Thread* thr1, const Thread* thr2)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(267): Thread* ThreadRegistry::FindThread(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(310): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(323): std::vector< Thread* > ThreadRegistry::GetThreads() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(361): bool ThreadRegistry::IsDeleted() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(508): size_t ThreadRegistry::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(114): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(110): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(146): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(166): void* TraceBuffer::AddFunction()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(234): uint32_t TraceBuffer::AllocSlot()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(380): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(398): bool TraceBuffer::Insert(TraceRecord* record)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(430): fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(462): const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(482): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(489): void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(509): void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(620): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(780): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(94): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(47): int FunctionStats::Compare(const FunctionStats& that) const
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(65): void FunctionStats::IncrCalls(const Duration& net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1233): word CheckHeap(bool shouldExist, const CliThread& cli, Heap*& heap)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1719): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1753): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1782): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2219): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2253): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2282): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2761): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2792): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(148): TestDatabase::State TestDatabase::GetState(const string& testname)
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(195): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(194): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(270): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(77): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(130): void SysSocket::SetStatus(bool ok, const string& err)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(154): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(173): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(41): uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(43): uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(45): uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(47): uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(49): uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(51): uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(157): bool SysSocket::IsValid() const
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(467): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(89): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(78): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(76): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(94): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(76): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(73): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(74): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(105): void DnRouteFeatureProfile::SetActive(bool on)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(113): void DnRouteFeatureProfile::SetDN(Address::DN dn)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(81): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(107): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(71): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(90): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(93): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(86): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(82): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(335): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(932): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(942): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(137): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(214): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(221): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(147): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(84): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(695): void InvokerPool::RecordDelay(MsgPriority prio, const Duration& delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(785): size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(793): Duration InvokerPool::WorkQMaxDelay(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(801): size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(169): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(117): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(241): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(328): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(359): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(414): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(198): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(129): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(142): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(155): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(167): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(179): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(192): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(78): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(368): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(377): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(78): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(313): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(133): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(168): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(251): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(259): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(61): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(378): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(118): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(199): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(73): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(80): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(53): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(499):    Debug::ft("CodeFile.Affecters");
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(2120):    Debug::ft("Tracepoint.OnLine");
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(103):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(42):    Debug::ft("Exception.ctor");  //@
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(35):    Debug::ft("MutexGuard.ctor");
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(55):       Debug::ftnt("MutexGuard.Release");
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ftnt(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(73):    Debug::ft("NodeBase.SE_Handler");
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1667):    Debug::ft("Thread.ExitIfSafe");
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2560):    Debug::ft("Thread.Ready");
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2923):    Debug::ft("Thread.SignalHandler");
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3022):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3516):       Debug::ft(Thread_TrapHandler);  //@
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3992):       Debug::ft(RecoveryThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(689):    Debug::ft(Context_ProcessWork);
W110 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(44): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(223): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(299): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(334): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(91): class CxxSymbols: public NodeBase::Base
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(50): class Interpreter : public NodeBase::Base
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(43): struct AlarmDynamic : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(48): struct ClassDynamic : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(56): struct LogDynamic : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(84): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(97): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(179): struct ObjectPoolDynamic : public Persistent
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(37): class FileWalker : public FileList
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(38): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(272): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(359): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(55): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(64): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1084): class TestHeap : public NbHeap
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1470): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3165): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h(41): class TestDatabase : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(52): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(50): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(78):    struct PotsProfileDynamic : public Persistent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(45): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(63): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(102): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(192): class TimerPool : public NodeBase::ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(113): class SbTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(56): class PotsCallIpService : public UdpIpService
W111 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(61): class ProtectedHeap : public NbHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(359): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(751): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(48): class EventHandler : public NodeBase::Immutable
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
W117 Line can merge with the next line and be under the length limit
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(238):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(1710):          (press->message == contents))
  C:/Users/gregu/Documents/rsc/rsc/nb/CliStack.h(65):    const CliCommand* FindCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(768):                      ->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(592):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(606):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(610):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(612):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(614):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(618):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(626):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(628):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(415):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(448):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(450):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(462):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(616):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(630):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(341):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(351):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(353):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(698):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(702):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(704):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(714):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(718):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(720):    BindEventHandler
W119 Argument passed by value is modified
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(44/1): DigitString::DigitString(Address::DN dn) : size_(0)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(441/5):     const string& line2, size_t begin2, size_t end2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1792/3):    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2310/2):    const CxxScope* scope, CodeFile* file, SymbolView& view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(352/2):    const CxxNamed* item, word offset, const string& info) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2062/1): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4759/2):    const CxxScope* scope, CodeFile* file, SymbolView& view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4941/1): void Function::SetOperator(Cxx::Operator oper)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(3187/1): void Using::SetScope(CxxScope* scope)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(227/2): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(249/2): size_t FindTemplateEnd(const string& name, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(731/5):    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(765/2): size_t rfind_first_not_of(const string& str, size_t off, const string& chars)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(778/2): size_t rfind_first_of(const string& str, size_t off, const string& chars)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(863/1): bool Editor::CodeFollowsImmediately(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1882/1): size_t Editor::FindAndCutInclude(size_t pos, const string& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3286/1): word Editor::InsertForward(size_t pos, const string& forward, string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3448/1):    (size_t pos, const string& nspace, const string& forward, string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(498/1): LibExprErr Interpreter::ApplyOperator(bool operand)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(609/1): LibrarySet* Interpreter::Error(LibExprErr err) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(316/1): size_t Lexer::CurrBegin(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(400/3): size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(643/1): size_t Lexer::FindLineEnd(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1029/2): size_t Lexer::GetHexNum(int64_t& num, size_t max)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1052/1): bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1900/1): size_t Lexer::NextPos(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2036/1): bool Lexer::NoCodeFollows(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2119/1): size_t Lexer::PrevBegin(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2150/1): size_t Lexer::Rfind(size_t pos, const string& str)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2165/1): size_t Lexer::RfindFirstOf(size_t pos, const string& chars)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2180/1): size_t Lexer::RfindNonBlank(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2244/1): size_t Lexer::SkipCharLiteral(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2262/1): size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2295/1): size_t Lexer::SkipTemplateSpec(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1044/2): bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2375/1): size_t Parser::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4168/2): void Parser::Log(Warning warning, size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(147/1): bool Token::set_number(int number)
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(30/1): size_t find_first_one(uword n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(55/1): size_t log2(size_t n, bool up)
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(122/1): size_t round_to_2_exp_n(size_t n, size_t e, bool up)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(90/1): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp(192/3):    (const CliThread& cli, const string& expl, std::streamsize p)
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.cpp(39/2): CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.cpp(142/2): void CliTextParm::Explain(ostream& stream, col_t indent) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(733/2):    (const string& expl, size_t begin, size_t end, col_t indent) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.cpp(65/4):    const string& prefix, const byte_t* bytes, size_t count)
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(95/1): LogBuffer::LogBuffer(size_t size) :
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(243/2): NbHeap::NbHeap(MemoryType type, size_t size) : Heap(),
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(414/1): void* NbHeap::Alloc(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(697/1): void NbHeap::FreeBlock(HeapBlock* block, level_t level)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp(797/1): void NbHeap::SplitAncestors(index_t block)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(493/1): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(507/1): Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(531/1): bool ObjectPool::Corrupt(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(71/1): void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(101/1): void SysTime::AddDays(size_t days)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(134/1): void SysTime::AddMsecs(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(392/1): void SysTime::SubDays(size_t days)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(425/1): void SysTime::SubMsecs(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1260/1): bool Thread::ClearActiveThread(Thread* active)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1856/1): bool Thread::HandleSignal(signal_t sig, uint32_t code)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2347/1): DelayRc Thread::Pause(Duration time)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3425/1): void Thread::Trace(Thread* thr,
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(186/1): bool TraceBuffer::AllocBuffers(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(361/1): TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(143/2):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(143/3):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp(245/1): SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(99/1): bool SysTcpSocket::Listen(size_t backlog)
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(385/3): void Context::Enqueue(Q2Way< Context >& whichq, MsgPriority prio, bool henq)
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(683/1): void Context::ProcessWork(InvokerThread* inv)
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(594/1): bool Message::Retrieve(ProtocolSM* psm)
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(661/1): bool Message::Send(Route route)
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(335/1):    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(392/1): EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(832/2):    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(900/2):    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(75/1): Timer::QId TimerRegistry::CalcQId(secs_t secs) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(224/2): TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(114/3):       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1024/1):    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
W120 Function returns non-const reference or pointer to member data
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1000):    DigitString& DialedDigits() { return dialed_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1535):    return editor_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(105):    CxxNamedSet& Xref() const { return xref_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(75):    LibItemSet& Items() { return items_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(82):    Registry< CliParm >& Parms() { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(182):    CliCookie& Cookie() { return cookie_; }
W125 Non-const cast is not a downcast
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(959):          auto bt = dynamic_cast< const BuffTrace* >(bt_);
W127 Data could be free
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(107):    static const msecs_t MsecsToSleep;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(111):    static const secs_t MaxDelaySecs;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(116):    static const size_t NumOfSlots;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(122):    static const Address::DN StartDN;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(127):    static const secs_t HoldingTimeSecs;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(132):    static const uint32_t DNsPer100Calls;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(247):    static fixed_string DigitToChar;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1195):    static int StateCount_[BcState::MaxBcId + 1];
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(236):    static std::vector< CodeWarning > Warnings_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(240):    static size_t WarningCounts_[Warning_N];
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(88):    static uint16_t Last_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(403):    static StackArg AutoType_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(900):    static bool Tracing;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(974):    static std::string LastLogLoc_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(978):    static std::set< Tracepoint > Tracepoints_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(987):    static std::vector< XrefFrame > XrefFrames_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(276):    static UsingVector Usings_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1127):    static size_t Depth_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(810):    static const TokenPtr StartOfExpr;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(586):    static std::set< Editor* > Editors_;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(58):    static const char ReadOnlyChar;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(269):    static uint32_t SeqNo_;
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(651):    static uint32_t Backups[MaxCause + 1];
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(358):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(43):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(51):    static const size_t MaxNameSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(55):    static const size_t MaxExplSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/AlarmRegistry.h(49):    static const id_t MaxAlarms;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(60):    static fixed_string AnyBoolParm;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(53):    static const char EscapeChar;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(58):    static const char StringChar;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(62):    static const char BreakChar;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(66):    static const char CommentChar;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(70):    static const char OptSkipChar;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(78):    static const char SymbolChar;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(66):    static const char CharSeparator;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(39):    static fixed_string AnyIntParm;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(75):    static const char RangeSeparator;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliRegistry.h(83):    static const size_t MaxIncrements;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(269):    static const char CliPrompt;
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(141):    static Flags SwFlags_;
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h(186):    static const fn_depth MaxDispDepth;
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(58):    static const size_t MaxExplSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.h(115):    static const size_t BundledLogSizeThreshold;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBufferRegistry.h(53):    static const size_t LogBufferSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(55):    static const size_t MaxExplSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(59):    static const id_t MaxLogs;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h(50):    static const id_t MaxGroups;
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexRegistry.h(49):    static const id_t MaxMutexes;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbPools.h(41):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(327):    static const uint8_t OrphanThreshold;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(332):    static const size_t OrphanMaxLogs;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.h(78):    static const size_t MaxSingletons;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.h(99):    static Singletons* Instance_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(48):    static const size_t MaxExplSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(88):    static const char NotUpdated;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(46):    static const size_t MaxExplSize;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(90):    static fixed_string ReportHeader;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(52):    static const size_t MaxStats;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(56):    static const size_t MaxGroups;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(54):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(59):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(66):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static Duration SleepInterval;
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(95):    static const size_t MaxSymbols;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(162):    static const int16_t YearOfT0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(166):    static const int16_t WeekDayOfT0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(170):    static const int64_t SecsInLeapYear;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(174):    static const int64_t SecsInNonLeapYear;
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(83):    static ThreadId PrevTid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.h(91):    static const size_t MaxTools;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(59):    static const Id InvalidId;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(97):    static const size_t HashTableSizeLog2;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(101):    static const uint32_t HashMask;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(45):    static const size_t MaxBuffSize;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(213):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(181):    static const SignalEntry NilSignalEntry;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(238):    static int StateCount_[State_N];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(365):    static const MessageEntry NilMessageEntry;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(63):    static const size_t MaxInvokers;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(47):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(72):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(101):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(126):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(160):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(185):    static NodeBase::PooledObjectId PsmToAudit_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(198):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(248):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(273):    static const size_t BlockSize;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(300):    static const size_t BlockSize;
W130 Redundant scope
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(89):    Debug::ft("Debug.GetSwFlags");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(99):    Debug::ft("Debug.noop");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(106):    Debug::ft("Debug.Progress");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(116):    Debug::ft("Debug.ResetSwFlags");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(125):    Debug::ftnt("Debug.SetSwFlag");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(144):    Debug::ft("Debug.SwErr");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(153):    Debug::ftnt("Debug.SwFlagOn");
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(170):    Debug::ftnt(Debug_SwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(174):    Debug::ftnt(Debug_SwLog);
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE (i = informational)
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
    35: using namespace MediaBase;
    36: using namespace NetworkBase;
  W032 Unused function
    64:    CliText* CreateText() const override;
  W092 Function could be free
    115:    static void DiscardMsg(const Message& msg, Switch::PortId port);
  W110 Override of Base.Display not found
    44: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    132:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    145:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    165:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    175:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  W022 Add using statement
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    67:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    68:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    65:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  W022 Add using statement
    0: namespace MediaBase
    0: namespace NetworkBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp
  W022 Add using statement
    0: namespace NetworkBase
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    486:    Singleton< TrafficCallPool >::Extant()->Enq((TrafficCall*) addr);
    1023:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDynamic);
  W006 reinterpret_cast
    476:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W053 Data could be const
    171:    Q1Link link_;
  W092 Function could be free
    167:    static c_string strState(State state);
  W106 Function does not invoke Debug::ft
    1319: void PotsTrafficThread::RecordHoldingTime(const Duration& time)
  W110 Override of Base.Display not found
    223: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
  W092 Function could be free
    88:    static void DisplayStateCounts
  W127 Data could be free
    107:    static const msecs_t MsecsToSleep;
    111:    static const secs_t MaxDelaySecs;
    116:    static const size_t NumOfSlots;
    122:    static const Address::DN StartDN;
    127:    static const secs_t HoldingTimeSecs;
    132:    static const uint32_t DNsPer100Calls;
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    89:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    106:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    154:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W032 Unused function
    214:    Digit At(DigitCount i) const;
  W042 Member could be private
    176:    static bool IsValidDigit(Digit d)
    183:    Rc AddDigit(Digit d);
    202:    DigitCount Size() const;
    226:    bool operator==(const DigitString& that) const;
  W043 Member could be protected
    125:    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W092 Function could be free
    101:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    117:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    121:    static uint32_t DNToIndex(DN dn) { return dn - FirstDN + 1; }
    125:    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    176:    static bool IsValidDigit(Digit d)
  W127 Data could be free
    247:    static fixed_string DigitToChar;
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    126:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    41:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    43:    auto& bcssm = static_cast< BcSsm& >(ssm);
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W099 Line contains adjacent spaces
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    67:    auto          sid = msg->GetSignal();
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    70:    CauseInfo*    cci;
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    122:    auto       sid = msg->GetSignal();
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    163:    auto       sid = msg->GetSignal();
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    193:    auto          sid = msg->GetSignal();
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    196:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    113:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp
  W006 reinterpret_cast
    445:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    458:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    486:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    772:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    802:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    932:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1287:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1292:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    0: namespace MediaBase
    0: namespace NetworkBase
    0: namespace NodeBase
    0: namespace SessionBase
  W099 Line contains adjacent spaces
    455:    id_t        idx;
    456:    word        fid, rid;
    458:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    485:    TestRc       rc;
    486:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    488:    id_t         idx;
    489:    word         fid, rid;
    801:    auto          state = GetState();
    802:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    803:    auto          sig = tmsg.GetSignal();
    804:    TimeoutInfo*  toi = nullptr;
    806:    auto          err = true;
    807:    debug64_t     error;
    931:    auto          state = GetState();
    932:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    933:    auto          sig = msg.GetSignal();
    935:    auto          err = true;
    936:    debug64_t     error;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h
  W020 Using statement in header
    51: using namespace NodeBase;
    52: using namespace NetworkBase;
    53: using namespace SessionBase;
    54: using namespace MediaBase;
  W027 Unused class
    299: class CipUdpService : public UdpIpService
  W032 Unused function
    183:    MediaInfo* AddMedia(const MediaInfo& media);
    250:    void InjectFinalMsg() override;
    319:    CliText* CreateText() const override;
    360:    CliText* CreateText() const override;
  W042 Member could be private
    237:    void EnsureMediaMsg() override;
    241:    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    404:    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W110 Override of Base.Display not found
    299: class CipUdpService : public UdpIpService
    334: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp
  W022 Add using statement
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h
  W020 Using statement in header
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h
  W020 Using statement in header
    53: using namespace MediaBase;
    54: using namespace NodeBase;
    55: using namespace SessionBase;
  W037 Member hides inherited name
    316:    static const Id NextId = FirstId + 50;
    883:    static const Id NextId                 = FirstUn + 7;
  W042 Member could be private
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1151:    CipPsm* AllocNPsm();
  W043 Member could be protected
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W053 Data could be const
    340:    Progress::Ind progress_;
    356:    Cause::Ind cause_;
  W075 Virtual function is public
    1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1020:    virtual EventHandler::Rc RaiseRemoteProgress
    1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1030:    virtual EventHandler::Rc RaiseLocalProgress
    1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1045:    virtual EventHandler::Rc RaiseLocalRelease
    1047:    virtual EventHandler::Rc RaiseRemoteRelease
    1049:    virtual EventHandler::Rc RaiseReleaseCall
    1051:    virtual EventHandler::Rc RaiseApplyTreatment
    1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1076:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1083:    virtual EventHandler::Rc HandleLocalAlerting();
    1088:    virtual EventHandler::Rc HandleLocalAnswer();
    1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1105:    virtual CipMessage* BuildCipIam();
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1212:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W082 Adjacent arguments have the same type
    1216:    BcFactory(Id fid, ProtocolId prid, c_string name);
  W090 Function could be const
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1167:    CipMessage* BuildCipRel(Cause::Ind cause);
  W120 Function returns non-const reference or pointer to member data
    1000:    DigitString& DialedDigits() { return dialed_; }
  W127 Data could be free
    1195:    static int StateCount_[BcState::MaxBcId + 1];
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    382:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    827:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W022 Add using statement
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
  W102 Line length exceeds the standard maximum
    283:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    127:       auto rc = AddDigit(Digit(ds.digits_[i]));
    138:    if(i < Size()) return Digit(digits_[i]);
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    136: Digit DigitString::At(DigitCount i) const
  W119 Argument passed by value is modified
    44/1: DigitString::DigitString(Address::DN dn) : size_(0)
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    359:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    360:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    362:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    391:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    400:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    426:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    427:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    531:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    672:          return static_cast< ProxyBcPsm* >(p);
    704:          ppsm = static_cast< ProxyBcPsm* >(psm);
    909:    auto& tmsg = static_cast< const CipMessage& >(msg);
    914:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    0: namespace MediaBase
    0: namespace NetworkBase
    0: namespace NodeBase
    0: namespace SessionBase
  W099 Line contains adjacent spaces
    359:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    360:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    361:    auto          sid = msg->GetSignal();
    362:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    364:    CauseInfo*    cci;
  W117 Line can merge with the next line and be under the length limit
    238:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h
  W020 Using statement in header
    34: using namespace MediaBase;
    35: using namespace NodeBase;
    36: using namespace SessionBase;
  W027 Unused class
    193: class ProxyBcDisconnecting : public BcDisconnecting
  W028 Unused data
    64:    static const ServicePortId NextPortId = FirstPortId + 1;
    220:    static const Id NextId        = FirstId + 4;
    304:    static const Id NextId              = FirstId + 7;
    389:    static const Id NextId          = FirstId + 3;
  W032 Unused function
    196:    explicit ProxyBcDisconnecting(ServiceId sid);
  W037 Member hides inherited name
    64:    static const ServicePortId NextPortId = FirstPortId + 1;
    214:    static const Id FirstId = BcEvent::NextId;
    220:    static const Id NextId        = FirstId + 4;
    304:    static const Id NextId              = FirstId + 7;
  W042 Member could be private
    496:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    473:    virtual EventHandler::Rc RaiseReleaseUser
    475:    virtual EventHandler::Rc RaiseProxyProgress
    477:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    478:    virtual EventHandler::Rc RaiseProxyRelease
    513:    void SetUPsm(MediaPsm& psm) override;
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
  W042 Member could be private
    46:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp
  W106 Function does not invoke Debug::ft
    187: bool CodeCoverage::Defined(const string& func) const
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h
  W092 Function could be free
    114:    static NodeBase::word Report
  W110 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp
  W007 Cast down the inheritance hierarchy
    69:       auto file = static_cast< CodeFile* >(*f);
    139:       auto file = static_cast< CodeFile* >(*f);
    156:       auto file = static_cast< CodeFile* >(*f);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto file = static_cast< CodeFile* >(*f);
    121:       auto dir = static_cast< CodeDir* >(*d);
    130:       auto dir = static_cast< CodeDir* >(*d);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDirSet.h
  W042 Member could be private
    54:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    54:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp
  W007 Cast down the inheritance hierarchy
    78:          auto base = static_cast< const Class* >(*b);
    207:       auto base = static_cast< const Class* >(*b);
    246:                auto type = static_cast< const Typedef* >(*item2);
    269:          auto type = static_cast< const Typedef* >(*item1);
    1189:       auto f = static_cast< const CodeFile* >(*i);
    1197:       auto f = static_cast< const CodeFile* >(*u);
    1455:       auto file = static_cast< const CodeFile* >(*f);
    1623:          auto file = static_cast< const CodeFile* >(*d);
    1914:       auto file = static_cast< const CodeFile* >(*f);
    2068:       const auto& name = static_cast< const CodeFile* >(*f)->Name();
    2226:                auto incl = static_cast< const CodeFile* >(*a);
    2323:          auto file = static_cast< const CodeFile* >(*d);
    2352:       auto file = static_cast< CodeFile* >(*f);
    2374:       auto base = static_cast< const Class* >(*b);
  W064 Implicit destructor invoked
  i 2008:    CodeWarning log(warning, this, pos, item, offset, info);
  W102 Line length exceeds the standard maximum
    2034: void CodeFile::LogRemoveForwards(ostream* stream, const CxxNamedSet& items) const
  W106 Function does not invoke Debug::ft
    218: bool IsSortedByPosition(const Function* func1, const Function* func2)
    1540: const Lexer& CodeFile::GetLexer() const
    1547: void CodeFile::GetLineCounts() const
    1563: LineType CodeFile::GetLineType(size_t n) const
    1705: size_t CodeFile::IndentSize() const
    1726: void CodeFile::InsertAsm(Asm* code)
    1734: void CodeFile::InsertClass(Class* cls)
    1742: void CodeFile::InsertData(Data* data)
    1750: bool CodeFile::InsertDirective(DirectivePtr& dir)
    1759: void CodeFile::InsertEnum(Enum* item)
    1767: void CodeFile::InsertForw(Forward* forw)
    1775: void CodeFile::InsertFunc(Function* func)
    1783: void CodeFile::InsertInclude(IncludePtr& incl)
    1811: void CodeFile::InsertMacro(Macro* macro)
    1819: void CodeFile::InsertSpace(SpaceDefnPtr& space)
    1827: void CodeFile::InsertStaticAssert(StaticAssert* assert)
    1835: void CodeFile::InsertType(Typedef* type)
    1843: void CodeFile::InsertUsing(Using* use)
    1851: size_t CodeFile::LineLengthMax() const
  W107 Function does not invoke Debug::ft as first statement
    499:    Debug::ft("CodeFile.Affecters");
  W120 Function returns non-const reference or pointer to member data
    1535:    return editor_;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h
  W020 Using statement in header
    35: using std::string;
  W026 Unused argument
    365/3:       const CxxNamed* item, const CxxScope* scope) const;
  W042 Member could be private
    194:    size_t CalcGroup(const Include& incl) const;
    241:    NodeBase::istreamPtr InputStream() const;
    252:    void LogLine(size_t line, Warning warning);
  W082 Adjacent arguments have the same type
    287:    void UpdatePos(EditorAction action,
  W090 Function could be const
    203:    void AddToXref();
  W092 Function could be free
    171:    size_t IndentSize() const;
    175:    size_t LineLengthMax() const;
    265:    static void GenerateReport(std::ostream* stream, const LibItemSet& set);
    319:    const stringVector& Prolog() const;
    405:    void AddIndirectExternalTypes
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    587:    LibrarySet* nbSet = (LibrarySet*) this;
    615:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    156:       auto file = static_cast< CodeFile* >(*f);
    178:       auto file = static_cast< CodeFile* >(*f);
    230:       auto file = static_cast< CodeFile* >(*f);
    255:       auto file = static_cast< CodeFile* >(*f);
    286:       auto file = static_cast< CodeFile* >(*f);
    312:       auto file = static_cast< CodeFile* >(*f);
    340:       auto file = static_cast< CodeFile* >(*f);
    383:       auto file = static_cast< CodeFile* >(*f);
    431:       auto file = static_cast< CodeFile* >(*f);
    458:       auto file = static_cast< CodeFile* >(*f);
    492:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Items();
    499:       auto file = static_cast< CodeFile* >(*f);
    539:       auto file = static_cast< CodeFile* >(*f);
    566:       auto file = static_cast< CodeFile* >(*f);
    738:       auto file = static_cast< CodeFile* >(*f);
    766:       auto file = static_cast< CodeFile* >(*f);
    884:       auto file = static_cast< CodeFile* >(*f);
    964:       auto file = static_cast< CodeFile* >(*f);
    991:       auto file = static_cast< CodeFile* >(*f);
    1021:       auto file = static_cast< CodeFile* >(*f);
  W008 Cast removes const qualification
    587:    LibrarySet* nbSet = (LibrarySet*) this;
    615:    LibrarySet* nsSet = (LibrarySet*) this;
  W064 Implicit destructor invoked
  i 913:                FileLevel item(files[i], level);
  W106 Function does not invoke Debug::ft
    56: bool IsSortedByFileLevel(const FileLevel& item1, const FileLevel& item2)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.h
  W042 Member could be private
    104:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    104:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.cpp
  W007 Cast down the inheritance hierarchy
    122:       auto item = static_cast< CxxNamed* >(*i);
    148:       auto item = static_cast< CxxNamed* >(*i);
    176:       auto item = static_cast< CxxNamed* >(*i);
    198:       auto item = static_cast< CxxNamed* >(*i);
    217:       auto item = static_cast< CxxScoped* >(*i);
    238:       auto item = static_cast< CxxScoped* >(*i);
    260:       auto item = static_cast< CxxNamed* >(*i);
  W106 Function does not invoke Debug::ft
    55: void CodeItemSet::CopyItems(const CxxNamedSet& items)
    67: void CodeItemSet::CopyUsages(const CxxUsageSets& usages)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeItemSet.h
  W042 Member could be private
    64:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    46:    void CopyUsages(const CxxUsageSets& usages) override;
    64:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp
  W097 Line indentation is not a multiple of the standard value
    441:     const string& line2, size_t begin2, size_t end2)
  W106 Function does not invoke Debug::ft
    411: IndentRule ClassifyIndent(string& id)
    428: bool InsertSpaceOnMerge(const string& line1, const string& line2, size_t begin2)
    439: size_t LineMergeLength
  W119 Argument passed by value is modified
    441/5:     const string& line2, size_t begin2, size_t end2)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h
  W028 Unused data
    182: extern const std::string SingleRule;
    682: extern const NodeBase::Flags NoLF_Mask;
    683: extern const NodeBase::Flags Last_Mask;
    687: extern const NodeBase::Flags Stats_Mask;
  W082 Adjacent arguments have the same type
    311:    SymbolView(Accessibility a, TypeMatch m,
    627: size_t LineMergeLength
    635: bool InsertSpaceOnMerge
  W097 Line indentation is not a multiple of the standard value
    629:     const std::string& line2, size_t begin2, size_t end2);
  W106 Function does not invoke Debug::ft
    707: template< typename T > size_t IndexOf(const std::vector< T >& v, const T& item)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp
  W005 Functional cast
    207:          << spaces(3) << LineType(t) << CRLF;
    218:          *stream << (Attrs_.at(Warning(w)).fixable ? '*' : SPACE);
    219:          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
    220:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  W007 Cast down the inheritance hierarchy
    921:       auto func = static_cast< const Function* >(item_);
    951:       auto data = static_cast< const Data* >(item_);
    973:       auto func = static_cast< const Function* >(item_);
    998:       auto func = static_cast< const Function* >(item_);
    1075:       auto cls = static_cast< const Class* >(item_);
    1099:       auto cls = static_cast< const Class* >(item_);
    1130:          auto func = static_cast< const Function* >(item_);
  W106 Function does not invoke Debug::ft
    127: word CodeWarning::FindWarning(const CodeWarning& log)
    338: bool CodeWarning::HasCodeToDisplay() const
    345: bool CodeWarning::HasInfoToDisplay() const
    352: bool CodeWarning::HasWarning(const CodeFile* file, Warning warning)
    786: bool CodeWarning::IsInformational() const
    793: bool CodeWarning::IsSortedByFile
    812: bool CodeWarning::IsSortedByType
    831: bool CodeWarning::IsSortedToFix
    850: size_t CodeWarning::Line() const
    912: bool CodeWarning::Suppress() const
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h
  W020 Using statement in header
    38: using NodeBase::fixed_string;
    39: using NodeBase::word;
  W032 Unused function
    144:    bool operator!=(const CodeWarning& that) const;
  W042 Member could be private
    94:    CodeFile* File() const { return loc_.GetFile(); }
    98:    size_t Pos() const { return loc_.GetPos(); }
    128:    std::string GetNewFuncName(std::string& expl) const;
    133:    void UpdatePos(EditorAction action,
  W053 Data could be const
    205:    Warning warning_;
    220:    word offset_;
    224:    std::string info_;
  W054 Data could be const pointer
    213:    const CxxNamed* item_;
  W064 Implicit destructor invoked
    82: class CodeWarning
  W082 Adjacent arguments have the same type
    133:    void UpdatePos(EditorAction action,
  W127 Data could be free
    236:    static std::vector< CodeWarning > Warnings_;
    240:    static size_t WarningCounts_[Warning_N];
C:/Users/gregu/Documents/rsc/rsc/ct/CtIncrement.cpp
  W005 Functional cast
    1479:       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
    1493:    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  W007 Cast down the inheritance hierarchy
    1159:             auto dir = static_cast< CodeDir* >(*d);
    1182:             auto file = static_cast< CodeFile* >(*f);
  W043 Member could be protected
    119:    static LibrarySet* Evaluate(CliThread& cli);
  W092 Function could be free
    119:    static LibrarySet* Evaluate(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    558:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    606:          oper = Cxx::Operator(i);
    655:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    661:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    666:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W099 Line contains adjacent spaces
    392:    CxxWord("D",   "D",    "D",  F),  // ALIGNAS
    393:    CxxWord("@",   "@",    "@",  T),  // ASM
    394:    CxxWord("-",   "-",    "D",  F),  // AUTO
    395:    CxxWord("-",   "-",    "b",  T),  // BREAK
    396:    CxxWord("-",   "-",    "c",  T),  // CASE
    397:    CxxWord("C",   "C",    "-",  T),  // CLASS
    398:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    399:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    400:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    401:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    402:    CxxWord("-",   "-",    "d",  T),  // DO
    403:    CxxWord("E",   "E",    "E",  T),  // ENUM
    404:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    405:    CxxWord("DP",  "-",    "-",  F),  // EXTERN
    406:    CxxWord("-",   "-",    "-",  F),  // FINAL
    407:    CxxWord("-",   "-",    "f",  T),  // FOR
    408:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    409:    CxxWord("-",   "-",    "g",  T),  // GOTO
    410:    CxxWord("H",   "H",    "H",  F),  // HASH
    411:    CxxWord("-",   "-",    "i",  T),  // IF
    412:    CxxWord("P",   "P",    "-",  F),  // INLINE
    413:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    414:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    415:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    416:    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
    417:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    418:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    419:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    420:    CxxWord("-",   "-",    "r",  T),  // RETURN
    421:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    422:    CxxWord("$",   "$",    "$",  T),  // STATIC_ASSERT
    423:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    424:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    425:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    426:    CxxWord("D",   "D",    "D",  F),  // THREAD_LOCAL
    427:    CxxWord("-",   "-",    "t",  T),  // TRY
    428:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    429:    CxxWord("C",   "C",    "-",  T),  // UNION
    430:    CxxWord("U",   "U",    "U",  T),  // USING
    431:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    432:    CxxWord("DP",  "DP",   "D",  F),  // VOLATILE
    433:    CxxWord("-",   "-",    "w",  T),  // WHILE
    434:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    435:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    455:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    456:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    457:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    458:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    459:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    460:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    461:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    462:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    463:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    464:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    465:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    467:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    468:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    469:    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F),  // ALIGNOF_TYPE
    470:    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F),  // NOEXCEPT
    471:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    472:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    473:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    474:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    475:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    476:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    477:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    478:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    479:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    480:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    481:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    482:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    483:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    484:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    485:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    486:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    487:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    488:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    489:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    490:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    491:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    492:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    493:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    494:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    495:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    496:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    497:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    498:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    499:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    500:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    501:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    502:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    503:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    504:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    505:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    506:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    507:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    508:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    509:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    510:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    511:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    512:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    513:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    514:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    515:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    516:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    517:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    518:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    519:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    520:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    521:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    522:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  W106 Function does not invoke Debug::ft
    755: void EraseTemplateArgs
    787: void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
    797: void CxxUsageSets::AddBase(CxxNamed* item)
    805: void CxxUsageSets::AddDirect(CxxNamed* item)
    813: void CxxUsageSets::AddForward(CxxNamed* item)
    824: void CxxUsageSets::AddIndirect(CxxNamed* item)
    832: void CxxUsageSets::AddInherit(CxxNamed* item)
    840: void CxxUsageSets::AddUser(CxxNamed* item)
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h
  W042 Member could be private
    525:    Numeric(NumericType type, size_t width, bool sign) :
  W092 Function could be free
    451:    static void UpdateOperator(Cxx::Operator& oper, size_t args);
    455:    static std::string OperatorToName(Cxx::Operator oper);
    468:    static Cxx::Operator NameToOperator(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    171:          static_cast< const Function* >(item)->IsInline())
    1034:    auto area = static_cast< CxxArea* >(GetScope());
    1037:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1054:          auto c = static_cast< Class* >(*s);
    2199:       auto func = static_cast< const Function* >(item);
    2241:       auto func = static_cast< const Function* >(item);
    2251:       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  W008 Cast removes const qualification
    1283:    return const_cast< Class* >(this);
    1439:    return const_cast< Class* >(this);
    2195:       return const_cast< ClassInst* >(this);
  W064 Implicit destructor invoked
  i 1415:       DataInitAttrs attrs(mem, init, 0);
  W106 Function does not invoke Debug::ft
    390: void Class::AddItem(const CxxNamed* item)
    1280: Class* Class::GetClassTemplate() const
    1316: Cxx::Access Class::GetCurrAccess() const
    1333: void Class::GetDecls(std::set< CxxNamed* >& items)
    1422: bool Class::GetRange(size_t& begin, size_t& left, size_t& end) const
    1436: CxxScope* Class::GetTemplate() const
    1830: Class* Class::OuterClass() const
    2794: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
    2812: void CxxArea::GetDecls(std::set< CxxNamed* >& items)
    2852: void CxxArea::InsertFunc(Function* func)
  W119 Argument passed by value is modified
    1792/3:    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
    2310/2:    const CxxScope* scope, CodeFile* file, SymbolView& view) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    505:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    877:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  W007 Cast down the inheritance hierarchy
    952:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    172:       override { return const_cast< CxxArea* >(this); }
    505:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    542:       override { return const_cast< Class* >(this); }
    877:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
    999:       override { return const_cast< Namespace* >(this); }
  W032 Unused function
    596:    bool IsImplemented() const override;
  W042 Member could be private
    139:    Typedef* FindType(const std::string& name) const;
    201:    Enum* FindEnum(const std::string& name) const;
    205:    Enumerator* FindEnumerator(const std::string& name) const;
    414:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    957:    Namespace* FindNamespace(const std::string& name) const;
  W043 Member could be protected
    91:    const ClassPtrVector* Classes() const { return &classes_; }
    99:    const EnumPtrVector* Enums() const { return &enums_; }
    103:    const ForwardPtrVector* Forws() const { return &forws_; }
    123:    const AsmPtrVector* Assembly() const { return &assembly_; }
    127:    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
  W060 Base class constructor is public
    292:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W064 Implicit destructor invoked
    271: struct DataInitAttrs
  W075 Virtual function is public
    148:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    155:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    159:    virtual CxxScoped* FindItem(const std::string& name) const;
    317:    virtual ClassInst* EnsureInstance(const TypeName* type);
    325:    virtual Class* BaseClass()
    330:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    351:    virtual Class* GetClassTemplate() const;
    366:    virtual bool DerivesFrom(const Class* cls) const;
    492:    bool AddAnonymousUnion(const ClassPtr& cls) override;
  W092 Function could be free
    219:    static Function* FoundFunc
    663:    static bool MemberIsAccessibleTo
    678:    static size_t CreateCodeError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxCharLiteral.h
  W020 Using statement in header
    35: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    870:       auto macro = static_cast< Macro* >(ref_);
    883:       auto macro = static_cast< Macro* >(ref_);
  W106 Function does not invoke Debug::ft
    44: void AlignLeft(ostream& stream, const string& prefix)
    155: CxxToken* Define::AutoType() const
    780: bool Macro::WasRead()
    826: CxxScope* MacroName::GetScope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h
  W042 Member could be private
    246:    virtual CxxToken* GetValue() const = 0;
    291:    CxxToken* RootType() const override { return GetValue(); }
  W043 Member could be protected
    775:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    316:    size_t refs_ : 16;
  W075 Virtual function is public
    246:    virtual CxxToken* GetValue() const = 0;
    251:    virtual bool IsDefined() const { return true; }
    257:    virtual void SetExpr(ExprPtr& rhs);
    291:    CxxToken* RootType() const override { return GetValue(); }
    431:    virtual bool AddElif(Elif* e) { return false; }
    435:    virtual bool AddElse(const Else* e) { return false; }
    439:    virtual bool HasCompiledCode() const { return compile_; }
    490:    void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp
  W007 Cast down the inheritance hierarchy
    1543:          auto derived = static_cast< const Class* >(root);
    1641:       auto thisClass = static_cast< Class* >(thisRoot);
    1649:             auto thatClass = static_cast< Class* >(thatRoot);
    1802:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    1856:       auto type = static_cast< TypeSpec* >(item);
    1866:       spec->SetReferent(static_cast< CxxScoped* >(item), nullptr);
    2052:          static_cast< Class* >(root)->BlockCopied(this);
  W064 Implicit destructor invoked
  i 237:    Tracepoint loc(file, line, action);
  i 276:    Tracepoint loc(file, line, action);
  i 417:    ActiveScope active(scope, access);
  W075 Virtual function is public
    66:    bool Display(ostream& stream, const string& opts) override;
    78:    bool Display(ostream& stream, const string& opts) override;
    94:    bool Display(ostream& stream, const string& opts) override;
    110:    bool Display(ostream& stream, const string& opts) override;
    130:    bool Display(ostream& stream, const string& opts) override;
  W106 Function does not invoke Debug::ft
    193: bool Context::CompilingTemplateFunction()
    243: TypeName* Context::FindXrefItem(const string& name)
    255: const Parser* Context::GetParser()
    263: XrefUpdater Context::GetXrefUpdater()
    321: void Context::OnLine(size_t line, bool compiling)
    335: bool Context::OptionIsOn(char opt)
    363: bool Context::ParsingSourceCode()
    371: bool Context::ParsingTemplateInstance()
    396: void Context::PopXrefFrame()
    414: void Context::PushScope(CxxScope* scope, bool hidden)
    423: void Context::PushXrefFrame(XrefUpdater updater)
    430: void Context::PushXrefItem(TypeName* item)
    452: CxxScope* Context::Scope()
    503: void Context::SetPos(size_t pos)
    518: void Context::SetPos(const CxxLocation& loc)
    918: OptionalCode* ParseFrame::Optional() const
    1109: CxxScope* ParseFrame::Scope() const
    1116: Cxx::Access ParseFrame::ScopeAccess() const
    1123: Cxx::Access ParseFrame::SetAccess(Cxx::Access access)
    1508: bool StackArg::IsBool() const
    2191: TypeName* XrefFrame::FindItem(const string& name) const
    2203: void XrefFrame::PushItem(TypeName* item)
  W107 Function does not invoke Debug::ft as first statement
    2120:    Debug::ft("Tracepoint.OnLine");
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h
  W026 Unused argument
    892/1:    static void Shutdown(NodeBase::RestartLevel level);
    896/1:    static void Startup(NodeBase::RestartLevel level) { }
  W032 Unused function
    152:    size_t Arrays() const;
    314:    bool operator!=(const StackArg& that) const;
    638:    bool operator<(const Tracepoint& that) const;
    730:    static const CxxScope* OuterScope();
  W042 Member could be private
    313:    bool operator==(const StackArg& that) const;
    715:    static Cxx::Access ScopeAccess() { return Frame_->ScopeAccess(); }
    822:    static bool CompilingTemplateFunction();
    846:    static bool OptionIsOn(char opt);
  W050 Data is not private
    322:    CxxToken* item;
    326:    TypeName* name;
    900:    static bool Tracing;
  W064 Implicit destructor invoked
    422: struct ActiveScope
    619: class Tracepoint
  W082 Adjacent arguments have the same type
    276:    TypeMatch CalcMatchWith(const StackArg& that,
    335:    TypeMatch MatchWith(const StackArg& that,
  W092 Function could be free
    346:    static void ContextFunctionIsNonConst();
    726:    static Cxx::Access ScopeVisibility();
    751:    static void Enter(const CxxScoped* owner);
    784:    static void WasCalled(Function* func);
    792:    static void SetPos(const CxxLocation& loc);
    822:    static bool CompilingTemplateFunction();
    851:    static void Trace(CxxTrace::Action act);
    852:    static void Trace(CxxTrace::Action act, const CxxToken* token);
    853:    static void Trace(CxxTrace::Action act, const StackArg& arg);
    854:    static void Trace(CxxTrace::Action act, const CodeFile& file);
    855:    static void Trace(CxxTrace::Action act, NodeBase::word err,
    896:    static void Startup(NodeBase::RestartLevel level) { }
    938:    static bool StartTracing();
    954:    static std::string Location();
  W127 Data could be free
    88:    static uint16_t Last_;
    403:    static StackArg AutoType_;
    900:    static bool Tracing;
    974:    static std::string LastLogLoc_;
    978:    static std::set< Tracepoint > Tracepoints_;
    987:    static std::vector< XrefFrame > XrefFrames_;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxLocation.cpp
  W106 Function does not invoke Debug::ft
    41: void CxxLocation::SetLoc(CodeFile* file, size_t pos)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxLocation.h
  W032 Unused function
    49:    CxxLocation& operator=(const CxxLocation& that) = default;
  W082 Adjacent arguments have the same type
    71:    void UpdatePos(EditorAction action, size_t begin, size_t count, size_t from);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp
  W007 Cast down the inheritance hierarchy
    479:          space = static_cast< Namespace* >(item);
    503:          cls = static_cast< Class* >(item);
    557:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    568:             auto tdef = static_cast< Typedef* >(item);
    573:             item = static_cast< CxxScoped* >(root);
    886:    return static_cast< Class* >(root);
    2122:             static_cast< Function* >(tfunc)->SetTemplateParm();
    2289:       auto func = static_cast< Function* >(ref);
  W008 Cast removes const qualification
    1121:    return const_cast< DataSpec* >(this);
    1663:    const_cast< DataSpec* >(this)->FindReferent();
    2846:    return const_cast< TypeName* >(this);
  W106 Function does not invoke Debug::ft
    249: CxxArea* CxxNamed::GetArea() const
    258: Class* CxxNamed::GetClass() const
    289: bool CxxNamed::GetRange(size_t& begin, size_t& left, size_t& end) const
    299: void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
    306: Namespace* CxxNamed::GetSpace() const
    315: CxxScope* CxxNamed::GetTemplateInstance() const
    324: bool CxxNamed::IsInTemplateInstance() const
    680: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    1051: TypeTags DataSpec::GetAllTags() const
    1119: TypeSpec* DataSpec::GetTypeSpec() const
    1255: bool DataSpec::IsAutoDecl() const
    1658: CxxScoped* DataSpec::Referent() const
    2062: TypeName* QualName::At(size_t n) const
    2239: TypeName* QualName::GetTemplateArgs() const
    2314: TypeName* QualName::Last() const
    2495: size_t QualName::Size() const
    2763: CxxScoped* TypeName::DirectType() const
    2843: TypeName* TypeName::GetTemplateArgs() const
    3017: void TypeName::PushBack(TypeNamePtr& type)
    3527: int TypeTags::IsConstPtr() const
    3536: bool TypeTags::IsConstPtr(size_t n) const
    3545: int TypeTags::IsVolatilePtr() const
    3554: bool TypeTags::IsVolatilePtr(size_t n) const
    3594: TagCount TypeTags::PtrCount(bool arrays) const
  W119 Argument passed by value is modified
    352/2:    const CxxNamed* item, word offset, const string& info) const
    2062/1: TypeName* QualName::At(size_t n) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1315:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1516:    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  W008 Cast removes const qualification
    813:       override { return const_cast< QualName* >(this); }
    1315:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W042 Member could be private
    159:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    974:    bool IsUnboundedArray() const { return array_; }
  W043 Member could be protected
    218:    virtual bool IsImplemented() const { return true; }
    323:    void DisplayReferent(std::ostream& stream, bool fq) const;
    337:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    1076:    TypeSpecUser GetUserType() const { return user_; }
  W050 Data is not private
    1019:    bool ptrDet_: 1;
    1023:    bool refDet_: 1;
  W075 Virtual function is public
    58:    virtual void SetLoc(CodeFile* file, size_t pos) const;
    70:    virtual void CopyContext(const CxxNamed* that);
    93:    virtual bool GetRange(size_t& begin, size_t& left, size_t& end) const;
    98:    virtual CxxScope* GetScope() const { return nullptr; }
    106:    virtual bool IsStatic() const { return true; }
    111:    virtual bool IsDeclaredInFunction() const { return false; }
    121:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    126:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    134:    virtual CxxScope* GetTemplate() const { return nullptr; }
    140:    virtual std::string QualifiedName(bool scopes, bool templates)
    146:    virtual std::string ScopedName(bool templates) const;
    152:    virtual void GetScopedNames(stringVector& names, bool templates) const;
    159:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    165:    virtual CxxArea* GetArea() const;
    170:    virtual Function* GetFunction() const { return nullptr; }
    174:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    181:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    186:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    195:    virtual CxxNamed* GetMate() const { return nullptr; }
    208:    virtual bool EnterScope() { return true; }
    218:    virtual bool IsImplemented() const { return true; }
    224:    virtual CxxScoped* DirectType() const { return Referent(); }
    228:    virtual void FindReferent();
    234:    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
    238:    virtual void SetAsReferent(const CxxNamed* user) { }
    243:    virtual void Instantiate() { }
    247:    virtual CxxScope* GetTemplateInstance() const;
    256:    virtual CxxScoped* FindTemplateAnalog(const CxxNamed* item) const;
    263:    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
    270:    virtual std::string EndChars() const { return NodeBase::EMPTY_STR; }
    279:    virtual std::string BeginChars(char end) const
    285:    virtual StackArg MemberToArg
    298:    virtual void GetDirectClasses(CxxUsageSets& symbols);
    305:    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
    318:    virtual std::string XrefName(bool templates) const;
    608:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    842:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    846:    bool ResolveTemplate
    1084:    virtual Function* GetFuncSpec() const { return nullptr; }
    1094:    virtual TypeSpec* Clone() const = 0;
    1098:    virtual TypeTags* Tags() = 0;
    1099:    virtual const TypeTags* Tags() const = 0;
    1103:    virtual void AddArray(ArraySpecPtr& array) = 0;
    1109:    virtual TagCount Ptrs(bool arrays) const = 0;
    1115:    virtual TagCount Refs() const = 0;
    1120:    virtual TagCount Arrays() const = 0;
    1124:    virtual bool HasArrayDefn() const = 0;
    1128:    virtual void EnteringScope(const CxxScope* scope) = 0;
    1132:    virtual void EnterArrays() const = 0;
    1137:    virtual TypeTags GetAllTags() const = 0;
    1142:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1147:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1151:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1157:    virtual void SetPtrs(TagCount count) = 0;
    1162:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1166:    virtual StackArg ResultType() const = 0;
    1170:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1174:    virtual void SetUserType(TypeSpecUser user) const { user_ = user; }
    1185:    virtual TypeMatch MatchTemplate(const TypeSpec* that,
    1192:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1197:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1201:    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
    1207:    virtual void Instantiating(CxxScopedVector& locals) const = 0;
    1211:    virtual void GetNames(stringVector& names) const = 0;
    1216:    virtual bool NamesReferToArgs(const NameVector& names,
  W082 Adjacent arguments have the same type
    93:    virtual bool GetRange(size_t& begin, size_t& left, size_t& end) const;
    512:    TypeMatch MatchTemplate(const TypeName* that,
    762:    TypeMatch MatchTemplate(const QualName* that,
    931:    bool SetPointer(size_t n, bool readonly, bool unstable);
    1185:    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  W092 Function could be free
    881:    void CheckIfTemplateArgument(const CxxScoped* ref) const;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp
  W004 C-style cast
    3966:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W007 Cast down the inheritance hierarchy
    720:       auto cls = static_cast<const Class*>(scope);
    1426:          auto op = static_cast< Operation* >(expr);
    1540:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1554:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1596:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1611:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1767:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    1808:    auto data = static_cast< FuncData* >(next_.get());
    3009:       if(!static_cast< Function* >(item)->virtual_)
    3742:       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
    3755:       auto i = FindArg(static_cast< const Argument* >(item), false);
    3802:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    4513:    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
    4923:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    4935:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    5180:                auto item = static_cast< CxxNamed* >(args.front().item);
    5270:       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  W008 Cast removes const qualification
    2431:    return FoundFunc(const_cast< Function* >(this), args, match);
    3711:    auto prev = const_cast< Function* >(this);
    3956:    if(IsTemplate()) return const_cast< Function* >(this);
    3966:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W097 Line indentation is not a multiple of the standard value
    457:                     ((move == nullptr) || move->IsDeleted()));
  W106 Function does not invoke Debug::ft
    111: bool Block::CrlfOver(Form form) const
    243: CxxToken* Block::FirstStatement() const
    251: Function* Block::GetFunction() const
    692: void ClassData::GetDecls(std::set< CxxNamed* >& items)
    782: void ClassData::SetMemInit(const MemberInit* init)
    890: CodeFile* CxxScope::GetDistinctDeclFile() const
    1259: CodeFile* Data::GetDeclFile() const
    1266: const Data* Data::GetDefn() const
    1275: CodeFile* Data::GetDefnFile() const
    1318: TypeName* Data::GetTemplateArgs() const
    1454: bool Data::IsConst() const
    1592: bool Data::WasRead()
    3838: FunctionRole Function::FuncRole() const
    3875: FunctionType Function::FuncType() const
    3886: Cxx::Access Function::GetAccess() const
    3894: CodeFile* Function::GetDeclFile() const
    3901: void Function::GetDecls(std::set< CxxNamed* >& items)
    3908: const Function* Function::GetDefn() const
    3917: CodeFile* Function::GetDefnFile() const
    3926: bool Function::GetRange(size_t& begin, size_t& left, size_t& end) const
    3941: CxxScope* Function::GetScope() const
    3953: CxxScope* Function::GetTemplate() const
    3964: CxxScope* Function::GetTemplateInstance() const
    3972: TemplateType Function::GetTemplateType() const
    4465: bool Function::IsImplemented() const
    4672: size_t Function::LogOffsetToArgIndex(word offset) const
    5277: bool Function::WasRead()
    5330: void SpaceDefn::GetDecls(std::set< CxxNamed* >& items)
    5364: void FuncSpec::AddArray(ArraySpecPtr& array)
    5378: TagCount FuncSpec::Arrays() const
    5392: TypeSpec* FuncSpec::Clone() const
    5414: void FuncSpec::EnterArrays() const
    5431: void FuncSpec::FindReferent()
    5439: TypeTags FuncSpec::GetAllTags() const
    5446: void FuncSpec::GetNames(stringVector& names) const
    5454: TypeName* FuncSpec::GetTemplateArgs() const
    5461: TypeSpec* FuncSpec::GetTypeSpec() const
    5468: bool FuncSpec::HasArrayDefn() const
    5475: void FuncSpec::Instantiating(CxxScopedVector& locals) const
    5483: bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
    5491: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    5499: TypeMatch FuncSpec::MatchTemplate(const TypeSpec* that,
    5509: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    5517: bool FuncSpec::NamesReferToArgs(const NameVector& names,
    5533: TagCount FuncSpec::Ptrs(bool arrays) const
    5540: TagCount FuncSpec::Refs() const
    5547: StackArg FuncSpec::ResultType() const
    5554: void FuncSpec::SetPtrs(TagCount count)
    5561: void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
    5577: const TypeTags* FuncSpec::Tags() const
    5584: TypeTags* FuncSpec::Tags()
    5765: void SpaceData::GetDecls(std::set< CxxNamed* >& items)
  W119 Argument passed by value is modified
    4759/2:    const CxxScope* scope, CodeFile* file, SymbolView& view) const
    4941/1: void Function::SetOperator(Cxx::Operator oper)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    369:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    369:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1353:       const override { return const_cast< Function* >(this); }
  W026 Unused argument
    83/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  W030 Unused enumerator
    144:       Multiple   // two statements or more
  W032 Unused function
    1143:    bool IsExtern() const { return GetDecl()->extern_; }
    1148:    bool IsFinal() const { return GetDecl()->final_; }
  W042 Member could be private
    1093:    bool IsDefaulted() const { return GetDefn()->defaulted_; }
    1142:    Function* GetBase() const { return GetDecl()->base_; }
    1144:    bool IsVirtual() const { return GetDecl()->virtual_; }
    1170:    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
    1203:    size_t MaxArgs() const { return args_.size(); }
    1262:    bool IsInvokedInBase() const;
  W043 Member could be protected
    321:    bool IsExtern() const { return extern_; }
    325:    bool IsThreadLocal() const { return thread_local_; }
    329:    bool IsConstexpr() const { return constexpr_; }
    333:    bool WasInited() const { return GetDecl()->inited_; }
  W075 Virtual function is public
    77:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    82:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    90:    virtual void AccessibilityOf
    356:    virtual void Promote
    361:    virtual bool IsUnionMember() const { return false; }
    1300:    void CheckAccessControl() const override;
    1304:    void CheckIfHiding() const override;
  W082 Adjacent arguments have the same type
    356:    virtual void Promote
    1549:    static TypeMatch MatchTemplate
  W092 Function could be free
    1539:    static Function* FoundFunc
    1549:    static TypeMatch MatchTemplate
    1562:    static Function* InstantiateError
  W127 Data could be free
    276:    static UsingVector Usings_;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1494:    return (CxxToken*) this;
    1697:    return (CxxToken*) this;
    2394:    return (CxxToken*) this;
    2475:    return (CxxScoped*) this;
    2488:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    100:          auto func = static_cast< Function* >(GetScope());
    163:    auto cls = static_cast< Class* >(ref);
    176:    auto func = static_cast< Function* >(GetScope());
    218:       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    261:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    273:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    331:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    365:    return static_cast< Class* >(name_->GetReferent());
    482:          ref = static_cast< const Function* >(ref)->FindRootFunc();
    1175:    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
    1405:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1445:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1607:    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
    1832:          space = static_cast< Namespace* >(item);
    1845:          cls = static_cast< Class* >(item);
    1884:             auto tdef = static_cast< Typedef* >(item);
    1889:             item = static_cast< CxxScoped* >(root);
    2064:    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
    2174:       static_cast< CxxArea* >(scope)->AddFunc(func);
    2338:    ref_ = static_cast< ClassData* >(cls->FindData(name_));
    2983:    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
    3149:          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  W008 Cast removes const qualification
    612:    if(n == 0) return const_cast< CxxScoped* >(this);
    1494:    return (CxxToken*) this;
    1697:    return (CxxToken*) this;
    2094:    const_cast< Friend* >(this)->FindReferent();
    2111:    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
    2121:    const_cast< Friend* >(this)->SetScope(cls->GetScope());
    2394:    return (CxxToken*) this;
    2475:    return (CxxScoped*) this;
    2488:    return (CxxToken*) this;
  W106 Function does not invoke Debug::ft
    363: Class* BaseDecl::GetClass() const
    446: void CxxScoped::AddFiles(LibItemSet& imSet) const
    456: void CxxScoped::AddReference(CxxNamed* item) const
    618: CodeFile* CxxScoped::GetImplFile() const
    627: bool CxxScoped::GetRange(size_t& begin, size_t& left, size_t& end) const
    648: bool CxxScoped::IsAuto() const
    657: bool CxxScoped::IsConst() const
    666: bool CxxScoped::IsConstPtr() const
    675: bool CxxScoped::IsConstPtr(size_t n) const
    684: bool CxxScoped::IsDeclaredInFunction() const
    692: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    705: bool CxxScoped::IsIndirect(bool arrays) const
    1113: void Enum::GetDecls(std::set< CxxNamed* >& items)
    1125: TypeSpec* Enum::GetTypeSpec() const
    1348: void Enumerator::GetDecls(std::set< CxxNamed* >& items)
    1490: CxxToken* Forward::AutoType() const
    1561: void Forward::GetDecls(std::set< CxxNamed* >& items)
    1693: CxxToken* Friend::AutoType() const
    1954: void Friend::GetDecls(std::set< CxxNamed* >& items)
    1971: Function* Friend::GetFunction() const
    1980: QualName* Friend::GetQualName() const
    1989: CxxScoped* Friend::GetReferent() const
    2333: CxxScoped* MemberInit::Referent() const
    2386: CxxToken* TemplateParm::AutoType() const
    2467: CxxScoped* TemplateParm::Referent() const
    2480: CxxToken* TemplateParm::RootType() const
    2918: void Typedef::GetDecls(std::set< CxxNamed* >& items)
    2925: TypeName* Typedef::GetTemplateArgs() const
  W119 Argument passed by value is modified
    3187/1: void Using::SetScope(CxxScope* scope)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    190:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    543:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    671:    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
    1421:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1518:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    190:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    543:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    671:    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
    1421:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1518:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1654/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  W042 Member could be private
    176:    bool IsSubscopeOf(const std::string& fqSuper) const;
  W043 Member could be protected
    88:    CxxScoped* FindInheritedName() const;
    93:    void DisplayFiles(std::ostream& stream) const;
    109:    size_t XrefSize() const { return xref_.size() * 3 * sizeof(CxxNamed*); }
    113:    virtual bool IsUnused() const { return false; }
  W075 Virtual function is public
    60:    virtual bool NameRefersToItem(const std::string& name,
    70:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView& view) const;
    79:    virtual void RecordAccess(Cxx::Access access) const;
    97:    virtual void AddFiles(LibItemSet& imSet) const;
    101:    virtual void AddReference(CxxNamed* item) const;
    113:    virtual bool IsUnused() const { return false; }
    119:    virtual bool CheckIfUnused(Warning warning) const;
    194:    void SetAccess(Cxx::Access access) override { access_ = access; }
    198:    void SetScope(CxxScope* scope) override { scope_ = scope; }
    552:    void CheckAccessControl() const override;
    1026:    bool ResolveTemplate
    1725:    bool ResolveTypedef(Typedef* type, size_t n) const
  W082 Adjacent arguments have the same type
    1644:    Using(QualNamePtr& name, bool space, bool added = false);
  W120 Function returns non-const reference or pointer to member data
    105:    CxxNamedSet& Xref() const { return xref_; }
  W127 Data could be free
    1127:    static size_t Depth_;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp
  W106 Function does not invoke Debug::ft
    331: void CxxStatement::EnterBlock()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    40: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  W119 Argument passed by value is modified
    227/2: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
    249/2: size_t FindTemplateEnd(const string& name, size_t pos)
    731/5:    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
    765/2: size_t rfind_first_not_of(const string& str, size_t off, const string& chars)
    778/2: size_t rfind_first_of(const string& str, size_t off, const string& chars)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h
  W032 Unused function
    46:    size_t rfind_first_of
    114:    std::string& Prefix(std::string&& scope,
  W082 Adjacent arguments have the same type
    139:    size_t CompareScopes
    177:    size_t Replace(std::string& code,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h
  W020 Using statement in header
    41: using namespace NodeBase;
  W042 Member could be private
    83:    static DataPtr CreateRef()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W004 C-style cast
    392:    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  W007 Cast down the inheritance hierarchy
    575:    return static_cast< Macro* >(macros.front());
    612:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    620:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    628:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    634:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W106 Function does not invoke Debug::ft
    239: template< typename T > void GetSymbols
    251: bool IsSortedByName(const CxxScoped* item1, const CxxScoped* item2)
    282: bool IsSortedByPos(const CxxNamed* item1, const CxxNamed* item2)
    312: bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
    440: void CxxSymbols::EraseClass(const Class* cls)
    447: void CxxSymbols::EraseData(const Data* data)
    454: void CxxSymbols::EraseEnum(const Enum* item)
    461: void CxxSymbols::EraseEtor(const Enumerator* etor)
    468: void CxxSymbols::EraseForw(const Forward* forw)
    475: void CxxSymbols::EraseFriend(const Friend* frnd)
    482: void CxxSymbols::EraseFunc(const Function* func)
    489: void CxxSymbols::EraseMacro(const Macro* macro)
    496: void CxxSymbols::EraseSpace(const Namespace* space)
    503: void CxxSymbols::EraseTerm(const Terminal* term)
    510: void CxxSymbols::EraseType(const Typedef* type)
    854: void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
    861: void CxxSymbols::InsertClass(Class* cls)
    868: void CxxSymbols::InsertData(Data* data)
    875: void CxxSymbols::InsertEnum(Enum* item)
    882: void CxxSymbols::InsertEtor(Enumerator* etor)
    889: void CxxSymbols::InsertForw(Forward* forw)
    896: void CxxSymbols::InsertFriend(Friend* frnd)
    903: void CxxSymbols::InsertFunc(Function* func)
    910: void CxxSymbols::InsertMacro(Macro* macro)
    917: void CxxSymbols::InsertSpace(Namespace* space)
    924: void CxxSymbols::InsertTerm(Terminal* term)
    931: void CxxSymbols::InsertType(Typedef* type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h
  W090 Function could be const
    138:    void InsertClass(Class* cls);
    139:    void InsertData(Data* data);
    140:    void InsertEtor(Enumerator* etor);
    141:    void InsertEnum(Enum* item);
    142:    void InsertForw(Forward* forw);
    143:    void InsertFriend(Friend* frnd);
    144:    void InsertFunc(Function* func);
    145:    void InsertMacro(Macro* macro);
    146:    void InsertSpace(Namespace* space);
    147:    void InsertTerm(Terminal* term);
    148:    void InsertType(Typedef* type);
    152:    void EraseClass(const Class* cls);
    153:    void EraseData(const Data* data);
    154:    void EraseEtor(const Enumerator* etor);
    155:    void EraseEnum(const Enum* item);
    156:    void EraseForw(const Forward* forw);
    157:    void EraseFriend(const Friend* frnd);
    158:    void EraseFunc(const Function* func);
    159:    void EraseMacro(const Macro* macro);
    160:    void EraseSpace(const Namespace* space);
    161:    void EraseTerm(const Terminal* term);
    162:    void EraseType(const Typedef* type);
  W106 Function does not invoke Debug::ft
    247: template< typename T > void EraseSymbol(const CxxScoped* item,
    267: template< typename T > void ListSymbols(const std::string& name,
  W110 Override of Base.Display not found
    91: class CxxSymbols: public NodeBase::Base
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp
  W007 Cast down the inheritance hierarchy
    428:    auto oper = static_cast< Operation* >(item.get());
    454:          auto ante = static_cast< Operation* >(prev.get());
    506:       auto oper = static_cast< Operation* >(item.get());
    539:    auto oper = static_cast< Operation* >(prev.get());
    576:    auto oper = static_cast< Operation* >(item.get());
    634:    auto oper = static_cast< Operation* >(item.get());
    657:       auto ante = static_cast< Operation* >(prev.get());
    744:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1203:       inClass = static_cast< Class* >(inRoot);
    1208:       outClass = static_cast< Class* >(outRoot);
    1249:    auto call = static_cast< Operation* >(args_.front().get());
    1639:       func = static_cast< Function* >(proc.item);
    1653:       cls = static_cast< Class* >(proc.item);
    1753:    auto cls = static_cast< Class* >(arg.item->Root());
    1791:       auto newCall = static_cast< Operation* >(args_.front().get());
    1812:    auto cls = static_cast< Class* >(spec.item->Root());
    1833:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    1857:       cls = static_cast< Class* >(root);
    2054:       area = static_cast< Class* >(targ);
    2056:       static_cast< Class* >(targ)->Instantiate();
    2407:    auto cls = static_cast< Class* >(root);
    2471:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    370:    CxxToken* prev = const_cast< CxxToken* >(this);
  W106 Function does not invoke Debug::ft
    320: bool CxxToken::IsPointer(bool arrays) const
    771: Numeric FloatLiteral::GetNumeric() const
    830: Numeric IntLiteral::BaseNumeric() const
    967: CxxToken* Literal::AutoType() const
    990: CxxToken* Literal::RootType() const
    1006: Cxx::ItemType Literal::Type() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    320:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W032 Unused function
    311:    CxxToken& operator=(const CxxToken& that) = default;
    398:       Tags& operator=(const Tags& that) = default;
    440:       Tags& operator=(const Tags& that) = default;
  W075 Virtual function is public
    54:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    60:    virtual bool IsForward() const { return false; }
    64:    virtual QualName* GetQualName() const { return nullptr; }
    69:    virtual std::string TypeString(bool arg) const
    74:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    80:    virtual Class* DirectClass() const;
    84:    virtual bool IsConst() const { return false; }
    88:    virtual bool IsVolatile() const { return false; }
    92:    virtual bool IsConstPtr() const { return false; }
    96:    virtual bool IsVolatilePtr() const { return false; }
    100:    virtual bool IsConstPtr(size_t n) const { return false; }
    104:    virtual bool IsVolatilePtr(size_t n) const { return false; }
    109:    virtual bool IsAuto() const { return false; }
    114:    virtual bool IsIndirect(bool arrays) const { return false; }
    118:    virtual bool IsInitializing() const { return false; }
    123:    virtual CxxToken* AutoType() const { return nullptr; }
    128:    virtual Namespace* GetSpace() const { return nullptr; }
    133:    virtual Class* GetClass() const { return nullptr; }
    138:    virtual Class* Declarer() const { return GetClass(); }
    144:    virtual TypeName* GetTemplateArgs() const;
    149:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    154:    virtual void GetConvertibleTypes(StackArgVector& types, bool expl) { }
    159:    virtual CxxScoped* Referent() const;
    165:    virtual void EnterBlock();
    170:    virtual void ExitBlock() const { }
    176:    virtual bool AppendUnary() { return false; }
    180:    virtual CxxToken* Back() { return this; }
    185:    virtual bool WasRead() { return false; }
    197:    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
    202:    virtual bool SetNonConst() { return true; }
    207:    virtual void WasMutated(const StackArg* arg) { }
    213:    virtual void RecordUsage() { }
    217:    virtual void AddToXref() { }
    222:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) { }
    227:    virtual bool LocateItem(const CxxNamed* item, size_t& n)
    233:    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
    238:    virtual void Check() const { }
    242:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    246:    virtual bool InLine() const { return true; }
    251:    virtual void Print
    257:    virtual void Shrink() { }
    287:    virtual void UpdatePos(EditorAction action,
    489:    virtual void PushBack(uint32_t c) = 0;
  W082 Adjacent arguments have the same type
    197:    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
    287:    virtual void UpdatePos(EditorAction action,
    647:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W092 Function could be free
    315:    static void ShrinkTokens(const TokenPtrVector& tokens);
    636:    static void PushType(const std::string& name);
    640:    static void ExecuteCall();
    684:    static void Record(Cxx::Operator op, StackArg& arg1, const StackArg* arg2);
  W127 Data could be free
    810:    static const TokenPtr StartOfExpr;
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp
  W005 Functional cast
    1137:    *cli.obuf << ": " << Warning(log.warning_);
  W007 Cast down the inheritance hierarchy
    260:    auto defn = static_cast< const Function* >(func->GetMate());
    626:    DebugFtNames(static_cast< const Function* >(log.item_), flit, fvar);
    1438:    auto decl = static_cast< const Data* >(log.item_);
    2121:    return FindSigEnd(static_cast< const Function* >(log.item_));
    2144:    auto cls = static_cast< const Class* >(log.item_);
    2409:    auto func = static_cast< const Function* >(log.item_);
    2901:    auto data = static_cast< const Data* >(log.item_);
    3074:    auto func = static_cast< const Function* >(log.item_);
    3479:    auto cls = static_cast< const Class* >(log.item_);
    3859:       ns = static_cast< const Namespace* >(ref)->OuterSpace();
    3924:    auto func = static_cast< const Function* >(log.item_);
  W082 Adjacent arguments have the same type
    102: string ChooseArgumentName
    119: void DebugFtNames(const Function* func, string& flit, string& fvar)
  W097 Line indentation is not a multiple of the standard value
    1637:        GetCode(next), 0, LineSize(next) - 1);
  W102 Line length exceeds the standard maximum
    980:       if((item->Type() == Cxx::Function) && (endchars.find('}') != string::npos))
    1124: bool Editor::DisplayLog(const CliThread& cli, const CodeWarning& log, bool file) const
    1340:       if(IsBlankLine(b1) && (IsBlankLine(b2) || (GetLineType(b1) == EmptyComment)))
  W106 Function does not invoke Debug::ft
    77: bool AreInSameStatement(const CxxNamed* item1, const CxxNamed* item2)
    275: bool IncludesAreSorted(const string& line1, const string& line2)
    308: word NotFound(string& expl, fixed_string text, bool quotes = false)
    322: word Report(string& expl, fixed_string text, word rc = 0)
    333: word Report(string& expl, const std::ostringstream& stream, word rc = 0)
    344: void ReportFix(CliThread& cli, word rc, string& expl)
    381: word Unimplemented(string& expl)
    3709: bool Editor::IsDirective(size_t pos, fixed_string hash) const
  W119 Argument passed by value is modified
    863/1: bool Editor::CodeFollowsImmediately(size_t pos) const
    1882/1: size_t Editor::FindAndCutInclude(size_t pos, const string& incl)
    3286/1: word Editor::InsertForward(size_t pos, const string& forward, string& expl)
    3448/1:    (size_t pos, const string& nspace, const string& forward, string& expl)
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h
  W020 Using statement in header
    47: using namespace NodeBase;
    48: using std::string;
  W026 Unused argument
    164/1:    word ChangeAccess(const CodeWarning& log, Cxx::Access acc, string& expl);
    164/2:    word ChangeAccess(const CodeWarning& log, Cxx::Access acc, string& expl);
    165/1:    word ChangeClassToNamespace(const CodeWarning& log, string& expl);
    168/1:    word ChangeOperator(const CodeWarning& log, string& expl);
    172/2:    word EraseBlankLine(const CodeWarning& log, string& expl);
    173/1:    word EraseClass(const CodeWarning& log, string& expl);
    188/1:    word InsertCopyCtorCall(const CodeWarning& log, string& expl);
    189/1:    word InsertDataInit(const CodeWarning& log, string& expl);
    192/1:    word InsertDisplay(CliThread& cli, const CodeWarning& log, string& expl);
    192/2:    word InsertDisplay(CliThread& cli, const CodeWarning& log, string& expl);
    193/1:    word InsertEnumName(const CodeWarning& log, string& expl);
    198/1:    word InsertMemberInit(const CodeWarning& log, string& expl);
    200/1:    word InsertPODCtor(const CodeWarning& log, string& expl);
    201/1:    word InsertPureVirtual(const CodeWarning& log, string& expl);
    203/1:    word MoveDefine(const CodeWarning& log, string& expl);
    204/1:    word MoveFunction(const CodeWarning& log, string& expl);
    205/1:    word MoveMemberInit(const CodeWarning& log, string& expl);
    208/1:    word ReplaceHeading(const CodeWarning& log, string& expl);
    209/1:    word ReplaceName(const CodeWarning& log, string& expl);
    377/1:    word FixInvokers(CliThread& cli, const CodeWarning& log, string& expl);
    377/2:    word FixInvokers(CliThread& cli, const CodeWarning& log, string& expl);
    387/1:    word ChangeFunctionToFree(const Function* func, string& expl);
    388/1:    word ChangeFunctionToMember(const Function* func, word offset, string& expl);
    388/2:    word ChangeFunctionToMember(const Function* func, word offset, string& expl);
    389/1:    word ChangeInvokerToFree(const Function* func, string& expl);
    390/1:    word ChangeInvokerToMember(const Function* func, word offset, string& expl);
    390/2:    word ChangeInvokerToMember(const Function* func, word offset, string& expl);
    391/1:    word EraseArgument(const Function* func, word offset, string& expl);
    391/2:    word EraseArgument(const Function* func, word offset, string& expl);
    392/1:    word EraseDefault(const Function* func, word offset, string& expl);
    392/2:    word EraseDefault(const Function* func, word offset, string& expl);
    393/1:    word EraseParameter(const Function* func, word offset, string& expl);
    393/2:    word EraseParameter(const Function* func, word offset, string& expl);
    395/1:    word InsertArgument(const Function* func, word offset, string& expl);
    395/2:    word InsertArgument(const Function* func, word offset, string& expl);
    396/1:    word SplitVirtualFunction(const Function* func, string& expl);
  W032 Unused function
    382:    word FixInvoker(const Function* func, const CodeWarning& log, string& expl);
  W082 Adjacent arguments have the same type
    345:    word InsertNamespaceForward(size_t pos,
    439:    size_t UpdateFuncDeclLoc
    468:    size_t UpdateFuncDefnLoc
    510:    size_t CutCode(const CxxNamed* item, string& expl, string& code);
    527:    size_t Replace(size_t pos, size_t count, const std::string& code);
    552:    void UpdateWarnings(EditorAction action,
  W092 Function could be free
    164:    word ChangeAccess(const CodeWarning& log, Cxx::Access acc, string& expl);
    165:    word ChangeClassToNamespace(const CodeWarning& log, string& expl);
    168:    word ChangeOperator(const CodeWarning& log, string& expl);
    173:    word EraseClass(const CodeWarning& log, string& expl);
    188:    word InsertCopyCtorCall(const CodeWarning& log, string& expl);
    189:    word InsertDataInit(const CodeWarning& log, string& expl);
    192:    word InsertDisplay(CliThread& cli, const CodeWarning& log, string& expl);
    193:    word InsertEnumName(const CodeWarning& log, string& expl);
    198:    word InsertMemberInit(const CodeWarning& log, string& expl);
    200:    word InsertPODCtor(const CodeWarning& log, string& expl);
    201:    word InsertPureVirtual(const CodeWarning& log, string& expl);
    203:    word MoveDefine(const CodeWarning& log, string& expl);
    204:    word MoveFunction(const CodeWarning& log, string& expl);
    205:    word MoveMemberInit(const CodeWarning& log, string& expl);
    208:    word ReplaceHeading(const CodeWarning& log, string& expl);
    209:    word ReplaceName(const CodeWarning& log, string& expl);
    377:    word FixInvokers(CliThread& cli, const CodeWarning& log, string& expl);
    387:    word ChangeFunctionToFree(const Function* func, string& expl);
    388:    word ChangeFunctionToMember(const Function* func, word offset, string& expl);
    389:    word ChangeInvokerToFree(const Function* func, string& expl);
    390:    word ChangeInvokerToMember(const Function* func, word offset, string& expl);
    391:    word EraseArgument(const Function* func, word offset, string& expl);
    392:    word EraseDefault(const Function* func, word offset, string& expl);
    393:    word EraseParameter(const Function* func, word offset, string& expl);
    395:    word InsertArgument(const Function* func, word offset, string& expl);
    396:    word SplitVirtualFunction(const Function* func, string& expl);
  W102 Line length exceeds the standard maximum
    143:    bool DisplayLog(const CliThread& cli, const CodeWarning& log, bool file) const;
    367:    static word FixFunctions(CliThread& cli, const CodeWarning& log, string& expl);
  W127 Data could be free
    586:    static std::set< Editor* > Editors_;
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    152:          type = LibTokenType(i);
  W092 Function could be free
    53:    static bool GetType(const string& op, LibTokenType& type);
    58:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W099 Line contains adjacent spaces
    95:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    96:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    97:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    98:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    99:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    100:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    101:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    102:    OperatorInfo("d",  1, DIR_SET,  ANY_SET,  ERR_SET),   // OpDirectories
    103:    OperatorInfo("f",  1, FILE_SET, ANY_SET,  ERR_SET),   // OpFiles
    116:    OperatorInfo("db", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpDeclaredBy
    119:    OperatorInfo("rb", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpReferencedBy
  W106 Function does not invoke Debug::ft
    138: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    146: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  W119 Argument passed by value is modified
    498/1: LibExprErr Interpreter::ApplyOperator(bool operand)
    609/1: LibrarySet* Interpreter::Error(LibExprErr err) const
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h
  W020 Using statement in header
    42: using namespace NodeBase;
  W092 Function could be free
    68:    static bool IsOperator(const std::string& s);
  W110 Override of Base.Display not found
    50: class Interpreter : public NodeBase::Base
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    1380:          fp *= std::pow(10.0, int(num));
    1485:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    2091:          auto def = static_cast< Define* >(item);
    2095:             auto code = const_cast< string* >(source_);
  W008 Cast removes const qualification
    2095:             auto code = const_cast< string* >(source_);
  W106 Function does not invoke Debug::ft
    316: size_t Lexer::CurrBegin(size_t pos) const
    342: size_t Lexer::CurrEnd(size_t pos) const
    1128: const LineInfo* Lexer::GetLineInfo(size_t pos) const
    1137: LineInfo* Lexer::GetLineInfo(size_t pos)
    1146: size_t Lexer::GetLineInfoIndex(size_t pos) const
    1170: size_t Lexer::GetLineNum(size_t pos) const
    1177: size_t Lexer::GetLineStart(size_t line) const
    1195: LineType Lexer::GetLineType(size_t pos) const
    1284: bool Lexer::GetNthLine(size_t n, string& s, bool crlf) const
    1776: size_t Lexer::LineSize(size_t pos) const
    1800: size_t Lexer::NextBegin(size_t pos) const
    1900: size_t Lexer::NextPos(size_t pos) const
    2119: size_t Lexer::PrevBegin(size_t pos) const
    2195: void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  W119 Argument passed by value is modified
    316/1: size_t Lexer::CurrBegin(size_t pos) const
    400/3: size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
    643/1: size_t Lexer::FindLineEnd(size_t pos) const
    1029/2: size_t Lexer::GetHexNum(int64_t& num, size_t max)
    1052/1: bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
    1900/1: size_t Lexer::NextPos(size_t pos) const
    2036/1: bool Lexer::NoCodeFollows(size_t pos) const
    2119/1: size_t Lexer::PrevBegin(size_t pos) const
    2150/1: size_t Lexer::Rfind(size_t pos, const string& str)
    2165/1: size_t Lexer::RfindFirstOf(size_t pos, const string& chars)
    2180/1: size_t Lexer::RfindNonBlank(size_t pos)
    2244/1: size_t Lexer::SkipCharLiteral(size_t pos) const
    2262/1: size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
    2295/1: size_t Lexer::SkipTemplateSpec(size_t pos) const
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h
  W032 Unused function
    354:    const LineInfo* GetLineInfo(size_t pos) const;
    429:    size_t LineFindFirstOf(size_t pos, const std::string& chars);
    437:    size_t LineFindNonBlank(size_t pos);
  W042 Member could be private
    433:    size_t LineRfindFirstOf(size_t pos, const std::string& chars);
    441:    size_t LineRfindNonBlank(size_t pos);
  W053 Data could be const
    45:    size_t begin;  // offset where line starts; it ends at a CRLF
  W060 Base class constructor is public
    66:    Lexer();
  W082 Adjacent arguments have the same type
    248:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
    560:    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h
  W020 Using statement in header
    47: using namespace NodeBase;
  W053 Data could be const
    228:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    67:    NodeBase::word Import
    101:    NodeBase::word Assign(CliThread& cli, const std::string& name,
  W090 Function could be const
    73:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    101:    NodeBase::word Assign(CliThread& cli, const std::string& name,
    118:    NodeBase::word Purge(const std::string& name, std::string& expl);
    150:    void Shrink();
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp
  W106 Function does not invoke Debug::ft
    94: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.cpp
  W106 Function does not invoke Debug::ft
    74: bool LibItemSort::operator()
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryItem.h
  W027 Unused class
    62: struct LibItemSort
  W032 Unused function
    64:    bool operator() (const LibraryItem* item1, const LibraryItem* item2) const;
  W075 Virtual function is public
    46:    virtual const std::string& Name() const;
    51:    virtual void GetDecls(std::set< CxxNamed* >& items);
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp
  W106 Function does not invoke Debug::ft
    40: bool IsSortedAlphabetically(const string& s1, const string& s2)
    82: LibrarySet* LibrarySet::AffectedBy() const
    89: LibrarySet* LibrarySet::Affecters() const
    96: LibrarySet* LibrarySet::Assign(LibrarySet* that)
    113: LibrarySet* LibrarySet::CommonAffecters() const
    166: LibrarySet* LibrarySet::Create
    174: LibrarySet* LibrarySet::DeclaredBy() const
    181: LibrarySet* LibrarySet::Declarers() const
    188: LibrarySet* LibrarySet::Definitions() const
    195: LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
    202: LibrarySet* LibrarySet::Directories() const
    227: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    234: LibrarySet* LibrarySet::Files() const
    241: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    266: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    285: LibrarySet* LibrarySet::Implements() const
    292: LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
    299: bool LibrarySet::IsReadOnly() const
    306: bool LibrarySet::IsTemporary() const
    338: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    345: LibrarySet* LibrarySet::NeededBy() const
    352: LibrarySet* LibrarySet::Needers() const
    369: word LibrarySet::NotImplemented(string& expl) const
    381: LibrarySet* LibrarySet::OpError(fixed_string op) const
    409: LibrarySet* LibrarySet::ReferencedBy() const
    416: LibrarySet* LibrarySet::Referencers() const
    526: LibrarySet* LibrarySet::Union(const LibrarySet* that) const
    533: LibrarySet* LibrarySet::UsedBy(bool self) const
    540: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h
  W020 Using statement in header
    44: using namespace NodeBase;
  W065 Base class virtual destructor is not public
    195:    virtual ~LibrarySet();
  W075 Virtual function is public
    79:    virtual LibSetType GetType() const;
    85:    virtual NodeBase::word Check(NodeBase::CliThread& cli,
    92:    virtual NodeBase::word Count(std::string& result) const;
    98:    virtual NodeBase::word Countlines(std::string& result) const;
    104:    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
    110:    virtual NodeBase::word Format(std::string& expl) const;
    118:    virtual NodeBase::word Parse
    125:    virtual NodeBase::word Scan(std::ostream& stream,
    132:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    136:    virtual BuildOrder SortInBuildOrder() const;
    141:    virtual LibrarySet* Assign(LibrarySet* that);
    142:    virtual LibrarySet* Intersection(const LibrarySet* that) const;
    143:    virtual LibrarySet* Difference(const LibrarySet* that) const;
    144:    virtual LibrarySet* Union(const LibrarySet* that) const;
    145:    virtual LibrarySet* Directories() const;
    146:    virtual LibrarySet* Files() const;
    147:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    148:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    149:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    150:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    151:    virtual LibrarySet* Implements() const;
    152:    virtual LibrarySet* UsedBy(bool self) const;
    153:    virtual LibrarySet* Users(bool self) const;
    154:    virtual LibrarySet* AffectedBy() const;
    155:    virtual LibrarySet* Affecters() const;
    156:    virtual LibrarySet* CommonAffecters() const;
    157:    virtual LibrarySet* NeededBy() const;
    158:    virtual LibrarySet* Needers() const;
    159:    virtual LibrarySet* DeclaredBy() const;
    160:    virtual LibrarySet* Declarers() const;
    161:    virtual LibrarySet* Definitions() const;
    162:    virtual LibrarySet* ReferencedBy() const;
    163:    virtual LibrarySet* Referencers() const;
  W092 Function could be free
    206:    static NodeBase::word Counted(std::string& result, const size_t count);
    239:    static NodeBase::word Shown(std::string& result);
  W120 Function returns non-const reference or pointer to member data
    75:    LibItemSet& Items() { return items_; }
  W127 Data could be free
    58:    static const char ReadOnlyChar;
    269:    static uint32_t SeqNo_;
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h
  W053 Data could be const
    64:    size_t level;    // the file's level in the build
  W054 Data could be const pointer
    63:    CodeFile* file;  // the file
  W064 Implicit destructor invoked
    61: struct FileLevel
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryVarSet.h
  W042 Member could be private
    53:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    53:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    397:    auto op = static_cast< Operation* >(token.get());
    433:    auto op = static_cast< Operation* >(call.get());
    728:    auto brace = static_cast< BraceInit* >(token.get());
    801:    auto cast = static_cast< Operation* >(token.get());
    840:    auto c = static_cast< Catch* >(statement.get());
    968:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    969:    static_cast< ClassData* >(data.get())->SetWidth(width);
    1130:    auto cond = static_cast< Operation* >(token.get());
    1418:    auto cast = static_cast< Operation* >(token.get());
    1584:    auto op = static_cast< Operation* >(token.get());
    1609:    auto delOp = static_cast< Operation* >(token.get());
    1637:    auto d = static_cast< Do* >(statement.get());
    1845:    auto f = static_cast< For* >(statement.get());
    1953:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    2003:          curr = static_cast< FuncData* >(data.get());
    2009:          curr = static_cast< FuncData* >(subseq.get());
    2292:             static_cast< If* >(first)->SetElseIf();
    2298:    auto i = static_cast< If* >(statement.get());
    2441:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2483:    auto newOp = static_cast< Operation* >(token.get());
    2558:    auto op = static_cast< Operation* >(token.get());
    2969:    static_cast< Return* >(statement.get())->AddExpr(expr);
    3015:    auto op = static_cast< Operation* >(token.get());
    3257:    auto op = static_cast< Operation* >(token.get());
    3283:    auto s = static_cast< Switch* >(statement.get());
    3372:    auto op = static_cast< Operation* >(token.get());
    3406:    auto t = static_cast< Try* >(statement.get());
    3468:    auto op = static_cast< Operation* >(token.get());
    3764:    auto w = static_cast< While* >(statement.get());
    4120:          auto op = static_cast< Operation* >(token)->Op();
  W008 Cast removes const qualification
    4344:       func->SetTemplate(const_cast< Function* >(tmplt));
  W106 Function does not invoke Debug::ft
    245: size_t Parser::CurrPos() const
  W119 Argument passed by value is modified
    1044/2: bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
    2375/1: size_t Parser::GetLineNum(size_t pos) const
    4168/2: void Parser::Log(Warning warning, size_t pos) const
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h
  W042 Member could be private
    111:    enum SourceType
  W082 Adjacent arguments have the same type
    406:    static bool SetCompoundType
    452:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W088 Argument could be const
    242/1:    bool GetStatements(BlockPtr& block, bool braced);
    340/1:    bool GetFuncSpecial(FunctionPtr& func);
    353/1:    bool GetCtorInit(FunctionPtr& func);
    374/1:    bool GetArguments(FunctionPtr& func);
    407/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    474/1:    bool GetNum(ExprPtr& expr);
    475/1:    bool GetChar(ExprPtr& expr, Cxx::Encoding code);
    476/1:    bool GetStr(ExprPtr& expr, Cxx::Encoding code);
    486/1:    bool GetCast(ExprPtr& expr);
    487/1:    bool GetPrecedence(ExprPtr& expr);
    494/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    498/1:    bool GetSubscript(ExprPtr& expr);
    507/1:    bool GetAlignOf(ExprPtr& expr);
    508/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    509/1:    bool GetConditional(ExprPtr& expr);
    510/1:    bool GetDefined(ExprPtr& expr);
    511/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    512/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    513/1:    bool GetNoExcept(ExprPtr& expr);
    514/1:    bool GetSizeOf(ExprPtr& expr);
    515/1:    bool GetThrow(ExprPtr& expr);
    516/1:    bool GetTypeId(ExprPtr& expr);
  W092 Function could be free
    406:    static bool SetCompoundType
    598:    static std::string Indent();
  W127 Data could be free
    651:    static uint32_t Backups[MaxCause + 1];
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.cpp
  W106 Function does not invoke Debug::ft
    35: bool IsSortedByName(const LibraryItem* item1, const LibraryItem* item2)
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion
C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp
  W097 Line indentation is not a multiple of the standard value
    111:           a != orders.adjustments.end(); ++a)
    412:           a != orders.adjustments.end(); ++a)
    712:        a != attacks.upper_bound(to_prov); ++a)
    920:                     (client.order_type_copy != MOVE_BY_CONVOY_ORDER))
    971:              f != subverted_army.convoyers.end(); ++f)
    1470:        a != attacks.upper_bound(province); ++a)
    1625:                  (attacker.order_type_copy != MOVE_BY_CONVOY_ORDER))
    1968:        b != balanced_head_to_heads.end(); ++b)
    2062:                 f != subverting_army.convoyers.end(); ++f)
    2065:                    a != attacks.upper_bound(*f); ++a)
    2116:        u != unbalanced_head_to_heads.end(); ++u)
C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp
  W006 reinterpret_cast
    214:    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
    516:    auto& dm = reinterpret_cast< const DM_Message& >(message);
    517:    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
    643:    auto& em = reinterpret_cast< const EM_Message& >(message);
    1296:       auto& rm = reinterpret_cast< const RM_Message& >(message);
    2085:    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
    2157:    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
    2300:    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
    2304:    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  W106 Function does not invoke Debug::ft
    434: BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
    441: BaseBot* BaseBot::instance()
  W117 Line can merge with the next line and be under the length limit
    1710:          (press->message == contents))
C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W030 Unused enumerator
    62:       FIRST_BOT_SPECIFIC_ERROR
  W075 Virtual function is public
    91:    virtual bool process_command_line_parameter(char token, std::string& value);
    97:    virtual std::string report_command_line_parameters();
  W082 Adjacent arguments have the same type
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    502:    virtual void report_failed_press
  W090 Function could be const
    206:    virtual void process_ccd_message
    212:    virtual void process_drw_message(const TokenMessage& message);
    243:    virtual void process_out_message(const TokenMessage& message);
    251:    virtual void process_smr_message(const TokenMessage& message);
    268:    virtual void process_adm_message(const TokenMessage& message);
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    467:    virtual void process_hlo_message(const TokenMessage& message);
    472:    virtual void process_map_message(const TokenMessage& message);
    476:    virtual void process_mdf_message(const TokenMessage& message);
    484:    virtual void process_sco_message(const TokenMessage& message);
    488:    virtual void process_now_message(const TokenMessage& message);
    492:    virtual void process_slo_message(const TokenMessage& message);
  W092 Function could be free
    75:    static BaseBot* instance();
    101:    static void send_to_console(std::ostringstream& report);
    179:    void cancel_event(BotEvent event);
    524:    static void report_ccd(const Token& power, bool disorder);
    544:    static void report_out(const Token& power);
    556:    void report_exit(fixed_string reason);
    716:    static bool send_buff(DipIpBuffer& buff);
C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp
  W006 reinterpret_cast
    185:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
    214:    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  W007 Cast down the inheritance hierarchy
    201:    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W032 Unused function
    117:       bool operator<(const Wakeup& that) const
  W053 Data could be const
    112:       BotEvent event;       // event
  W055 Data need not be mutable
    113:       mutable secs_t secs;  // delay
C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp
  W006 reinterpret_cast
    100:       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
    129:    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W032 Unused function
    69:    DipHeader* Header() const;
C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp
  W106 Function does not invoke Debug::ft
    29: void ConvoySubversion::clear()  // <b>
    37: void ConvoySubversion::decrement()
C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h
  W020 Using statement in header
    29: using namespace NodeBase;
  W027 Unused class
    37: class DipModule : public Module
  W035 No referent for friend declaration
    39:    friend class Singleton< DipModule >;
C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp
  W005 Functional cast
    425: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  W006 reinterpret_cast
    62:       reinterpret_cast < const IM_Message* >(this)->Display(stream);
    65:       reinterpret_cast < const RM_Message* >(this)->Display(stream);
    68:       reinterpret_cast < const DM_Message* >(this)->Display(stream);
    71:       reinterpret_cast < const FM_Message* >(this)->Display(stream);
    74:       reinterpret_cast < const EM_Message* >(this)->Display(stream);
    77:       reinterpret_cast < const BM_Message* >(this)->Display(stream);
    198:       auto header = reinterpret_cast< const DipHeader* >(source);
    208:       auto header = reinterpret_cast< const DipHeader* >(payload);
    227:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    233:       auto im = reinterpret_cast< IM_Message* >(src);
    241:       auto dm = reinterpret_cast< DM_Message* >(src);
    252:       auto em = reinterpret_cast< EM_Message* >(src);
    279:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    288:       auto rm = reinterpret_cast< RM_Message* >(msg);
    299:       auto dm = reinterpret_cast< DM_Message* >(msg);
    310:       auto em = reinterpret_cast< EM_Message* >(msg);
    331:    auto header = reinterpret_cast< const DipHeader* >(payload);
    356:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  W007 Cast down the inheritance hierarchy
    274:    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
    327:    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  W009 Pointer arithmetic
    211:       dest = payload + received;
  W106 Function does not invoke Debug::ft
    425: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h
  W020 Using statement in header
    39: using namespace NodeBase;
    40: using namespace NetworkBase;
  W028 Unused data
    162: constexpr ProtocolError IM_TIMEOUT = 0x01;
    163: constexpr ProtocolError IM_EXPECTED = 0x02;
    164: constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
    165: constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
    166: constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
    167: constexpr ProtocolError IM_REPEATED = 0x06;
    168: constexpr ProtocolError IM_FROM_SERVER = 0x07;
    169: constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
    170: constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
    171: constexpr ProtocolError DM_BEFORE_RM = 0x0A;
    172: constexpr ProtocolError RM_EXPECTED = 0x0B;
    173: constexpr ProtocolError RM_REPEATED = 0x0C;
    174: constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
    175: constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
    197: constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  W032 Unused function
    250:    CliText* CreateText() const override;
  W042 Member could be private
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
  W053 Data could be const
    144:    DipHeader header;  // no parameters (length = 0)
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
  W127 Data could be free
    358:    static const size_t BlockSize;
C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h
  W020 Using statement in header
    26: using namespace NetworkBase;
    27: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/dip/Location.h
  W032 Unused function
    75:    bool operator<(const Location& that) const;
C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp
  W097 Line indentation is not a multiple of the standard value
    123:              (our_winter_orders.number_of_waives != 0));
    230:           o != our_winter_orders.adjustments.end(); ++o)
    895:           b != r->second.adjustments.end(); ++b)
    1019:           o != orders.adjustments.end(); ++o, ++count)
    1369:                       loc != n->second.end(); ++loc)
    2054:               winter->number_of_waives >= winter->number_of_orders_required)
    2076:               game_map[build_loc.province].home_powers.end())
    2083:               game_map[build_loc.province].neighbours.end())
    2122:               winter->number_of_waives >= winter->number_of_orders_required)
  W106 Function does not invoke Debug::ft
    262: bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
    280: bool MapAndUnits::can_move_to_province
    562: TokenMessage MapAndUnits::encode_location(const Location& location) const
    838: TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
    1145: const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
    1384: MapAndUnits* MapAndUnits::instance()
    2455: Token MapAndUnits::province_token(ProvinceId province) const
    2574: bool MapAndUnits::set_move_by_single_step_convoy_order
C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W048 Data is write-only
    121:    bool game_started;                // set when the game has begun
    147:    word our_number_of_disbands;    // disbands required (negative for builds)
  W082 Adjacent arguments have the same type
    190:    bool set_move_by_convoy_order(ProvinceId unit,
    399:    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  W092 Function could be free
    157:    static MapAndUnits* instance();
    162:    static MapAndUnits* create_clone();
    166:    static void delete_clone(MapAndUnits*& clone);
    260:    std::string display_retreat_order(const UnitOrder& unit) const;
C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h
  W020 Using statement in header
    21: using namespace NetworkBase;
C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp
  W106 Function does not invoke Debug::ft
    32: Token::Token(const category_t cat, const subtoken_t sub)
    40: int Token::get_number() const
    49: bool Token::is_number() const
    56: bool Token::is_power() const
    63: bool Token::is_province() const
    70: Token& Token::operator=(const Token& that)
    118: Token::SeasonType Token::order_season() const
    129: PowerId Token::power_id() const
    137: ProvinceId Token::province_id() const
    260: Token power_token(PowerId power)
    273: Token province_token(ProvinceId province)
  W119 Argument passed by value is modified
    147/1: bool Token::set_number(int number)
C:/Users/gregu/Documents/rsc/rsc/dip/Token.h
  W020 Using statement in header
    27: using namespace NodeBase;
  W028 Unused data
    212: constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
    213: constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
    214: constexpr category_t CATEGORY_BRACKET = 0x40;
    217: constexpr category_t CATEGORY_ORDER = 0x43;
    219: constexpr category_t CATEGORY_RESULT = 0x45;
    222: constexpr category_t CATEGORY_COMMAND = 0x48;
    223: constexpr category_t CATEGORY_PARAMETER = 0x49;
    224: constexpr category_t CATEGORY_PRESS = 0x4A;
  W042 Member could be private
    99:    bool is_number() const;
C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp
  W097 Line indentation is not a multiple of the standard value
    374:              that.length_ * sizeof(Token));
    414:              that.length_ * sizeof(Token));
  W106 Function does not invoke Debug::ft
    111: Token TokenMessage::at(size_t index) const
    118: void TokenMessage::clear()
    245: Token TokenMessage::front() const
    338: Token TokenMessage::operator[](size_t index) const
C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h
  W032 Unused function
    48:    explicit TokenMessage(const Token* stream);
    56:    TokenMessage(const TokenMessage& that);
    65:    TokenMessage& operator=(TokenMessage&& that);
    92:    Token operator[](size_t index) const;
    141:    void set_as_ascii(const std::string& text);
    171:    bool operator<(const TokenMessage& that) const;
  W042 Member could be private
    128:    size_t set_from(const Token* stream, size_t length);
C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp
  W106 Function does not invoke Debug::ft
    328: TokenTextMap* TokenTextMap::instance()
C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h
  W092 Function could be free
    42:    static TokenTextMap* instance();
C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    37: size_t WinterOrders::get_number_of_results() const
C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h
  W032 Unused function
    52:    size_t get_number_of_results() const;
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    58:    auto fake = reinterpret_cast< const Circuit* >(&local);
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W053 Data could be const
    90:    RegCell port_;
  W075 Virtual function is public
    64:    virtual std::string Name() const = 0;
    68:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h
  W020 Using statement in header
    29: using namespace NodeBase;
  W127 Data could be free
    43:    static const size_t BlockSize;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
  W032 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    92:    explicit MediaEndpt(MediaPsm& psm);
  W042 Member could be private
    104:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
  W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W027 Unused class
    42: class MediaFailureEvent : public Event
  W032 Unused function
    48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    56:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    112:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h
  W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace SessionBase;
  W042 Member could be private
    52:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    529:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    228:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W106 Function does not invoke Debug::ft
    234: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h
  W020 Using statement in header
    37: using namespace NodeBase;
    38: using namespace SessionBase;
  W032 Unused function
    120:    MediaEndpt* Mep() const { return mep_; }
  W042 Member could be private
    132:    Tone::Id GetOgTone() const { return ogTone_; }
    170:    void SetOgPort(Switch::PortId ogport);
    189:    Event* ReceiveMsg(Message& msg) override;
    193:    void PrepareOgMsgq() override;
  W075 Virtual function is public
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
  W077 Virtual function has no overrides
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    86:       auto mpsm = static_cast< MediaPsm* >(psm);
    108:       auto mpsm = static_cast< MediaPsm* >(psm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
  W032 Unused function
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W077 Virtual function has no overrides
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    85: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W042 Member could be private
    66:    static bool IsValidPort(PortId pid)
  W092 Function could be free
    66:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    77: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W092 Function could be free
    46:    static Switch::PortId ToneToPort(Tone::Id tid);
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    61:    auto fake = reinterpret_cast< const Tone* >(&local);
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    70:    Id Tid() const { return Id(tid_.GetId()); }
  W020 Using statement in header
    31: using namespace NodeBase;
  W032 Unused function
    70:    Id Tid() const { return Id(tid_.GetId()); }
  W037 Member hides inherited name
    74:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    87:    virtual ~Tone();
C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp
  W006 reinterpret_cast
    112:    auto fake = reinterpret_cast< const Alarm* >(&local);
  W106 Function does not invoke Debug::ft
    198: AlarmStatus Alarm::Status() const
  W110 Override of Base.Display not found
    43: struct AlarmDynamic : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h
  W053 Data could be const
    129:    RegCell aid_;
  W082 Adjacent arguments have the same type
    63:    Alarm(c_string name, c_string expl, secs_t delay);
  W090 Function could be const
    113:    void SetStatus(AlarmStatus status);
  W127 Data could be free
    51:    static const size_t MaxNameSize;
    55:    static const size_t MaxExplSize;
C:/Users/gregu/Documents/rsc/rsc/nb/AlarmRegistry.h
  W127 Data could be free
    49:    static const id_t MaxAlarms;
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    108:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
    108:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W119 Argument passed by value is modified
    30/1: size_t find_first_one(uword n)
    55/1: size_t log2(size_t n, bool up)
    122/1: size_t round_to_2_exp_n(size_t n, size_t e, bool up)
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h
  W082 Adjacent arguments have the same type
    51:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    55:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
    63:    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h
  W032 Unused function
    136:    const T& Back() const
    144:    T& Back()
    152:    const T& At(size_t index) const
    160:    T& At(size_t index)
    184:    const T* Data() const
  W099 Line contains adjacent spaces
    205:    inline static fn_name Array_ctor()    { return "Array.ctor"; }
    206:    inline static fn_name Array_dtor()    { return "Array.dtor"; }
    207:    inline static fn_name Array_Init()    { return "Array.Init"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    95:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    158:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    67:    objects.push_back(const_cast< Base* >(this));
  W106 Function does not invoke Debug::ft
    90: void Base::Nullify(size_t n)
    154: Base::vptr_t Base::Vptr() const
  W119 Argument passed by value is modified
    90/1: void Base::Nullify(size_t n)
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h
  W043 Member could be protected
    75:    virtual void Display(std::ostream& stream,
    98:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    75:    virtual void Display(std::ostream& stream,
    93:    virtual void GetSubtended(std::vector< Base* >& objects) const;
    104:    virtual void ClaimBlocks();
    122:    virtual void Cleanup() { }
    129:    virtual void Startup(RestartLevel level) { }
    137:    virtual void Shutdown(RestartLevel level) { }
    141:    virtual MemoryType MemType() const { return MemPermanent; }
C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h
  W075 Virtual function is public
    44:    virtual void Callback() { }
  W090 Function could be const
    44:    virtual void Callback() { }
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp
  W106 Function does not invoke Debug::ft
    48: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h
  W042 Member could be private
    66:    bool SetNext(c_string input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(c_string key, c_string def, c_string expl);
  W092 Function could be free
    76:    static fixed_string ValidTrueChars();
    81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h
  W042 Member could be private
    68:    bool SetNextValue(bool value) override;
  W060 Base class constructor is public
    39:    CfgBoolParm(c_string key, c_string def, c_string expl);
  W075 Virtual function is public
    47:    bool GetValue() const override { return curr_; }
  W082 Adjacent arguments have the same type
    39:    CfgBoolParm(c_string key, c_string def, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp
  W106 Function does not invoke Debug::ft
    67: bool CfgFlagParm::GetValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h
  W042 Member could be private
    65:    bool SetNextValue(bool value) override;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(c_string key, c_string def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp
  W106 Function does not invoke Debug::ft
    68: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h
  W042 Member could be private
    80:    bool SetNext(c_string input) override;
  W053 Data could be const
    92:    word min_;
    96:    word max_;
  W060 Base class constructor is public
    39:    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    135:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h
  W042 Member could be private
    60:    c_string Key() const;
  W053 Data could be const
    155:    Q1Link link_;
  W075 Virtual function is public
    64:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W077 Virtual function has no overrides
    111:    virtual std::string GetInput() const;
  W082 Adjacent arguments have the same type
    86:    CfgParm(c_string key, c_string def, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
  W106 Function does not invoke Debug::ft
    260: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h
  W042 Member could be private
    57:    CfgTuple* FindTuple(const std::string& key) const;
  W092 Function could be free
    123:    bool LoadNextTuple(std::string& key, std::string& value);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp
  W106 Function does not invoke Debug::ft
    60: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h
  W060 Base class constructor is public
    40:    CfgStrParm(c_string key, c_string def, c_string expl);
  W082 Adjacent arguments have the same type
    40:    CfgStrParm(c_string key, c_string def, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h
  W053 Data could be const
    119:    Q1Link link_;
  W092 Function could be free
    84:    static const std::string& ValidKeyChars();
    89:    static const std::string& ValidValueChars();
    94:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp
  W106 Function does not invoke Debug::ft
    65: void CinThread::ClearClient(const Thread* client)
  W107 Function does not invoke Debug::ft as first statement
    103:       Debug::ft(CinThread_Enter);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    227:    return (Object*) addr;
  W006 reinterpret_cast
    93:    auto fake = reinterpret_cast< const Class* >(&local);
  W110 Override of Base.Display not found
    48: struct ClassDynamic : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h
  W032 Unused function
    63:    virtual void Initialize();
    72:    virtual Object* Create();
    76:    virtual Object* GetQuasiSingleton();
    80:    virtual void FreeQuasiSingleton(Object* obj);
    140:    bool SetVptr(const Object& obj);
    147:    bool SetTemplate(Object& obj);
    155:    bool SetQuasiSingleton(Object& obj);
  W042 Member could be private
    67:    virtual MemoryType ObjType() const = 0;
    134:    virtual Object* New(size_t size);
  W065 Base class virtual destructor is not public
    123:    virtual ~Class();
  W075 Virtual function is public
    63:    virtual void Initialize();
    67:    virtual MemoryType ObjType() const = 0;
    72:    virtual Object* Create();
    76:    virtual Object* GetQuasiSingleton();
    80:    virtual void FreeQuasiSingleton(Object* obj);
  W077 Virtual function has no overrides
    63:    virtual void Initialize();
    67:    virtual MemoryType ObjType() const = 0;
    72:    virtual Object* Create();
    76:    virtual Object* GetQuasiSingleton();
    80:    virtual void FreeQuasiSingleton(Object* obj);
  W090 Function could be const
    134:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp
  W106 Function does not invoke Debug::ft
    89: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h
  W065 Base class virtual destructor is not public
    82:    virtual ~CliAppData();
  W075 Virtual function is public
    63:    virtual void EventOccurred(Event event);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h
  W060 Base class constructor is public
    39:    explicit CliBoolParm(c_string help,
  W127 Data could be free
    60:    static fixed_string AnyBoolParm;
C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp
  W053 Data could be const
    61:    istreamPtr file_;
  W106 Function does not invoke Debug::ft
    596: bool CliBuffer::ReadingFromFile() const
  W119 Argument passed by value is modified
    192/3:    (const CliThread& cli, const string& expl, std::streamsize p)
C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h
  W042 Member could be private
    130:    bool ReadingFromFile() const;
  W092 Function could be free
    93:    static CliParm::Rc GetInt(const std::string& s, word& n, bool hex);
  W127 Data could be free
    53:    static const char EscapeChar;
    58:    static const char StringChar;
    62:    static const char BreakChar;
    66:    static const char CommentChar;
    70:    static const char OptSkipChar;
    78:    static const char SymbolChar;
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h
  W043 Member could be protected
    40:    CliCharParm(c_string help, c_string chars,
  W060 Base class constructor is public
    40:    CliCharParm(c_string help, c_string chars,
  W082 Adjacent arguments have the same type
    40:    CliCharParm(c_string help, c_string chars,
  W127 Data could be free
    66:    static const char CharSeparator;
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h
  W075 Virtual function is public
    76:    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
    94:    virtual word ExplainCommand(std::ostream& stream, bool verbose) const;
  W082 Adjacent arguments have the same type
    104:    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  W092 Function could be free
    136:    static Rc Exhausted(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    73:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    173:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    73:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    173:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h
  W082 Adjacent arguments have the same type
    59:    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp
  W106 Function does not invoke Debug::ft
    118: uint32_t CliCookie::Index(uint32_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    102:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h
  W053 Data could be const
    107:    RegCell iid_;
  W075 Virtual function is public
    72:    virtual void Enter();
    77:    virtual void Exit();
  W077 Virtual function has no overrides
    77:    virtual void Exit();
  W082 Adjacent arguments have the same type
    99:    CliIncrement(c_string name, c_string help, uint32_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h
  W053 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
  W060 Base class constructor is public
    49:    CliIntParm(c_string help, word min, word max,
  W082 Adjacent arguments have the same type
    49:    CliIntParm(c_string help, word min, word max,
  W127 Data could be free
    39:    static fixed_string AnyIntParm;
    75:    static const char RangeSeparator;
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    98:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h
  W043 Member could be protected
    158:    bool GetBoolParm(bool& b, CliThread& cli) const;
    168:    bool GetCharParm(char& c, CliThread& cli) const;
    178:    bool GetPtrParm(void*& p, CliThread& cli) const;
    204:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    253:    bool IsOptional() const { return opt_; }
  W075 Virtual function is public
    135:    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
    143:    virtual void Explain(std::ostream& stream, col_t indent) const;
    153:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    163:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    173:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    183:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    211:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    221:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    231:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W092 Function could be free
    324:    static Rc Mismatch(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    91:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h
  W043 Member could be protected
    39:    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  W060 Base class constructor is public
    39:    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
C:/Users/gregu/Documents/rsc/rsc/nb/CliRegistry.h
  W127 Data could be free
    83:    static const size_t MaxIncrements;
C:/Users/gregu/Documents/rsc/rsc/nb/CliStack.h
  W117 Line can merge with the next line and be under the length limit
    65:    const CliCommand* FindCommand
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.cpp
  W119 Argument passed by value is modified
    39/2: CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h
  W042 Member could be private
    61:    c_string HelpText() const;
  W043 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
  W060 Base class constructor is public
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W120 Function returns non-const reference or pointer to member data
    82:    Registry< CliParm >& Parms() { return parms_; }
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.cpp
  W119 Argument passed by value is modified
    142/2: void CliTextParm::Explain(ostream& stream, col_t indent) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h
  W060 Base class constructor is public
    49:    explicit CliTextParm(c_string help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp
  W119 Argument passed by value is modified
    733/2:    (const string& expl, size_t begin, size_t end, col_t indent) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h
  W032 Unused function
    134:    word Result() const { return result_; }
  W050 Data is not private
    203:    std::unique_ptr< CliBuffer > ibuf;
    207:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    91:    char CharPrompt(const std::string& prompt,
    98:    word IntPrompt(const std::string& prompt, word min, word max);
    243:    void Report1
  W120 Function returns non-const reference or pointer to member data
    182:    CliCookie& Cookie() { return cookie_; }
  W127 Data could be free
    269:    static const char CliPrompt;
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    87:       auto req = static_cast< StreamRequest* >(msg);
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h
  W092 Function could be free
    48:    static void Spool(c_string s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.cpp
  W006 reinterpret_cast
    74:    auto fake = reinterpret_cast< const Daemon* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Daemon.h
  W042 Member could be private
    89:    id_t Did() const { return did_.GetId(); }
  W053 Data could be const
    171:    RegCell did_;
    175:    size_t size_;
  W077 Virtual function has no overrides
    140:    virtual void Recover() { }
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp
  W106 Function does not invoke Debug::ft
    55: void Debug::Assert(bool condition, debug64_t errval)
    71: void Debug::ft(fn_name_arg func)
    79: void Debug::ftnt(fn_name_arg func)
  W130 Redundant scope
    89:    Debug::ft("Debug.GetSwFlags");
    99:    Debug::ft("Debug.noop");
    106:    Debug::ft("Debug.Progress");
    116:    Debug::ft("Debug.ResetSwFlags");
    125:    Debug::ftnt("Debug.SetSwFlag");
    144:    Debug::ft("Debug.SwErr");
    153:    Debug::ftnt("Debug.SwFlagOn");
    170:    Debug::ftnt(Debug_SwLog);
    174:    Debug::ftnt(Debug_SwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h
  W092 Function could be free
    83:    static void SwLog(fn_name_arg func,
    89:    static void SwErr(const std::string& errstr, debug64_t offset);
    93:    static void Assert(bool condition, debug64_t errval = 0);
    97:    static void Progress(const std::string& s);
    103:    static void noft() { }
    128:    static void noop();
  W127 Data could be free
    141:    static Flags SwFlags_;
C:/Users/gregu/Documents/rsc/rsc/nb/Duration.h
  W028 Unused data
    198: extern const Duration ONE_uSEC;
    203: extern const int64_t TICKS_PER_SEC;
  W032 Unused function
    121:    Duration operator+();
    125:    Duration operator-();
    129:    Duration& operator++();
    130:    Duration operator++(int);
    134:    Duration& operator--();
    135:    Duration operator--(int);
    147:    Duration& operator*=(int64_t rhs);
    151:    Duration& operator/=(int64_t rhs);
    155:    Duration& operator%=(const Duration& rhs);
    160:    Duration& operator>>=(int8_t shift);
    184: Duration operator*(const Duration& lhs, int64_t rhs);
    188: Duration operator%(const Duration& lhs, const Duration& rhs);
  W092 Function could be free
    100:    static Duration Immed();
    104:    static Duration Never();
  W099 Line contains adjacent spaces
    187: int64_t  operator/(const Duration& lhs, const Duration& rhs);
C:/Users/gregu/Documents/rsc/rsc/nb/Element.cpp
  W106 Function does not invoke Debug::ft
    189: bool Element::RunningInLab()
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h
  W042 Member could be private
    52:    static const std::string RscPath();
  W092 Function could be free
    46:    static std::string strTimePlace();
    52:    static const std::string RscPath();
    57:    static const std::string HelpPath();
    63:    static const std::string InputPath();
    68:    static const std::string OutputPath();
    72:    static const std::string ConsoleFileName();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    42:    Debug::ft("Exception.ctor");  //@
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h
  W032 Unused function
    66:    Exception(const Exception& that);
    67:    Exception(Exception&& that);
  W065 Base class virtual destructor is not public
    71:    virtual ~Exception();
  W075 Virtual function is public
    51:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    212:       auto req = static_cast< FileRequest* >(msg);
  W032 Unused function
    67:    FileRequest(const FileRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h
  W082 Adjacent arguments have the same type
    63:    static void Spool(const std::string& name,
  W092 Function could be free
    45:    static ostringstreamPtr CreateStream();
    58:    static void Spool(const std::string& name, ostringstreamPtr& stream,
    63:    static void Spool(const std::string& name,
    68:    static void Record(const std::string& s, bool eol = false);
    72:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.cpp
  W004 C-style cast
    151:       auto base = (const Base*) obj;
  W119 Argument passed by value is modified
    65/4:    const string& prefix, const byte_t* bytes, size_t count)
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h
  W082 Adjacent arguments have the same type
    94:    int strCompare
    102:    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W007 Cast down the inheritance hierarchy
    568:       auto curr = static_cast< FunctionTrace* >(rec);
    582:       auto curr = static_cast< FunctionTrace* >(rec);
    601:       auto curr = static_cast< FunctionTrace* >(rec);
    629:       auto curr = static_cast< FunctionTrace* >(rec);
    676:       auto curr = static_cast< FunctionTrace* >(rec);
    796:       auto curr = static_cast< FunctionTrace* >(rec);
    818:       auto curr = static_cast< FunctionTrace* >(rec);
    836:       auto curr = static_cast< FunctionTrace* >(rec);
    907:       auto curr = static_cast< FunctionTrace* >(rec);
  W032 Unused function
    171:    PerThreadInfo()
  W106 Function does not invoke Debug::ft
    193: CtorChain::CtorChain(FunctionTrace* inner) :
    210: bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
    263: CtorChain::Action CtorChain::CalcAction
    331: TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
    350: bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
    393: bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
    411: TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
    460: void CtorChain::HandleFunction(FunctionTrace* func)
    487: void CtorChain::MoveOuterAboveInit()
    501: void CtorChain::MoveOuterAboveInner() const
    514: void CtorChain::SetOuter(FunctionTrace* outer)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.h
  W032 Unused function
    48:    FunctionTrace();
  W060 Base class constructor is public
    44:    FunctionTrace(fn_name_arg func, fn_depth depth);
    48:    FunctionTrace();
  W127 Data could be free
    186:    static const fn_depth MaxDispDepth;
C:/Users/gregu/Documents/rsc/rsc/nb/Heap.cpp
  W106 Function does not invoke Debug::ft
    145: void Heap::Freeing(void* addr, size_t size)
    161: bool Heap::IsFixedSize() const
    195: void Heap::Requested(size_t size, void* addr)
C:/Users/gregu/Documents/rsc/rsc/nb/Heap.h
  W042 Member could be private
    93:    int SetAttrs(MemoryProtection attrs);
    121:    bool IsFixedSize() const;
  W075 Virtual function is public
    47:    virtual void* Addr() const = 0;
    51:    virtual size_t Size() const = 0;
    55:    virtual MemoryType Type() const = 0;
    59:    virtual void* Alloc(size_t size) = 0;
    63:    virtual void Free(void* addr) = 0;
    68:    virtual size_t BlockToSize(const void* addr) const = 0;
    73:    virtual bool Validate(const void* addr) const = 0;
    77:    virtual bool CanBeProtected() const { return true; }
    84:    virtual int SetPermissions(MemoryProtection attrs);
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp
  W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::SuspendRoot()
    55: bool InitFlags::TraceInit()
C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp
  W006 reinterpret_cast
    133:    auto fake = reinterpret_cast< const Log* >(&local);
  W106 Function does not invoke Debug::ft
    139: size_t Log::Count()
  W110 Override of Base.Display not found
    56: struct LogDynamic : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h
  W053 Data could be const
    181:    RegCell lid_;
  W090 Function could be const
    110:    void SetInterval(uint8_t interval);
  W092 Function could be free
    115:    static Log* Find(fixed_string groupName, LogId id, LogGroup*& group);
    120:    static Log* Find(fixed_string log);
    128:    static size_t Count();
  W127 Data could be free
    58:    static const size_t MaxExplSize;
C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp
  W004 C-style cast
    310:    auto after = (ptr_t) next_ + size;
    323:       if(wrap && (after > (const_ptr_t) first)) return nullptr;
    330:       if(wrap || (after > (const_ptr_t) first)) return nullptr;
    503:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    503:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    505:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
    505:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  W006 reinterpret_cast
    122:    SetNext(reinterpret_cast< Entry* >(buff_));
    337:       where = reinterpret_cast< Entry* >(buff_);
    345:    SetNext(reinterpret_cast< Entry* >(after));
    382:          SetNext(reinterpret_cast< Entry* >(buff_));
  W009 Pointer arithmetic
    310:    auto after = (ptr_t) next_ + size;
    311:    auto wrap = after >= (buff_ + size_);
    338:       after = buff_ + size;
  W106 Function does not invoke Debug::ft
    496: void LogBuffer::UpdateMax()
  W119 Argument passed by value is modified
    95/1: LogBuffer::LogBuffer(size_t size) :
C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.h
  W127 Data could be free
    115:    static const size_t BundledLogSizeThreshold;
C:/Users/gregu/Documents/rsc/rsc/nb/LogBufferRegistry.h
  W127 Data could be free
    53:    static const size_t LogBufferSize;
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp
  W006 reinterpret_cast
    117:    auto fake = reinterpret_cast< const LogGroup* >(&local);
  W106 Function does not invoke Debug::ft
    176: void LogGroup::SetSuppressed(bool suppressed)
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h
  W042 Member could be private
    81:    id_t Gid() const { return gid_.GetId(); }
    85:    bool Suppressed() const { return suppressed_; }
  W053 Data could be const
    142:    RegCell gid_;
  W127 Data could be free
    55:    static const size_t MaxExplSize;
    59:    static const id_t MaxLogs;
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.cpp
  W106 Function does not invoke Debug::ft
    188: LogGroup* LogGroupRegistry::Group(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h
  W032 Unused function
    58:    Log* FindLog(const std::string& name, LogId id) const;
  W127 Data could be free
    50:    static const id_t MaxGroups;
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    69:       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h
  W092 Function could be free
    68:    static void Spool(ostringstreamPtr& stream, const Log* log);
    72:    static void CopyToConsole(const ostringstreamPtr& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.cpp
  W106 Function does not invoke Debug::ft
    142: size_t MainArgs::Size()
C:/Users/gregu/Documents/rsc/rsc/nb/MainArgs.h
  W092 Function could be free
    53:    static void PushBack(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp
  W005 Functional cast
    234:       auto type = MemoryType(m);
  W106 Function does not invoke Debug::ft
    196: Heap* EnsureHeap(MemoryType type)
    213: Heap* Memory::AccessHeap(MemoryType type)
    230: MemoryType Memory::AddrToType(const void* addr)
    247: size_t Memory::Align(size_t size, size_t log2align)
    427: bool Memory::Protect(MemoryType type)
    508: bool Memory::Unprotect(MemoryType type)
    539: size_t Memory::Words(size_t size)
  W111 Override of Object.Patch not found
    61: class ProtectedHeap : public NbHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h
  W032 Unused function
    50:    size_t Words(size_t size);
    58:    void Set(void* dest, byte_t value, size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    67:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h
  W092 Function could be free
    57:    static c_string TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h
  W032 Unused function
    92:    ModuleId Mid() const { return mid_.GetId(); }
  W053 Data could be const
    130:    RegCell mid_;
  W065 Base class virtual destructor is not public
    126:    virtual ~Module();
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp
  W106 Function does not invoke Debug::ft
    59: const FactionFlags& AllFactions()
    76: const FactionFlags& ShutdownFactions()
    168: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h
  W092 Function could be free
    82:    void SetLevel(RestartLevel level);
    86:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp
  W106 Function does not invoke Debug::ft
    68: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h
  W060 Base class constructor is public
    41:    MsgBuffer();
    45:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    62:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp
  W107 Function does not invoke Debug::ft as first statement
    35:    Debug::ft("MutexGuard.ctor");
    55:       Debug::ftnt("MutexGuard.Release");
C:/Users/gregu/Documents/rsc/rsc/nb/MutexRegistry.h
  W042 Member could be private
    53:    SysMutex* Find(const std::string& name) const;
  W127 Data could be free
    49:    static const id_t MaxMutexes;
C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h
  W028 Unused data
    68: constexpr FlagId FirstAppDebugFlag = 11;
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp
  W106 Function does not invoke Debug::ft
    125: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h
  W028 Unused data
    72: extern fixed_string NotImplementedExpl;
  W082 Adjacent arguments have the same type
    123: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
    129: bool ValidateOptions
C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.cpp
  W004 C-style cast
    285:    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
    326:    heap_->state = (uint8_t*) (heapAddr + infoSize);
    358:          ReleaseBlock((HeapBlock*) addr, level);
    369:       ReserveBlock((HeapBlock*) addr);
    451:       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
    496:    auto block = (const HeapBlock*) addr;
    621:                   if(block < (HeapBlock*) heap_)
    623:                   else if(block < (HeapBlock*) heap_->minAddr)
    692:    FreeBlock((HeapBlock*) addr, level);
    740:    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
    820:       auto size = BlockToSize((const HeapBlock*) addr);
    823:       auto index = BlockToIndex((const HeapBlock*) addr, level);
    875:          if((HeapBlock*) block->link.prev->next != block)
    877:          if((HeapBlock*) block->link.next->prev != block)
  W005 Functional cast
    727:    return BlockState(state);
  W026 Unused argument
    75/3:       const std::string& prefix, const Flags& options) const;
  W053 Data could be const
    54:    Q2Link link;
  W099 Line contains adjacent spaces
    613:                case Split:     c = 'S'; break;
    614:                case Merged:    c = 'm'; break;
  W103 Function not sorted in standard order
    164: size_t LevelToSize(NbHeap::level_t level)
  W106 Function does not invoke Debug::ft
    126: NbHeap::index_t IndexToChild(NbHeap::index_t index)
    135: NbHeap::index_t IndexToParent(NbHeap::index_t index)
    144: NbHeap::index_t IndexToSibling(NbHeap::index_t index)
    155: size_t Log2Size(NbHeap::level_t level)
    164: size_t LevelToSize(NbHeap::level_t level)
    173: NbHeap::level_t SizeToLevel(size_t size)
    392: bool NbHeap::AddrIsValid(const void* addr, bool header) const
    433: HeapBlock* NbHeap::AllocBlock(level_t level, size_t size)
    465: NbHeap::index_t NbHeap::BlockToIndex
    532: NbHeap::BlockState NbHeap::Corrupt(int reason, bool restart) const
    544: HeapBlock* NbHeap::Dequeue(level_t level)
    645: void NbHeap::EnqBlock(HeapBlock* block, index_t index, level_t level)
    654: HeapBlock* NbHeap::Enqueue(HeapBlock* block, level_t level)
    697: void NbHeap::FreeBlock(HeapBlock* block, level_t level)
    716: NbHeap::BlockState NbHeap::GetState(index_t index) const
    732: HeapBlock* NbHeap::IndexToBlock(index_t index, level_t level) const
    752: void NbHeap::ReleaseBlock(HeapBlock* block, level_t level)
    768: void NbHeap::ReserveBlock(const HeapBlock* block)
    781: void NbHeap::SetState(index_t index, BlockState state)
    797: void NbHeap::SplitAncestors(index_t block)
    845: NbHeap::BlockState NbHeap::ValidateBlock
  W119 Argument passed by value is modified
    243/2: NbHeap::NbHeap(MemoryType type, size_t size) : Heap(),
    414/1: void* NbHeap::Alloc(size_t size)
    697/1: void NbHeap::FreeBlock(HeapBlock* block, level_t level)
    797/1: void NbHeap::SplitAncestors(index_t block)
C:/Users/gregu/Documents/rsc/rsc/nb/NbHeap.h
  W090 Function could be const
    143:    void SetState(index_t index, BlockState state);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    643:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    1027:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1219:          auto type = MemoryType(memtype);
    1233:          auto type = MemoryType(memtype);
    1263:          auto type = MemoryType(m);
    1274:          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
    1679:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    3456:       auto heap = Memory::AccessHeap(MemoryType(m));
  W102 Line length exceeds the standard maximum
    3433: "Alloc  Low kB     kB       Bytes                            Memory        Prot\n"
    3434: "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h
  W028 Unused data
    195:    static const id_t LastNbIndex = 3;
  W060 Base class constructor is public
    41:    StatusCommand();
    56:    LogsAction();
    76:    explicit LogsCommand(bool bind = true);
    93:    SetWhatParm();
    107:    explicit SetCommand(bool bind = true);
    124:    IncludeWhatParm();
    138:    explicit IncludeCommand(bool bind = true);
    155:    ExcludeWhatParm();
    168:    explicit ExcludeCommand(bool bind = true);
    199:    explicit QueryCommand(bool bind = true);
    216:    SaveWhatParm();
    228:    explicit SaveCommand(bool bind = true);
    245:    ClearWhatParm();
    263:    explicit ClearCommand(bool bind = true);
C:/Users/gregu/Documents/rsc/rsc/nb/NbPools.h
  W127 Data could be free
    41:    static const size_t BlockSize;
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    212:             stream << Faction(f) << CRLF;
  W106 Function does not invoke Debug::ft
    172: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h
  W042 Member could be private
    77:    static bool ThreadsEmpty();
  W092 Function could be free
    73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    77:    static bool ThreadsEmpty();
  W110 Override of Base.Display not found
    63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp
  W106 Function does not invoke Debug::ft
    75: char BlockingReasonChar(BlockingReason reason)
    98: char FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h
  W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
  W032 Unused function
    127: std::ostream& operator<<(std::ostream& stream, AlarmStatus status);
  W033 Unused typedef
    226: using PersistentStr =
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    114:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W106 Function does not invoke Debug::ft
    59: Object::ClassId Object::GetClassId() const
    70: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    95: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h
  W032 Unused function
    97:    ClassId GetClassId() const;
    109:    ObjectId GetObjectId() const;
    115:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    131:    void MorphTo(const Class& target);
  W042 Member could be private
    103:    virtual InstanceId GetInstanceId() const;
  W043 Member could be protected
    59:    virtual void Patch(sel_t selector, void* arguments) { }
  W053 Data could be const
    136:    uintptr_t patchArea_;
  W075 Virtual function is public
    59:    virtual void Patch(sel_t selector, void* arguments) { }
    84:    virtual Class* GetClass() const;
    92:    virtual void PostInitialize() { }
    103:    virtual InstanceId GetInstanceId() const;
  W077 Virtual function has no overrides
    84:    virtual Class* GetClass() const;
    92:    virtual void PostInitialize() { }
    103:    virtual InstanceId GetInstanceId() const;
  W088 Argument could be const
    59/2:    virtual void Patch(sel_t selector, void* arguments) { }
  W090 Function could be const
    59:    virtual void Patch(sel_t selector, void* arguments) { }
  W092 Function could be free
    115:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    279:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, std::nothrow);
    303:          auto b = (ObjectBlock*) &seg[j];
    353:             auto b = (ObjectBlock*) &seg[j];
    389:             auto curr = (Pooled*) getptr1(item, diff);
    806:       return (ObjectBlock*) &blocks_[0][0];
    874:       return (ObjectBlock*) &blocks_[i][j];
    899:             auto b = (ObjectBlock*) &seg[j];
    929:    auto block = (const_ptr_t) ObjToBlock(obj);
    930:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    934:       auto b0 = (const_ptr_t) &blocks_[i][0];
    977:    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
    1005:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    525:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W099 Line contains adjacent spaces
    104:    CounterPtr      allocCount_;
    105:    CounterPtr      freeCount_;
    106:    CounterPtr      failCount_;
    107:    CounterPtr      auditCount_;
    108:    CounterPtr      expansions_;
  W106 Function does not invoke Debug::ft
    319: size_t ObjectPool::AllocCount() const
    486: size_t ObjectPool::AvailCount() const
    493: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    693: void ObjectPool::EnqBlock(Pooled* obj, bool deleted)
    785: size_t ObjectPool::Expansions() const
    792: size_t ObjectPool::FailCount() const
    833: size_t ObjectPool::FreeCount() const
    840: bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
    852: size_t ObjectPool::InUseCount() const
    859: size_t ObjectPool::LowAvailCount() const
    866: ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
    885: Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
    956: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    965: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    974: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W110 Override of Base.Display not found
    84: class ObjectPoolSizeCfg : public CfgIntParm
    97: class ObjectPoolStats : public Dynamic
    179: struct ObjectPoolDynamic : public Persistent
  W119 Argument passed by value is modified
    493/1: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    507/1: Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
    531/1: bool ObjectPool::Corrupt(size_t n)
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    94:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W065 Base class virtual destructor is not public
    209:    virtual ~ObjectPool();
  W075 Virtual function is public
    99:    virtual Pooled* DeqBlock(size_t size);
    104:    virtual void EnqBlock(Pooled* obj, bool deleted);
    172:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  W077 Virtual function has no overrides
    99:    virtual Pooled* DeqBlock(size_t size);
    104:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    235:    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
    240:    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  W090 Function could be const
    182:    bool Corrupt(size_t n);
    248:    void UpdateAlarm();
  W092 Function could be free
    262:    static ObjectBlock* ObjToBlock(const Pooled* obj);
  W127 Data could be free
    327:    static const uint8_t OrphanThreshold;
    332:    static const size_t OrphanMaxLogs;
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
  W106 Function does not invoke Debug::ft
    279: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
  W042 Member could be private
    57:    bool NullifyObjectData() const { return nullifyObjectDataCfg_->GetValue(); }
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp
  W106 Function does not invoke Debug::ft
    43: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h
  W092 Function could be free
    41:    static PermanentHeap* Instance();
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    136:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    114:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
  W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    71:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W106 Function does not invoke Debug::ft
    124: Flags PS_Break()
    129: Flags PS_Delayed()
    134: Flags PS_Final()
    139: Flags PS_Interrupt()
    144: Flags PS_Native()
    149: Flags PS_NoError()
    154: Flags PS_NoLog()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h
  W032 Unused function
    145: Flags PS_Delayed();
  W053 Data could be const
    132:    RegCell sid_;
  W065 Base class virtual destructor is not public
    108:    virtual ~PosixSignal();
  W082 Adjacent arguments have the same type
    102:    PosixSignal(signal_t value, c_string name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
  W106 Function does not invoke Debug::ft
    58: Flags PosixSignalRegistry::Attrs(signal_t value) const
    89: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    101: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ftnt(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h
  W032 Unused function
    62:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h
  W004 C-style cast
    136:          getptr2(prev, diff_);                   // put item after previous
    158:       return (T*) getptr1(item, diff_);  // location of item's vptr
    204:       return (T*) getptr1(item, diff_);     // location of item's vptr
    226:             getptr2(elem, diff_);           // start at the current item
    239:       elem = (T*) getptr1(item, diff_);     // location of item's vptr
    252:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    324:          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
    333:          getptr2(elem, diff_);
    334:       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
    357:       return (Q1Link*) getptr2(&elem, diff_);
  W088 Argument could be const
    82/1:    bool Enq(T& elem)
    106/1:    bool Henq(T& elem)
    128/1:    bool Insert(T* prev, T& elem)
    163/1:    bool Exq(T& elem)
    320/1:    void Corrupt(T* elem)
  W099 Line contains adjacent spaces
    386:    inline static fn_name Q1Way_dtor()    { return "Q1Way.dtor"; }
    387:    inline static fn_name Q1Way_Init()    { return "Q1Way.Init"; }
    388:    inline static fn_name Q1Way_Enq()     { return "Q1Way.Enq"; }
    389:    inline static fn_name Q1Way_Henq()    { return "Q1Way.Henq"; }
    390:    inline static fn_name Q1Way_Insert()  { return "Q1Way.Insert"; }
    391:    inline static fn_name Q1Way_Deq()     { return "Q1Way.Deq"; }
    392:    inline static fn_name Q1Way_Exq()     { return "Q1Way.Exq"; }
    393:    inline static fn_name Q1Way_Next()    { return "Q1Way.Next"; }
    394:    inline static fn_name Q1Way_Size()    { return "Q1Way.Size"; }
    395:    inline static fn_name Q1Way_Purge()   { return "Q1Way.Purge"; }
    397:    inline static fn_name Q1Way_Item()    { return "Q1Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp
  W106 Function does not invoke Debug::ft
    40: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h
  W032 Unused function
    63:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h
  W004 C-style cast
    137:       return (T*) getptr1(item, diff_);    // location of item's vptr
    166:       return (T*) getptr1(item, diff_);     // location of item's vptr
    184:             getptr2(elem, diff_);           // start at current element
    189:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    200:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    210:       return (T*) getptr1(item, diff_);     // location of item's vptr
    228:             getptr2(elem, diff_);           // start at current element
    233:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    244:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    333:       return (Q2Link*) getptr2(&elem, diff_);
  W032 Unused function
    290:    void Display(std::ostream& stream,
  W088 Argument could be const
    142/1:    bool Exq(T& elem)
  W090 Function could be const
    142:    bool Exq(T& elem)
  W099 Line contains adjacent spaces
    363:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    364:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    365:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    366:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    367:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    368:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    369:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    370:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    371:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    373:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp
  W106 Function does not invoke Debug::ft
    38: RegCell::~RegCell()
    50: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h
  W004 C-style cast
    109:       registry_ = (T**) Memory::Alloc(size, mem);
    499:                auto cell = (RegCell*) getptr2(item, diff_);
    562:       return (RegCell*) getptr2(&item, diff_);
    576:       auto table = (T**) Memory::Alloc(size, mem_);
  W088 Argument could be const
    270/1:    bool Erase(T& item)
  W099 Line contains adjacent spaces
    623:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    624:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    625:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    627:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    628:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    629:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    630:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    631:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    632:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    633:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.cpp
  W106 Function does not invoke Debug::ft
    38: bool Restart::ClearsMemory(MemoryType type)
    69: RestartLevel Restart::LevelToClear(MemoryType type)
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h
  W092 Function could be free
    99:    template< class T > static bool Release(std::unique_ptr< T >& obj)
    109:    static RestartLevel LevelToClear(MemoryType type);
    115:    static void Initiate
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h
  W004 C-style cast
    85:       reg->BindInstance((const Base**) &Instance_, type);
    104:       reg->UnbindInstance((const Base**) &Instance_);
  W099 Line contains adjacent spaces
    131:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp
  W053 Data could be const
    40:    MemoryType type;    // the type of memory that the singleton uses
  W064 Implicit destructor invoked
    37: struct SingletonTuple
  i 89:    SingletonTuple entry(addr, type);
  W106 Function does not invoke Debug::ft
    120: Singletons* Singletons::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.h
  W127 Data could be free
    78:    static const size_t MaxSingletons;
    99:    static Singletons* Instance_;
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h
  W060 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
  W082 Adjacent arguments have the same type
    41:    SoftwareException
  W117 Line can merge with the next line and be under the length limit
    41:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W106 Function does not invoke Debug::ft
    112: uint64_t Statistic::Overall() const
    243: uint64_t HighWatermark::Overall() const
    315: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h
  W043 Member could be protected
    69:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  W050 Data is not private
    92:    std::atomic_size_t curr_;
    96:    std::atomic_size_t prev_;
    100:    std::atomic_uint64_t total_;
    104:    size_t divisor_;
  W053 Data could be const
    120:    RegCell sid_;
  W060 Base class constructor is public
    136:    explicit Counter(const std::string& expl, size_t divisor = 1);
  W075 Virtual function is public
    65:    virtual uint64_t Overall() const;
    69:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  W127 Data could be free
    48:    static const size_t MaxExplSize;
    88:    static const char NotUpdated;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    80:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h
  W042 Member could be private
    63:    id_t Gid() const { return gid_.GetId(); }
  W053 Data could be const
    102:    RegCell gid_;
  W075 Virtual function is public
    71:    virtual void DisplayStats
  W127 Data could be free
    46:    static const size_t MaxExplSize;
    90:    static fixed_string ReportHeader;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
  W106 Function does not invoke Debug::ft
    119: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h
  W090 Function could be const
    73:    void StartInterval(bool first);
  W127 Data could be free
    52:    static const size_t MaxStats;
    56:    static const size_t MaxGroups;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h
  W053 Data could be const
    54:    static secs_t LongIntervalSecs;
    59:    static secs_t ShortIntervalSecs;
    66:    static size_t WakeupsBetweenReports;
    70:    static Duration SleepInterval;
  W127 Data could be free
    54:    static secs_t LongIntervalSecs;
    59:    static secs_t ShortIntervalSecs;
    66:    static size_t WakeupsBetweenReports;
    70:    static Duration SleepInterval;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h
  W043 Member could be protected
    59:    StreamRequest(const StreamRequest& that);
  W060 Base class constructor is public
    54:    StreamRequest();
    59:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    96:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h
  W053 Data could be const
    109:    Q1Link link_;
  W092 Function could be free
    58:    static const std::string& ValidNameChars();
    63:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    57:    bool BindSymbol
  W127 Data could be free
    95:    static const size_t MaxSymbols;
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp
  W106 Function does not invoke Debug::ft
    33: std::istream& SysConsole::In()
    40: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h
  W032 Unused function
    80:    std::string Normalize(const std::string& path);
    95:    void GetCurrDir(std::string& dirName);
  W075 Virtual function is public
    47:    virtual void GetName(std::string& fileName) const = 0;
    51:    virtual bool IsSubdir() const = 0;
    55:    virtual bool AtEnd() const = 0;
    60:    virtual bool Advance() = 0;
  W082 Adjacent arguments have the same type
    107:    bool FindFiles(const char* dirName,
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 57:    _finddata_t attributes_;
  W062 Member not included in member initialization list
    40:    FileWalker(const char* dirName, const char* fileSpec);
    57:    _finddata_t attributes_;
  W106 Function does not invoke Debug::ft
    93: bool FileWalker::AtEnd() const
    100: void FileWalker::GetName(string& fileName) const
    109: bool FileWalker::IsSubdir() const
  W110 Override of Base.Display not found
    37: class FileWalker : public FileList
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h
  W092 Function could be free
    86:    static void ListHeaps(std::set< void* >& heaps, std::ostringstream& expl);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    213:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  W106 Function does not invoke Debug::ft
    104: void* SysHeap::Addr() const
    136: bool SysHeap::CanBeProtected() const { return false; }
    171: void SysHeap::ListHeaps(std::set< void* >& heaps, std::ostringstream& expl)
C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.h
  W027 Unused class
    43: class SysLock
  W032 Unused function
    48:    SysLock();
    62:    void Acquire();
    66:    void Release();
    70:    SysThreadId Owner() const { return owner_; }
    74:    void Display(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/nb/SysLock.win.cpp
  W106 Function does not invoke Debug::ft
    33: SysLock::SysLock() :
    45: SysLock::~SysLock()
    63: void SysLock::Acquire()
    95: void SysLock::Release()
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.h
  W032 Unused function
    50:    bool Lock(void* addr, size_t size);
    55:    bool Unlock(void* addr, size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp
  W106 Function does not invoke Debug::ft
    49: DWORD GetMemoryProtection(MemoryProtection attrs)
  W119 Argument passed by value is modified
    71/1: void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp
  W006 reinterpret_cast
    41:    auto fake = reinterpret_cast< const SysMutex* >(&local);
  W106 Function does not invoke Debug::ft
    62: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.h
  W032 Unused function
    113:    Thread* Owner() const;
  W053 Data could be const
    138:    RegCell mid_;
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h
  W082 Adjacent arguments have the same type
    112:    static SysThread_t Create
  W088 Argument could be const
    113/2:       (ThreadEntry entry, Thread* client, size_t stackSize, SysThreadId& nid);
  W090 Function could be const
    167:    DelayRc Suspend(SysSentry_t& sentry, const Duration& timeout);
  W092 Function could be free
    55:    static SysThreadId RunningThreadId();
    119:    static SysThread_t Wrap();
    123:    static void Delete(SysThread_t& thread);
    128:    static SysSentry_t CreateSentry();
    132:    static void DeleteSentry(SysSentry_t& sentry);
    171:    bool Resume(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    158:       (_beginthreadex_proc_type) entry,  // thread entry function
    159:       (void*) client,                    // argument to entry function
    163:    auto handle = (HANDLE) result;
    319:    _set_se_translator((_se_translator_function) SE_Handler);
  W106 Function does not invoke Debug::ft
    49: signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
    227: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    267: SysThreadId SysThread::RunningThreadId()
  W107 Function does not invoke Debug::ft as first statement
    73:    Debug::ft("NodeBase.SE_Handler");
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h
  W026 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    154:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, std::nothrow);
  W015 #include not sorted in standard order
    31: #include <dbghelp.h>
  W044 Typedef of pointer type
    52: typedef void* StackFrames[MaxFrames];
  W082 Adjacent arguments have the same type
    90:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W092 Function could be free
    80:    static fn_depth GetFrames(StackFramesPtr& frames);
  W106 Function does not invoke Debug::ft
    120: fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
    136: void StackInfo::Shutdown()
    145: DWORD StackInfo::Startup()
    256: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.cpp
  W106 Function does not invoke Debug::ft
    46: SysTickTimer* SysTickTimer::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h
  W032 Unused function
    75:    bool TickTimingAvailable() const { return available_; }
  W110 Override of Base.Display not found
    38: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 40:    LARGE_INTEGER frequency;
  i 62:       LARGE_INTEGER now;
  i 68:       _timeb now;
  W106 Function does not invoke Debug::ft
    58: TimePoint SysTickTimer::Now() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    353:          Truncate(TimeField(int(field) + 1));
    526:          return OutOfRange(TimeField(f));
  W106 Function does not invoke Debug::ft
    174: int16_t SysTime::DayOfWeek() const
    184: int16_t SysTime::DayOfYear() const
    200: const int16_t* SysTime::DaysPerMonth(int16_t year)
    208: size_t SysTime::DaysSinceT0() const
    238: bool SysTime::IsLeapYear(int16_t year)
    256: int64_t SysTime::MsecsSinceT0() const
  W119 Argument passed by value is modified
    101/1: void SysTime::AddDays(size_t days)
    134/1: void SysTime::AddMsecs(msecs_t msecs)
    392/1: void SysTime::SubDays(size_t days)
    425/1: void SysTime::SubMsecs(msecs_t msecs)
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h
  W032 Unused function
    77:    int16_t Get(TimeField field) const { return time_[field]; }
  W042 Member could be private
    81:    int16_t DayOfWeek() const;
    136:    c_string strMonth() const;
  W082 Adjacent arguments have the same type
    72:    SysTime(int16_t year, int16_t month, int16_t day,
  W092 Function could be free
    89:    static bool IsLeapYear(int16_t year);
    158:    static const int16_t* DaysPerMonth(int16_t year);
  W127 Data could be free
    162:    static const int16_t YearOfT0;
    166:    static const int16_t WeekDayOfT0;
    170:    static const int64_t SecsInLeapYear;
    174:    static const int64_t SecsInNonLeapYear;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 41:    _timeb timebuff;
  i 42:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    34:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W106 Function does not invoke Debug::ft
    31: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h
  W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
    63: constexpr size_t GBs = 1024 * 1024 * 1024;
  W030 Unused enumerator
    188:    MemInaccessible = 0,      // ---
    189:    MemExecuteOnly = 1,       // --x
    191:    MemReadExecute = 5,       // r-x
    193:    MemReadWriteExecute = 7,  // rwx
  W044 Typedef of pointer type
    95: typedef char* ptr_t;
    96: typedef const char* const_ptr_t;
    113: typedef const char* c_string;
    114: typedef const char* const fixed_string;
    119: typedef const char* const fn_name;      // for defining a function name
    120: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp
  W106 Function does not invoke Debug::ft
    32: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    39: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    46: void ThisThread::IncludeInTrace()
    53: DelayRc ThisThread::Pause(const Duration& timeout)
    60: void ThisThread::PauseOver(word limit)
    67: word ThisThread::RtcPercentUsed()
    74: ThreadId ThisThread::RunningThreadId()
    81: TraceRc ThisThread::StartTracing(const string& opts)
    88: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1213:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W009 Pointer arithmetic
    2962:    ptrdiff_t stacksize = &local - priv_->stackBase_;
  W028 Unused data
    125: const SysTickTimer* TickTimer = SysTickTimer::Instance();
  W042 Member could be private
    150:    static void* operator new(size_t size);
  W092 Function could be free
    140:    static void CaptureEvent(fn_name_arg func, Id rid, int32_t info = 0);
  W099 Line contains adjacent spaces
    278:    CounterPtr       traps_;
    279:    CounterPtr       exceeds_;
    280:    CounterPtr       yields_;
    281:    CounterPtr       interrupts_;
    285:    AccumulatorPtr   totTime_;
  W106 Function does not invoke Debug::ft
    106: std::atomic_flag& AccessFtLock()
    455: ContextSwitch* ContextSwitches::AddSwitch()
    1164: Thread* Thread::ActiveThread()
    1176: SysMutex* Thread::BlockingMutex() const
    1183: TraceStatus Thread::CalcStatus(bool dynamic) const
    1201: bool Thread::CanBeScheduled() const
    1260: bool Thread::ClearActiveThread(Thread* active)
    1743: Thread* Thread::FindRunningThread()
    1769: void Thread::FunctionInvoked(fn_name_arg func)
    1815: void Thread::FunctionInvoked(fn_name_arg func, const std::nothrow_t&)
    1835: BlockingReason Thread::GetBlockingReason() const
    1842: signal_t Thread::GetSignal() const
    1849: TraceStatus Thread::GetStatus() const
    2010: bool Thread::IsLocked() const
    2017: bool Thread::IsScheduled() const
    2024: bool Thread::IsTraceable() const
    2080: Thread* Thread::LockedThread()
    2140: TraceRc Thread::LogContextSwitches(bool on)
    2321: uint8_t Thread::MutexCount() const
    2328: SysThreadId Thread::NativeThreadId() const
    2347: DelayRc Thread::Pause(Duration time)
    2389: double Thread::PercentIdle()
    2672: void Thread::ResetDebugFlags()
    2769: Thread* Thread::RunningThread()
    2797: Thread* Thread::RunningThread(const std::nothrow_t&)
    2853: void Thread::SetStatus(TraceStatus status)
    2951: void Thread::StackCheck()
    3241: TraceRc Thread::StartTracing(const string& opts)
    3273: void Thread::StopTracing()
    3442: bool Thread::TraceRunningThread(Thread*& thr)
    3470: bool Thread::TraceRunningThread(Thread*& thr, const std::nothrow_t&)
    3497: void Thread::TrapCheck()
    3688: void Thread::UpdateMutex(SysMutex* mutex)
    3695: void Thread::UpdateMutexCount(bool acquired)
  W107 Function does not invoke Debug::ft as first statement
    1667:    Debug::ft("Thread.ExitIfSafe");
    2560:    Debug::ft("Thread.Ready");
    2923:    Debug::ft("Thread.SignalHandler");
    3022:          Debug::ft(Thread_Start);
    3516:       Debug::ft(Thread_TrapHandler);  //@
  W110 Override of Base.Display not found
    272: class ThreadStats : public Dynamic
    359: class ContextSwitches : public Permanent
  W111 Override of Object.Patch not found
    359: class ContextSwitches : public Permanent
    751: class ThreadPriv : public Permanent
  W119 Argument passed by value is modified
    1260/1: bool Thread::ClearActiveThread(Thread* active)
    1856/1: bool Thread::HandleSignal(signal_t sig, uint32_t code)
    2347/1: DelayRc Thread::Pause(Duration time)
    3425/1: void Thread::Trace(Thread* thr,
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h
  W026 Unused argument
    316/2:       (BlockingReason why, fn_name_arg func) { return true; }
    325/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W032 Unused function
    116:    static std::atomic_uint32_t* Vector();
    120:    static bool TestFlag(FlagId fid);
    124:    static void ResetFlag(FlagId fid);
    147:    Faction GetFaction() const { return faction_; }
    151:    bool ChangeFaction(Faction faction);
    485:    SysMutex* BlockingMutex() const;
    493:    uint8_t MutexCount() const;
  W042 Member could be private
    128:    static void ResetFlags();
    143:    SysThreadId NativeThreadId() const;
  W065 Base class virtual destructor is not public
    251:    virtual ~Thread();
  W075 Virtual function is public
    168:    virtual TraceStatus CalcStatus(bool dynamic) const;
    222:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  W077 Virtual function has no overrides
    222:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
    264:    virtual bool EnqMsg(MsgBuffer& msg);
    270:    virtual MsgBuffer* DeqMsg(const Duration& timeout);
  W082 Adjacent arguments have the same type
    633:    void DisplaySummary(std::ostream& stream,
  W090 Function could be const
    112:    bool Interrupt(const Flags& mask = NoFlags);
    155:    void SetStatus(TraceStatus status);
    258:    void SetInitialized();
    410:    void Reset(FlagId fid);
    414:    void Ready();
    418:    void Preempt();
    437:    void Proceed();
    481:    void UpdateMutex(SysMutex* mutex);
    489:    void UpdateMutexCount(bool acquired);
    546:    bool LogTrap(const Exception* ex,
    594:    void SetTrap(bool on);
    602:    void StackCheck();
    606:    void SetSignal(signal_t sig);
  W092 Function could be free
    88:    static void PauseOver(word limit);
    213:    static double PercentIdle();
    288:    static void CauseTrap();
    464:    static bool ClearActiveThread(Thread* active);
    498:    static SysThread::Priority FactionToPriority(Faction& faction);
    626:    static void EnableFactions(const FactionFlags& enabled);
    642:    static TraceRc LogContextSwitches(bool on);
    650:    static void DisplayContextSwitches(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp
  W106 Function does not invoke Debug::ft
    204: ThreadAdmin* AccessAdminData()
    290: bool ThreadAdmin::BreakEnabled()
    366: void ThreadAdmin::Incr(Register r)
    453: bool ThreadAdmin::ReinitOnSchedTimeout()
    461: word ThreadAdmin::RtcInterval()
    469: word ThreadAdmin::RtcLimit()
    477: Duration ThreadAdmin::RtcTimeout()
    486: Duration ThreadAdmin::SchedTimeout()
    506: word ThreadAdmin::StackCheckInterval()
    514: word ThreadAdmin::StackUsageLimit()
    546: word ThreadAdmin::TrapCount()
    558: word ThreadAdmin::TrapInterval()
    566: word ThreadAdmin::TrapLimit()
    574: bool ThreadAdmin::TrapOnRtcTimeout()
  W110 Override of Base.Display not found
    55: class ThreadsStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h
  W092 Function could be free
    90:    static int WarpFactor();
  W099 Line contains adjacent spaces
    174:    CfgIntParmPtr  initTimeoutMsecs_;
    175:    CfgIntParmPtr  schedTimeoutMsecs_;
    177:    CfgIntParmPtr  rtcTimeoutMsecs_;
    179:    CfgIntParmPtr  rtcLimit_;
    180:    CfgIntParmPtr  rtcInterval_;
    182:    CfgIntParmPtr  trapLimit_;
    183:    CfgIntParmPtr  trapInterval_;
    185:    CfgIntParmPtr  stackUsageLimit_;
    186:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp
  W106 Function does not invoke Debug::ft
    48: bool IsSortedByThreadId(const Thread* thr1, const Thread* thr2)
    267: Thread* ThreadRegistry::FindThread(SysThreadId nid) const
    310: Thread* ThreadRegistry::GetThread(ThreadId tid) const
    323: std::vector< Thread* > ThreadRegistry::GetThreads() const
    361: bool ThreadRegistry::IsDeleted() const
    508: size_t ThreadRegistry::Size()
C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h
  W127 Data could be free
    83:    static ThreadId PrevTid_;
C:/Users/gregu/Documents/rsc/rsc/nb/TimePoint.h
  W032 Unused function
    45:    explicit TimePoint(const SysTime& time);
    95:    TimePoint& operator++();
    96:    TimePoint operator++(int);
    100:    TimePoint& operator--();
    101:    TimePoint operator--(int);
    109:    TimePoint& operator-=(const Duration& rhs);
    118: bool operator==(const TimePoint& lhs, const TimePoint& rhs);
    119: bool operator!=(const TimePoint& lhs, const TimePoint& rhs);
    121: bool operator<=(const TimePoint& lhs, const TimePoint& rhs);
    122: bool operator>(const TimePoint& lhs, const TimePoint& rhs);
    123: bool operator>=(const TimePoint& lhs, const TimePoint& rhs);
    128: TimePoint operator+(const Duration& lhs, const TimePoint& rhs);
    129: Duration operator-(const TimePoint& lhs, const Duration& rhs);
  W092 Function could be free
    66:    static TimePoint TimeZero();
    70:    static std::string TimeZeroStr();
    74:    static TimePoint Now();
    78:    static TimePoint Never();
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h
  W065 Base class virtual destructor is not public
    92:    virtual ~Tool();
  W075 Virtual function is public
    56:    virtual c_string Name() const = 0;
    60:    virtual c_string Expl() const = 0;
    66:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp
  W106 Function does not invoke Debug::ft
    114: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.h
  W127 Data could be free
    91:    static const size_t MaxTools;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.h
  W030 Unused enumerator
    66:    TraceFailed,        // operation failed for some other reason
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    215:       Memory::Alloc(size * sizeof(TraceRecord*), MemPermanent, std::nothrow);
    219:       Memory::Alloc(size * sizeof(FunctionTrace), MemPermanent, std::nothrow);
  W005 Functional cast
    587:    stream << indent << "buffsize : " << int(std::log2(size_));
  W007 Cast down the inheritance hierarchy
    441:          auto ft = static_cast< FunctionTrace* >(rec);
    472:          auto ft = static_cast< FunctionTrace* >(rec);
  W106 Function does not invoke Debug::ft
    110: TraceBuffer::TraceBuffer() :
    146: TraceBuffer::~TraceBuffer()
    166: void* TraceBuffer::AddFunction()
    234: uint32_t TraceBuffer::AllocSlot()
    380: bool TraceBuffer::Empty() const
    398: bool TraceBuffer::Insert(TraceRecord* record)
    430: fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
    462: const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
    482: void TraceBuffer::Lock()
    489: void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
    509: void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
    620: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    780: void TraceBuffer::Unlock()
  W119 Argument passed by value is modified
    186/1: bool TraceBuffer::AllocBuffers(size_t n)
    361/1: TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h
  W026 Unused argument
    149/1:    TraceRc StartTracing(const std::string& opts);
  W032 Unused function
    179:    const SysTime& StartTimeFull() const { return startTime_; }
  W092 Function could be free
    102:    void QueryTools(std::ostream& stream) const;
  W110 Override of Base.Display not found
    64: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h
  W043 Member could be protected
    81:    void Nullify() { owner_ = NIL_ID; }
  W050 Data is not private
    130:    Id rid_ : 8;
  W075 Virtual function is public
    93:    virtual bool Display(std::ostream& stream, const std::string& opts);
  W090 Function could be const
    110:    virtual void ClaimBlocks() { }
  W127 Data could be free
    59:    static const Id InvalidId;
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    57:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemporary);
  W007 Cast down the inheritance hierarchy
    193:             auto ft = static_cast<FunctionTrace*>(rec);
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    94: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W082 Adjacent arguments have the same type
    88:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W090 Function could be const
    82:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W092 Function could be free
    88:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W110 Override of Base.Display not found
    49: class FunctionProfiler : public Temporary
  W127 Data could be free
    97:    static const size_t HashTableSizeLog2;
    101:    static const uint32_t HashMask;
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    76:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    47: int FunctionStats::Compare(const FunctionStats& that) const
    65: void FunctionStats::IncrCalls(const Duration& net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W053 Data could be const
    83:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3522:    pool->time_[id1].Truncate(TimeField(field - 1));
    3551:    pool->time_[id1].Round(TimeField(field - 1), interval);
    4437:    auto test = RecoveryThread::Test(index);
  W006 reinterpret_cast
    1740:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    2240:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2771:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  W022 Add using statement
    0: namespace NodeBase
  W053 Data could be const
    1604:    Q1Link link_;
    2096:    Q2Link link_;
  W082 Adjacent arguments have the same type
    220:    word Sort(const string& input, const string& output, string& expl) const;
  W092 Function could be free
    220:    word Sort(const string& input, const string& output, string& expl) const;
    2636:    static ptrdiff_t CellDiff();
    3791:    static void AcquireMutex();
    3792:    static void DoAbort();
    3793:    static void DoDelete();
    3794:    static int DoDivide();
    3795:    static void DoSwErr();
    3796:    static void DoTerminate();
    3797:    static void LoopForever();
    4225:    static RecoveryThread* EnsureThread(id_t subcommand);
  W106 Function does not invoke Debug::ft
    1233: word CheckHeap(bool shouldExist, const CliThread& cli, Heap*& heap)
    1719: Q1WayItem::~Q1WayItem()
    1753: Q1WayPool::Q1WayPool()
    1782: void Q1WayPool::Reallocate()
    2219: Q2WayItem::~Q2WayItem()
    2253: Q2WayPool::Q2WayPool()
    2282: void Q2WayPool::Reallocate()
    2761: RegistryItem::~RegistryItem()
    2792: RegistryPool::RegistryPool()
  W107 Function does not invoke Debug::ft as first statement
    3992:       Debug::ft(RecoveryThread_Enter);
  W110 Override of Base.Display not found
    1084: class TestHeap : public NbHeap
    1470: class LbcPool : public Temporary
    3165: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W028 Unused data
    80:    static const id_t LastNtIndex = FuncTraceScope;
  W060 Base class constructor is public
    44:    CorruptWhatParm();
    56:    explicit CorruptCommand(bool bind = true);
    98:    NtSaveWhatParm();
    110:    explicit NtSaveCommand(bool bind = true);
    124:    SizesCommand();
    139:    TestsAction();
    160:    explicit TestsCommand(bool bind = true);
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    62:    return static_cast< NtTestData* >(data);
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W090 Function could be const
    81:    void Reset();
  W092 Function could be free
    45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp
  W106 Function does not invoke Debug::ft
    148: TestDatabase::State TestDatabase::GetState(const string& testname)
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h
  W110 Override of Base.Display not found
    41: class TestDatabase : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h
  W026 Unused argument
    135/3:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
    140/1:    virtual void SocketFailed(SysSocket* socket) const { }
  W075 Virtual function is public
    98:    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
    106:    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
    125:    virtual void ReceiveBuff
    134:    virtual NodeBase::byte_t* HostToNetwork
    140:    virtual void SocketFailed(SysSocket* socket) const { }
  W088 Argument could be const
    135/1:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    79:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  W009 Pointer arithmetic
    189:       source += rcvd;
  W119 Argument passed by value is modified
    143/2:    (const IpPort& port, const byte_t* source, size_t size) const
    143/3:    (const IpPort& port, const byte_t* source, size_t size) const
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h
  W042 Member could be private
    87:    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  W050 Data is not private
    91:    const ipport_t port_;
    96:    IpPort* ipPort_;
    100:    SysIpL2Addr host_;
    104:    size_t recvs_;
    108:    SysIpL3Addr txAddr_;
    113:    SysIpL3Addr rxAddr_;
    117:    NodeBase::TimePoint time_;
    121:    NodeBase::byte_t* buffer_;
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    71:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
    88:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDynamic);
    125:          Memory::Realloc(buff_, BuffSize(newSize), MemDynamic);
  W009 Pointer arithmetic
    137:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    137:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    228:       bytes = buff_ + hdrSize_;
    252:    bytes += hdrSize_;
  W106 Function does not invoke Debug::ft
    195: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h
  W009 Pointer arithmetic
    101:    NodeBase::byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  W060 Base class constructor is public
    50:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
    54:    IpBuffer(const IpBuffer& that);
  W075 Virtual function is public
    114:    virtual size_t PayloadSize() const;
    133:    virtual bool AddBytes
  W082 Adjacent arguments have the same type
    50:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  W092 Function could be free
    168:    static size_t BuffSize(size_t size);
  W127 Data could be free
    45:    static const size_t MaxBuffSize;
    213:    static const size_t BlockSize;
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    280:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W099 Line contains adjacent spaces
    58:    CounterPtr       recvs_;
    59:    AccumulatorPtr   bytesRcvd_;
    62:    CounterPtr       discards_;
    63:    CounterPtr       rejects_;
    64:    CounterPtr       sends_;
    65:    AccumulatorPtr   bytesSent_;
    67:    CounterPtr       overflows_;
  W106 Function does not invoke Debug::ft
    194: size_t IpPort::Discards() const
  W110 Override of Base.Display not found
    52: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h
  W053 Data could be const
    194:    NodeBase::Q1Link link_;
  W075 Virtual function is public
    99:    virtual SysTcpSocket* CreateAppSocket();
    138:    virtual void DisplayStats
  W077 Virtual function has no overrides
    138:    virtual void DisplayStats
  W090 Function could be const
    176:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W005 Functional cast
    51:    ipport_t GetPort() const { return ipport_t(GetValue()); }
  W082 Adjacent arguments have the same type
    42:    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp
  W106 Function does not invoke Debug::ft
    270: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W110 Override of Base.Display not found
    50: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    72:    auto fake = reinterpret_cast< const IpService* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h
  W032 Unused function
    80:    virtual NodeBase::CliText* CreateText() const = 0;
  W053 Data could be const
    150:    NodeBase::RegCell sid_;
  W065 Base class virtual destructor is not public
    132:    virtual ~IpService();
  W075 Virtual function is public
    52:    virtual NodeBase::c_string Name() const = 0;
    56:    virtual IpProtocol Protocol() const = 0;
    61:    virtual ipport_t Port() const = 0;
    65:    virtual NodeBase::Faction GetFaction() const = 0;
    69:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    73:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
    80:    virtual NodeBase::CliText* CreateText() const = 0;
    86:    virtual bool HasSharedSocket() const = 0;
    94:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W077 Virtual function has no overrides
    69:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    73:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  W090 Function could be const
    146:    virtual IpPort* CreatePort(ipport_t pid) = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    77: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h
  W032 Unused function
    48:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.cpp
  W007 Cast down the inheritance hierarchy
    86:    auto daemon = static_cast< TcpIoDaemon* >(reg->FindDaemon(name.c_str()));
    163:    auto daemon = static_cast< UdpIoDaemon* >(reg->FindDaemon(name.c_str()));
C:/Users/gregu/Documents/rsc/rsc/nw/NwDaemons.h
  W092 Function could be free
    72:    static std::string MakeName(ipport_t port);
    119:    static std::string MakeName(ipport_t port);
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h
  W060 Base class constructor is public
    39:    NwClearWhatParm();
    54:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    97:    NwIncludeWhatParm();
    110:    explicit NwIncludeCommand(bool bind = true);
    127:    explicit NwQueryCommand(bool bind = true);
    142:    NwStatusCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h
  W042 Member could be private
    55:    bool PeersEmpty() const;
    59:    bool PortsEmpty() const;
  W110 Override of Base.Display not found
    40: class NwTracer : public NodeBase::Permanent
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h
  W032 Unused function
    54:    SysIpL2Addr(SysIpL2Addr&& that) = default;
    59:    SysIpL2Addr& operator=(SysIpL2Addr&& that) = default;
  W060 Base class constructor is public
    40:    SysIpL2Addr();
    44:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    49:    explicit SysIpL2Addr(const std::string& text);
    53:    SysIpL2Addr(const SysIpL2Addr& that) = default;
    54:    SysIpL2Addr(SysIpL2Addr&& that) = default;
  W075 Virtual function is public
    79:    virtual std::string to_str() const;
  W092 Function could be free
    67:    static SysIpL2Addr LoopbackAddr();
    83:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 52:    in_addr result;
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W032 Unused function
    65:    SysIpL3Addr(SysIpL3Addr&& that) = default;
    70:    SysIpL3Addr& operator=(SysIpL3Addr&& that) = default;
    117:    bool operator!=(const SysIpL3Addr& that) const;
  W060 Base class constructor is public
    40:    SysIpL3Addr();
    45:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    51:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    59:    SysIpL3Addr
    64:    SysIpL3Addr(const SysIpL3Addr& that) = default;
    65:    SysIpL3Addr(SysIpL3Addr&& that) = default;
  W082 Adjacent arguments have the same type
    59:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    60:          auto netaddr = (sockaddr_in*) info->ai_addr;
    116:       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  W056 Implicit constructor invoked: POD members not initialized
  i 50:    addrinfo hints;
  i 107:    sockaddr_in addr;
  W064 Implicit destructor invoked
  i 50:    addrinfo hints;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp
  W106 Function does not invoke Debug::ft
    130: void SysSocket::SetStatus(bool ok, const string& err)
    154: bool SysSocket::SetTracing(bool tracing)
    173: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h
  W032 Unused function
    50: uint64_t htonll(uint64_t hostllong);
    53: uint64_t ntohll(uint32_t netllong);
  W043 Member could be protected
    99:    bool IsValid() const;
  W065 Base class virtual destructor is not public
    184:    virtual ~SysSocket();
  W075 Virtual function is public
    91:    virtual IpProtocol Protocol() const { return IpAny; }
    117:    virtual AllocRc SetService(const IpService* service, bool shared);
    121:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W092 Function could be free
    140:    static void StopLayer();
    211:    static void SetStatus(bool ok, const std::string& err);
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    106:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    227:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    234:       (char*) &max, &maxsize) == SOCKET_ERROR)
    244:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    251:       (char*) &max, &maxsize) == SOCKET_ERROR)
  W015 #include not sorted in standard order
    27: #include <windows.h>
  W056 Implicit constructor invoked: POD members not initialized
  i 70:    sockaddr_in addr;
  i 268:    WSAData wsaData;
  W064 Implicit destructor invoked
  i 268:    WSAData wsaData;
  W106 Function does not invoke Debug::ft
    41: uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
    43: uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
    45: uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
    47: uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
    49: uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
    51: uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
    157: bool SysSocket::IsValid() const
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp
  W119 Argument passed by value is modified
    245/1: SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h
  W032 Unused function
    134:    bool LocAddr(SysIpL3Addr& locAddr);
    190:    IpBuffer* IcMsg() const { return icMsg_; }
  W042 Member could be private
    88:    NodeBase::word Connect(const SysIpL3Addr& remAddr);
    129:    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
    181:    bool IsOpen() const;
  W075 Virtual function is public
    173:    virtual void Acquire();
    177:    virtual void Release();
  W077 Virtual function has no overrides
    173:    virtual void Acquire();
    177:    virtual void Release();
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    45:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    71:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    128:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    237:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
    299:       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
    309:       (char*) &val, &valsize) == SOCKET_ERROR)
  W006 reinterpret_cast
    221:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
    270:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  W007 Cast down the inheritance hierarchy
    296:    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  W056 Implicit constructor invoked: POD members not initialized
  i 42:    sockaddr_in peer;
  i 65:    sockaddr_in peer;
  i 125:    sockaddr_in host;
  i 158:    std::unique_ptr< pollfd[] > list(new pollfd[size]);
  i 234:    sockaddr_in peer;
  W119 Argument passed by value is modified
    99/1: bool SysTcpSocket::Listen(size_t backlog)
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h
  W042 Member could be private
    73:    NodeBase::word SendTo
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    48:          (char*) &max, &maxsize) == SOCKET_ERROR)
    83:       size, 0, (sockaddr*) &peer, &peersize);
    127:       size, 0, (sockaddr*) &peer, peersize);
  W006 reinterpret_cast
    82:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    126:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W056 Implicit constructor invoked: POD members not initialized
  i 67:    sockaddr_in peer;
  i 105:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    173:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    183:    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
    284:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    447:    auto sock = static_cast< SysTcpSocket* >(socket);
  W106 Function does not invoke Debug::ft
    467: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h
  W042 Member could be private
    76:    void Unblock() override;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    65:    auto thread = static_cast< TcpIoThread* >(GetThread());
    71:       thread = static_cast< TcpIoThread* >(CreateIoThread());
    77:    auto svc = static_cast< const TcpIpService* >(GetService());
    106:    auto svc = static_cast< const TcpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h
  W042 Member could be private
    86:    IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    40:    virtual bool AcceptsConns() const { return true; }
    45:    virtual size_t MaxConns() const = 0;
    50:    virtual size_t MaxBacklog() const = 0;
    54:    virtual bool Keepalive() const { return false; }
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    114:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    118:       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
    247:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h
  W042 Member could be private
    59:    void Unblock() override;
  W090 Function could be const
    79:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto svc = static_cast< const UdpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h
  W042 Member could be private
    59:    IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    89: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    78: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    76: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h
  W020 Using statement in header
    30: using namespace CallBase;
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    94: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h
  W020 Using statement in header
    31: using namespace CallBase;
    32: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    76: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h
  W020 Using statement in header
    30: using namespace CallBase;
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h
  W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
    42: using namespace NodeBase;
    43: using namespace SessionBase;
  W032 Unused function
    93:    bool IsRinging() const { return ringing_; }
    97:    bool CanFlash() const { return flash_; }
    102:    Cause::Ind GetCause() const { return cause_; }
  W042 Member could be private
    134:    void ResetCircuit();
  W056 Implicit constructor invoked: POD members not initialized
    170:    struct SignalEntry
  i 234:    SignalEntry trace_[TraceSize];
  W127 Data could be free
    181:    static const SignalEntry NilSignalEntry;
    238:    static int StateCount_[State_N];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    73: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    74: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    64:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    39: using namespace NodeBase;
  W026 Unused argument
    87/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W042 Member could be private
    64:    Id Fid() const { return Id(fid_.GetId()); }
    72:    c_string FullName() const { return name_; }
    76:    bool CanBeDeactivated() const { return deactivation_; }
  W065 Base class virtual destructor is not public
    103:    virtual ~PotsFeature();
  W075 Virtual function is public
    86:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    99:    PotsFeature(Id fid, bool deactivation, c_string abbr, c_string name);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    94:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    60/1:    virtual bool Deactivate(PotsProfile& profile);
    84/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W042 Member could be private
    64:    PotsFeature::Id Fid() const { return fid_; }
  W053 Data could be const
    96:    Q1Link link_;
  W065 Base class virtual destructor is not public
    77:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    55:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    60:    virtual bool Deactivate(PotsProfile& profile);
  W077 Virtual function has no overrides
    84:    virtual bool Unsubscribe(PotsProfile& profile);
  W088 Argument could be const
    55/1:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W090 Function could be const
    58:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    105: void DnRouteFeatureProfile::SetActive(bool on)
    113: void DnRouteFeatureProfile::SetDN(Address::DN dn)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h
  W020 Using statement in header
    29: using namespace CallBase;
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    81: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W053 Data could be const
    59:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    432:       auto mep = static_cast< MediaEndpt* >(obj);
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionTools;
  W060 Base class constructor is public
    41:    PbSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h
  W020 Using statement in header
    36: using namespace NodeBase;
    37: using namespace CallBase;
    38: using namespace SessionBase;
  W090 Function could be const
    105:    void SetState(const ProtocolSM* psm, State state);
    115:    bool SetObjAddr(const MsgPort& port);
  W110 Override of Base.Display not found
    78:    struct PotsProfileDynamic : public Persistent
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    107: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    565:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    726:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    841:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    925:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    578:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    635:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    738:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    762:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    852:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    936:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
  W099 Line contains adjacent spaces
    575:    id_t             index;
    576:    word             sid, ind;
    578:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    634:    TestRc            rc;
    635:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    637:    id_t              index;
    638:    word              sid, ind;
    736:    word           port;
    738:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    761:    TestRc          rc;
    762:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    763:    word            port;
    851:    TestRc        rc;
    852:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    854:    bool          ring = false;
    855:    auto          exists = false;
    935:    TestRc        rc;
    936:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    938:    string        scan;
    939:    auto          digits = false;
    940:    auto          flash = false;
    941:    auto          exists = false;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h
  W020 Using statement in header
    46: using namespace NodeBase;
    47: using namespace SessionBase;
    48: using namespace MediaBase;
    49: using namespace CallBase;
  W028 Unused data
    106:    static const Id LastId    = NextId + 9;  // range constant
    134:    static const Id LastId   = NextId + 7;  // range constant
  W032 Unused function
    292:    MediaInfo* AddMedia(const MediaInfo& media);
    446:    void InjectFinalMsg() override;
  W043 Member could be protected
    268:    explicit PotsMessage(SbIpBufferPtr& buff);
  W060 Base class constructor is public
    268:    explicit PotsMessage(SbIpBufferPtr& buff);
    272:    PotsMessage(ProtocolSM* psm, size_t size);
  W092 Function could be free
    374:    static PotsCallPsm* Cast(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    71: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    90: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    93: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h
  W020 Using statement in header
    31: using namespace CallBase;
    32: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp
  W015 #include not sorted in standard order
    64: #include "AnModule.h"
  W032 Unused function
    102: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
  W106 Function does not invoke Debug::ft
    86: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
  W106 Function does not invoke Debug::ft
    82: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    577:    auto fake = reinterpret_cast< const Context* >(&local);
    867:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    757:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    863:             (m)->FindParm(Parameter::Timeout);
  W106 Function does not invoke Debug::ft
    335: void Context::Dump() const
    932: bool Context::TraceOn()
    942: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    689:    Debug::ft(Context_ProcessWork);
  W119 Argument passed by value is modified
    385/3: void Context::Enqueue(Q2Way< Context >& whichq, MsgPriority prio, bool henq)
    683/1: void Context::ProcessWork(InvokerThread* inv)
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h
  W032 Unused function
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
  W037 Member hides inherited name
    166:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    313:    NodeBase::Q2Link link_;
    337:    NodeBase::Faction faction_;
  W056 Implicit constructor invoked: POD members not initialized
    224:    struct MessageEntry
  i 361:    MessageEntry trace_[TraceSize];
  W065 Base class virtual destructor is not public
    188:    virtual ~Context();
  W075 Virtual function is public
    98:    virtual ContextType Type() const = 0;
    102:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    106:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    110:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    132:    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  W088 Argument could be const
    292/1:    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  W090 Function could be const
    158:    bool StopTimer(const Base& owner, TimerId tid);
    196:    virtual void EndOfTransaction() { }
  W092 Function could be free
    84:    static RootServiceSM* ContextRoot();
    119:    static void Kill(const std::string& errstr, NodeBase::debug64_t offset);
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
  W127 Data could be free
    365:    static const MessageEntry NilMessageEntry;
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp
  W106 Function does not invoke Debug::ft
    137: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h
  W042 Member could be private
    112:    virtual bool SaveContext();
    123:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    129:    virtual void FreeContext(bool freeMsg);
    157:    virtual bool Save();
    161:    virtual Event* Restore(EventHandler::Rc& rc);
    165:    virtual void Free();
  W075 Virtual function is public
    112:    virtual bool SaveContext();
    123:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    129:    virtual void FreeContext(bool freeMsg);
  W092 Function could be free
    54:    static bool IsValidId(Id eid)
    70:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h
  W065 Base class virtual destructor is not public
    124:    virtual ~EventHandler();
  W075 Virtual function is public
    115:    virtual Rc ProcessEvent
  W092 Function could be free
    84:    static bool AppCanRegister(Id ehid)
    92:    static bool AppCanUse(Id ehid)
  W111 Override of Object.Patch not found
    48: class EventHandler : public NodeBase::Immutable
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    199:    auto fake = reinterpret_cast< const Factory* >(&local);
  W099 Line contains adjacent spaces
    51:    CounterPtr       icMsgsIntra_;
    52:    CounterPtr       icMsgsInter_;
    54:    CounterPtr       ogMsgsIntra_;
    55:    CounterPtr       ogMsgsInter_;
    57:    CounterPtr       contexts_;
    58:    CounterPtr       msgsDeleted_;
    59:    CounterPtr       ctxsDeleted_;
  W106 Function does not invoke Debug::ft
    214: size_t Factory::DiscardedContextCount() const
    221: size_t Factory::DiscardedMessageCount() const
  W110 Override of Base.Display not found
    45: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    88:    Id Fid() const { return Id(fid_.GetId()); }
  W026 Unused argument
    128/1:    virtual Message* AllocOgMsg(SignalId sid) const;
    148/1:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    148/2:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  W030 Unused enumerator
    77:       PortAllocFailed,      // failed to create PSM for context
  W032 Unused function
    228:    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  W042 Member could be private
    148:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  W065 Base class virtual destructor is not public
    212:    virtual ~Factory();
  W075 Virtual function is public
    122:    virtual NodeBase::CliText* CreateText() const;
    128:    virtual Message* AllocOgMsg(SignalId sid) const;
    135:    virtual bool InjectMsg(Message& msg) const;
    141:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    148:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    158:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    180:    virtual void DisplayStats
  W077 Virtual function has no overrides
    180:    virtual void DisplayStats
  W082 Adjacent arguments have the same type
    165:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W088 Argument could be const
    158/1:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  W090 Function could be const
    158:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    254:    virtual Rc ReceiveMsg
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp
  W106 Function does not invoke Debug::ft
    147: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h
  W032 Unused function
    47:    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
    66:    GlobalAddress(GlobalAddress&& that) = default;
    71:    GlobalAddress& operator=(GlobalAddress&& that) = default;
    87:    bool operator!=(const GlobalAddress& that) const;
  W082 Adjacent arguments have the same type
    51:    GlobalAddress
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
  W106 Function does not invoke Debug::ft
    84: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    217:    auto fake = reinterpret_cast< const Initiator* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h
  W053 Data could be const
    134:    NodeBase::Q1Link link_;
  W065 Base class virtual destructor is not public
    96:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    91:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W088 Argument could be const
    105/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    229:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    186:    invokersCfg_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    524:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W099 Line contains adjacent spaces
    70:    CounterPtr       requeues_;
    71:    CounterPtr       trojans_;
    72:    CounterPtr       lockouts_;
  W106 Function does not invoke Debug::ft
    695: void InvokerPool::RecordDelay(MsgPriority prio, const Duration& delay) const
    785: size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
    793: Duration InvokerPool::WorkQMaxDelay(MsgPriority prio) const
    801: size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  W110 Override of Base.Display not found
    63: class InvokerPoolStats : public Dynamic
    102: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    73:       { return NodeBase::Faction(faction_.GetId()); }
  W065 Base class virtual destructor is not public
    117:    virtual ~InvokerPool();
  W075 Virtual function is public
    91:    virtual void DisplayStats
  W077 Virtual function has no overrides
    91:    virtual void DisplayStats
  W090 Function could be const
    155:    void KickThread();
    159:    Context* FindWork();
    178:    void Requeue(Context& ctx);
    186:    void ScheduledOut();
  W092 Function could be free
    190:    static bool GenerateLog(Factory::Rc rc);
    202:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  W127 Data could be free
    63:    static const size_t MaxInvokers;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    87:       auto p = reg->Pool(Faction(id));
  W106 Function does not invoke Debug::ft
    169: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    128:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W106 Function does not invoke Debug::ft
    117: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h
  W042 Member could be private
    57:    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
  W053 Data could be const
    132:    NodeBase::RegCell iid_;
    158:    static NodeBase::word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h
  W032 Unused function
    51:    LocalAddress(LocalAddress&& that) = default;
    56:    LocalAddress& operator=(LocalAddress&& that) = default;
    65:    bool operator!=(const LocalAddress& that) const;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp
  W106 Function does not invoke Debug::ft
    241: MsgDirection Message::Dir() const
    328: ProtocolId Message::GetProtocol() const
    359: SignalId Message::GetSignal() const
    414: MsgHeader* Message::Header() const
  W119 Argument passed by value is modified
    594/1: bool Message::Retrieve(ProtocolSM* psm)
    661/1: bool Message::Send(Route route)
  W125 Non-const cast is not a downcast
    959:          auto bt = dynamic_cast< const BuffTrace* >(bt_);
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h
  W029 Unused enum
    72:    enum Location
  W030 Unused enumerator
    88:       IllegalSignal,   // illegal signal found              0000  sid
    89:       IllegalParm,     // illegal parameter found          index  pid
    90:       IncompleteParm,  // parameter too short              index  pid
    91:       MissingParm,     // mandatory parameter missing       0000  pid
    92:       Overflow,        // last parameter extends past end  index  pid
    93:       Trampled         // last parameter trampled fence    index  pid
  W032 Unused function
    181:    Message* FindSignal(SignalId sid) const;
  W042 Member could be private
    329:    virtual void Handled(bool retain);
    333:    virtual bool SendFailure(NodeBase::debug64_t errval);
  W043 Member could be protected
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    241:    NodeBase::MsgDirection Dir() const;
  W075 Virtual function is public
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    262:    virtual bool Send(Route route);
    266:    virtual bool Restore();
  W077 Virtual function has no overrides
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    266:    virtual bool Restore();
    316:    virtual void Refresh();
    329:    virtual void Handled(bool retain);
    333:    virtual bool SendFailure(NodeBase::debug64_t errval);
    341:    virtual void ClearContext() const;
  W088 Argument could be const
    132/1:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  W090 Function could be const
    110:    void SetSignal(SignalId sid);
    114:    void SetJoin(bool join);
    225:    void SetProtocol(ProtocolId prid);
    229:    void SetPriority(MsgPriority prio);
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    358:    void SetRxAddr(const LocalAddress& rxaddr);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    75:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h
  W042 Member could be private
    60:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W092 Function could be free
    60:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h
  W042 Member could be private
    51:    uint8_t        spare    : 6;   // reserved for future use
  W099 Line contains adjacent spaces
    42:    LocalAddress   txAddr;         // source address
    43:    LocalAddress   rxAddr;         // destination address
    44:    MsgPriority    priority : 2;   // message's priority
    45:    bool           initial  : 1;   // true for initial message
    46:    bool           final    : 1;   // true for final message
    47:    bool           join     : 1;   // true to create PSM and join root SSM
    48:    bool           self     : 1;   // true for message to self
    49:    bool           injected : 1;   // true if sent by InjectCommand
    50:    bool           kill     : 1;   // true to kill context on arrival
    51:    uint8_t        spare    : 6;   // reserved for future use
    52:    Message::Route route    : 2;   // the route that the message took
    53:    ProtocolId     protocol : 16;  // message's protocol
    54:    SignalId       signal   : 16;  // message's signal
    55:    uint16_t       length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    74:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    146:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    204:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    259:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    334:    return const_cast< MsgPort* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h
  W092 Function could be free
    181:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    108:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W106 Function does not invoke Debug::ft
    198: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    82:    Id Pid() const { return Id(pid_.GetId()); }
  W030 Unused enumerator
    118:       StreamContainsIllegalParm,
  W032 Unused function
    86:    ProtocolId Prid() const { return prid_; }
  W065 Base class virtual destructor is not public
    176:    virtual ~Parameter();
  W075 Virtual function is public
    96:    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
    105:    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
    134:    virtual TestRc InjectMsg
    147:    virtual TestRc VerifyMsg
  W092 Function could be free
    152:    static NodeBase::c_string ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W106 Function does not invoke Debug::ft
    129: Parameter* Protocol::FirstParm() const
    142: Signal* Protocol::FirstSignal() const
    155: Parameter* Protocol::GetParameter(ParameterId pid) const
    167: Signal* Protocol::GetSignal(SignalId sid) const
    179: void Protocol::NextParm(Parameter*& parm) const
    192: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h
  W032 Unused function
    74:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W065 Base class virtual destructor is not public
    130:    virtual ~Protocol();
  W075 Virtual function is public
    74:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    106:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h
  W026 Unused argument
    167/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W032 Unused function
    68:    bool IsLowermost() const { return lower_ == nullptr; }
  W042 Member could be private
    112:    virtual ProtocolLayer* JoinPeer
    119:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W043 Member could be protected
    64:    bool IsUppermost() const { return upper_ == nullptr; }
    89:    virtual FactoryId GetFactory() const = 0;
  W065 Base class virtual destructor is not public
    143:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    52:    virtual MsgPort* Port() const = 0;
    56:    virtual ProtocolSM* UppermostPsm() const = 0;
    89:    virtual FactoryId GetFactory() const = 0;
    93:    virtual Message::Route Route() const = 0;
    102:    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
    112:    virtual ProtocolLayer* JoinPeer
    119:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W090 Function could be const
    184:    virtual Message* UnwrapMsg(Message& msg);
    191:    virtual Message* WrapMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
  W106 Function does not invoke Debug::ft
    78: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    404:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    638:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h
  W026 Unused argument
    301/1:    virtual void MsgHandled(Message& msg) { }
    307/1:    virtual void RestoreIcMsg(Message& msg) { }
    313/1:    virtual void RefreshMsg(Message& msg) { }
  W030 Unused enumerator
    96:       SignalUnknown,     // signal not recognized
    98:       ParameterUnknown,  // parameter not recognized
    99:       ParameterInvalid,  // parameter not valid for this signal
  W032 Unused function
    137:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    195:    bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    325:    virtual void InjectFinalMsg();
  W042 Member could be private
    251:    bool SendMsg(Message& msg) override;
  W043 Member could be protected
    76:    enum IncomingRc
    85:    enum OutgoingRc
    131:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W053 Data could be const
    372:    FactoryId fid_;
  W077 Virtual function has no overrides
    241:    virtual void SetState(StateId stid);
    296:    virtual Priority GetPriority() const { return NormalPriority; }
    301:    virtual void MsgHandled(Message& msg) { }
    307:    virtual void RestoreIcMsg(Message& msg) { }
    313:    virtual void RefreshMsg(Message& msg) { }
  W090 Function could be const
    118:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h
  W032 Unused function
    86:    void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    47:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h
  W026 Unused argument
    50/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    50:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.cpp
  W007 Cast down the inheritance hierarchy
    101:    auto daemon = static_cast< InvokerDaemon* >(reg->FindDaemon(name.c_str()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbDaemons.h
  W092 Function could be free
    65:    static std::string MakeName(NodeBase::Faction faction);
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h
  W032 Unused function
    91:    StateId CurrState() const { return currState_; }
    104:    Message* SavedMsg() const { return savedMsg_; }
    213:    StateId CurrState() const { return currState_; }
    217:    StateId NextState() const { return nextState_; }
    358:    bool IsInitiation() const { return initiation_; }
    369:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    50:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    120:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    134:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    733:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    684:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    798:       auto msg = static_cast< Message* >(obj);
    883:       auto port = static_cast< MsgPort* >(obj);
    1089:       auto psm = static_cast< ProtocolSM* >(obj);
    1313:       auto ssm = static_cast< ServiceSM* >(obj);
    1520:       auto tmr = static_cast< Timer* >(obj);
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h
  W028 Unused data
    55:    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
    85:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    75:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    103:    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    61:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    72:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h
  W075 Virtual function is public
    43:    bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    62:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    203:       auto port = static_cast< MsgPort* >(obj);
    258:    auto psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
    275:       psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  W106 Function does not invoke Debug::ft
    368: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h
  W110 Override of Base.Display not found
    192: class TimerPool : public NodeBase::ObjectPool
  W127 Data could be free
    47:    static const size_t BlockSize;
    72:    static const size_t BlockSize;
    101:    static const size_t BlockSize;
    126:    static const size_t BlockSize;
    160:    static const size_t BlockSize;
    185:    static NodeBase::PooledObjectId PsmToAudit_;
    198:    static const size_t BlockSize;
    248:    static const size_t BlockSize;
    273:    static const size_t BlockSize;
    300:    static const size_t BlockSize;
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    141:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    146:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    460:    width -= col_t(label.size());
  W007 Cast down the inheritance hierarchy
    351:          bt = static_cast< BuffTrace* >(rec);
    844:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    847:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    874:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W119 Argument passed by value is modified
    335/1:    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h
  W042 Member could be private
    528:    const StateId stid_;
  W050 Data is not private
    490:    ServiceId owner_;
    494:    const EventId eid_;
    524:    const ServiceId sid_;
    528:    const StateId stid_;
    532:    const EventHandler::Rc rc_;
  W060 Base class constructor is public
    466:    EventTrace(Id rid, const Event& evt);
    511:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    172:    static BuffTrace* NextIcMsg
    482:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W092 Function could be free
    241:    static std::string OutputId(const std::string& label, NodeBase::id_t id);
    482:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h
  W082 Adjacent arguments have the same type
    128:    NodeBase::TraceRc SelectSignal
    182:       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  W110 Override of Base.Display not found
    113: class SbTracer : public NodeBase::Permanent
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    287:    auto fake = reinterpret_cast< const Service* >(&local);
  W106 Function does not invoke Debug::ft
    377: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    62:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    128:    bool Disable();
    132:    bool Enable();
  W042 Member could be private
    76:    static bool IsValidPortId(PortId pid)
    118:    bool IsModifiable() const { return modifiable_; }
    122:    bool IsModifier() const { return modifier_; }
  W043 Member could be protected
    84:    virtual NodeBase::c_string PortName(PortId pid) const;
  W065 Base class virtual destructor is not public
    183:    virtual ~Service();
  W075 Virtual function is public
    84:    virtual NodeBase::c_string PortName(PortId pid) const;
    114:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    178:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W092 Function could be free
    76:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    78: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    448:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    452:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    453:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    504:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    510:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    512:             (sapEvent)->CurrInitiator();
    764:             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
    767:             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
    865:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    869:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    932:                (initEvent)->GetModifier();
    972:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  W106 Function does not invoke Debug::ft
    313: Service* ServiceSM::GetService() const
  W117 Line can merge with the next line and be under the length limit
    768:                      ->CurrSsm() != nullptr)
  W119 Argument passed by value is modified
    392/1: EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
    832/2:    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
    900/2:    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h
  W026 Unused argument
    79/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    187/1:       (Event& currEvent, Event*& nextEvent);
    187/2:       (Event& currEvent, Event*& nextEvent);
  W032 Unused function
    132:    bool HasTriggered(TriggerId tid) const;
  W042 Member could be private
    95:    StateId NextState() const { return nextState_; }
  W065 Base class virtual destructor is not public
    167:    virtual ~ServiceSM();
  W075 Virtual function is public
    67:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    73:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    79:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    100:    virtual void SetNextState(StateId stid);
    107:    virtual void PsmDeleted(ProtocolSM& exPsm);
    121:    virtual void SetNextSap(TriggerId sap);
    127:    virtual void SetNextSnp(TriggerId snp);
    139:    virtual void MorphToService(ServiceId sid);
  W077 Virtual function has no overrides
    139:    virtual void MorphToService(ServiceId sid);
  W088 Argument could be const
    107/1:    virtual void PsmDeleted(ProtocolSM& exPsm);
  W090 Function could be const
    186:    virtual EventHandler::Rc ProcessInitNack
    235:    EventHandler::Rc ProcessSsmqSap
    246:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    81:    auto fake = reinterpret_cast< const Signal* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    78:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    82:    ProtocolId Prid() const { return prid_; }
  W065 Base class virtual destructor is not public
    112:    virtual ~Signal();
  W075 Virtual function is public
    89:    virtual NodeBase::CliText* CreateText() const;
  W092 Function could be free
    63:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    95:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h
  W092 Function could be free
    86:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h
  W026 Unused argument
    48/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    42:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    48:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    56:    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    204:    auto fake = reinterpret_cast< const State* >(&local);
  W106 Function does not invoke Debug::ft
    133: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    168: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    251: EventHandlerId State::GetHandler(EventId eid) const
    259: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    57:    Id Stid() const { return Id(stid_.GetId()); }
  W032 Unused function
    61:    ServiceId Sid() const { return sid_; }
  W065 Base class virtual destructor is not public
    94:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h
  W027 Unused class
    37: class TextTlvMessage : public TlvMessage
  W032 Unused function
    58:    explicit TextTlvMessage(SbIpBufferPtr& text);
    62:    TextTlvMessage(ProtocolSM* psm, size_t size);
    68:    bool Receive();
  W077 Virtual function has no overrides
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
  W090 Function could be const
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    189:    auto fake = reinterpret_cast< const Timer* >(&local);
  W064 Implicit destructor invoked
  i 266:    TimeoutInfo info;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h
  W037 Member hides inherited name
    111:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    134:    TimerId tid_;
    146:    NodeBase::Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    106:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h
  W064 Implicit destructor invoked
    75: struct TimeoutInfo
  W111 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W119 Argument passed by value is modified
    75/1: Timer::QId TimerRegistry::CalcQId(secs_t secs) const
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp
  W106 Function does not invoke Debug::ft
    61: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h
  W007 Cast down the inheritance hierarchy
    68:       auto& tlvmsg = static_cast< TlvMessage& >(msg);
    100:       auto& tlvmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    167:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    251:    return (Fence*) fence;
    395:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    64:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    459:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W009 Pointer arithmetic
    167:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    250:    auto fence = layout->bytes + layout->header.length;
  W056 Implicit constructor invoked: POD members not initialized
  i 182:    ParmIterator pit;
  i 278:    ParmIterator pit;
  i 296:    ParmIterator pit;
  i 351:    ParmIterator locpit;
  W064 Implicit destructor invoked
  i 182:    ParmIterator pit;
  i 278:    ParmIterator pit;
  i 296:    ParmIterator pit;
  i 351:    ParmIterator locpit;
  W119 Argument passed by value is modified
    224/2: TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h
  W006 reinterpret_cast
    88:       return reinterpret_cast< T* >(pptr->bytes);
    102:       auto dest = reinterpret_cast< T* >(pptr->bytes);
    137:       parm = (pptr == nullptr ? nullptr : reinterpret_cast< T* >(pptr->bytes));
    277:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W032 Unused function
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    180:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    186:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    200:    TlvParmPtr AddBytes
    207:    TlvParmPtr CopyParm
    260:    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
    267:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    282:    size_t ParmOffset(ParmIterator& pit) const;
  W042 Member could be private
    169:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    174:    TlvParmPtr NextParm(ParmIterator& pit) const;
    195:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    272:    virtual void AddFence();
    276:    TlvMsgLayout* TlvLayout() const
    287:    Fence* FencePtr() const;
    291:    void CheckFence() const;
  W056 Implicit constructor invoked: POD members not initialized
    152:    class ParmIterator
  W060 Base class constructor is public
    50:    explicit TlvMessage(SbIpBufferPtr& buff);
    54:    TlvMessage(ProtocolSM* psm, size_t size);
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W064 Implicit destructor invoked
    152:    class ParmIterator
  W075 Virtual function is public
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    195:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    212:    virtual void DeleteParm(TlvParmLayout& parm);
  W077 Virtual function has no overrides
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    195:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    212:    virtual void DeleteParm(TlvParmLayout& parm);
    267:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    272:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    113:    template< class T > T* CopyType
  W088 Argument could be const
    212/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W092 Function could be free
    234:    static size_t Pad(size_t size)
  W119 Argument passed by value is modified
    114/3:       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    67:    auto& tmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h
  W032 Unused function
    71:    static Id ExtractPid(const TlvParmLayout& parm);
  W044 Typedef of pointer type
    58: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    59: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W092 Function could be free
    71:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    66:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h
  W032 Unused function
    39:    SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h
  W042 Member could be private
    77:    static bool IsValidId(Id tid)
  W065 Base class virtual destructor is not public
    102:    virtual ~Trigger();
  W092 Function could be free
    77:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    61:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    96:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    109:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    111:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    128:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    140:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    141:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    156:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    158:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    164:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    185:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    210:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    237:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    251:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    272:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    284:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    296:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    308:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    320:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    322:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    339:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    358:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    370:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    383:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    397:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    398:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    412:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    424:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    426:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    453:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    465:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    466:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    478:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    479:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    497:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    514:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    526:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    528:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    551:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    577:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    589:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    602:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    615:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    617:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    635:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    647:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    663:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    665:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    682:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    707:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    723:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    736:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    752:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    765:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    781:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    783:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    792:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    817:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    818:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    854:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    868:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    882:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    883:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    896:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    897:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    929:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    950:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    75:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    80:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    88:       SetNPsm(static_cast< CipPsm& >(psm));
    92:       SetUPsm(static_cast< MediaPsm& >(psm));
    128:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
  W106 Function does not invoke Debug::ft
    378: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp
  W022 Add using statement
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    79:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    79:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    104:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    179:       auto pmsg = static_cast< const PotsMessage* >(msg);
    181:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    185:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    186:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    253:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    89:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    90:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    87:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    108:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  W022 Add using statement
    0: namespace MediaBase
    0: namespace NetworkBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp
  W022 Add using statement
    0: namespace NetworkBase
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    96:       return static_cast< PotsCallPsm* >(psm);
    162:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    197:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    184:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    242:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    263:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    276:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    55:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    55:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    55:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    258:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    263:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    265:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    284:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    285:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    329:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    354:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    432:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    434:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    447:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    469:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    483:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    489:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    495:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    525:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    528:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    583:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    590:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    604:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    612:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    628:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h
  W020 Using statement in header
    42: using namespace NodeBase;
    43: using namespace SessionBase;
    44: using namespace CallBase;
  W026 Unused argument
    61/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1363:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    449:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1076:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1113:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1183:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1208:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1220:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1280:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1322:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1842:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1843:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1870:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    1882:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1884:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    1891:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    1985:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    1987:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1988:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1989:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2082:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2094:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2106:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2118:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2132:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2144:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2156:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2168:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2180:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2181:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2193:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2194:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2206:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2226:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
  W026 Unused argument
    436/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W053 Data could be const
    187:    Cause::Ind cause_;
  W092 Function could be free
    456:    static EventHandler::Rc SendFacilityNack(PotsMuxPsm* npsm, ServiceId sid);
  W117 Line can merge with the next line and be under the length limit
    592:    BindEventHandler
    606:    BindEventHandler
    610:    BindEventHandler
    612:    BindEventHandler
    614:    BindEventHandler
    618:    BindEventHandler
    626:    BindEventHandler
    628:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    286:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    558:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    563:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    564:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    579:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    587:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    619:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    647:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    734:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    736:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    829:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    851:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    871:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    873:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    879:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    902:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    925:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    926:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    944:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    945:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    949:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    968:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    970:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    974:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1015:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1016:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1018:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1063:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
  W042 Member could be private
    252:    void StartTimer(TimerId tid, secs_t duration);
  W053 Data could be const
    149:    Facility::Ind ind_;
  W075 Virtual function is public
    257:    void Cancel() override;
  W117 Line can merge with the next line and be under the length limit
    415:    BindEventHandler
    448:    BindEventHandler
    450:    BindEventHandler
    462:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    114:    auto& pssm = static_cast< BcSsm& >(*Parent());
    116:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    80:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    154:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    160:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    190:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    233:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    236:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    336:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    389:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    689:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    692:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    757:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    819:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    915:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    916:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    936:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    961:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    962:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    983:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    616:    BindEventHandler
    630:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h
  W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
    47: using namespace NodeBase;
    48: using namespace SessionBase;
  W026 Unused argument
    158/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W032 Unused function
    77:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W042 Member could be private
    160:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    56:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    57:    auto msg = static_cast< CipMessage* >(ame.Msg());
    59:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    91:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    105:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    107:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    132:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    133:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    135:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    171:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    181:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    202:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    217:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    236:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    237:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    239:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    284:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    302:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    303:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    305:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    348:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    349:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    351:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    400:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    415:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    430:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    445:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    460:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    491:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    492:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    519:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    535:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    536:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    563:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    581:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    582:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W099 Line contains adjacent spaces
    132:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    133:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    134:    auto          sid = msg->GetSignal();
    135:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    137:    CauseInfo*    cci;
    236:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    237:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    238:    auto          sid = msg->GetSignal();
    239:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    241:    CauseInfo*    cci;
    302:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    303:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    304:    auto          sid = msg->GetSignal();
    305:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    307:    CauseInfo*    cci;
    348:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    349:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    350:    auto          sid = msg->GetSignal();
    351:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    353:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp
  W022 Add using statement
    0: namespace CallBase
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h
  W020 Using statement in header
    28: using namespace CallBase;
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h
  W020 Using statement in header
    45: using namespace CallBase;
    46: using namespace NetworkBase;
    47: using namespace NodeBase;
    48: using namespace SessionBase;
  W032 Unused function
    76:    CliText* CreateText() const override;
  W042 Member could be private
    419:    ProtocolSM* TimerPsm(TimerId tid) const;
  W092 Function could be free
    133:    static void SendRelease(const Message& msg1);
  W110 Override of Base.Display not found
    56: class PotsCallIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp
  W022 Add using statement
    0: namespace CallBase::Cause
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    78:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
  W022 Add using statement
    0: namespace CallBase::Cause
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    118: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    199: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
  W042 Member could be private
    50:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    80:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    189:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    236:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    275:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    301:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  W022 Add using statement
    0: namespace CallBase
    0: namespace MediaBase
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h
  W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
  W042 Member could be private
    93:    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
  W053 Data could be const
    162:    PotsTreatmentQueue::QId qid_;
    166:    Q1Link link_;
    195:    Tone::Id tone_;
    199:    secs_t duration_;
  W075 Virtual function is public
    138:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    187:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    189:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    388:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    413:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    415:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    420:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    488:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    491:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    551:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    569:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    592:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    597:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    599:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    618:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    619:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    341:    BindMsgAnalyzer
    351:    BindMsgAnalyzer
    353:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W106 Function does not invoke Debug::ft
    73: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h
  W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
  W053 Data could be const
    128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    139:          tt = static_cast< const TransTrace* >(rec);
    147:          auto mt = static_cast< const MsgTrace* >(rec);
    674:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    691:             trans = static_cast< const TransTrace* >(rec);
    703:             return static_cast< const MsgTrace* >(rec);
    718:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    739:             trans = static_cast< const TransTrace* >(rec);
    746:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    899:          tt = static_cast< const TransTrace* >(rec);
    935:             mt = static_cast< const MsgTrace* >(rec);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W119 Argument passed by value is modified
    1024/1:    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h
  W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    91:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W106 Function does not invoke Debug::ft
    80: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W053 Data could be const
    145:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    87:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W022 Add using statement
    0: namespace NodeBase
  W106 Function does not invoke Debug::ft
    53: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W053 Data could be const
    85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    134:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W022 Add using statement
    0: namespace NodeBase
    0: namespace NodeTools
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace NodeTools;
  W060 Base class constructor is public
    41:    StSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp
  W022 Add using statement
    0: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    63:    return static_cast< StTestData* >(data);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W082 Adjacent arguments have the same type
    75:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W092 Function could be free
    52:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    472:    auto tpsm = static_cast< TestPsm* >(Psm());
    487:    auto tssm = static_cast< TestSsm* >(RootSsm());
    535:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    777:       SetTestPsm(static_cast< TestPsm* >(&psm));
    882:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    883:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    916:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    925:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    936:    auto& tssm = static_cast< TestSsm& >(ssm);
    952:    auto& tssm = static_cast< TestSsm& >(ssm);
    967:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    968:    auto& tssm = static_cast< TestSsm& >(ssm);
  W022 Add using statement
    0: namespace NodeBase
    0: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    698:    BindMsgAnalyzer
    702:    BindEventHandler
    704:    BindEventHandler
    714:    BindMsgAnalyzer
    718:    BindEventHandler
    720:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h
  W020 Using statement in header
    43: using namespace NodeBase;
    44: using namespace SessionBase;
  W042 Member could be private
    265:    void UpdateTestPsm();
    345:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    351:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W090 Function could be const
    265:    void UpdateTestPsm();
  W092 Function could be free
    113:    static TestPsm* Find(const MsgPort& port);
