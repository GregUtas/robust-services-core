LINE COUNTS
   73296   source code not in one of the categories below
   40645   blank line
   16780   blank comment
   10061   comment at the top of a file (e.g. for the file's name or license info)
    6970   comment followed by repeated characters to draw a rule (e.g. //---- ...)
     181   comment followed by a character that classifies it (e.g. //c <text>)
   18813   comment not in one of the categories above (e.g. //  <text>)
       0   C-style comment
   14301   bare left brace
   12590   bare right brace
    1712   bare right brace with semicolon
    4490   invocation of Debug::ft
    4472   definition of an fn_name
     134   definition of an fn_name continued on a subsequent line
    5811   #include directive
    1089   preprocessor directive other than #include
     863   using statement
  212208   TOTAL

WARNING COUNTS
  W004    91  C-style cast
  W005    46  Functional cast
  W006   121  reinterpret_cast
  W007   560  Cast down the inheritance hierarchy
  W008    43  Cast removes const qualification
  W009    18  Pointer arithmetic
  W015     3  #include not sorted in standard order
  W018     2  Remove #include directive
  W020   145  Using statement in header
  W022   229  Add using statement
  W024     1  Add forward declaration
  W026    91  Unused argument
  W027     6  Unused class
  W028    46  Unused data
  W029     1  Unused enum
  W030    20  Unused enumerator
  W032   228  Unused function
  W033     8  Unused typedef
  W037     9  Member hides inherited name
  W042   254  Member could be private
  W043    54  Member could be protected
  W044    12  Typedef of pointer type
  W047    41  Data is init-only
  W048     3  Data is write-only
  W050    58  Data is not private
  W053    60  Data could be const
  W054     3  Data could be const pointer
  W055     1  Data need not be mutable
  W056    28  Default constructor invoked: POD members not initialized
  W057     1  Default constructor invoked
  W060    67  Base class constructor is public
  W062     2  Member not included in member initialization list
  W065    27  Base class virtual destructor is not public
  W075   376  Virtual function is public
  W077   167  Virtual function has no overrides
  W082    84  Adjacent arguments have the same type
  W088    34  Argument could be const
  W090    84  Function could be const
  W091     2  Function could be static
  W092   175  Function could be free
  W097    33  Line indentation is not a multiple of the standard value
  W099   285  Line contains adjacent spaces
  W102     2  Line length exceeds the standard maximum
  W103     4  Function not sorted in standard order
  W104    35  File heading is not standard
  W106   502  Function does not invoke Debug::ft
  W107    18  Function does not invoke Debug::ft as first statement
  W110    30  Override of Base.Display not found
  W111    27  Override of Object.Patch not found
  W114    75  Function could be tagged noexcept
  W115    10  Function should not be tagged noexcept
  W117   217  Line can merge with the next line and be under the length limit
  W118     2  Copy/move constructor does not invoke base copy/move constructor
  W119    60  Argument passed by value is modified
  W120     3  Function returns non-const reference or pointer to member data
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE
W004 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(500):    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1067):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(588):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(620):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(447):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(785):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1344):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1532):    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3751):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(345):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1374):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1571):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(177):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(483):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(590):    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1015):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1101):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(32):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(32):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(39):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(39):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(76):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(76):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(220):    if(addr != nullptr) return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(97):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(391):          auto src = (ptr_t) this;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(327):    auto after = (ptr_t) next_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(340):       if(wrap && (after > (const_ptr_t) first)) return nullptr;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(347):       if(wrap || (after > (const_ptr_t) first)) return nullptr;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(520):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(520):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(522):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(522):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(227):    auto seg = (Segment*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(284):    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(335):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(386):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(249):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(273):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(325):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(361):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(757):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(827):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(852):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(884):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(885):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(889):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(932):    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(962):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(143):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(163):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(144):       (DWORD*) &nid);                  // updates thread's identifier
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(345):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(164):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(125):    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(235):    auto addr = (TraceRecord*) &buff_[end_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(431):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(449):             record = (TraceRecord*) buff_;  // case (b)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(453):          record = (TraceRecord*) next;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(462):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(488):       auto record = (TraceRecord*) &buff_[start_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(595):    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(58):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(80):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(73):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(92):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(132):       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(60):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(118):       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(105):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(224):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(231):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(241):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(248):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(46):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(90):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(151):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(259):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(315):       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(325):       (char*) &val, &valsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(50):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(79):       size, 0, (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(117):       size, 0, (sockaddr*) &peer, peersize);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(753):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(776):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(778):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(181):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(290):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(448):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(51):    ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(305):    ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(344):    ipport_t Port() const override { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(139):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(171):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(1507):       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(1521):    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(263):          << spaces(3) << LineType(t) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(274):          *stream << setw(6) << WarningCode(Warning(w)) << setw(6)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(275):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(328):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(380):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(431):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(437):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(442):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(694):    *cli.obuf << ": " << Warning(log.warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(148):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1358):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(448): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(70):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(106):          return RestartLevel(errval_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(641):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(849):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1234):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2949):       auto heap = Memory::Heap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(207):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(94):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(361):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(544):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(157):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp(42):    size_(int16_t(size)),
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3221):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3252):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(69):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(91):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(73):       { return NodeBase::Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(94):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(82):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(702):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(145):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(150):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(465):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(62):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(78):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(57):    Id Stid() const { return Id(stid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(62):    ipport_t Port() const override { return ipport_t(port_); }
W006 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(72):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(73):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(488):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(97):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(133):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(119):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(468):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(65):    auto fake = reinterpret_cast< const CodeDir* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(585):    auto fake = reinterpret_cast< const CodeFile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(281):    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(228):    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(551):    auto& dm = reinterpret_cast< const DM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(552):    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(682):    auto& em = reinterpret_cast< const EM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(1418):       auto& rm = reinterpret_cast< const RM_Message& >(message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2256):    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2329):    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2486):    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2490):    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(192):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(220):    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(102):       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(131):    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(62):       reinterpret_cast < const IM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(65):       reinterpret_cast < const RM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(68):       reinterpret_cast < const DM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(71):       reinterpret_cast < const FM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(74):       reinterpret_cast < const EM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(77):       reinterpret_cast < const BM_Message* >(this)->Display(stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(203):       auto header = reinterpret_cast< const DipHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(214):       auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(235):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(241):       auto im = reinterpret_cast< IM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(249):       auto dm = reinterpret_cast< DM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(260):       auto em = reinterpret_cast< EM_Message* >(src);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(289):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(298):       auto rm = reinterpret_cast< RM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(309):       auto dm = reinterpret_cast< DM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(320):       auto em = reinterpret_cast< EM_Message* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(343):    auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(371):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(61):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(118):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(575):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(65):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp(86):    auto fake = reinterpret_cast< const Alarm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(135):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(162):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(136):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(91):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(75):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(78):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(158):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(103):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(97):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp(106):    auto fake = reinterpret_cast< const Log* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(120):    SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(354):       where = reinterpret_cast< Entry* >(buff_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(362):    SetNext(reinterpret_cast< Entry* >(after));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(403):          SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp(115):    auto fake = reinterpret_cast< const LogGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(68):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(141):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(116):       reinterpret_cast< word* >(&pool->targSegments_), 0,
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(490):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(117):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(73):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(86):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(78):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(99):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(34):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1169):    auto fake = reinterpret_cast< const Thread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(76):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1367):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1887):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2448):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3682):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(299):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(71):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(241):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(286):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(78):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(116):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(85):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(97):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(85):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(569):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(738):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(859):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(947):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(612):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(919):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(198):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(215):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(189):          reinterpret_cast< word* >(&poolSize_), 1,
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(229):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(124):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(107):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(93):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(82):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(62):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(286):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(78):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(201):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(192):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(120):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(143):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(155):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(70):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(516):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(268):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(70):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(97):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(98):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1465):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(85):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(203):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(88):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(99):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(92):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(142):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(155):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(177):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(187):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(70):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(114):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(165):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(41):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(43):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(483):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(513):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(825):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(859):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(989):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1387):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1392):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(404):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(919):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(379):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(380):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(382):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(415):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(452):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(453):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(568):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(726):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(762):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(988):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(993):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(85):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(218):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(250):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(273):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(521):    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2446):    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2584):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(81):    auto curr = static_cast< CodeFileSet* >(Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(93):       curr = static_cast< CodeFileSet* >(prev->Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(113):    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(125):       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(155):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(156):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(455):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(487):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(488):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(599):       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(631):       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(666):    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(64):    auto that = static_cast< CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(100):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(137):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(151):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(874):       if(static_cast< const Function* >(item)->IsVirtual())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(211):          static_cast< const Function* >(item)->IsInline())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1015):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1018):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1035):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2052):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2096):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2106):       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(860):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(889):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(902):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1369):          auto derived = static_cast< const Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1474):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1482):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1647):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1703):       auto type = static_cast< TypeSpec* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1713):       spec->SetReferent(static_cast< CxxScoped* >(item), nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1877):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(442):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(466):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(520):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(531):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(536):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(831):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2081):             static_cast< Function* >(tfunc)->SetTemplateParm();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2255):       ref = static_cast< Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(697):       auto cls = static_cast<const Class*>(scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1350):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1417):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1537):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1553):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1581):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1596):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1728):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1774):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2809):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3276):             static_cast< ClassData* >(data)->SetInit(m->get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3526):       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3539):       auto i = FindArg(static_cast< const Argument* >(item), false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3590):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4367):    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4795):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4809):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5031):                auto item = static_cast< CxxNamed* >(args.front().item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5117):       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(94):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(165):    auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(209):       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(242):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(256):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(310):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(344):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1119):    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1305):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1336):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1495):    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1720):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1733):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1772):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1777):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1955):    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2077):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2453):    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2613):          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(467):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(506):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(514):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(522):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(528):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(504):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(530):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(582):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(615):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(642):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(700):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(723):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(819):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1250):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1255):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1280):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1676):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1695):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1794):    auto cls = static_cast< Class* >(arg.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1844):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1865):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1887):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1911):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2104):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2106):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2466):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2528):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(228):    auto defn = static_cast< const Function* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(361):    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1032):    auto etor = static_cast< const Enumerator* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1074):    auto eNum = static_cast< const Enum* >(etor->AutoType());
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1350):    auto func = static_cast< const Function* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1425):    auto cls = static_cast< const Class* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2309):    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2934):       ns = static_cast< const Namespace* >(ref)->OuterSpace();
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3326):    auto func = static_cast< const Function* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3451):    auto defn = static_cast< const Function* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3563):    auto func = static_cast< const Function* >(log.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1983):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1987):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp(95):       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(397):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(650):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(723):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(762):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(888):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(889):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1049):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1333):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1501):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1526):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1554):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1760):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1863):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1913):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1919):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2185):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2191):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2353):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2395):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2470):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2869):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2915):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3123):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3149):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3238):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3274):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3333):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3606):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3990):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(210):    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(284):    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(339):    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(252):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(94):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(118):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(78):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(158):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(85):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(234):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(91):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(125):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(189):                   auto last = static_cast< const FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(266):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(305):          curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(373):       curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(426):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(491):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(65):       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(66):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(198):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(68):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(312):    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(176):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(186):    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(304):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(469):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(69):    auto thread = static_cast< TcpIoThread* >(GetThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(74):       thread = static_cast< TcpIoThread* >(CreateIoThread());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(80):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(111):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(131):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(135):       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(268):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(59):    auto svc = static_cast< const UdpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(443):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(584):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(645):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(752):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(778):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(872):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(960):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(800):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(915):             (m)->FindParm(Parameter::Timeout);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(184):    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(537):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(84):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(83):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(157):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(221):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(278):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(433):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(49):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(50):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(126):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(140):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(820):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(907):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1119):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1351):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1564):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(113):    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(64):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(76):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(224):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(285):    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(302):       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(357):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(860):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(863):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(890):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(460):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(464):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(465):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(516):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(522):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(524):             (sapEvent)->CurrInitiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(776):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(778):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(881):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(885):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(948):                (initEvent)->GetModifier();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(988):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(99):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(75):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(61):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(64):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(101):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(117):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(119):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(139):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(154):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(155):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(170):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(172):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(178):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(199):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(227):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(257):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(274):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(298):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(313):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(327):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(342):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(357):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(359):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(378):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(399):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(414):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(430):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(447):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(448):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(479):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(481):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(511):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(526):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(527):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(542):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(543):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(564):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(583):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(598):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(600):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(625):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(654):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(669):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(685):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(701):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(703):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(724):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(739):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(755):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(757):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(774):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(801):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(820):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(835):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(854):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(869):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(885):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(887):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(896):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(924):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(925):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(963):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(979):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(995):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(996):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1011):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1012):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1046):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1067):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(75):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(80):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(88):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(92):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(132):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(112):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(193):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(195):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(199):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(200):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(275):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(95):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(116):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(106):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(178):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(213):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(204):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(264):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(287):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(303):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(60):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(60):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(60):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(286):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(291):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(293):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(314):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(315):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(367):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(394):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(476):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(478):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(491):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(513):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(527):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(533):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(539):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(573):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(576):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(631):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(638):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(654):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(662):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(680):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(449):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1166):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1203):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1273):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1300):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1314):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1380):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1424):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1967):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1968):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1997):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2012):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2014):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2021):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2118):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2120):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2121):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2122):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2217):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2231):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2245):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2259):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2275):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2290):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2304):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2319):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2334):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2335):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2350):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2351):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2365):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2387):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(290):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(617):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(622):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(623):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(640):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(648):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(686):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(716):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(811):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(813):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(908):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(930):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(953):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(955):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(961):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(984):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1009):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1010):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1030):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1031):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1035):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1054):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1056):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1060):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1101):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1102):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1104):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1151):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(131):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(133):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(85):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(175):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(181):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(198):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(249):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(252):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(364):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(417):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(752):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(755):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(828):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(896):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(997):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(998):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1020):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1051):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1052):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1075):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(55):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(56):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(58):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(108):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(110):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(138):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(176):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(186):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(210):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(228):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(250):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(298):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(317):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(319):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(362):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(363):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(365):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(417):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(435):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(453):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(471):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(489):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(522):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(523):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(553):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(572):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(573):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(603):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(623):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(624):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(83):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(252):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(296):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(326):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(191):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(436):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(463):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(470):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(542):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(545):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(605):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(625):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(654):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(659):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(661):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(682):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(683):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(151):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(159):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(712):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(729):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(741):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(758):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(779):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(786):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(947):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(983):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(140):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(69):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(506):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(523):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(577):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(855):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(977):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(978):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1016):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1025):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1036):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1054):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1073):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1074):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(588):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(620):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1267):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1413):    return static_cast< CxxScope* >(const_cast< Class* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2048):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(144):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(447):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(483):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(785):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(897):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1079):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1594):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2872):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(877):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1344):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2273):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3495):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3741):       (const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3751):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(345):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1216):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(585):    if(n == 0) return const_cast< CxxScoped* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1374):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1571):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1987):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2006):    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2018):    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(177):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(483):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(590):    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1015):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1101):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(286):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(327):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1987):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4208):       func->SetTemplate(const_cast< Function* >(tmplt));
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(32):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(39):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(100):       objects[count++] = const_cast< Base* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(357):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(692):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W009 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(217):       dest = payload + received;
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(32):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(39):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(392):          auto dst = src + sizeof(FunctionTrace);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(327):    auto after = (ptr_t) next_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(328):    auto wrap = after >= (buff_ + size_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(355):       after = buff_ + size;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2681):    ptrdiff_t stacksize = &local - priv_->stackBase_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(431):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(462):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(198):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(144):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(144):       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(245):       bytes = buff_ + hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(271):    bytes += hdrSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(101):    NodeBase::byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(181):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(289):    auto fence = layout->bytes + layout->header.length;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(29): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(27): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(97): #include "AnModule.h"
W018 Remove #include directive
  C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h(21): #include "BaseBot.h"
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(23): #include "SysMemory.h"
W020 Using statement in header
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(35): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(36): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(50): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(51): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(52): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(37): using NodeBase::fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(38): using NodeBase::SPACE;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(39): using NodeBase::word;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxCharLiteral.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(39): using NodeBase::CliThread;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(40): using NodeBase::word;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(41): using std::string;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(40): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(28): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h(21): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(39): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace SessionTools;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(47): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(48): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(49): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(45): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(46): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(47): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeTools;
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(44): using namespace SessionBase;
W022 Add using statement
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeTools
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace SessionBase
W024 Add forward declaration
  C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h(1): class Diplomacy::BaseBot
W026 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(347/3):       const CxxNamed* item, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(744/1):    static void Shutdown(NodeBase::RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(748/1):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(84/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1224/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(91/1):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(91/2):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(191/1):    virtual StartupResult initialise(const StartupParameters& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(234/1):    virtual void process_mis_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(264/1):    virtual void process_tme_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273/1):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(279/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(279/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(299/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(299/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(304/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(309/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(314/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(319/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(324/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(329/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(334/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(339/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(344/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(349/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(354/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(359/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(359/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(364/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(364/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(369/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(374/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(379/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(379/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(384/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(384/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(390/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(390/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(395/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(395/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(400/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(400/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(405/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(405/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(411/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(411/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(416/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(416/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(421/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(421/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(426/1):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(426/2):       (const TokenMessage& message, const TokenMessage& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(431/1):    virtual void process_unexpected_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(436/1):    virtual void process_unexpected_rej_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(441/1):    virtual void process_unexpected_rej_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(446/1):    virtual void process_unexpected_yes_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(451/1):    virtual void process_unexpected_yes_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(476/1):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(480/1):    virtual void process_ord_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(484/1):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(488/1):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(503/1):       (bool is_broadcast, TokenMessage& receiving_powers, TokenMessage& press);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(503/2):       (bool is_broadcast, TokenMessage& receiving_powers, TokenMessage& press);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(503/3):       (bool is_broadcast, TokenMessage& receiving_powers, TokenMessage& press);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(513/1):    virtual void report_close(ProtocolError error);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(613/1):    void process_fm_message(const DipMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(52/2): void SE_Handler(uint32_t errval, void* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(353/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(362/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(135/3):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(140/1):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(93/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(60/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(131/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151/1):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151/2):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(167/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(301/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(307/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(313/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(79/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(187/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(187/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(48/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(436/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(156/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(191): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(61):    class SigBus : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(37): class TextTlvMessage : public TlvMessage
W028 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(62):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(218):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(302):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(387):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(170): extern const std::string SingleRule;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(584): extern const NodeBase::Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(585): extern const NodeBase::Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(589): extern const NodeBase::Flags Stats_Mask;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(162): constexpr ProtocolError IM_TIMEOUT = 0x01;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(163): constexpr ProtocolError IM_EXPECTED = 0x02;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(164): constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(165): constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(166): constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(167): constexpr ProtocolError IM_REPEATED = 0x06;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(168): constexpr ProtocolError IM_FROM_SERVER = 0x07;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(169): constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(170): constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(171): constexpr ProtocolError DM_BEFORE_RM = 0x0A;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(172): constexpr ProtocolError RM_EXPECTED = 0x0B;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(173): constexpr ProtocolError RM_REPEATED = 0x0C;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(174): constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(175): constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(197): constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(212): constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(213): constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(214): constexpr category_t CATEGORY_BRACKET = 0x40;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(217): constexpr category_t CATEGORY_ORDER = 0x43;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(219): constexpr category_t CATEGORY_RESULT = 0x45;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(222): constexpr category_t CATEGORY_COMMAND = 0x48;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(223): constexpr category_t CATEGORY_PARAMETER = 0x49;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(224): constexpr category_t CATEGORY_PRESS = 0x4A;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(143):       auto addr = Memory::Alloc(n * sizeof(T), MemImm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(185):       auto addr = Memory::Alloc(n * sizeof(T), MemPerm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(227):       auto addr = Memory::Alloc(n * sizeof(T), MemProt);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h(93): constexpr FlagId FirstAppDebugFlag = 8;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(71): extern fixed_string NotImplementedExpl;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(188):    static const id_t LastNbIndex     = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(80):    static const id_t LastNtIndex    = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(106):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(134):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(226):    static const Ind MaxInd         = UINT8_MAX;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(142):    static const NodeBase::PooledObjectId MaxId;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(55):    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(85):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(71):    enum Location
W030 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(145):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(62):       FIRST_BOT_SPECIFIC_ERROR
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(58):       LowPriority,       // preemptable threads
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(73):       NotQueued,     // being built by a factory
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(74):       ContextQ,      // has arrived at a context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(75):       PsmIncomingQ,  // has arrived at a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(76):       PsmOutgoingQ,  // has been sent by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(77):       PsmPendingQ    // being built by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(87):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(88):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(90):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(118):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(96):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(98):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(99):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(64):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(214):    Digit GetDigit(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(182):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(249):    void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(318):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(363):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(194):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(163):    static std::string Demangle(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(126):    bool operator!=(const CodeWarning& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(532):    bool IsImplemented() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(146):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(305):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(546):    bool operator<(const Tracepoint& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1025):    bool IsExtern() const { return GetDecl()->extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1030):    bool IsFinal() const { return GetDecl()->final_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(89):    std::string& Prefix(std::string&& scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(311):    CxxToken& operator=(const CxxToken& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(409):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(451):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(251):    CodeLocation PrevPos(const CodeLocation& curr);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(111):    void set_report(bool onoff) { report_ = onoff; }
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(120):    void send_orders_to_server();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(124):    void send_nme(fixed_string name, fixed_string version);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(135):    bool map_requested() const { return map_requested_; }
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(143):    void send_broadcast_to_server(TokenMessage broadcast_message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(144):    void send_press_to_server(const TokenMessage& press_to,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(150):    void send_bm_message(const byte_t* payload, uint16_t length) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(117):       bool operator<(const Wakeup& that) const
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(69):    DipHeader* Header() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(250):    CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(75):    bool operator<(const Location& that) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(162):    static MapAndUnits* create_clone();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(166):    static void delete_clone(MapAndUnits*& clone);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(184):    bool set_hold_order(ProvinceId unit);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(185):    bool set_move_order(ProvinceId unit, Location dest);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(186):    bool set_support_to_hold_order(ProvinceId unit, ProvinceId client);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(187):    bool set_support_to_move_order
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(189):    bool set_convoy_order(ProvinceId unit, ProvinceId client, ProvinceId dest);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(192):    bool set_move_by_single_step_convoy_order
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(194):    bool set_disband_order(ProvinceId unit);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(195):    bool set_retreat_order(ProvinceId unit, Location dest);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(196):    void set_build_order(Location location);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(197):    bool set_remove_order(ProvinceId unit);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(198):    void set_waive_order();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(199):    void set_multiple_waive_orders(size_t waives);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(200):    void set_total_number_of_waive_orders(size_t waives);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(207):    Location find_adjustment(ProvinceId province) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(212):    bool cancel_remove_order(ProvinceId province);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(216):    bool unorder_adjustment(const TokenMessage& not_sub, PowerId power);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(220):    bool any_orders_entered() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(224):    void clear_all_orders();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(237):    size_t process_sub(const TokenMessage& sub, PowerId power, Token results[]);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(243):    bool get_variant_setting
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(248):    void build_now(TokenMessage& now) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(252):    void build_sco(TokenMessage& sco) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(272):    Location find_result_unit_initial_location(ProvinceId province,
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(283):    const LocationSet* get_destinations(ProvinceId province) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(289):       get_dislodged_unit_destinations(ProvinceId province) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(306):    void set_order_checking(bool on_submission, bool on_adjudication);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(310):    bool all_orders_received(PowerId power) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(314):    void adjudicate();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(319):    size_t get_adjudication_results(TokenMessage ord_messages[]) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(324):    bool apply_adjudication();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(332):    size_t get_centre_count(Token power) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(336):    size_t get_unit_count(Token power) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(48):    explicit TokenMessage(const Token* stream);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(56):    TokenMessage(const TokenMessage& that);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(91):    Token operator[](size_t index) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(140):    void set_as_ascii(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(170):    bool operator<(const TokenMessage& that) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h(52):    size_t get_number_of_results() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(87):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(119):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(70):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(75):    DynAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(79):    template< typename U > DynAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(82):    template< typename U > DynAllocator& operator=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(85):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(91):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(97):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(105):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(117):    ImmAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(121):    template< typename U > ImmAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(124):    template< typename U > ImmAllocator& operator=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(127):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(133):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(139):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(147):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(159):    PermAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(163):    template< typename U > PermAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(166):    template< typename U > PermAllocator& operator=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(169):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(175):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(181):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(189):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(201):    ProtAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(205):    template< typename U > ProtAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(208):    template< typename U > ProtAllocator& operator=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(211):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(217):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(223):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(231):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(243):    TempAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(247):    template< typename U > TempAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(250):    template< typename U > TempAllocator& operator=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(253):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(259):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(265):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(273):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(170):    const T& Back() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(178):    T& Back()
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(186):    const T& At(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(194):    T& At(size_t index)
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(218):    const T* Items() const { return array_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(57):    word GetCurrValue() const { return *curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(124):    bool SetVptr(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(131):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(138):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(168):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(121):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(121):    ticks_t UsecsToTicks(usecs_t usecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(125):    const SysTime& TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(65):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(66):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(56):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h(39):    size_t find(fn_name_arg func, c_string str);
  C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h(58):    Log* FindLog(const std::string& name, LogId id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(60):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(83):    static bool Verify(MemoryType type, void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(108):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(116):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(122): std::ostream& operator<<(std::ostream& stream, AlarmStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(95):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(107):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(121):    static void* operator new(size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(122):    static void* operator new[](size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(124):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(125):    static void operator delete(void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(126):    static void operator delete[](void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(135):    void MorphTo(Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h(57):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(62):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(62):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(95):    void GetCurrDir(std::string& dirName);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(106):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(111):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(71):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(77):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(121):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(169):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(173):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(99):    static void operator delete(void* addr, void* where) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(48):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(115):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(50): uint64_t htonll(uint64_t hostllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(53): uint64_t ntohll(uint32_t netllong);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(135):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(191):    IpBuffer* IcMsg() const { return icMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(91):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(95):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(100):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(293):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(447):    void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(137): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(231):    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(47):    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(85):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(63):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(180):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(86):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(79):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(68):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(137):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(195):    bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(325):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(86):    void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(104):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(213):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(217):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(358):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(369):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(83):    static void operator delete(void* addr, SbPoolUser user);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(128):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(132):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(132):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(82):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(61):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(58):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(62):    TextTlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(68):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(167):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(173):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(187):    TlvParmPtr AddBytes
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(194):    TlvParmPtr CopyParm
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(251):    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(258):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(273):    size_t ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(75):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(75):    CliText* CreateText() const override;
W033 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(73):    typedef T value_type;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(115):    typedef T value_type;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(157):    typedef T value_type;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(199):    typedef T value_type;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(241):    typedef T value_type;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(216): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(217): typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(218): typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
W037 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(314):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(881):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(62):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(212):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(218):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(302):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(74):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(166):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(52):    static ptrdiff_t LinkDiff();
W042 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(146):    typedef uint8_t DigitCount;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(183):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(202):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(226):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(236):    void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(240):    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(411):    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1149):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(494):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(46):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(108):    bool IsTemplateHeader() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(211):    int CalcGroup(const Include& incl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(457):    Numeric(NumericType type, size_t width, bool sign) noexcept :
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(119):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(164):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(168):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(374):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(865):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(285):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(304):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(222):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1016):    bool IsUnboundedArray() const { return array_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1027):    bool IsPureVirtual() const { return GetDecl()->pure_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1047):    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1075):    size_t MinArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1080):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1138):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(163):    bool IsSubscopeOf(const std::string& fqSuper) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(210):    std::string NextOperator() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(67):    CodeDir* FindDir(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(88):    LibrarySet* FindVar(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(69):    bool IsReadOnly() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(172):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(55):    enum StartupResult
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(67):    BaseBot();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(116):    bool send_to_server(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(130):    void request_map();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(155):    void disconnect_from_server(ProtocolError error = GRACEFUL_CLOSE);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(162):    TokenMessage active_powers(bool self = false) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(169):    TokenMessage surviving_powers(bool self = false) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(174):    bool queue_event(BotEvent event, secs_t secs);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(179):    void cancel_event(BotEvent event);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(191):    virtual StartupResult initialise(const StartupParameters& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(196):    virtual void set_title(token_t msg, bool rcvd);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(201):    virtual void send_nme_or_obs();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(206):    virtual void process_ccd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(212):    virtual void process_drw_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(217):    virtual const std::vector< Token >& get_try_tokens() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(222):    virtual void process_frm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(226):    virtual void process_huh_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(230):    virtual void process_lod_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(234):    virtual void process_mis_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(238):    virtual void process_off_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(243):    virtual void process_out_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(247):    virtual void process_prn_message(const Token* message, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(251):    virtual void process_smr_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(255):    virtual void process_sve_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(260):    virtual void process_thx_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(264):    virtual void process_tme_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(268):    virtual void process_adm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(278):    virtual void process_not_tme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(285):    virtual bool get_reconnect_details(Token& power, int& passcode) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(293):    virtual uint8_t reconnection_delay();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(298):    virtual void process_rej_nme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(303):    virtual void process_rej_iam_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(308):    virtual void process_rej_hlo_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(313):    virtual void process_rej_now_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(318):    virtual void process_rej_sco_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(323):    virtual void process_rej_hst_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(328):    virtual void process_rej_sub_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(333):    virtual void process_rej_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(338):    virtual void process_rej_ord_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(343):    virtual void process_rej_tme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(348):    virtual void process_rej_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(353):    virtual void process_rej_snd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(358):    virtual void process_rej_adm_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(363):    virtual void process_rej_mis_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(368):    virtual void process_rej_not_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(373):    virtual void process_rej_not_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(378):    virtual void process_yes_nme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(383):    virtual void process_yes_obs_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(389):    virtual void process_yes_iam_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(394):    virtual void process_yes_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(399):    virtual void process_yes_tme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(404):    virtual void process_yes_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(410):    virtual void process_yes_snd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(415):    virtual void process_yes_not_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(420):    virtual void process_yes_not_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(425):    virtual void process_yes_not_sub_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(431):    virtual void process_unexpected_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(436):    virtual void process_unexpected_rej_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(441):    virtual void process_unexpected_rej_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(446):    virtual void process_unexpected_yes_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(451):    virtual void process_unexpected_yes_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(456):    virtual void process_bm_message(const DipMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(467):    virtual void process_hlo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(472):    virtual void process_map_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(476):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(480):    virtual void process_ord_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(484):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(488):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(492):    virtual void process_slo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(502):    virtual void report_failed_press
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(508):    virtual void report_failed_connect();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(513):    virtual void report_close(ProtocolError error);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(524):    static void report_ccd(const Token& power, bool disorder);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(528):    void report_end(const TokenMessage& message) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(532):    void report_mdf() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(536):    void report_now() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(540):    void report_ords();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(544):    static void report_out(const Token& power);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(548):    void report_sco() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(552):    void report_smr(const TokenMessage& message) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(556):    void report_exit(fixed_string reason);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(566):    MapAndUnits* map_and_units;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(571):    std::set< Token > cd_powers;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(576):    std::set< Token > out_powers;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(580):    std::vector< PowerCentres > centres;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(584):    std::vector< PowerUnits > units;
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(116):    std::string map_name;             // map's name
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(119):    TokenMessage variant;             // rules for this variant
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(120):    ProvinceSet home_centres;         // our home centres
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(121):    bool game_started;                // set when the game has begun
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(126):    UnitOrderMap dislodged_units;     // dislodged units
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(127):    WinterOrderMap winter_orders;     // winter orders
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(128):    WinterOrders our_winter_orders;   // our winter orders
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(129):    UnitOrderMap prev_movements;      // results of previous movement turn
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(130):    UnitOrderMap prev_retreats;       // results of previous retreat turn
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(132):    Token prev_movement_season;       // season for previous movement results
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(136):    bool check_on_submission;    // check orders when submitted (not an AOA game)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(137):    bool check_on_adjudication;  // check orders when adjudicated (AOA game)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(143):    UnitSet our_units;              // our units
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(144):    UnitSet our_dislodged_units;    // our units that must retreat or disband
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(145):    ProvinceSet open_home_centres;  // our home centres available for builds
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(146):    ProvinceSet our_centres;        // the centres that we currently own
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(147):    word our_number_of_disbands;    // disbands required (negative for builds)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(190):    bool set_move_by_convoy_order(ProvinceId unit,
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(211):    bool cancel_build_order(ProvinceId province);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(257):    std::string display_movement_order(const UnitOrder& unit,
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(260):    std::string display_retreat_order(const UnitOrder& unit) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(278):    const LocationSet* get_neighbours(const Location& location) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(328):    TokenMessage encode_unit(const UnitOrder& unit) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(99):    bool is_number() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(127):    size_t set_from(const Token* stream, size_t length);
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(37):    typedef std::map< Token, std::string > TokenToTextMap;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(38):    typedef std::map< std::string, Token > TextToTokenMap;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(52):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(131):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(169):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(188):    Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(192):    void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(68):    bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(81):    bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(65):    c_string Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(80):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(118):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    c_string HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(52):    static const std::string& RscPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(81):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(85):    bool Suppressed() const { return suppressed_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(70):    typedef uint32_t InstanceId;  // identifies an object within a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(71):    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(188):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(56):    static bool NullifyObjectData() { return NullifyObjectData_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(73):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(63):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(67):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(76):    StatisticsGroup* GetGroup(id_t gid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(80):    void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(81):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(132):    c_string strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(125):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(129):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(161):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(238):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(182):    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(90):    static void operator delete(void* addr) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(94):    static void* operator new(size_t size, void* where);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3466):    typedef id_t Test;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(87):    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(55):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(59):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(89):    NodeBase::word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(130):    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(182):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(217):    void Disconnect();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(222):    void Close();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(73):    NodeBase::word SendTo
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(78):    void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(86):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(58):    void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(59):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(132):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(69):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(77):    c_string FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(81):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(97):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(64):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(68):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(112):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(123):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(129):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(157):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(161):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(165):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(96):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(56):    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(64):    static ptrdiff_t CellDiff2();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(328):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(332):    virtual bool SendFailure
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(60):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(112):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(68):    typedef uint8_t Priority;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(251):    bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(533):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(76):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(118):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(122):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(95):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(52):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(156):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(161):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(245):    typedef uint16_t Fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(267):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(278):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(282):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(77):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(158):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(422):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(45):    typedef uint8_t Id;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(57):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(345):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(118):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(79):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(87):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(91):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(736):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(244):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(253):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(285):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(373):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(377):    std::string strLocation() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(382):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1114):    Cxx::ItemType GetUserType() const { return user_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(305):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(309):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(313):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(52):    CodeFile* GetImplFile() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(87):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(92):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(100):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(102):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(158):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(178):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(204):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(253):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(39):    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(48):    typedef uint8_t sel_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(69):    typedef id_t ClassId;         // identifies a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(69):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(48):    ticks_t GetTicks() const { return ticks_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(52):    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(56):    SysThreadId Nid() const { return nid_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(71):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(99):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(269):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(131):    virtual InspectRc InspectMsg(NodeBase::debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(240):    NodeBase::MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(64):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(76):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(85):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(131):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(66):    typedef ServicePortId PortId;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(84):    virtual NodeBase::c_string PortName(PortId pid) const;
W044 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(88): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(89): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(106): typedef const char* c_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(107): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(112): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(113): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(58): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(59): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W047 Data is init-only
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(80):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(171):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp(381):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(60):    bool suppressed;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(60):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(492):    static bool Initialized;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(2262):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable, true);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(148):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(93):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(139):       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(245):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(278):    MutexGuard guard(&ConsoleFileLock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(324):       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
  C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp(308):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(131):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(259):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(467):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(208):    MutexGuard guard(&LogFileLock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2200):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(483):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(677):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(712):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(278):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(470):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(97):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(247):    FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(455):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(62):    static bool Registered;
W048 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(231):    LibraryVarSet* varSet_;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(121):    bool game_started;                // set when the game has begun
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(147):    word our_number_of_disbands;    // disbands required (negative for builds)
W050 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(310):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(313):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(317):    TypeName* name;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(752):    static bool Tracing;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1061):    bool ptrDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1065):    bool refDet_: 1;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(566):    MapAndUnits* map_and_units;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(571):    std::set< Token > cd_powers;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(576):    std::set< Token > out_powers;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(580):    std::vector< PowerCentres > centres;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(584):    std::vector< PowerUnits > units;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(113):    Province game_map[PROVINCE_MAX];  // map details
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(114):    ProvinceId number_of_provinces;   // number of provinces on map
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(115):    PowerId number_of_powers;         // number of powers at outset
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(116):    std::string map_name;             // map's name
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(117):    Token our_power;                  // power that we are playing
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(118):    int passcode;                     // our passcode
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(119):    TokenMessage variant;             // rules for this variant
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(120):    ProvinceSet home_centres;         // our home centres
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(121):    bool game_started;                // set when the game has begun
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(122):    bool game_over;                   // set when the game has ended
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(123):    Token curr_season;                // current season of play
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(124):    int curr_year;                    // current year of play
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(125):    UnitOrderMap units;               // non-dislodged units
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(126):    UnitOrderMap dislodged_units;     // dislodged units
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(127):    WinterOrderMap winter_orders;     // winter orders
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(128):    WinterOrders our_winter_orders;   // our winter orders
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(129):    UnitOrderMap prev_movements;      // results of previous movement turn
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(130):    UnitOrderMap prev_retreats;       // results of previous retreat turn
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(131):    WinterOrderMap prev_adjustments;  // results of previous adjustment turn
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(132):    Token prev_movement_season;       // season for previous movement results
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(136):    bool check_on_submission;    // check orders when submitted (not an AOA game)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(137):    bool check_on_adjudication;  // check orders when adjudicated (AOA game)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(143):    UnitSet our_units;              // our units
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(144):    UnitSet our_dislodged_units;    // our units that must retreat or disband
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(145):    ProvinceSet open_home_centres;  // our home centres available for builds
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(146):    ProvinceSet our_centres;        // the centres that we currently own
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(147):    word our_number_of_disbands;    // disbands required (negative for builds)
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(187):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(191):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(96):    std::atomic_size_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(100):    std::atomic_size_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(104):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(108):    size_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(136):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(91):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(96):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(100):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(104):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(108):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(113):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(117):    NodeBase::ticks_t ticks0_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(121):    NodeBase::byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(490):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(494):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(529):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(533):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(537):    const EventHandler::Rc rc_;
W053 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(169):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(338):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(354):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(186):    Warning warning;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(194):    size_t line;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(198):    size_t pos;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(206):    word offset;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(210):    std::string info;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(214):    bool hide;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(220):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(112):       BotEvent event;       // event
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(144):    DipHeader header;  // no parameters (length = 0)
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(139):    RegCell aid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(93):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(97):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(117):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(106):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(177):    RegCell lid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h(138):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(140):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(126):    uint8_t severity_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(130):    Flags attrs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(134):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(120):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(102):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(53):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(58):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(65):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static ticks_t PrevToCurrTicks;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(109):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(84):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1231):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1743):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(195):    NodeBase::Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(150):    NodeBase::RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(97):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(59):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(313):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(337):    NodeBase::Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(134):    NodeBase::Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(127):    NodeBase::RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(153):    static NodeBase::word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(372):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(134):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(146):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(187):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(149):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(161):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(165):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(194):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(198):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(145):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W054 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(190):    const CodeFile* file;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(202):    const CxxNamed* item;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(220):    PotsProfile* profile_;
W055 Data need not be mutable
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(113):       mutable secs_t secs;  // delay
W056 Default constructor invoked: POD members not initialized
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(765):    FixOptions options;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(491): struct FixOptions
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(44):    LARGE_INTEGER frequency;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(75):       LARGE_INTEGER now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(81):       _timeb now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(41):    _timeb timebuff;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    tm timeofday;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(54):    in_addr result;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(50):    addrinfo hints;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(109):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(69):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(267):    WSAData wsaData;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(43):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(84):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(148):    sockaddr_in host;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(256):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(69):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(101):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(168):    struct SignalEntry
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(232):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(224):    struct MessageEntry
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(361):    MessageEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(198):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(321):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(341):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(402):    ParmIterator locpit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(313):    struct ParmIterator
W057 Default constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(182):    std::unique_ptr< pollfd[] > list(new pollfd[size]);
W060 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(251):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, std::string* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(c_string help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(39):    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(c_string help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(41):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(55):    LogsAction();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(74):    explicit LogsCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(90):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(103):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(119):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(133):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(149):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(162):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(192):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(208):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(220):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(236):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(254):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(136):    explicit Counter(const std::string& expl, size_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(54):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(44):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(56):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(98):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(110):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(124):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(139):    TestcaseAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(160):    explicit TestcaseCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(50):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(54):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(39):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(54):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(68):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(81):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(95):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(108):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(124):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(138):    NwStatusCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(40):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(44):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(49):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(53):    SysIpL2Addr(const SysIpL2Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(40):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(45):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(51):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(64):    SysIpL3Addr(const SysIpL3Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(40):    PbSizesCommand() = default;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(269):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(273):    PotsMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(466):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(511):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(50):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(54):    TlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(40):    StSizesCommand() = default;
W062 Member not included in member initialization list
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(40):    FileWalker(const char* dirName, const char* fileSpec);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(57):    _finddata_t attributes_;
W065 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(188):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(87):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(107):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(85):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(70):    virtual ~Exception() noexcept;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(151):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(215):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(110):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(280):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(97):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(137):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(183):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(114):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(81):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(188):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(124):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(215):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(96):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(121):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(176):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(135):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(143):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(183):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(167):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(112):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(94):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(102):    virtual ~Trigger();
W075 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1074):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1210):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(475):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(511):    void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(128):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(135):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(276):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(284):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(289):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(306):    virtual Class* GetClassTemplate() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(321):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(438):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(463):    Class* DirectClass() const override { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(884):    CxxScoped* FindItem(const std::string& name) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(116):    void SetScope(CxxScope* scope) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(245):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(251):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(285):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(420):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(424):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(433):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(474):    void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(64):    bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(76):    bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(92):    bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(108):    bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(128):    bool Display(ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(125):    virtual void SetLoc(CodeFile* file, size_t pos);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(138):    virtual void CopyContext(const CxxNamed* that);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(156):    virtual size_t GetRange(size_t& begin, size_t& end) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(161):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(169):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(174):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(184):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(189):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(197):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(203):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(209):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(215):    virtual void GetScopedNames(stringVector& names, bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(222):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(228):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(233):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(237):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(244):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(248):    virtual NodeBase::id_t GetDeclFid() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(253):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(262):    virtual CxxNamed* GetMate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(275):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(285):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(291):    virtual CxxScoped* DirectType() const { return Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(295):    virtual void FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(301):    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(305):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(310):    virtual bool Instantiate() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(314):    virtual CxxScope* GetTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(323):    virtual CxxScoped* FindTemplateAnalog(const CxxNamed* item) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(330):    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(335):    virtual StackArg MemberToArg
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(348):    virtual void GetDirectClasses(CxxUsageSets& symbols) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(355):    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(368):    virtual std::string XrefName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(685):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(906):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(910):    bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1110):    virtual void SetUserType(Cxx::ItemType user);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1122):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1132):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1136):    virtual TypeTags* Tags() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1137):    virtual const TypeTags* Tags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1141):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1147):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1153):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1158):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1162):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1166):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1170):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1175):    virtual TypeTags GetAllTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1180):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1185):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1189):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1195):    virtual void SetPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1200):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1204):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1208):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1219):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1225):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1230):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1234):    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1240):    virtual void Instantiating() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1244):    virtual void GetNames(stringVector& names) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1249):    virtual bool NamesReferToArgs(const NameVector& names,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(78):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(83):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(91):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(336):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(341):    virtual bool IsUnionMember() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1172):    void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1176):    void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1325):    void WasCalled() override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(59):    virtual bool NameRefersToItem(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(69):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(78):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(96):    virtual void AddFiles(SetOfIds& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(100):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(106):    virtual bool CheckIfUnused(Warning warning) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(181):    void SetAccess(Cxx::Access access) override { access_ = access; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(185):    void SetScope(CxxScope* scope) override { scope_ = scope; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(492):    void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(889):    bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1291):    bool ResolveTypedef(Typedef* type, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(95):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(101):    virtual const std::string* Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(105):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(110):    virtual std::string TypeString(bool arg) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(115):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(119):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(123):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(127):    virtual bool IsConstPtr(size_t n) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(132):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(137):    virtual bool IsIndirect() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(141):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(146):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(151):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(156):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(161):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(167):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(172):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(176):    virtual void GetConvertibleTypes(StackArgVector& types) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(181):    virtual CxxScoped* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(187):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(192):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(198):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(202):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(207):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(219):    virtual bool WasWritten(const StackArg* arg, bool passed);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(224):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(229):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(235):    virtual void RecordUsage() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(240):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(245):    virtual bool LocateItem(const CxxNamed* item, size_t& n)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(251):    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(256):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(260):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(264):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(269):    virtual void Print
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(275):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(500):    virtual void PushBack(uint32_t c) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(77):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(83):    virtual NodeBase::word Check(std::ostream* stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(89):    virtual NodeBase::word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(95):    virtual NodeBase::word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(101):    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(107):    virtual NodeBase::word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(113):    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(121):    virtual NodeBase::word Parse
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(128):    virtual NodeBase::word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(135):    virtual NodeBase::word Show(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(141):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Assign(LibrarySet* rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* Union(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(164):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(165):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(166):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(167):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(168):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(91):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(97):    virtual std::string report_command_line_parameters();
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(69):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(73):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(97):    virtual void GetSubtended(Base* objects[], size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(114):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(132):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(140):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(148):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(69):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(66):    virtual void EventOccurred(Event evt);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(76):    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(71):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(76):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(135):    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(143):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(153):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(163):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(173):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(183):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(211):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(221):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(231):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(50):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(116):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(62):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(105):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(110):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(174):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(65):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(69):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(75):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(47):    virtual void GetName(std::string& fileName) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(51):    virtual bool IsSubdir() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(55):    virtual bool AtEnd() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(60):    virtual bool Advance() = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(186):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(210):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(61):    virtual c_string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(65):    virtual c_string Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(71):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(80):    virtual bool Display(std::ostream& stream, bool diff);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(98):    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(106):    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(125):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(134):    virtual NodeBase::byte_t* HostToNetwork
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(140):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(114):    virtual size_t PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(133):    virtual bool AddBytes
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(100):    virtual SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(139):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(57):    virtual NodeBase::c_string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(61):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(66):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(70):    virtual NodeBase::Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(74):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(78):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(91):    virtual bool HasSharedSocket() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(99):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(77):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(91):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(117):    virtual AllocRc SetService(const IpService* service, bool shared);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(121):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(174):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(178):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(45):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(50):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(92):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(60):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(98):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(102):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(106):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(110):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(112):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(123):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(129):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(115):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(125):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(131):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(138):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(144):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(151):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(161):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(183):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(91):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(131):    virtual InspectRc InspectMsg(NodeBase::debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(151):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(156):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(164):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(171):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(175):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(232):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(236):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(261):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(265):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(96):    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(105):    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(134):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(147):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(79):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(111):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(52):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(56):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(93):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(102):    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(112):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(43):    bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(84):    virtual NodeBase::c_string PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(114):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(67):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(73):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(79):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(100):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(107):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(121):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(127):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(89):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(42):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(48):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(142):    virtual EventHandler::Rc ApplyTreatment
W077 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(475):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(91):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(97):    virtual std::string report_command_line_parameters();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(191):    virtual StartupResult initialise(const StartupParameters& parameters);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(196):    virtual void set_title(token_t msg, bool rcvd);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(201):    virtual void send_nme_or_obs();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(206):    virtual void process_ccd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(212):    virtual void process_drw_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(217):    virtual const std::vector< Token >& get_try_tokens() const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(222):    virtual void process_frm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(226):    virtual void process_huh_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(230):    virtual void process_lod_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(234):    virtual void process_mis_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(238):    virtual void process_off_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(243):    virtual void process_out_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(247):    virtual void process_prn_message(const Token* message, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(251):    virtual void process_smr_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(255):    virtual void process_sve_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(260):    virtual void process_thx_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(264):    virtual void process_tme_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(268):    virtual void process_adm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(278):    virtual void process_not_tme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(285):    virtual bool get_reconnect_details(Token& power, int& passcode) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(293):    virtual uint8_t reconnection_delay();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(298):    virtual void process_rej_nme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(303):    virtual void process_rej_iam_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(308):    virtual void process_rej_hlo_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(313):    virtual void process_rej_now_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(318):    virtual void process_rej_sco_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(323):    virtual void process_rej_hst_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(328):    virtual void process_rej_sub_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(333):    virtual void process_rej_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(338):    virtual void process_rej_ord_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(343):    virtual void process_rej_tme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(348):    virtual void process_rej_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(353):    virtual void process_rej_snd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(358):    virtual void process_rej_adm_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(363):    virtual void process_rej_mis_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(368):    virtual void process_rej_not_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(373):    virtual void process_rej_not_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(378):    virtual void process_yes_nme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(383):    virtual void process_yes_obs_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(389):    virtual void process_yes_iam_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(394):    virtual void process_yes_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(399):    virtual void process_yes_tme_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(404):    virtual void process_yes_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(410):    virtual void process_yes_snd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(415):    virtual void process_yes_not_gof_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(420):    virtual void process_yes_not_drw_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(425):    virtual void process_yes_not_sub_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(431):    virtual void process_unexpected_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(436):    virtual void process_unexpected_rej_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(441):    virtual void process_unexpected_rej_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(446):    virtual void process_unexpected_yes_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(451):    virtual void process_unexpected_yes_not_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(456):    virtual void process_bm_message(const DipMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(467):    virtual void process_hlo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(472):    virtual void process_map_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(476):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(480):    virtual void process_ord_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(484):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(488):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(492):    virtual void process_slo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(502):    virtual void report_failed_press
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(508):    virtual void report_failed_connect();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(513):    virtual void report_close(ProtocolError error);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(115):    virtual std::string GetInput() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(76):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(116):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(105):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(110):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(210):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(292):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(298):    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(139):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(74):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(78):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(174):    virtual void Acquire();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(178):    virtual void Release();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(183):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(91):    virtual void DisplayStats
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(151):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(156):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(164):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(171):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(175):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(232):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(236):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(265):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(315):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(328):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(332):    virtual bool SendFailure
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(341):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(241):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(296):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(301):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(307):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(313):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(258):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    virtual void AddFence();
W082 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1214):    BcFactory(Id fid, ProtocolId prid, c_string name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(363):    void LogCode(Warning warning, size_t line, size_t pos,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(298):    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(560): bool LinesCanBeMerged
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(97):    CodeWarning(Warning warning, const CodeFile* file,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(271):    TypeMatch CalcMatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(326):    TypeMatch MatchWith(const StackArg& that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(597):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(834):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1219):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(336):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1407):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1214):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(41): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(113):    size_t CompareScopes
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(151):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(649):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(419):    word InsertNamespaceForward(const Iter& iter,
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(447):    static void DebugFtCode
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(218):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(400):    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(62):    NodeBase::word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(487):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(533):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion(SetOfIds& lhs, const SetOfIds& rhs1, const SetOfIds& rhs2);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(502):    virtual void report_failed_press
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(190):    bool set_move_by_convoy_order(ProvinceId unit,
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(399):    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h(59):    Alarm(const std::string& name, const std::string& expl, secs_t delay);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(51):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(55):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(c_string key, c_string def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(95):    CfgParm(c_string key, c_string def, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, std::string* field, c_string expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(104):    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(59):    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(98):    CliIncrement(c_string name, c_string help, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(238):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(244):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(91):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(217):    void Report1
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void SwLog(fn_name_arg func, debug64_t errval,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(64):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(100):    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(123): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(235):    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(240):    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(104):    PosixSignal(signal_t value, c_string name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(57):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(107):    bool FindFiles(const char* dirName,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(110):    static SysThread_t Create(const ThreadEntry entry,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(77):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(72):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(561):    void DisplaySummary
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(88):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(219):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(50):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(46):    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(106):    static NodeBase::word Poll
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(109):    PotsFeature(PotsFeature::Id fid, bool deactivation,
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(132):    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(168):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(51):    GlobalAddress
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(91):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(172):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(482):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(128):    NodeBase::TraceRc SelectSignal
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(182):       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(178):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(56):    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(113):    template< class T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(75):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(351):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(334/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(423/1):    bool GetFuncSpecial(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(436/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(455/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(488/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(555/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(556/1):    bool GetChar(ExprPtr& expr, Cxx::Encoding code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(557/1):    bool GetStr(ExprPtr& expr, Cxx::Encoding code);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(567/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(568/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(575/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(579/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(588/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(589/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(590/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(591/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(592/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(593/1):    bool GetNoExcept(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(594/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(595/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(596/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(87/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(108/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(130/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(165/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(322/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(144/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(275/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(111/4):       const Thread* client, size_t stackSize, SysThreadId& nid);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(135/1):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(292/1):    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(161/1):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(105/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203/1):    virtual void DeleteParm(TlvParmLayout& parm);
W090 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1165):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(126):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(127):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(128):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(129):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(130):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(131):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(132):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(133):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(134):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(135):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(136):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(141):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(149):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(150):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(151):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(152):    void EraseLocal(const CxxScoped* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(156):    void EraseLocals();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(160):    void RecordUsage(const CxxNamed* item, NodeBase::id_t fid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(192):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(72):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(206):    virtual void process_ccd_message
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(212):    virtual void process_drw_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(243):    virtual void process_out_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(251):    virtual void process_smr_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(268):    virtual void process_adm_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(467):    virtual void process_hlo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(472):    virtual void process_map_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(476):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(484):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(488):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(492):    virtual void process_slo_message(const TokenMessage& message);
  C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(98):    void AddMainArg(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(118):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(144):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(110):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(60):    bool Validate(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(146):    DelayRc Delay(msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(152):    bool Interrupt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(117):    bool Interrupt(const Flags& mask = Flags());
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(509):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(517):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(529):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h(112):    void AssociateIds(const Thread& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(116):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(82):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(82):    void Reset();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(177):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(146):    virtual IpPort* CreatePort(ipport_t pid) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(82):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(57):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(158):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(161):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(152):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(156):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(180):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(188):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(109):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(113):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(224):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(228):    void SetPriority(MsgPriority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(232):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(236):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(358):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(184):    virtual Message* UnwrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(191):    virtual Message* WrapMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(118):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(186):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(235):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(246):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
W091 Function could be static
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(97):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(265):    T* allocate(size_t n) const
W092 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(165):    static c_string strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(87):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(101):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(117):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(121):    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(112):    static NodeBase::word Report
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(274):    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(118):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(56):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(186):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(600):    static size_t CreateCodeError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(337):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(628):    static void Enter(const CxxScoped* owner);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(661):    static void WasCalled(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(669):    static void SetPos(const CxxLocation& loc);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(703):    static void Trace(CxxTrace::Action act);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(704):    static void Trace(CxxTrace::Action act, const CxxToken* token);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(705):    static void Trace(CxxTrace::Action act, const StackArg& arg);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(706):    static void Trace(CxxTrace::Action act, const CodeFile& file);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(707):    static void Trace(CxxTrace::Action act, NodeBase::word err,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(748):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(790):    static bool StartTracing();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(806):    static std::string Location();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1407):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1420):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h(87):    static DataPtr CreateRef()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(321):    static void ShrinkExpression(const ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(638):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(406):    string DemangleInclude(string code) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(461):    static bool IsSorted2(const string& line1, const string& line2);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(57):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(62):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(192):    static NodeBase::word Counted(std::string& result, const size_t* count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(197):    static NodeBase::word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(487):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(675):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(75):    static BaseBot* instance();
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(101):    static void send_to_console(std::ostringstream& report);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(179):    void cancel_event(BotEvent event);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(524):    static void report_ccd(const Token& power, bool disorder);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(544):    static void report_out(const Token& power);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(556):    void report_exit(fixed_string reason);
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(716):    static bool send_buff(DipIpBuffer& buff);
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(157):    static MapAndUnits* instance();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(162):    static MapAndUnits* create_clone();
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(166):    static void delete_clone(MapAndUnits*& clone);
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(260):    std::string display_retreat_order(const UnitOrder& unit) const;
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(42):    static TokenTextMap* instance();
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(65):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(79):    template< typename U > DynAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(105):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(121):    template< typename U > ImmAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(139):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(147):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(163):    template< typename U > PermAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(181):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(189):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(205):    template< typename U > ProtAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(223):    T* allocate(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(231):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(247):    template< typename U > TempAllocator
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(273):    void deallocate(T* const addr, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(82):    static const std::string& ValidKeyChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(87):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(92):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(136):    static Rc Exhausted(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(64):    static void DescendTo(CliCookie& cookie, uint32_t index);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(323):    static Rc Mismatch(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(48):    static void Spool(c_string s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(99):    static void Assert(bool condition, debug32_t errval = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(104):    static void Progress(const std::string& s, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(108):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(148):    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(52):    static const std::string& RscPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(57):    static const std::string& HelpPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(63):    static const std::string& InputPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(68):    static const std::string& OutputPath();
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(72):    static const std::string& ConsoleFileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(46):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(59):    static void Spool(const std::string& name, ostringstreamPtr& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(64):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(73):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(115):    static Log* Find(fixed_string groupName, LogId id, LogGroup*& group);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(120):    static Log* Find(fixed_string log);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h(66):    static void CopyToConsole(const ostringstreamPtr& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(151):    static size_t Size();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(48):    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(52):    static size_t Words(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Copy(void* dest, const void* source, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(60):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(78):    static void* Realloc(void* addr, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(87):    static MemoryType Type(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(95):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(99):    static SysHeap* EnsureHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(103):    static SysHeap* AccessHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static c_string TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(87):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(914):    static word DisplayHelp(const CliThread& cli, const string& key);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2397):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(262):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(84):    static void Initiate(reinit_t reason, debug32_t errval);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(58):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(63):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(92):    static void DisplayHeaps(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(41):    static void CreateNativeSignals();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(52):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(117):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(121):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(126):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(130):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(89):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(154):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(89):    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(105):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(219):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(223):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(227):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(439):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(90):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(88):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(219):    word Sort(const string& input, const string& output, string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3488):    static void UseBadPointer();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3489):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(168):    static size_t BuffSize(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(65):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(81):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(140):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(204):    static void SetStatus(bool ok, const std::string& err);
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(119):    static void Kill(const std::string& errstr, NodeBase::debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(54):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(70):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(84):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(92):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(192):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(204):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(60):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(185):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(152):    static NodeBase::c_string ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(241):    static std::string OutputId(const std::string& label, NodeBase::id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(482):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(76):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(63):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(86):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(225):    static size_t Pad(size_t size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(77):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(456):    static EventHandler::Rc SendFacilityNack(PotsMuxPsm* npsm, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(136):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(52):    static StTestData* Access(CliThread& cli);
W097 Line indentation is not a multiple of the standard value
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(229):     const string& line2, size_t begin2, size_t end2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(562):     const std::string& line2, size_t begin2, size_t end2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(458):                     ((move == nullptr) || move->IsDeleted()));
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(188):        tagpos = loc.iter->code.find(tag, tagpos + 1))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(263):        loc.pos != string::npos;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(264):        loc = FindWord(loc.iter, loc.pos + 1, *defnName, &range))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(964):        tag.pos != string::npos;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(965):        tag = FindWord(tag.iter, tag.pos + 1, CONST_STR))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1134):        next->code, 0, next->code.size() - 1)) return false;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1300):        arg = FindWord(arg.iter, arg.pos + 1, VOID_STR))
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2967):           loc = FindWord(loc.iter, loc.pos, name))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(113):           a != orders.adjustments.end(); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(424):           a != orders.adjustments.end(); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(740):        a != attacks.upper_bound(to_prov); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(954):                     (client.order_type_copy != MOVE_BY_CONVOY_ORDER))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1008):              f != subverted_army.convoyers.end(); ++f)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1526):        a != attacks.upper_bound(province); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(1690):                  (attacker.order_type_copy != MOVE_BY_CONVOY_ORDER))
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2048):        b != balanced_head_to_heads.end(); ++b)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2145):                 f != subverting_army.convoyers.end(); ++f)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2148):                    a != attacks.upper_bound(*f); ++a)
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(2202):        u != unbalanced_head_to_heads.end(); ++u)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(127):              (our_winter_orders.number_of_waives != 0));
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(240):           o != our_winter_orders.adjustments.end(); ++o)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(928):           b != r->second.adjustments.end(); ++b)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1060):           o != orders.adjustments.end(); ++o, ++count)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1431):                       loc != n->second.end(); ++loc)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2129):               winter->number_of_waives >= winter->number_of_orders_required)
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2151):               game_map[build_loc.province].home_powers.end())
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2158):               game_map[build_loc.province].neighbours.end())
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2197):               winter->number_of_waives >= winter->number_of_orders_required)
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(393):              that.length_ * sizeof(Token));
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(437):              that.length_ * sizeof(Token));
W099 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(67):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(70):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(122):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(163):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(193):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(196):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(480):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(481):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(483):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(512):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(513):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(515):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(516):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(858):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(859):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(860):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(861):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(863):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(864):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(988):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(989):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(990):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(992):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(993):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(379):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(380):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(381):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(382):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(384):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(163):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(164):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(165):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(166):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(167):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(168):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(169):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(170):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(171):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(172):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(173):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(174):    CxxWord("DP",  "-",    "-",  F),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(175):    CxxWord("-",   "-",    "-",  F),  // FINAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(176):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(177):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(178):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(179):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(180):    CxxWord("P",   "P",    "-",  F),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(181):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(182):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(183):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(184):    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(185):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(186):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(187):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(188):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(189):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(190):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(191):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(192):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(193):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(194):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(195):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(196):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(197):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(198):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(199):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(200):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(222):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(223):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(224):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(225):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(226):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(227):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(228):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(229):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(230):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(231):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(232):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(234):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(235):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(236):    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F),  // NOEXCEPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(237):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(238):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(239):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(240):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(241):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(242):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(243):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(244):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(245):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(246):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(247):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(248):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(249):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(250):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(251):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(252):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(253):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(254):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(255):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(256):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(257):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(258):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(259):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(260):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(261):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(262):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(263):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(264):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(265):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(266):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(267):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(268):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(269):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(270):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(271):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(272):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(273):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(274):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(275):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(276):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(277):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(278):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(279):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(280):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(281):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(282):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(283):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(284):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(285):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(286):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(287):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(288):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(102):    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(249):    inline static fn_name Array_ctor()     { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(250):    inline static fn_name Array_dtor()     { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(251):    inline static fn_name Array_Init()     { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(252):    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(254):    inline static fn_name Array_Erase()    { return "Array.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(255):    inline static fn_name Array_Replace()  { return "Array.Replace"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(256):    inline static fn_name Array_Extend()   { return "Array.Extend"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(215): typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(216): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(99):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(100):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(101):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(102):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(383):    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(384):    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(385):    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(386):    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(392):    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(357):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(358):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(359):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(360):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(361):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(362):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(623):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(624):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(628):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(127):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(39): fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(265):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(266):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(267):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(271):    AccumulatorPtr   totUsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(176):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(177):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(179):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(181):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(184):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(187):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(55):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(56):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(60):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(61):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(581):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(582):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(584):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(644):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(645):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(647):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(648):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(750):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(752):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(777):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(778):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(779):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(871):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(872):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(874):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(875):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(959):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(960):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(962):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(963):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(964):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(965):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(49):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(50):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(53):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(56):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(67):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(68):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(69):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(42):    LocalAddress   txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(43):    LocalAddress   rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(44):    MsgPriority    priority : 2;   // message's priority
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    bool           initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(46):    bool           final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool           join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool           self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool           injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool           kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    Message::Route route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    ProtocolId     protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    SignalId       signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    uint16_t       length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(138):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(140):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(249):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(250):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(252):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(317):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(318):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(319):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(321):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(362):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(363):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(364):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(365):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(367):    CauseInfo*    cci;
W102 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(299):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2238):       (lpar.iter->code.find_first_not_of(WhitespaceChars, lpar.pos + 1) == rpar))
W103 Function not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(81): char BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(112): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(132): LogType GetLogType(LogId id)
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp(68): ostream& operator<<(ostream& stream, TraceStatus status)
W104 File heading is not standard
  C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.cpp(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h(7): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.cpp(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h(5): //  Copyright (C) 2019  Greg Utas
  C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Province.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Province.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h(5): //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
W106 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1373): void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(122): CliParm* CauseParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(108): CliParm* ProgressParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(376): CliText* CipIamSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(390): CliText* CipCpgSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(404): CliText* CipAnmSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(418): CliText* CipRelSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(458): CliParm* CipRouteParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(562): CliParm* CipCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(586): CliParm* CipCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(612): CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(638): CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(169): Digit DigitString::GetDigit(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1737): int8_t CodeFile::GetDepth(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1782): void CodeFile::GetLineCounts() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1798): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1961): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1969): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1977): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1986): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1994): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2002): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2010): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2056): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2064): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2072): void CodeFile::InsertUsing(Using* use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(227): bool LinesCanBeMerged
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(178): word CodeWarning::FindWarning(const CodeWarning& log)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(779): bool CodeWarning::IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(798): bool CodeWarning::IsSortedByType
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(817): bool CodeWarning::IsSortedToFix
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(376): void Class::AddItem(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1264): Class* Class::GetClassTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1296): Cxx::Access Class::GetCurrAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1395): size_t Class::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1410): CxxScope* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1802): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2611): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(46): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(149): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(839): CxxScope* MacroName::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(233): const Parser* Context::GetParser()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(296): void Context::OnLine(size_t line, bool executing)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(310): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(317): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(410): void Context::SetPos(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(425): void Context::SetPos(const CxxLocation& loc)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(520): void Context::Trace(CxxTrace::Action act)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(528): void Context::Trace(CxxTrace::Action act, const StackArg& arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(536): void Context::Trace(CxxTrace::Action act, word err, const string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(544): void Context::Trace(CxxTrace::Action act, const CodeFile& file)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(552): void Context::Trace(CxxTrace::Action act, const CxxToken* token)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(751): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(938): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1983): bool Tracepoint::operator<(const Tracepoint& that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(72): size_t CxxLocation::GetPos() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(79): void CxxLocation::SetLoc(CodeFile* file, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(212): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(221): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(230): id_t CxxNamed::GetDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(265): size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(274): void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(281): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(290): CxxScope* CxxNamed::GetTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(299): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(654): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(999): TypeTags DataSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1077): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1202): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2007): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2201): TypeName* QualName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2281): TypeName* QualName::Last() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2505): size_t QualName::Size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2790): CxxScoped* TypeName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2869): TypeName* TypeName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3059): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3574): int TypeTags::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3582): bool TypeTags::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(112): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(248): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(256): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(296): bool Block::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(868): id_t CxxScope::GetDistinctDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1226): CodeFile* Data::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1233): const Data* Data::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1242): CodeFile* Data::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1289): TypeName* Data::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1445): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1577): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3628): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3665): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3676): Cxx::Access Function::GetAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3684): CodeFile* Function::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3691): const Function* Function::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3700): CodeFile* Function::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3709): size_t Function::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3725): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3737): CxxScope* Function::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3749): CxxScope* Function::GetTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3757): TemplateType Function::GetTemplateType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4312): bool Function::IsImplemented() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5153): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5167): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5174): void FuncSpec::Check() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5181): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5203): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5222): void FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5230): TypeTags FuncSpec::GetAllTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5237): void FuncSpec::GetNames(stringVector& names) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5245): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5252): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5259): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5266): void FuncSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5274): bool FuncSpec::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5281): bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5289): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5297): TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5307): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5322): bool FuncSpec::NamesReferToArgs(const NameVector& names,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5338): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5345): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5352): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5359): void FuncSpec::SetPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5366): void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5381): const TypeTags* FuncSpec::Tags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(5388): TypeTags* FuncSpec::Tags()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(342): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(443): void CxxScoped::AddFiles(SetOfIds& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(591): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(600): size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(615): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(624): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(633): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(642): bool CxxScoped::IsConstPtr(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(651): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(659): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(672): bool CxxScoped::IsIndirect() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1087): TypeSpec* Enum::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1370): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1567): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1856): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1865): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1874): CxxScoped* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2397): TypeName* Typedef::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(302): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(393): bool Do::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(629): bool For::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(762): bool If::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(1248): bool While::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(100): template< typename T > void Erase(const CxxScoped* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(198): template< typename T > void ListSymbols(const string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(309): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(316): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(323): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(330): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(337): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(344): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(351): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(380): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(387): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(394): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(401): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(750): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(757): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(764): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(771): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(778): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(785): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(792): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(826): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(833): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(840): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(847): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(896): void CxxSymbols::RecordUsage(const CxxNamed* item, id_t fid)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(241): bool CxxToken::IsPointer(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(337): void EraseTemplateArgs
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(371): void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(381): void CxxUsageSets::AddBase(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(389): void CxxUsageSets::AddDirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(397): void CxxUsageSets::AddForward(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(408): void CxxUsageSets::AddIndirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(416): void CxxUsageSets::AddInherit(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(424): void CxxUsageSets::AddUser(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(833): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(894): Numeric IntLiteral::BaseNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1037): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1062): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1078): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(80): bool IsBlank(char c)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(87): bool IsWordChar(char c)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2097): LineType Editor::GetLineType(const Iter& iter) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2773): bool Editor::IsSorted1(const SourceLine& line1, const SourceLine& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2780): bool Editor::IsSorted2(const string& line1, const string& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(2911): void Editor::PushBack(const string& code)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(134): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(142): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(58): IndentRule ClassifyIndent(string& id)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(804): void Lexer::GetDepth(size_t line, int8_t& depth, bool& cont) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1047): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1071): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1150): bool Lexer::GetNthLine(size_t n, string& s) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2039): void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(103): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(76): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(83): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(90): LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(108): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(155): LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(162): LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(169): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(188): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(195): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(202): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(231): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(250): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(257): LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(264): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(271): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(298): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(305): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(312): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(321): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(347): LibrarySet* LibrarySet::OpError() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(452): LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(459): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(466): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(257): size_t Parser::CurrPos() const
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(456): BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(463): BaseBot* BaseBot::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(29): void ConvoySubversion::clear()  // <b>
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp(37): void ConvoySubversion::decrement()
  C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp(448): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.cpp(48): bool Location::operator<(const Location& that) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(272): bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(290): bool MapAndUnits::can_move_to_province
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(586): TokenMessage MapAndUnits::encode_location(const Location& location) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(864): TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1197): const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(1446): MapAndUnits* MapAndUnits::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2547): Token MapAndUnits::province_token(ProvinceId province) const
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp(2677): bool MapAndUnits::set_move_by_single_step_convoy_order
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(32): Token::Token(const category_t cat, const subtoken_t sub)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(40): int Token::get_number() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(49): bool Token::is_number() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(56): bool Token::is_power() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(63): bool Token::is_province() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(70): Token& Token::operator=(const Token& that)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(126): Token::SeasonType Token::order_season() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(137): PowerId Token::power_id() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(145): ProvinceId Token::province_id() const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(268): Token power_token(PowerId power)
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(281): Token province_token(ProvinceId province)
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(125): Token TokenMessage::at(size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(137): void TokenMessage::clear()
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(267): Token TokenMessage::front() const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(352): Token TokenMessage::operator[](size_t index) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp(477): bool TokenMessage::operator<(const TokenMessage& that) const
  C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp(333): TokenTextMap* TokenTextMap::instance()
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp(37): size_t WinterOrders::get_number_of_results() const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(107): CliParm* MediaParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(258): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(89): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(79): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(130): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(158): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(52): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(70): bool CfgFlagParm::GetCurrValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(72): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(276): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(66): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(79): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(136): uint32_t CliCookie::Index(uint32_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(425): CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(48): void Debug::Assert(bool condition, debug32_t errval)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(141): void Debug::Reset()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(40): int FunctionName::compare(fn_name_arg func, c_string str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(47): size_t FunctionName::find(fn_name_arg func, c_string str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(55): size_t FunctionName::rfind(fn_name_arg func, c_string str)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::ImmediateTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(57): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(68): bool InitFlags::TraceWork()
  C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp(513): void LogBuffer::UpdateMax()
  C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.cpp(193): LogGroup* LogGroupRegistry::Group(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(154): size_t SegmentHeader::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(171): SysHeap* Memory::AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(189): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(257): SysHeap* Memory::EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(311): const SysHeap* Memory::Heap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(405): size_t Memory::Words(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(152): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(74): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(119): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(172): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(81): char BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(112): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(71): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(82): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(109): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(289): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(456): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(741): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(786): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(793): bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(805): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(812): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(819): ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(838): Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(911): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(920): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(929): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(291): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(48): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(128): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(133): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(138): Flags PS_Exit()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(143): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(148): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(153): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(158): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(163): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(168): Flags PS_NoRecover()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(57): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(90): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(102): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(40): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(38): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(50): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(125): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(114): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(259): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(337): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(125): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(33): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(40): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(99): bool FileWalker::AtEnd() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(106): void FileWalker::GetName(string& fileName) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(115): bool FileWalker::IsSubdir() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(48): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(269): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(296): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(122): DWORD64 StackInfo::GetFrame(fn_depth depth)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(138): fn_depth StackInfo::GetFrames()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(146): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(155): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(267): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(71): ticks_t SysTickTimer::TicksNow() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(180): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(190): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(206): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(214): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(244): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(264): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(31): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(30): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(37): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(44): void ThisThread::IncludeInTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(51): void ThisThread::MakePreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(58): void ThisThread::MakeUnpreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(65): void ThisThread::MemProtect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(72): void ThisThread::MemUnprotect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(79): DelayRc ThisThread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(86): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(93): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(100): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(107): TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(114): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(439): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1150): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1529): main_t Thread::EnterThread(void* arg)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1733): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1830): bool Thread::HasExited() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1893): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1900): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1967): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2092): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2120): DelayRc Thread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2160): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2521): bool Thread::RunningLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2672): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2944): TraceRc Thread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2980): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3043): void Thread::Trace(Thread* thr, fn_name_arg func, TraceRecordId rid, word info)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3059): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3094): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(289): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(386): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(494): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(210): ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(219): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(117): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(111): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(139): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(153): void* TraceBuffer::AddRecord(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(354): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(385): bool TraceBuffer::IsLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(394): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(414): void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(475): void TraceBuffer::PurgeRecords(size_t end)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(543): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(747): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(97): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(47): int FunctionStats::Compare(const FunctionStats& that) const
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(65): void FunctionStats::IncrCalls(usecs_t net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1346): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1380): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1409): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1866): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1900): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1929): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2430): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2461): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp(154): TestDatabase::State TestDatabase::GetState(const string& testcase)
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(206): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(208): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(286): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(79): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(138): void SysSocket::SetStatus(bool ok, const string& err)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(162): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(170): bool SysSocket::Trace(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(181): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(40): uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(42): uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(44): uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(46): uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(48): uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(50): uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(489): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(97): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(82): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(79): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(97): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(79): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(516): void PotsCircuit::Trace(const SignalEntry& entry)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(76): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(69): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(84): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(113): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(351): CliText* PotsAlertingSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(365): CliText* PotsDigitsSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(379): CliText* PotsFacilitySignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(393): CliText* PotsFlashSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(407): CliText* PotsLockoutSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(421): CliText* PotsOffhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(435): CliText* PotsOnhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(449): CliText* PotsProgressSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(463): CliText* PotsReleaseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(477): CliText* PotsSuperviseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(516): CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(558): CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(728): CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(849): CliParm* PotsRingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(937): CliParm* PotsScanParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(74): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(85): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(96): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(92): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(88): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(350): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(986): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(996): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(139): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(215): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(222): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(153): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(90): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(714): void InvokerPool::RecordDelay(MsgPriority prio, msecs_t delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(818): size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(826): msecs_t InvokerPool::WorkQMaxDelay(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(834): size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(180): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(113): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(245): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(334): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(369): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(426): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(199): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(134): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(147): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(160): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(172): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(184): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(197): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(80): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(406): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(374): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(80): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(315): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(130): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(165): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(248): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(256): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(62): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(384): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(120): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(203): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(76): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(88): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(56): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1947):    Debug::ft(Tracepoint_OnLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(105):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(150):    Debug::ft(CinThread_GetLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(75):    Debug::ft(Debug_GenerateSwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(43):    Debug::ft(Exception_ctor1);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(38):    Debug::ft(MutexGuard_ctor);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(51):       Debug::ft(MutexGuard_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ft(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp(107):    Debug::ft(SysMutex_Acquire);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(57):    Debug::ft(NodeBase_SE_Handler);  //@
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1653):    Debug::ft(Thread_ExitIfSafe);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2466):    Debug::ft(Thread_ResumeLocked);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2644):    Debug::ft(Thread_SignalHandler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2716):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3228):       Debug::ft(Thread_Unlock);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3562):       Debug::ft(RecoveryTestThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3644):       Debug::ft(RecoveryTestThread_LoopForever);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(732):    Debug::ft(Context_ProcessWork);
W110 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(44): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(221): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(337): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(85): class CxxSymbols: public NodeBase::Base
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(44): class Interpreter : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(79): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(92): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(37): class FileWalker : public FileList
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(259): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(352): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(607): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(51): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(62): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1093): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2852): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h(41): class TestDatabase : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(49): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(47): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(43): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(60): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(74): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(192): class TimerPool : public NodeBase::ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(113): class SbTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(55): class PotsCallIpService : public UdpIpService
W111 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(38): class StatusCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(59): class LogsCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(94): class SetCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(123): class IncludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(153): class ExcludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(182): class QueryCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(212): class SaveCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(240): class ClearCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(36): class PermanentHeap : public SysHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(352): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(607): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(740): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(43): class NwClearCommand : public NodeBase::ClearCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(72): class NwExcludeCommand : public NodeBase::ExcludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(99): class NwIncludeCommand : public NodeBase::IncludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(119): class NwQueryCommand : public NodeBase::QueryCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(135): class NwStatusCommand : public NodeBase::StatusCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public NodeBase::Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(48): class EventHandler : public NodeBase::Protected
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(40): class SbAnalyzeMessage : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(54): class SbAnalyzeSap : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(68): class SbAnalyzeSnp : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(82): class SbForceTransition : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(96): class SbInitiationReq : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
W114 Function could be tagged noexcept
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(173):       FuncInfo(const std::string& file, uint32_t hash) :
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(175):       explicit FuncInfo(uint32_t hash) : hash(hash) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(294):    SymbolView();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(298):    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(554):    LineTypeAttr(bool code, bool exe, bool merge, bool blank);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(236):    DataInitAttrs(const Data* m, bool n, size_t o) :
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(118):    StackArg(const StackArg& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(122):    StackArg& operator=(const StackArg& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(542):    Tracepoint(const CodeFile* file, size_t line, Action act);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(748):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(74):    CxxLocation();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(78):    CxxLocation(const CxxLocation& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(82):    CxxLocation& operator=(const CxxLocation& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(968):    TypeTags(const TypeTags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(972):    TypeTags& operator=(const TypeTags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(46):       NameAndPtrs(): ptrs(0) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(56):    CxxUsageSets() = default;  // create empty CxxNamedSets
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(407):       Tags(Radix r, bool u, Size s) : radix_(r), unsigned_(u), size_(s) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(408):       Tags(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(409):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(449):       Tags(bool e, Size s) : exp_(e), size_(s) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(450):       Tags(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(451):       Tags& operator=(const Tags& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(49):    ~Lexer() = default;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(418):       explicit LineInfo(size_t start) :
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h(60):    FileLevel(NodeBase::id_t f, size_t l) : fid(f), level(l) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h(674):       SentPressInfo() : resend_partial(false), is_broadcast(false) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h(115):       Wakeup(BotEvent e, secs_t s) : event(e), secs(s) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.h(49):    ConvoySubversion();  // sets members to default values
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(49):    Location();
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(53):    Location(ProvinceId p, const Token& c);
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(58):    Location(const TokenMessage& where, const Token& unit_type);
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(63):    Location(const TokenMessage& unit);
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(67):    Location(const Location& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/dip/Location.h(71):    Location& operator=(const Location& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(62):    explicit PowerCentres(const Token& power) : power(power) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(72):    UnitLocation(const Token& unit, const Location& loc) :
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(83):    explicit PowerUnits(const Token& power) : power(power) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(93):    explicit PowerOrders(const Token& power) : power(power) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h(345):    ~MapAndUnits() = default;
  C:/Users/gregu/Documents/rsc/rsc/dip/Province.h(48):    Province();
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(40):    Token() : full_(INVALID_TOKEN) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(44):    Token(token_t token) : full_(token) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(52):    Token(const Token& that) : full_(that.full_) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(56):    ~Token() = default;
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.h(179):       split_t() : sub_(INVALID_TOKEN & 0xff), cat_(INVALID_TOKEN >> 8) { }
  C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.h(99):    UnitOrder();
  C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h(48):    WinterOrders();
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(75):    DynAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(77):    ~DynAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(117):    ImmAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(119):    ~ImmAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(159):    PermAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(161):    ~PermAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(201):    ProtAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(203):    ~ProtAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(243):    TempAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(245):    ~TempAllocator() = default;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(48):    Q1Link();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(57):    Q1Way() : diff_(NilDiff) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(48):    Q2Link();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(55):    Q2Way() : diff_(NilDiff) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.h(50):    RegCell();
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(42):    SingletonTuple(const Base** a, MemoryType t) : addr(a), type(t) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(309):    ContextSwitch();
  C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h(141):       TestInfo(State state, uint32_t hash) : state(state), hash(hash) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(104):       PeerFilter();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(105):       PeerFilter(const SysIpL3Addr& a, NodeBase::TraceStatus s);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(115):       PortFilter();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(116):       PortFilter(ipport_t p, NodeBase::TraceStatus s);
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(46):    LocalAddress();
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(50):    LocalAddress(const LocalAddress& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(54):    LocalAddress& operator=(const LocalAddress& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(181):       SignalFilter();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(182):       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
W115 Function should not be tagged noexcept
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(85):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(91):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(127):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(133):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(169):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(175):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(211):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(217):    template<typename U > bool operator!=
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(253):    template< typename U > bool operator==
  C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h(259):    template<typename U > bool operator!=
W117 Line can merge with the next line and be under the length limit
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(49):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(53):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(55):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(57):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(66):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(74):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(76):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(85):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(95):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(97):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(106):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(116):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(118):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(127):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(129):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(137):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(139):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(148):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(156):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(158):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(167):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(171):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(177):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(179):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(181):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(183):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(187):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(191):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(193):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(204):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(208):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(210):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(212):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(216):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(218):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(239):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(241):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(250):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(254):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(258):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(262):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(264):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(273):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(277):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(281):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(283):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(285):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(289):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(293):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(295):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(306):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(310):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(312):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(314):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(316):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(318):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(330):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(334):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(338):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(340):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(342):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(344):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(357):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(361):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(363):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(365):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(367):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(380):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(386):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(388):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(390):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(392):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(419):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(421):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(425):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(427):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(242):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(277): const SymbolView NotAccessible
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(281): const SymbolView DeclaredLocally
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(399):       WarningAttrs(T, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(402):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(405):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(408):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(411):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(414):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(417):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(420):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(423):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(426):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(429):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(432):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(435):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(438):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(441):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(444):       WarningAttrs(T, U,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(447):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(450):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(453):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(456):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(459):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(462):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(465):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(468):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(471):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(474):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(477):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(480):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(483):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(486):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(489):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(492):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(495):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(498):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(501):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(504):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(510):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(513):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(516):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(519):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(522):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(525):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(528):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(531):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(534):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(537):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(540):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(543):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(546):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(549):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(552):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(555):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(558):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(561):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(564):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(570):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(573):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(576):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(579):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(582):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(585):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(591):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(594):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(597):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(603):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(606):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(609):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(612):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(615):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(618):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(621):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(624):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(627):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(630):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(636):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(639):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(642):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(645):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(648):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(651):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(654):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(657):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(660):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(663):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(666):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(669):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(672):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(675):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(681):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(687):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(693):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(696):       WarningAttrs(T, E,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(699):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(702):       WarningAttrs(T, D,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(705):       WarningAttrs(F, S,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(708):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(711):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(714):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(717):       WarningAttrs(T, C,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(723):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(729):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(732):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(735):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(738):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(741):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(744):       WarningAttrs(T, I,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(747):       WarningAttrs(T, R,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(756):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(762):       WarningAttrs(F, X,
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1140):          (Keywords->lower_bound(name) == Keywords->cend()))
  C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp(1858):          (press->message == contents))
  C:/Users/gregu/Documents/rsc/rsc/nb/CliStack.h(65):    const CliCommand* FindCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2927): fixed_string PoolsHeader1 =
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(469): fixed_string SwitchFooter =
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(606):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(622):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(626):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(628):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(630):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(634):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(642):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(644):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(442):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(483):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(485):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(499):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(663):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(679):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(379):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(391):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(393):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(760):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(764):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(766):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(778):    BindMsgAnalyzer
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(782):    BindEventHandler
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(784):    BindEventHandler
W118 Copy/move constructor does not invoke base copy/move constructor
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(307):    CxxToken(const CxxToken& that) = default;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.cpp(47): SysIpL2Addr::SysIpL2Addr(const SysIpL2Addr& that) : v4Addr_(that.v4Addr_)
W119 Argument passed by value is modified
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(48/1): DigitString::DigitString(Address::DN dn) : size_(0)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(229/5):     const string& line2, size_t begin2, size_t end2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1762/3):    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(332/2):    (Warning warning, const CxxNamed* item, word offset, bool hide) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2007/1): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2657/1): void Using::SetScope(CxxScope* scope)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(234/2): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(256/2): size_t FindTemplateEnd(const string& name, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(723/5):    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1324/3): Editor::CodeLocation Editor::Find(Iter iter, const string& str, size_t off)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1375/2):    (Iter iter, size_t off, const string& chars)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1589/2): Editor::CodeLocation Editor::FindNonBlank(Iter iter, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(1670/2):    (Iter iter, size_t pos, const string& id, size_t* range)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(3256/2): Editor::CodeLocation Editor::RfindNonBlank(Iter iter, size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(475/1): LibExprErr Interpreter::ApplyOperator(bool operand)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(590/1): LibrarySet* Interpreter::Error(LibExprErr err) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(356/3): size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(592/1): size_t Lexer::FindLineEnd(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(921/2): size_t Lexer::GetHexNum(int64_t& num, size_t max)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(947/1): bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1813/1): size_t Lexer::NextPos(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2091/1): size_t Lexer::SkipCharLiteral(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2111/1): size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(2146/1): size_t Lexer::SkipTemplateSpec(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(963/2): bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2283/1): size_t Parser::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(4042/2): void Parser::Log(Warning warning, size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp(155/1): bool Token::set_number(int number)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(130/1): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp(158/3):    const string& expl, std::streamsize p) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.cpp(41/2): CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.cpp(144/2): void CliTextParm::Explain(ostream& stream, col_t indent) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(780/2):    (const string& expl, size_t begin, size_t end, col_t indent) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(456/1): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(472/1): Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(498/1): bool ObjectPool::Corrupt(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(170/1): DelayRc SysThread::Delay(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(105/1): void SysTime::AddDays(size_t days)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(140/1): void SysTime::AddMsecs(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(404/1): void SysTime::SubDays(size_t days)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(439/1): void SysTime::SubMsecs(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1776/1): bool Thread::HandleSignal(signal_t sig, uint32_t code)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2120/1): DelayRc Thread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3043/1): void Thread::Trace(Thread* thr, fn_name_arg func, TraceRecordId rid, word info)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(335/1): TraceRc TraceBuffer::DisplayTrace(ostream* stream, bool diff)
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(152/2):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(152/3):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp(259/1): SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(120/1): bool SysTcpSocket::Listen(size_t backlog)
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(726/1): void Context::ProcessWork(InvokerThread* inv)
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(622/1): bool Message::Retrieve(ProtocolSM* psm)
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(697/1): bool Message::Send(Route route)
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(341/1):    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(404/1): EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(848/2):    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(916/2):    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(77/1): Timer::QId TimerRegistry::CalcQId(secs_t secs) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(246/2): TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(114/3):       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1080/1):    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
W120 Function returns non-const reference or pointer to member data
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(998):    DigitString& DialedDigits() { return dialed_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(82):    Registry< CliParm >& Parms() { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(159):    CliCookie& Cookie() { return cookie_; }
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h
  W005 Functional cast
    51:    ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    34: using namespace SessionBase;
    35: using namespace MediaBase;
    36: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    64:    CliText* CreateText() const override;
  W110 Override of Base.Display not found
    44: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    142:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    155:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    177:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    187:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    72:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    73:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    70:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    500:    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
    1067:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  W006 reinterpret_cast
    488:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W053 Data could be const
    169:    Q1Link link_;
  W092 Function could be free
    165:    static c_string strState(State state);
  W106 Function does not invoke Debug::ft
    1373: void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  W110 Override of Base.Display not found
    221: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace CallBase;
  W092 Function could be free
    87:    static void DisplayStateCounts
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    114:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    165:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W032 Unused function
    214:    Digit GetDigit(DigitCount i) const;
  W042 Member could be private
    146:    typedef uint8_t DigitCount;
    176:    static bool IsValidDigit(Digit d)
    183:    Rc AddDigit(Digit d);
    202:    DigitCount Size() const;
    226:    bool operator==(const DigitString& that) const;
  W043 Member could be protected
    125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W092 Function could be free
    101:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    117:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    121:    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
    125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    176:    static bool IsValidDigit(Digit d)
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    133:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    122: CliParm* CauseParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    41:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    43:    auto& bcssm = static_cast< BcSsm& >(ssm);
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    67:    auto          sid = msg->GetSignal();
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    70:    CauseInfo*    cci;
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    122:    auto       sid = msg->GetSignal();
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    163:    auto       sid = msg->GetSignal();
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    193:    auto          sid = msg->GetSignal();
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    196:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    119:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    108: CliParm* ProgressParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp
  W006 reinterpret_cast
    468:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    483:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    513:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    825:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    859:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    989:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1387:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1392:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    480:    id_t        idx;
    481:    word        fid, rid;
    483:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    512:    TestRc       rc;
    513:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    515:    id_t         idx;
    516:    word         fid, rid;
    858:    auto          state = GetState();
    859:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    860:    auto          sig = tmsg.GetSignal();
    861:    TimeoutInfo*  toi = nullptr;
    863:    auto          err = true;
    864:    debug64_t     error;
    988:    auto          state = GetState();
    989:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    990:    auto          sig = msg.GetSignal();
    992:    auto          err = true;
    993:    debug64_t     error;
  W106 Function does not invoke Debug::ft
    376: CliText* CipIamSignal::CreateText() const
    390: CliText* CipCpgSignal::CreateText() const
    404: CliText* CipAnmSignal::CreateText() const
    418: CliText* CipRelSignal::CreateText() const
    458: CliParm* CipRouteParameter::CreateCliParm(Usage use) const
    562: CliParm* CipCallingParameter::CreateCliParm(Usage use) const
    586: CliParm* CipCalledParameter::CreateCliParm(Usage use) const
    612: CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
    638: CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h
  W005 Functional cast
    305:    ipport_t Port() const override { return ipport_t(port_); }
    344:    ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    50: using namespace NodeBase;
    51: using namespace NetworkBase;
    52: using namespace SessionBase;
    53: using namespace MediaBase;
  W027 Unused class
    298: class CipUdpService : public UdpIpService
  W032 Unused function
    182:    MediaInfo* AddMedia(const MediaInfo& media);
    249:    void InjectFinalMsg() override;
    318:    CliText* CreateText() const override;
    363:    CliText* CreateText() const override;
  W042 Member could be private
    236:    void EnsureMediaMsg() override;
    240:    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    411:    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W110 Override of Base.Display not found
    298: class CipUdpService : public UdpIpService
    337: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h
  W020 Using statement in header
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h
  W020 Using statement in header
    53: using namespace MediaBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W037 Member hides inherited name
    314:    static const Id NextId = FirstId + 50;
    881:    static const Id NextId                 = FirstUn + 7;
  W042 Member could be private
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1149:    CipPsm* AllocNPsm();
  W043 Member could be protected
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W053 Data could be const
    338:    Progress::Ind progress_;
    354:    Cause::Ind cause_;
  W075 Virtual function is public
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1074:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1210:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W077 Virtual function has no overrides
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  W082 Adjacent arguments have the same type
    1214:    BcFactory(Id fid, ProtocolId prid, c_string name);
  W090 Function could be const
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1165:    CipMessage* BuildCipRel(Cause::Ind cause);
  W120 Function returns non-const reference or pointer to member data
    998:    DigitString& DialedDigits() { return dialed_; }
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    404:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    919:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W102 Line length exceeds the standard maximum
    299:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    49:    BindMsgAnalyzer
    53:    BindEventHandler
    55:    BindEventHandler
    57:    BindEventHandler
    66:    BindMsgAnalyzer
    74:    BindEventHandler
    76:    BindEventHandler
    85:    BindMsgAnalyzer
    95:    BindEventHandler
    97:    BindEventHandler
    106:    BindMsgAnalyzer
    116:    BindEventHandler
    118:    BindEventHandler
    127:    BindMsgAnalyzer
    129:    BindEventHandler
    137:    BindEventHandler
    139:    BindEventHandler
    148:    BindMsgAnalyzer
    156:    BindEventHandler
    158:    BindEventHandler
    167:    BindMsgAnalyzer
    171:    BindEventHandler
    177:    BindEventHandler
    179:    BindEventHandler
    181:    BindEventHandler
    183:    BindEventHandler
    187:    BindEventHandler
    191:    BindEventHandler
    193:    BindEventHandler
    204:    BindMsgAnalyzer
    208:    BindEventHandler
    210:    BindEventHandler
    212:    BindEventHandler
    216:    BindEventHandler
    218:    BindEventHandler
    239:    BindEventHandler
    241:    BindEventHandler
    250:    BindMsgAnalyzer
    254:    BindEventHandler
    258:    BindEventHandler
    262:    BindEventHandler
    264:    BindEventHandler
    273:    BindMsgAnalyzer
    277:    BindEventHandler
    281:    BindEventHandler
    283:    BindEventHandler
    285:    BindEventHandler
    289:    BindEventHandler
    293:    BindEventHandler
    295:    BindEventHandler
    306:    BindMsgAnalyzer
    310:    BindEventHandler
    312:    BindEventHandler
    314:    BindEventHandler
    316:    BindEventHandler
    318:    BindEventHandler
    330:    BindMsgAnalyzer
    334:    BindEventHandler
    338:    BindEventHandler
    340:    BindEventHandler
    342:    BindEventHandler
    344:    BindEventHandler
    357:    BindMsgAnalyzer
    361:    BindEventHandler
    363:    BindEventHandler
    365:    BindEventHandler
    367:    BindEventHandler
    380:    BindMsgAnalyzer
    386:    BindEventHandler
    388:    BindEventHandler
    390:    BindEventHandler
    392:    BindEventHandler
    419:    BindMsgAnalyzer
    421:    BindEventHandler
    425:    BindEventHandler
    427:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    139:       auto rc = AddDigit(Digit(ds.digits_[i]));
    171:    if(i < Size()) return Digit(digits_[i]);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    169: Digit DigitString::GetDigit(DigitCount i) const
  W119 Argument passed by value is modified
    48/1: DigitString::DigitString(Address::DN dn) : size_(0)
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    379:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    380:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    382:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    415:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    424:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    452:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    453:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    568:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    726:          return static_cast< ProxyBcPsm* >(p);
    762:          ppsm = static_cast< ProxyBcPsm* >(psm);
    988:    auto& tmsg = static_cast< const CipMessage& >(msg);
    993:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    379:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    380:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    381:    auto          sid = msg->GetSignal();
    382:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    384:    CauseInfo*    cci;
  W117 Line can merge with the next line and be under the length limit
    242:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W022 Add using statement
    1: namespace MediaBase
    1: namespace SessionBase
  W027 Unused class
    191: class ProxyBcDisconnecting : public BcDisconnecting
  W028 Unused data
    62:    static const ServicePortId NextPortId = FirstPortId + 1;
    218:    static const Id NextId        = FirstId + 4;
    302:    static const Id NextId              = FirstId + 7;
    387:    static const Id NextId          = FirstId + 3;
  W032 Unused function
    194:    explicit ProxyBcDisconnecting(ServiceId sid);
  W037 Member hides inherited name
    62:    static const ServicePortId NextPortId = FirstPortId + 1;
    212:    static const Id FirstId = BcEvent::NextId;
    218:    static const Id NextId        = FirstId + 4;
    302:    static const Id NextId              = FirstId + 7;
  W042 Member could be private
    494:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    471:    virtual EventHandler::Rc RaiseReleaseUser
    473:    virtual EventHandler::Rc RaiseProxyProgress
    475:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    476:    virtual EventHandler::Rc RaiseProxyRelease
    511:    void SetUPsm(MediaPsm& psm) override;
  W077 Virtual function has no overrides
    471:    virtual EventHandler::Rc RaiseReleaseUser
    473:    virtual EventHandler::Rc RaiseProxyProgress
    475:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    476:    virtual EventHandler::Rc RaiseProxyRelease
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
  W042 Member could be private
    46:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.cpp
  W047 Data is init-only
    80:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    171:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    381:    FunctionGuard guard(FunctionGuard::MakePreemptable);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h
  W032 Unused function
    163:    static std::string Demangle(const std::string& s);
  W092 Function could be free
    112:    static NodeBase::word Report
  W110 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
  W114 Function could be tagged noexcept
    173:       FuncInfo(const std::string& file, uint32_t hash) :
    175:       explicit FuncInfo(uint32_t hash) : hash(hash) { }
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const CodeDir* >(&local);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp
  W006 reinterpret_cast
    585:    auto fake = reinterpret_cast< const CodeFile* >(&local);
  W007 Cast down the inheritance hierarchy
    85:          auto base = static_cast< const Class* >(*b);
    218:       auto base = static_cast< const Class* >(*b);
    250:                auto type = static_cast< const Typedef* >(*item2);
    273:          auto type = static_cast< const Typedef* >(*item1);
    521:    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
    2446:    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
    2584:       auto base = static_cast< const Class* >(*b);
  W106 Function does not invoke Debug::ft
    1737: int8_t CodeFile::GetDepth(size_t line) const
    1782: void CodeFile::GetLineCounts() const
    1798: LineType CodeFile::GetLineType(size_t n) const
    1961: void CodeFile::InsertClass(Class* cls)
    1969: void CodeFile::InsertData(Data* data)
    1977: bool CodeFile::InsertDirective(DirectivePtr& dir)
    1986: void CodeFile::InsertEnum(Enum* item)
    1994: void CodeFile::InsertForw(Forward* forw)
    2002: void CodeFile::InsertFunc(Function* func)
    2010: void CodeFile::InsertInclude(IncludePtr& incl)
    2056: void CodeFile::InsertMacro(Macro* macro)
    2064: void CodeFile::InsertType(Typedef* type)
    2072: void CodeFile::InsertUsing(Using* use)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h
  W026 Unused argument
    347/3:       const CxxNamed* item, const CxxScope* scope) const;
  W042 Member could be private
    108:    bool IsTemplateHeader() const;
    211:    int CalcGroup(const Include& incl) const;
  W082 Adjacent arguments have the same type
    363:    void LogCode(Warning warning, size_t line, size_t pos,
  W092 Function could be free
    274:    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    588:    LibrarySet* nbSet = (LibrarySet*) this;
    620:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    81:    auto curr = static_cast< CodeFileSet* >(Users(true));
    93:       curr = static_cast< CodeFileSet* >(prev->Users(true));
    113:    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
    125:       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
    155:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    156:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    455:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
    487:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    488:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    599:       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
    631:       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
    666:    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  W008 Cast removes const qualification
    588:    LibrarySet* nbSet = (LibrarySet*) this;
    620:    LibrarySet* nsSet = (LibrarySet*) this;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp
  W005 Functional cast
    1507:       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
    1521:    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  W043 Member could be protected
    118:    static LibrarySet* Evaluate(const CliThread& cli);
  W056 Default constructor invoked: POD members not initialized
    765:    FixOptions options;
  W092 Function could be free
    118:    static LibrarySet* Evaluate(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp
  W007 Cast down the inheritance hierarchy
    64:    auto that = static_cast< CodeSet* >(rhs);
    100:    auto that = static_cast< const CodeSet* >(rhs);
    137:    auto that = static_cast< const CodeSet* >(rhs);
    151:    auto that = static_cast< const CodeSet* >(rhs);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp
  W097 Line indentation is not a multiple of the standard value
    229:     const string& line2, size_t begin2, size_t end2)
  W106 Function does not invoke Debug::ft
    227: bool LinesCanBeMerged
  W117 Line can merge with the next line and be under the length limit
    277: const SymbolView NotAccessible
    281: const SymbolView DeclaredLocally
  W119 Argument passed by value is modified
    229/5:     const string& line2, size_t begin2, size_t end2)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h
  W028 Unused data
    170: extern const std::string SingleRule;
    584: extern const NodeBase::Flags NoLF_Mask;
    585: extern const NodeBase::Flags Last_Mask;
    589: extern const NodeBase::Flags Stats_Mask;
  W056 Default constructor invoked: POD members not initialized
    491: struct FixOptions
  W082 Adjacent arguments have the same type
    298:    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
    560: bool LinesCanBeMerged
  W097 Line indentation is not a multiple of the standard value
    562:     const std::string& line2, size_t begin2, size_t end2);
  W114 Function could be tagged noexcept
    294:    SymbolView();
    298:    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
    554:    LineTypeAttr(bool code, bool exe, bool merge, bool blank);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp
  W005 Functional cast
    263:          << spaces(3) << LineType(t) << CRLF;
    274:          *stream << setw(6) << WarningCode(Warning(w)) << setw(6)
    275:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  W007 Cast down the inheritance hierarchy
    874:       if(static_cast< const Function* >(item)->IsVirtual())
  W106 Function does not invoke Debug::ft
    178: word CodeWarning::FindWarning(const CodeWarning& log)
    779: bool CodeWarning::IsSortedByFile
    798: bool CodeWarning::IsSortedByType
    817: bool CodeWarning::IsSortedToFix
  W117 Line can merge with the next line and be under the length limit
    399:       WarningAttrs(T, X,
    402:       WarningAttrs(T, R,
    405:       WarningAttrs(T, R,
    408:       WarningAttrs(T, R,
    411:       WarningAttrs(F, X,
    414:       WarningAttrs(F, X,
    417:       WarningAttrs(F, X,
    420:       WarningAttrs(F, X,
    423:       WarningAttrs(F, X,
    426:       WarningAttrs(F, X,
    429:       WarningAttrs(T, E,
    432:       WarningAttrs(T, E,
    435:       WarningAttrs(F, X,
    438:       WarningAttrs(F, X,
    441:       WarningAttrs(T, C,
    444:       WarningAttrs(T, U,
    447:       WarningAttrs(T, D,
    450:       WarningAttrs(T, C,
    453:       WarningAttrs(T, D,
    456:       WarningAttrs(T, E,
    459:       WarningAttrs(T, I,
    462:       WarningAttrs(T, D,
    465:       WarningAttrs(T, C,
    468:       WarningAttrs(T, D,
    471:       WarningAttrs(T, C,
    474:       WarningAttrs(T, D,
    477:       WarningAttrs(F, X,
    480:       WarningAttrs(F, X,
    483:       WarningAttrs(F, X,
    486:       WarningAttrs(T, D,
    489:       WarningAttrs(T, D,
    492:       WarningAttrs(T, D,
    495:       WarningAttrs(F, X,
    498:       WarningAttrs(T, D,
    501:       WarningAttrs(T, D,
    504:       WarningAttrs(T, D,
    510:       WarningAttrs(F, X,
    513:       WarningAttrs(F, X,
    516:       WarningAttrs(T, R,
    519:       WarningAttrs(T, R,
    522:       WarningAttrs(T, D,
    525:       WarningAttrs(F, X,
    528:       WarningAttrs(F, X,
    531:       WarningAttrs(F, X,
    534:       WarningAttrs(F, X,
    537:       WarningAttrs(F, X,
    540:       WarningAttrs(F, X,
    543:       WarningAttrs(F, X,
    546:       WarningAttrs(F, X,
    549:       WarningAttrs(F, X,
    552:       WarningAttrs(F, X,
    555:       WarningAttrs(F, X,
    558:       WarningAttrs(T, I,
    561:       WarningAttrs(T, I,
    564:       WarningAttrs(T, E,
    570:       WarningAttrs(T, C,
    573:       WarningAttrs(T, C,
    576:       WarningAttrs(T, C,
    579:       WarningAttrs(F, X,
    582:       WarningAttrs(T, I,
    585:       WarningAttrs(F, X,
    591:       WarningAttrs(T, C,
    594:       WarningAttrs(F, X,
    597:       WarningAttrs(F, X,
    603:       WarningAttrs(F, X,
    606:       WarningAttrs(F, X,
    609:       WarningAttrs(T, C,
    612:       WarningAttrs(T, C,
    615:       WarningAttrs(F, X,
    618:       WarningAttrs(T, D,
    621:       WarningAttrs(F, X,
    624:       WarningAttrs(F, X,
    627:       WarningAttrs(F, X,
    630:       WarningAttrs(F, X,
    636:       WarningAttrs(T, I,
    639:       WarningAttrs(T, E,
    642:       WarningAttrs(F, X,
    645:       WarningAttrs(F, X,
    648:       WarningAttrs(T, R,
    651:       WarningAttrs(T, R,
    654:       WarningAttrs(F, X,
    657:       WarningAttrs(F, X,
    660:       WarningAttrs(T, I,
    663:       WarningAttrs(T, I,
    666:       WarningAttrs(F, X,
    669:       WarningAttrs(T, I,
    672:       WarningAttrs(T, I,
    675:       WarningAttrs(F, X,
    681:       WarningAttrs(F, X,
    687:       WarningAttrs(T, R,
    693:       WarningAttrs(T, E,
    696:       WarningAttrs(T, E,
    699:       WarningAttrs(T, C,
    702:       WarningAttrs(T, D,
    705:       WarningAttrs(F, S,
    708:       WarningAttrs(F, X,
    711:       WarningAttrs(F, X,
    714:       WarningAttrs(T, R,
    717:       WarningAttrs(T, C,
    723:       WarningAttrs(T, R,
    729:       WarningAttrs(F, X,
    732:       WarningAttrs(F, X,
    735:       WarningAttrs(T, R,
    738:       WarningAttrs(T, R,
    741:       WarningAttrs(T, I,
    744:       WarningAttrs(T, I,
    747:       WarningAttrs(T, R,
    756:       WarningAttrs(F, X,
    762:       WarningAttrs(F, X,
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h
  W020 Using statement in header
    37: using NodeBase::fixed_string;
    38: using NodeBase::SPACE;
    39: using NodeBase::word;
  W032 Unused function
    126:    bool operator!=(const CodeWarning& that) const;
  W047 Data is init-only
    60:    bool suppressed;
  W053 Data could be const
    186:    Warning warning;
    194:    size_t line;
    198:    size_t pos;
    206:    word offset;
    210:    std::string info;
    214:    bool hide;
  W054 Data could be const pointer
    190:    const CodeFile* file;
    202:    const CxxNamed* item;
  W082 Adjacent arguments have the same type
    97:    CodeWarning(Warning warning, const CodeFile* file,
C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h
  W047 Data is init-only
    60:    static bool Registered;
  W092 Function could be free
    56:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    328:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    380:          oper = Cxx::Operator(i);
    431:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    437:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    442:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W099 Line contains adjacent spaces
    163:    CxxWord("-",   "-",    "D",  F),  // AUTO
    164:    CxxWord("-",   "-",    "b",  T),  // BREAK
    165:    CxxWord("-",   "-",    "c",  T),  // CASE
    166:    CxxWord("C",   "C",    "-",  T),  // CLASS
    167:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    168:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    169:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    170:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    171:    CxxWord("-",   "-",    "d",  T),  // DO
    172:    CxxWord("E",   "E",    "E",  T),  // ENUM
    173:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    174:    CxxWord("DP",  "-",    "-",  F),  // EXTERN
    175:    CxxWord("-",   "-",    "-",  F),  // FINAL
    176:    CxxWord("-",   "-",    "f",  T),  // FOR
    177:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    178:    CxxWord("H",   "H",    "H",  F),  // HASH
    179:    CxxWord("-",   "-",    "i",  T),  // IF
    180:    CxxWord("P",   "P",    "-",  F),  // INLINE
    181:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    182:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    183:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    184:    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
    185:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    186:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    187:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    188:    CxxWord("-",   "-",    "r",  T),  // RETURN
    189:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    190:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    191:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    192:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    193:    CxxWord("-",   "-",    "t",  T),  // TRY
    194:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    195:    CxxWord("C",   "C",    "-",  T),  // UNION
    196:    CxxWord("U",   "U",    "U",  T),  // USING
    197:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    198:    CxxWord("-",   "-",    "w",  T),  // WHILE
    199:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    200:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    222:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    223:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    224:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    225:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    226:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    227:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    228:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    229:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    230:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    231:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    232:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    234:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    235:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    236:    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F),  // NOEXCEPT
    237:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    238:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    239:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    240:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    241:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    242:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    243:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    244:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    245:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    246:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    247:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    248:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    249:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    250:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    251:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    252:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    253:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    254:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    255:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    256:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    257:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    258:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    259:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    260:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    261:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    262:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    263:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    264:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    265:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    266:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    267:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    268:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    269:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    270:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    271:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    272:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    273:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    274:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    275:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    276:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    277:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    278:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    279:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    280:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    281:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    282:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    283:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    284:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    285:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    286:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    287:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    288:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h
  W042 Member could be private
    457:    Numeric(NumericType type, size_t width, bool sign) noexcept :
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    211:          static_cast< const Function* >(item)->IsInline())
    1015:    auto area = static_cast< CxxArea* >(GetScope());
    1018:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1035:          auto c = static_cast< Class* >(*s);
    2052:       auto func = static_cast< const Function* >(item);
    2096:       auto func = static_cast< const Function* >(item);
    2106:       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  W008 Cast removes const qualification
    1267:    return const_cast< Class* >(this);
    1413:    return static_cast< CxxScope* >(const_cast< Class* >(this));
    2048:       return const_cast< ClassInst* >(this);
  W106 Function does not invoke Debug::ft
    376: void Class::AddItem(CxxNamed* item)
    1264: Class* Class::GetClassTemplate() const
    1296: Cxx::Access Class::GetCurrAccess() const
    1395: size_t Class::GetRange(size_t& begin, size_t& end) const
    1410: CxxScope* Class::GetTemplate() const
    1802: Class* Class::OuterClass() const
    2611: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  W119 Argument passed by value is modified
    1762/3:    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    447:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    785:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  W007 Cast down the inheritance hierarchy
    860:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    144:       override { return const_cast< CxxArea* >(this); }
    447:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    483:       override { return const_cast< Class* >(this); }
    785:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
    897:       override { return const_cast< Namespace* >(this); }
  W032 Unused function
    532:    bool IsImplemented() const override;
  W042 Member could be private
    119:    Typedef* FindType(const std::string& name) const;
    164:    Enum* FindEnum(const std::string& name) const;
    168:    Enumerator* FindEnumerator(const std::string& name) const;
    374:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    865:    Namespace* FindNamespace(const std::string& name) const;
  W043 Member could be protected
    79:    const ClassPtrVector* Classes() const { return &classes_; }
    87:    const EnumPtrVector* Enums() const { return &enums_; }
    91:    const ForwardPtrVector* Forws() const { return &forws_; }
  W060 Base class constructor is public
    251:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W075 Virtual function is public
    128:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    135:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    276:    virtual ClassInst* EnsureInstance(const TypeName* type);
    284:    virtual Class* BaseClass()
    289:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    306:    virtual Class* GetClassTemplate() const;
    321:    virtual bool DerivesFrom(const Class* cls) const;
    438:    bool AddAnonymousUnion(const ClassPtr& cls) override;
    463:    Class* DirectClass() const override { return GetClass(); }
    884:    CxxScoped* FindItem(const std::string& name) const override;
  W092 Function could be free
    186:    static Function* FoundFunc
    600:    static size_t CreateCodeError
  W114 Function could be tagged noexcept
    236:    DataInitAttrs(const Data* m, bool n, size_t o) :
C:/Users/gregu/Documents/rsc/rsc/ct/CxxCharLiteral.h
  W020 Using statement in header
    34: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    889:       auto macro = static_cast< Macro* >(ref_);
    902:       auto macro = static_cast< Macro* >(ref_);
  W106 Function does not invoke Debug::ft
    46: void AlignLeft(ostream& stream, const string& prefix)
    149: CxxToken* Define::AutoType() const
    839: CxxScope* MacroName::GetScope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h
  W042 Member could be private
    240:    virtual CxxToken* GetValue() const = 0;
    285:    CxxToken* RootType() const override { return GetValue(); }
  W043 Member could be protected
    736:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    310:    size_t refs_ : 16;
  W075 Virtual function is public
    116:    void SetScope(CxxScope* scope) override;
    240:    virtual CxxToken* GetValue() const = 0;
    245:    virtual bool IsDefined() const { return true; }
    251:    virtual void SetExpr(ExprPtr& rhs);
    285:    CxxToken* RootType() const override { return GetValue(); }
    420:    virtual bool AddElif(Elif* e) { return false; }
    424:    virtual bool AddElse(const Else* e) { return false; }
    433:    virtual bool HasCompiledCode() const { return compile_; }
    474:    void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp
  W007 Cast down the inheritance hierarchy
    1369:          auto derived = static_cast< const Class* >(root);
    1474:       auto thisClass = static_cast< Class* >(thisRoot);
    1482:             auto thatClass = static_cast< Class* >(thatRoot);
    1647:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    1703:       auto type = static_cast< TypeSpec* >(item);
    1713:       spec->SetReferent(static_cast< CxxScoped* >(item), nullptr);
    1877:          static_cast< Class* >(root)->BlockCopied(this);
  W075 Virtual function is public
    64:    bool Display(ostream& stream, bool diff) override;
    76:    bool Display(ostream& stream, bool diff) override;
    92:    bool Display(ostream& stream, bool diff) override;
    108:    bool Display(ostream& stream, bool diff) override;
    128:    bool Display(ostream& stream, bool diff) override;
  W106 Function does not invoke Debug::ft
    233: const Parser* Context::GetParser()
    296: void Context::OnLine(size_t line, bool executing)
    310: bool Context::OptionIsOn(char opt)
    317: bool Context::ParsingTemplateInstance()
    410: void Context::SetPos(size_t pos)
    425: void Context::SetPos(const CxxLocation& loc)
    520: void Context::Trace(CxxTrace::Action act)
    528: void Context::Trace(CxxTrace::Action act, const StackArg& arg)
    536: void Context::Trace(CxxTrace::Action act, word err, const string& expl)
    544: void Context::Trace(CxxTrace::Action act, const CodeFile& file)
    552: void Context::Trace(CxxTrace::Action act, const CxxToken* token)
    751: OptionalCode* ParseFrame::Optional() const
    938: CxxScope* ParseFrame::Scope() const
    1983: bool Tracepoint::operator<(const Tracepoint& that) const
  W107 Function does not invoke Debug::ft as first statement
    1947:    Debug::ft(Tracepoint_OnLine);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h
  W026 Unused argument
    744/1:    static void Shutdown(NodeBase::RestartLevel level);
    748/1:    static void Startup(NodeBase::RestartLevel level) { }
  W032 Unused function
    146:    size_t Arrays() const;
    305:    bool operator!=(const StackArg& that) const;
    546:    bool operator<(const Tracepoint& that) const;
  W042 Member could be private
    304:    bool operator==(const StackArg& that) const;
  W050 Data is not private
    313:    CxxToken* item;
    317:    TypeName* name;
    752:    static bool Tracing;
  W082 Adjacent arguments have the same type
    271:    TypeMatch CalcMatchWith(const StackArg& that,
    326:    TypeMatch MatchWith(const StackArg& that,
  W092 Function could be free
    337:    static void ContextFunctionIsNonConst();
    628:    static void Enter(const CxxScoped* owner);
    661:    static void WasCalled(Function* func);
    669:    static void SetPos(const CxxLocation& loc);
    703:    static void Trace(CxxTrace::Action act);
    704:    static void Trace(CxxTrace::Action act, const CxxToken* token);
    705:    static void Trace(CxxTrace::Action act, const StackArg& arg);
    706:    static void Trace(CxxTrace::Action act, const CodeFile& file);
    707:    static void Trace(CxxTrace::Action act, NodeBase::word err,
    748:    static void Startup(NodeBase::RestartLevel level) { }
    790:    static bool StartTracing();
    806:    static std::string Location();
  W114 Function could be tagged noexcept
    118:    StackArg(const StackArg& that) = default;
    122:    StackArg& operator=(const StackArg& that) = default;
    542:    Tracepoint(const CodeFile* file, size_t line, Action act);
    748:    static void Startup(NodeBase::RestartLevel level) { }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp
  W007 Cast down the inheritance hierarchy
    442:          space = static_cast< Namespace* >(item);
    466:          cls = static_cast< Class* >(item);
    520:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    531:             auto tdef = static_cast< Typedef* >(item);
    536:             item = static_cast< CxxScoped* >(root);
    831:    return static_cast< Class* >(root);
    2081:             static_cast< Function* >(tfunc)->SetTemplateParm();
    2255:       ref = static_cast< Function* >(ref)->FindRootFunc();
  W008 Cast removes const qualification
    1079:    return const_cast< DataSpec* >(this);
    1594:    const_cast< DataSpec* >(this)->FindReferent();
    2872:    return const_cast< TypeName* >(this);
  W106 Function does not invoke Debug::ft
    72: size_t CxxLocation::GetPos() const
    79: void CxxLocation::SetLoc(CodeFile* file, size_t pos)
    212: CxxArea* CxxNamed::GetArea() const
    221: Class* CxxNamed::GetClass() const
    230: id_t CxxNamed::GetDeclFid() const
    265: size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
    274: void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
    281: Namespace* CxxNamed::GetSpace() const
    290: CxxScope* CxxNamed::GetTemplateInstance() const
    299: bool CxxNamed::IsInTemplateInstance() const
    654: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    999: TypeTags DataSpec::GetAllTags() const
    1077: TypeSpec* DataSpec::GetTypeSpec() const
    1202: bool DataSpec::IsAutoDecl() const
    2007: TypeName* QualName::At(size_t n) const
    2201: TypeName* QualName::GetTemplateArgs() const
    2281: TypeName* QualName::Last() const
    2505: size_t QualName::Size() const
    2790: CxxScoped* TypeName::DirectType() const
    2869: TypeName* TypeName::GetTemplateArgs() const
    3059: void TypeName::PushBack(TypeNamePtr& type)
    3574: int TypeTags::IsConstPtr() const
    3582: bool TypeTags::IsConstPtr(size_t n) const
  W119 Argument passed by value is modified
    332/2:    (Warning warning, const CxxNamed* item, word offset, bool hide) const
    2007/1: TypeName* QualName::At(size_t n) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1344:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1532:    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  W008 Cast removes const qualification
    877:       override { return const_cast< QualName* >(this); }
    1344:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W042 Member could be private
    222:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    1016:    bool IsUnboundedArray() const { return array_; }
  W043 Member could be protected
    244:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    253:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    285:    virtual bool IsImplemented() const { return true; }
    373:    void DisplayReferent(std::ostream& stream, bool fq) const;
    377:    std::string strLocation() const;
    382:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    1114:    Cxx::ItemType GetUserType() const { return user_; }
  W050 Data is not private
    1061:    bool ptrDet_: 1;
    1065:    bool refDet_: 1;
  W075 Virtual function is public
    125:    virtual void SetLoc(CodeFile* file, size_t pos);
    138:    virtual void CopyContext(const CxxNamed* that);
    156:    virtual size_t GetRange(size_t& begin, size_t& end) const;
    161:    virtual CxxScope* GetScope() const { return nullptr; }
    169:    virtual bool IsStatic() const { return true; }
    174:    virtual bool IsDeclaredInFunction() const { return false; }
    184:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    189:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    197:    virtual CxxScope* GetTemplate() const { return nullptr; }
    203:    virtual std::string QualifiedName(bool scopes, bool templates)
    209:    virtual std::string ScopedName(bool templates) const;
    215:    virtual void GetScopedNames(stringVector& names, bool templates) const;
    222:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    228:    virtual CxxArea* GetArea() const;
    233:    virtual Function* GetFunction() const { return nullptr; }
    237:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    244:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    248:    virtual NodeBase::id_t GetDeclFid() const;
    253:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    262:    virtual CxxNamed* GetMate() const { return nullptr; }
    275:    virtual bool EnterScope() { return true; }
    285:    virtual bool IsImplemented() const { return true; }
    291:    virtual CxxScoped* DirectType() const { return Referent(); }
    295:    virtual void FindReferent();
    301:    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
    305:    virtual void SetAsReferent(const CxxNamed* user) { }
    310:    virtual bool Instantiate() { return false; }
    314:    virtual CxxScope* GetTemplateInstance() const;
    323:    virtual CxxScoped* FindTemplateAnalog(const CxxNamed* item) const;
    330:    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
    335:    virtual StackArg MemberToArg
    348:    virtual void GetDirectClasses(CxxUsageSets& symbols) const;
    355:    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
    368:    virtual std::string XrefName(bool templates) const;
    685:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    906:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    910:    bool ResolveTemplate
    1110:    virtual void SetUserType(Cxx::ItemType user);
    1122:    virtual Function* GetFuncSpec() const { return nullptr; }
    1132:    virtual TypeSpec* Clone() const = 0;
    1136:    virtual TypeTags* Tags() = 0;
    1137:    virtual const TypeTags* Tags() const = 0;
    1141:    virtual void AddArray(ArraySpecPtr& array) = 0;
    1147:    virtual TagCount Ptrs(bool arrays) const = 0;
    1153:    virtual TagCount Refs() const = 0;
    1158:    virtual TagCount Arrays() const = 0;
    1162:    virtual bool HasArrayDefn() const = 0;
    1166:    virtual void EnteringScope(const CxxScope* scope) = 0;
    1170:    virtual void EnterArrays() const = 0;
    1175:    virtual TypeTags GetAllTags() const = 0;
    1180:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1185:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1189:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1195:    virtual void SetPtrs(TagCount count) = 0;
    1200:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1204:    virtual StackArg ResultType() const = 0;
    1208:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1219:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    1225:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1230:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1234:    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
    1240:    virtual void Instantiating() const = 0;
    1244:    virtual void GetNames(stringVector& names) const = 0;
    1249:    virtual bool NamesReferToArgs(const NameVector& names,
  W082 Adjacent arguments have the same type
    597:    TypeMatch MatchTemplate(const TypeName* that,
    834:    TypeMatch MatchTemplate(const QualName* that,
    1219:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  W114 Function could be tagged noexcept
    74:    CxxLocation();
    78:    CxxLocation(const CxxLocation& that) = default;
    82:    CxxLocation& operator=(const CxxLocation& that) = default;
    968:    TypeTags(const TypeTags& that) = default;
    972:    TypeTags& operator=(const TypeTags& that) = default;
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp
  W004 C-style cast
    3751:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W007 Cast down the inheritance hierarchy
    697:       auto cls = static_cast<const Class*>(scope);
    1350:    auto cls = static_cast< Class* >(root);
    1417:          auto op = static_cast< Operation* >(expr);
    1537:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1553:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1581:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1596:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1728:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    1774:    auto data = static_cast< FuncData* >(next_.get());
    2809:       if(!static_cast< Function* >(item)->virtual_)
    3276:             static_cast< ClassData* >(data)->SetInit(m->get());
    3526:       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
    3539:       auto i = FindArg(static_cast< const Argument* >(item), false);
    3590:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    4367:    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
    4795:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    4809:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    5031:                auto item = static_cast< CxxNamed* >(args.front().item);
    5117:       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  W008 Cast removes const qualification
    2273:    return FoundFunc(const_cast< Function* >(this), args, match);
    3495:    auto prev = const_cast< Function* >(this);
    3741:       (const_cast< Function* >(this));
    3751:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W097 Line indentation is not a multiple of the standard value
    458:                     ((move == nullptr) || move->IsDeleted()));
  W106 Function does not invoke Debug::ft
    112: bool Block::CrlfOver(Form form) const
    248: CxxToken* Block::FirstStatement() const
    256: Function* Block::GetFunction() const
    296: bool Block::InLine() const
    868: id_t CxxScope::GetDistinctDeclFid() const
    1226: CodeFile* Data::GetDeclFile() const
    1233: const Data* Data::GetDefn() const
    1242: CodeFile* Data::GetDefnFile() const
    1289: TypeName* Data::GetTemplateArgs() const
    1445: bool Data::IsConst() const
    1577: bool Data::WasRead()
    3628: FunctionRole Function::FuncRole() const
    3665: FunctionType Function::FuncType() const
    3676: Cxx::Access Function::GetAccess() const
    3684: CodeFile* Function::GetDeclFile() const
    3691: const Function* Function::GetDefn() const
    3700: CodeFile* Function::GetDefnFile() const
    3709: size_t Function::GetRange(size_t& begin, size_t& end) const
    3725: CxxScope* Function::GetScope() const
    3737: CxxScope* Function::GetTemplate() const
    3749: CxxScope* Function::GetTemplateInstance() const
    3757: TemplateType Function::GetTemplateType() const
    4312: bool Function::IsImplemented() const
    5153: void FuncSpec::AddArray(ArraySpecPtr& array)
    5167: TagCount FuncSpec::Arrays() const
    5174: void FuncSpec::Check() const
    5181: TypeSpec* FuncSpec::Clone() const
    5203: void FuncSpec::EnterArrays() const
    5222: void FuncSpec::FindReferent()
    5230: TypeTags FuncSpec::GetAllTags() const
    5237: void FuncSpec::GetNames(stringVector& names) const
    5245: TypeName* FuncSpec::GetTemplateArgs() const
    5252: TypeSpec* FuncSpec::GetTypeSpec() const
    5259: bool FuncSpec::HasArrayDefn() const
    5266: void FuncSpec::Instantiating() const
    5274: bool FuncSpec::IsConst() const
    5281: bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
    5289: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    5297: TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    5307: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    5322: bool FuncSpec::NamesReferToArgs(const NameVector& names,
    5338: TagCount FuncSpec::Ptrs(bool arrays) const
    5345: TagCount FuncSpec::Refs() const
    5352: StackArg FuncSpec::ResultType() const
    5359: void FuncSpec::SetPtrs(TagCount count)
    5366: void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
    5381: const TypeTags* FuncSpec::Tags() const
    5388: TypeTags* FuncSpec::Tags()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    345:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    345:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1216:       const override { return const_cast< Function* >(this); }
  W026 Unused argument
    84/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  W030 Unused enumerator
    145:       Multiple   // two statements or more
  W032 Unused function
    1025:    bool IsExtern() const { return GetDecl()->extern_; }
    1030:    bool IsFinal() const { return GetDecl()->final_; }
  W042 Member could be private
    1027:    bool IsPureVirtual() const { return GetDecl()->pure_; }
    1047:    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
    1075:    size_t MinArgs() const;
    1080:    size_t MaxArgs() const { return args_.size(); }
    1138:    bool IsInvokedInBase() const;
  W043 Member could be protected
    305:    bool IsExtern() const { return extern_; }
    309:    bool IsConstexpr() const { return constexpr_; }
    313:    bool WasInited() const { return GetDecl()->inited_; }
  W075 Virtual function is public
    78:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    83:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    91:    virtual void AccessibilityOf
    336:    virtual void Promote
    341:    virtual bool IsUnionMember() const { return false; }
    1172:    void CheckAccessControl() const override;
    1176:    void CheckIfHiding() const override;
    1325:    void WasCalled() override;
  W082 Adjacent arguments have the same type
    336:    virtual void Promote
    1407:    static TypeMatch MatchTemplate
  W092 Function could be free
    1407:    static TypeMatch MatchTemplate
    1420:    static Function* InstantiateError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1374:    return (CxxToken*) this;
    1571:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    94:          auto func = static_cast< Function* >(GetScope());
    165:    auto func = static_cast< Function* >(GetScope());
    209:       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    242:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    256:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    310:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    344:    return static_cast< Class* >(name_->GetReferent());
    1119:    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
    1305:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1336:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1495:    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
    1720:          space = static_cast< Namespace* >(item);
    1733:          cls = static_cast< Class* >(item);
    1772:             auto tdef = static_cast< Typedef* >(item);
    1777:             item = static_cast< CxxScoped* >(root);
    1955:    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
    2077:       static_cast< CxxArea* >(scope)->AddFunc(func);
    2453:    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
    2613:          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  W008 Cast removes const qualification
    585:    if(n == 0) return const_cast< CxxScoped* >(this);
    1374:    return (CxxToken*) this;
    1571:    return (CxxToken*) this;
    1987:    const_cast< Friend* >(this)->FindReferent();
    2006:    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
    2018:    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  W106 Function does not invoke Debug::ft
    342: Class* BaseDecl::GetClass() const
    443: void CxxScoped::AddFiles(SetOfIds& imSet) const
    591: CodeFile* CxxScoped::GetImplFile() const
    600: size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
    615: bool CxxScoped::IsAuto() const
    624: bool CxxScoped::IsConst() const
    633: bool CxxScoped::IsConstPtr() const
    642: bool CxxScoped::IsConstPtr(size_t n) const
    651: bool CxxScoped::IsDeclaredInFunction() const
    659: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    672: bool CxxScoped::IsIndirect() const
    1087: TypeSpec* Enum::GetTypeSpec() const
    1370: CxxToken* Forward::AutoType() const
    1567: CxxToken* Friend::AutoType() const
    1856: Function* Friend::GetFunction() const
    1865: QualName* Friend::GetQualName() const
    1874: CxxScoped* Friend::GetReferent() const
    2397: TypeName* Typedef::GetTemplateArgs() const
  W119 Argument passed by value is modified
    2657/1: void Using::SetScope(CxxScope* scope)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    177:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    483:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    590:    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
    1015:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1101:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    177:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    483:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    590:    CxxToken* AutoType() const override { return (CxxToken*) enum_; }
    1015:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1101:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1224/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  W042 Member could be private
    163:    bool IsSubscopeOf(const std::string& fqSuper) const;
  W043 Member could be protected
    52:    CodeFile* GetImplFile() const;
    87:    CxxScoped* FindInheritedName() const;
    92:    void DisplayFiles(std::ostream& stream) const;
    100:    virtual bool IsUnused() const { return false; }
  W075 Virtual function is public
    59:    virtual bool NameRefersToItem(const std::string& name,
    69:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
    78:    virtual void RecordAccess(Cxx::Access access) const;
    96:    virtual void AddFiles(SetOfIds& imSet) const;
    100:    virtual bool IsUnused() const { return false; }
    106:    virtual bool CheckIfUnused(Warning warning) const;
    181:    void SetAccess(Cxx::Access access) override { access_ = access; }
    185:    void SetScope(CxxScope* scope) override { scope_ = scope; }
    492:    void CheckAccessControl() const override;
    889:    bool ResolveTemplate
    1291:    bool ResolveTypedef(Typedef* type, size_t n) const
  W082 Adjacent arguments have the same type
    1214:    Using(QualNamePtr& name, bool space, bool added = false);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp
  W106 Function does not invoke Debug::ft
    302: void CxxStatement::EnterBlock()
    393: bool Do::InLine() const
    629: bool For::InLine() const
    762: bool If::InLine() const
    1248: bool While::InLine() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    41: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  W119 Argument passed by value is modified
    234/2: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
    256/2: size_t FindTemplateEnd(const string& name, size_t pos)
    723/5:    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h
  W032 Unused function
    89:    std::string& Prefix(std::string&& scope);
  W082 Adjacent arguments have the same type
    113:    size_t CompareScopes
    151:    size_t Replace(std::string& code,
  W114 Function could be tagged noexcept
    46:       NameAndPtrs(): ptrs(0) { }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStrLiteral.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W092 Function could be free
    87:    static DataPtr CreateRef()
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W007 Cast down the inheritance hierarchy
    467:    return static_cast< Macro* >(macros.front());
    506:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    514:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    522:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    528:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W106 Function does not invoke Debug::ft
    100: template< typename T > void Erase(const CxxScoped* item,
    198: template< typename T > void ListSymbols(const string& name,
    309: void CxxSymbols::EraseClass(const Class* cls)
    316: void CxxSymbols::EraseData(const Data* data)
    323: void CxxSymbols::EraseEnum(const Enum* item)
    330: void CxxSymbols::EraseEtor(const Enumerator* etor)
    337: void CxxSymbols::EraseForw(const Forward* forw)
    344: void CxxSymbols::EraseFriend(const Friend* frnd)
    351: void CxxSymbols::EraseFunc(const Function* func)
    380: void CxxSymbols::EraseMacro(const Macro* macro)
    387: void CxxSymbols::EraseSpace(const Namespace* space)
    394: void CxxSymbols::EraseTerm(const Terminal* term)
    401: void CxxSymbols::EraseType(const Typedef* type)
    750: void CxxSymbols::InsertClass(Class* cls)
    757: void CxxSymbols::InsertData(Data* data)
    764: void CxxSymbols::InsertEnum(Enum* item)
    771: void CxxSymbols::InsertEtor(Enumerator* etor)
    778: void CxxSymbols::InsertForw(Forward* forw)
    785: void CxxSymbols::InsertFriend(Friend* frnd)
    792: void CxxSymbols::InsertFunc(Function* func)
    826: void CxxSymbols::InsertMacro(Macro* macro)
    833: void CxxSymbols::InsertSpace(Namespace* space)
    840: void CxxSymbols::InsertTerm(Terminal* term)
    847: void CxxSymbols::InsertType(Typedef* type)
    896: void CxxSymbols::RecordUsage(const CxxNamed* item, id_t fid)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h
  W090 Function could be const
    126:    void InsertClass(Class* cls);
    127:    void InsertData(Data* data);
    128:    void InsertEtor(Enumerator* etor);
    129:    void InsertEnum(Enum* item);
    130:    void InsertForw(Forward* forw);
    131:    void InsertFriend(Friend* frnd);
    132:    void InsertFunc(Function* func);
    133:    void InsertMacro(Macro* macro);
    134:    void InsertSpace(Namespace* space);
    135:    void InsertTerm(Terminal* term);
    136:    void InsertType(Typedef* type);
    141:    void EraseClass(const Class* cls);
    142:    void EraseData(const Data* data);
    143:    void EraseEtor(const Enumerator* etor);
    144:    void EraseEnum(const Enum* item);
    145:    void EraseForw(const Forward* forw);
    146:    void EraseFriend(const Friend* frnd);
    147:    void EraseFunc(const Function* func);
    148:    void EraseMacro(const Macro* macro);
    149:    void EraseSpace(const Namespace* space);
    150:    void EraseTerm(const Terminal* term);
    151:    void EraseType(const Typedef* type);
    152:    void EraseLocal(const CxxScoped* name);
    156:    void EraseLocals();
    160:    void RecordUsage(const CxxNamed* item, NodeBase::id_t fid);
  W110 Override of Base.Display not found
    85: class CxxSymbols: public NodeBase::Base
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp
  W007 Cast down the inheritance hierarchy
    504:    auto oper = static_cast< Operation* >(item.get());
    530:          auto ante = static_cast< Operation* >(prev.get());
    582:       auto oper = static_cast< Operation* >(item.get());
    615:    auto oper = static_cast< Operation* >(prev.get());
    642:    auto oper = static_cast< Operation* >(item.get());
    700:    auto oper = static_cast< Operation* >(item.get());
    723:       auto ante = static_cast< Operation* >(prev.get());
    819:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1250:       inClass = static_cast< Class* >(inRoot);
    1255:       outClass = static_cast< Class* >(outRoot);
    1280:    auto call = static_cast< Operation* >(args_.front().get());
    1676:       func = static_cast< Function* >(proc.item);
    1695:       cls = static_cast< Class* >(proc.item);
    1794:    auto cls = static_cast< Class* >(arg.item->Root());
    1844:       auto newCall = static_cast< Operation* >(args_.front().get());
    1865:    auto cls = static_cast< Class* >(spec.item->Root());
    1887:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    1911:       cls = static_cast< Class* >(root);
    2104:       area = static_cast< Class* >(targ);
    2106:       static_cast< Class* >(targ)->Instantiate();
    2466:    auto cls = static_cast< Class* >(root);
    2528:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    286:    CxxToken* prev = const_cast< CxxToken* >(this);
  W106 Function does not invoke Debug::ft
    241: bool CxxToken::IsPointer(bool arrays) const
    337: void EraseTemplateArgs
    371: void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
    381: void CxxUsageSets::AddBase(const CxxNamed* item)
    389: void CxxUsageSets::AddDirect(const CxxNamed* item)
    397: void CxxUsageSets::AddForward(const CxxNamed* item)
    408: void CxxUsageSets::AddIndirect(const CxxNamed* item)
    416: void CxxUsageSets::AddInherit(const CxxNamed* item)
    424: void CxxUsageSets::AddUser(const CxxNamed* item)
    833: Numeric FloatLiteral::GetNumeric() const
    894: Numeric IntLiteral::BaseNumeric() const
    1037: CxxToken* Literal::AutoType() const
    1062: CxxToken* Literal::RootType() const
    1078: Cxx::ItemType Literal::Type() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    327:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W032 Unused function
    311:    CxxToken& operator=(const CxxToken& that) = default;
    409:       Tags& operator=(const Tags& that) = default;
    451:       Tags& operator=(const Tags& that) = default;
  W075 Virtual function is public
    95:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    101:    virtual const std::string* Name() const;
    105:    virtual QualName* GetQualName() const { return nullptr; }
    110:    virtual std::string TypeString(bool arg) const
    115:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    119:    virtual bool IsConst() const { return false; }
    123:    virtual bool IsConstPtr() const { return false; }
    127:    virtual bool IsConstPtr(size_t n) const { return false; }
    132:    virtual bool IsAuto() const { return false; }
    137:    virtual bool IsIndirect() const { return false; }
    141:    virtual bool IsInitializing() const { return false; }
    146:    virtual CxxToken* AutoType() const { return nullptr; }
    151:    virtual Namespace* GetSpace() const { return nullptr; }
    156:    virtual Class* GetClass() const { return nullptr; }
    161:    virtual Class* Declarer() const { return GetClass(); }
    167:    virtual TypeName* GetTemplateArgs() const;
    172:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    176:    virtual void GetConvertibleTypes(StackArgVector& types) { }
    181:    virtual CxxScoped* Referent() const;
    187:    virtual void EnterBlock();
    192:    virtual void ExitBlock() { }
    198:    virtual bool AppendUnary() { return false; }
    202:    virtual CxxToken* Back() { return this; }
    207:    virtual bool WasRead() { return false; }
    219:    virtual bool WasWritten(const StackArg* arg, bool passed);
    224:    virtual bool SetNonConst() { return true; }
    229:    virtual void WasMutated(const StackArg* arg) { }
    235:    virtual void RecordUsage() const { }
    240:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
    245:    virtual bool LocateItem(const CxxNamed* item, size_t& n)
    251:    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
    256:    virtual void Check() const { }
    260:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    264:    virtual bool InLine() const { return true; }
    269:    virtual void Print
    275:    virtual void Shrink() { }
    500:    virtual void PushBack(uint32_t c) = 0;
  W082 Adjacent arguments have the same type
    649:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W090 Function could be const
    192:    virtual void ExitBlock() { }
  W092 Function could be free
    321:    static void ShrinkExpression(const ExprPtr& expr);
    638:    static void PushType(const std::string& name);
  W114 Function could be tagged noexcept
    56:    CxxUsageSets() = default;  // create empty CxxNamedSets
    407:       Tags(Radix r, bool u, Size s) : radix_(r), unsigned_(u), size_(s) { }
    408:       Tags(const Tags& that) = default;
    409:       Tags& operator=(const Tags& that) = default;
    449:       Tags(bool e, Size s) : exp_(e), size_(s) { }
    450:       Tags(const Tags& that) = default;
    451:       Tags& operator=(const Tags& that) = default;
  W118 Copy/move constructor does not invoke base copy/move constructor
    307:    CxxToken(const CxxToken& that) = default;
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp
  W005 Functional cast
    694:    *cli.obuf << ": " << Warning(log.warning);
  W007 Cast down the inheritance hierarchy
    228:    auto defn = static_cast< const Function* >(log.item);
    361:    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
    1032:    auto etor = static_cast< const Enumerator* >(log.item);
    1074:    auto eNum = static_cast< const Enum* >(etor->AutoType());
    1350:    auto func = static_cast< const Function* >(log.item);
    1425:    auto cls = static_cast< const Class* >(log.item);
    2309:    DebugFtCode(static_cast< const Function* >(log.item), defn, call);
    2934:       ns = static_cast< const Namespace* >(ref)->OuterSpace();
    3326:    auto func = static_cast< const Function* >(log.item);
    3451:    auto defn = static_cast< const Function* >(log.item);
    3563:    auto func = static_cast< const Function* >(log.item);
  W097 Line indentation is not a multiple of the standard value
    188:        tagpos = loc.iter->code.find(tag, tagpos + 1))
    263:        loc.pos != string::npos;
    264:        loc = FindWord(loc.iter, loc.pos + 1, *defnName, &range))
    964:        tag.pos != string::npos;
    965:        tag = FindWord(tag.iter, tag.pos + 1, CONST_STR))
    1134:        next->code, 0, next->code.size() - 1)) return false;
    1300:        arg = FindWord(arg.iter, arg.pos + 1, VOID_STR))
    2967:           loc = FindWord(loc.iter, loc.pos, name))
  W102 Line length exceeds the standard maximum
    2238:       (lpar.iter->code.find_first_not_of(WhitespaceChars, lpar.pos + 1) == rpar))
  W106 Function does not invoke Debug::ft
    80: bool IsBlank(char c)
    87: bool IsWordChar(char c)
    2097: LineType Editor::GetLineType(const Iter& iter) const
    2773: bool Editor::IsSorted1(const SourceLine& line1, const SourceLine& line2)
    2780: bool Editor::IsSorted2(const string& line1, const string& line2)
    2911: void Editor::PushBack(const string& code)
  W119 Argument passed by value is modified
    1324/3: Editor::CodeLocation Editor::Find(Iter iter, const string& str, size_t off)
    1375/2:    (Iter iter, size_t off, const string& chars)
    1589/2: Editor::CodeLocation Editor::FindNonBlank(Iter iter, size_t pos)
    1670/2:    (Iter iter, size_t pos, const string& id, size_t* range)
    3256/2: Editor::CodeLocation Editor::RfindNonBlank(Iter iter, size_t pos)
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h
  W020 Using statement in header
    39: using NodeBase::CliThread;
    40: using NodeBase::word;
    41: using std::string;
  W032 Unused function
    251:    CodeLocation PrevPos(const CodeLocation& curr);
  W082 Adjacent arguments have the same type
    419:    word InsertNamespaceForward(const Iter& iter,
    447:    static void DebugFtCode
  W092 Function could be free
    406:    string DemangleInclude(string code) const;
    461:    static bool IsSorted2(const string& line1, const string& line2);
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    148:          type = LibTokenType(i);
  W092 Function could be free
    57:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W099 Line contains adjacent spaces
    94:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    95:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    96:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    97:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    98:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    99:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    100:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    101:    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
    102:    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  W106 Function does not invoke Debug::ft
    134: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    142: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  W119 Argument passed by value is modified
    475/1: LibExprErr Interpreter::ApplyOperator(bool operand)
    590/1: LibrarySet* Interpreter::Error(LibExprErr err) const
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h
  W092 Function could be free
    62:    static bool IsOperator(const std::string& s);
  W110 Override of Base.Display not found
    44: class Interpreter : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    1358:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    1983:          auto def = static_cast< Define* >(item);
    1987:             auto code = const_cast< string* >(source_);
  W008 Cast removes const qualification
    1987:             auto code = const_cast< string* >(source_);
  W106 Function does not invoke Debug::ft
    58: IndentRule ClassifyIndent(string& id)
    804: void Lexer::GetDepth(size_t line, int8_t& depth, bool& cont) const
    1047: size_t Lexer::GetLineNum(size_t pos) const
    1071: size_t Lexer::GetLineStart(size_t line) const
    1150: bool Lexer::GetNthLine(size_t n, string& s) const
    2039: void Lexer::SetDepth(size_t& start, int8_t depth1, int8_t depth2)
  W117 Line can merge with the next line and be under the length limit
    1140:          (Keywords->lower_bound(name) == Keywords->cend()))
  W119 Argument passed by value is modified
    356/3: size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
    592/1: size_t Lexer::FindLineEnd(size_t pos) const
    921/2: size_t Lexer::GetHexNum(int64_t& num, size_t max)
    947/1: bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
    1813/1: size_t Lexer::NextPos(size_t pos) const
    2091/1: size_t Lexer::SkipCharLiteral(size_t pos) const
    2111/1: size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
    2146/1: size_t Lexer::SkipTemplateSpec(size_t pos) const
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h
  W042 Member could be private
    210:    std::string NextOperator() const;
  W047 Data is init-only
    492:    static bool Initialized;
  W082 Adjacent arguments have the same type
    218:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
    400:    void SetDepth(size_t& start, int8_t depth1, int8_t depth2);
  W114 Function could be tagged noexcept
    49:    ~Lexer() = default;
    418:       explicit LineInfo(size_t start) :
C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp
  W007 Cast down the inheritance hierarchy
    95:       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h
  W042 Member could be private
    67:    CodeDir* FindDir(const std::string& name) const;
    88:    LibrarySet* FindVar(const std::string& name) const;
  W048 Data is write-only
    231:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    62:    NodeBase::word Import
    104:    NodeBase::word Assign(const std::string& name,
  W090 Function could be const
    72:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    104:    NodeBase::word Assign(const std::string& name,
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp
  W106 Function does not invoke Debug::ft
    103: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp
  W006 reinterpret_cast
    281:    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  W106 Function does not invoke Debug::ft
    76: LibrarySet* LibrarySet::AffectedBy() const
    83: LibrarySet* LibrarySet::Affecters() const
    90: LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
    108: LibrarySet* LibrarySet::CommonAffecters() const
    155: LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
    162: LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
    169: LibrarySet* LibrarySet::Directories() const
    188: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    195: LibrarySet* LibrarySet::Files() const
    202: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    231: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    250: LibrarySet* LibrarySet::Implements() const
    257: LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
    264: bool LibrarySet::IsReadOnly() const
    271: bool LibrarySet::IsTemporary() const
    298: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    305: LibrarySet* LibrarySet::NeededBy() const
    312: LibrarySet* LibrarySet::Needers() const
    321: word LibrarySet::NotImplemented(string& expl) const
    347: LibrarySet* LibrarySet::OpError() const
    452: LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
    459: LibrarySet* LibrarySet::UsedBy(bool self) const
    466: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h
  W042 Member could be private
    69:    bool IsReadOnly() const;
    172:    static ptrdiff_t LinkDiff();
  W043 Member could be protected
    150:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  W053 Data could be const
    220:    NodeBase::Q2Link link_;
  W065 Base class virtual destructor is not public
    188:    virtual ~LibrarySet();
  W075 Virtual function is public
    77:    virtual LibSetType GetType() const;
    83:    virtual NodeBase::word Check(std::ostream* stream, std::string& expl) const;
    89:    virtual NodeBase::word Count(std::string& result) const;
    95:    virtual NodeBase::word Countlines(std::string& result) const;
    101:    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
    107:    virtual NodeBase::word Format(std::string& expl) const;
    113:    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
    121:    virtual NodeBase::word Parse
    128:    virtual NodeBase::word Scan(std::ostream& stream,
    135:    virtual NodeBase::word Show(std::string& result) const;
    141:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    150:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
    151:    virtual LibrarySet* Assign(LibrarySet* rhs);
    152:    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
    153:    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
    154:    virtual LibrarySet* Union(const LibrarySet* rhs) const;
    155:    virtual LibrarySet* Directories() const;
    156:    virtual LibrarySet* Files() const;
    157:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    158:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    159:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    160:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    161:    virtual LibrarySet* Implements() const;
    162:    virtual LibrarySet* UsedBy(bool self) const;
    163:    virtual LibrarySet* Users(bool self) const;
    164:    virtual LibrarySet* AffectedBy() const;
    165:    virtual LibrarySet* Affecters() const;
    166:    virtual LibrarySet* CommonAffecters() const;
    167:    virtual LibrarySet* NeededBy() const;
    168:    virtual LibrarySet* Needers() const;
  W092 Function could be free
    192:    static NodeBase::word Counted(std::string& result, const size_t* count);
    197:    static NodeBase::word Shown(std::string& result);
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryTypes.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W114 Function could be tagged noexcept
    60:    FileLevel(NodeBase::id_t f, size_t l) : fid(f), level(l) { }
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    397:    auto op = static_cast< Operation* >(call.get());
    650:    auto brace = static_cast< BraceInit* >(token.get());
    723:    auto cast = static_cast< Operation* >(token.get());
    762:    auto c = static_cast< Catch* >(statement.get());
    888:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    889:    static_cast< ClassData* >(data.get())->SetWidth(width);
    1049:    auto cond = static_cast< Operation* >(token.get());
    1333:    auto cast = static_cast< Operation* >(token.get());
    1501:    auto op = static_cast< Operation* >(token.get());
    1526:    auto delOp = static_cast< Operation* >(token.get());
    1554:    auto d = static_cast< Do* >(statement.get());
    1760:    auto f = static_cast< For* >(statement.get());
    1863:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    1913:          curr = static_cast< FuncData* >(data.get());
    1919:          curr = static_cast< FuncData* >(subseq.get());
    2185:             static_cast< If* >(first)->SetElseIf();
    2191:    auto i = static_cast< If* >(statement.get());
    2353:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2395:    auto newOp = static_cast< Operation* >(token.get());
    2470:    auto op = static_cast< Operation* >(token.get());
    2869:    static_cast< Return* >(statement.get())->AddExpr(expr);
    2915:    auto op = static_cast< Operation* >(token.get());
    3123:    auto op = static_cast< Operation* >(token.get());
    3149:    auto s = static_cast< Switch* >(statement.get());
    3238:    auto op = static_cast< Operation* >(token.get());
    3274:    auto t = static_cast< Try* >(statement.get());
    3333:    auto op = static_cast< Operation* >(token.get());
    3606:    auto w = static_cast< While* >(statement.get());
    3990:          auto op = static_cast< Operation* >(token)->Op();
  W008 Cast removes const qualification
    4208:       func->SetTemplate(const_cast< Function* >(tmplt));
  W106 Function does not invoke Debug::ft
    257: size_t Parser::CurrPos() const
  W119 Argument passed by value is modified
    963/2: bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
    2283/1: size_t Parser::GetLineNum(size_t pos) const
    4042/2: void Parser::Log(Warning warning, size_t pos) const
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h
  W082 Adjacent arguments have the same type
    487:    static bool SetCompoundType
    533:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W088 Argument could be const
    334/1:    bool GetStatements(BlockPtr& block, bool braced);
    423/1:    bool GetFuncSpecial(FunctionPtr& func);
    436/1:    bool GetCtorInit(FunctionPtr& func);
    455/1:    bool GetArguments(FunctionPtr& func);
    488/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    555/1:    bool GetNum(ExprPtr& expr);
    556/1:    bool GetChar(ExprPtr& expr, Cxx::Encoding code);
    557/1:    bool GetStr(ExprPtr& expr, Cxx::Encoding code);
    567/1:    bool GetCast(ExprPtr& expr);
    568/1:    bool GetPrecedence(ExprPtr& expr);
    575/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    579/1:    bool GetSubscript(ExprPtr& expr);
    588/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    589/1:    bool GetConditional(ExprPtr& expr);
    590/1:    bool GetDefined(ExprPtr& expr);
    591/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    592/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    593/1:    bool GetNoExcept(ExprPtr& expr);
    594/1:    bool GetSizeOf(ExprPtr& expr);
    595/1:    bool GetThrow(ExprPtr& expr);
    596/1:    bool GetTypeId(ExprPtr& expr);
  W092 Function could be free
    487:    static bool SetCompoundType
    675:    static std::string Indent();
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion(SetOfIds& lhs, const SetOfIds& rhs1, const SetOfIds& rhs2);
C:/Users/gregu/Documents/rsc/rsc/dip/Adjudicator.cpp
  W097 Line indentation is not a multiple of the standard value
    113:           a != orders.adjustments.end(); ++a)
    424:           a != orders.adjustments.end(); ++a)
    740:        a != attacks.upper_bound(to_prov); ++a)
    954:                     (client.order_type_copy != MOVE_BY_CONVOY_ORDER))
    1008:              f != subverted_army.convoyers.end(); ++f)
    1526:        a != attacks.upper_bound(province); ++a)
    1690:                  (attacker.order_type_copy != MOVE_BY_CONVOY_ORDER))
    2048:        b != balanced_head_to_heads.end(); ++b)
    2145:                 f != subverting_army.convoyers.end(); ++f)
    2148:                    a != attacks.upper_bound(*f); ++a)
    2202:        u != unbalanced_head_to_heads.end(); ++u)
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.cpp
  W006 reinterpret_cast
    228:    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
    551:    auto& dm = reinterpret_cast< const DM_Message& >(message);
    552:    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
    682:    auto& em = reinterpret_cast< const EM_Message& >(message);
    1418:       auto& rm = reinterpret_cast< const RM_Message& >(message);
    2256:    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
    2329:    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
    2486:    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
    2490:    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  W047 Data is init-only
    2262:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable, true);
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    456: BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
    463: BaseBot* BaseBot::instance()
  W117 Line can merge with the next line and be under the length limit
    1858:          (press->message == contents))
C:/Users/gregu/Documents/rsc/rsc/dip/BaseBot.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W026 Unused argument
    91/1:    virtual bool process_command_line_parameter(char token, std::string& value);
    91/2:    virtual bool process_command_line_parameter(char token, std::string& value);
    191/1:    virtual StartupResult initialise(const StartupParameters& parameters);
    234/1:    virtual void process_mis_message(const TokenMessage& message);
    264/1:    virtual void process_tme_message(const TokenMessage& message);
    273/1:    virtual void process_not_ccd_message(const TokenMessage& message,
    279/1:       (const TokenMessage& message, const TokenMessage& parameters);
    279/2:       (const TokenMessage& message, const TokenMessage& parameters);
    299/1:       (const TokenMessage& message, const TokenMessage& parameters);
    299/2:       (const TokenMessage& message, const TokenMessage& parameters);
    304/2:       (const TokenMessage& message, const TokenMessage& parameters);
    309/2:       (const TokenMessage& message, const TokenMessage& parameters);
    314/2:       (const TokenMessage& message, const TokenMessage& parameters);
    319/2:       (const TokenMessage& message, const TokenMessage& parameters);
    324/2:       (const TokenMessage& message, const TokenMessage& parameters);
    329/2:       (const TokenMessage& message, const TokenMessage& parameters);
    334/2:       (const TokenMessage& message, const TokenMessage& parameters);
    339/2:       (const TokenMessage& message, const TokenMessage& parameters);
    344/2:       (const TokenMessage& message, const TokenMessage& parameters);
    349/2:       (const TokenMessage& message, const TokenMessage& parameters);
    354/2:       (const TokenMessage& message, const TokenMessage& parameters);
    359/1:       (const TokenMessage& message, const TokenMessage& parameters);
    359/2:       (const TokenMessage& message, const TokenMessage& parameters);
    364/1:       (const TokenMessage& message, const TokenMessage& parameters);
    364/2:       (const TokenMessage& message, const TokenMessage& parameters);
    369/2:       (const TokenMessage& message, const TokenMessage& parameters);
    374/2:       (const TokenMessage& message, const TokenMessage& parameters);
    379/1:       (const TokenMessage& message, const TokenMessage& parameters);
    379/2:       (const TokenMessage& message, const TokenMessage& parameters);
    384/1:       (const TokenMessage& message, const TokenMessage& parameters);
    384/2:       (const TokenMessage& message, const TokenMessage& parameters);
    390/1:       (const TokenMessage& message, const TokenMessage& parameters);
    390/2:       (const TokenMessage& message, const TokenMessage& parameters);
    395/1:       (const TokenMessage& message, const TokenMessage& parameters);
    395/2:       (const TokenMessage& message, const TokenMessage& parameters);
    400/1:       (const TokenMessage& message, const TokenMessage& parameters);
    400/2:       (const TokenMessage& message, const TokenMessage& parameters);
    405/1:       (const TokenMessage& message, const TokenMessage& parameters);
    405/2:       (const TokenMessage& message, const TokenMessage& parameters);
    411/1:       (const TokenMessage& message, const TokenMessage& parameters);
    411/2:       (const TokenMessage& message, const TokenMessage& parameters);
    416/1:       (const TokenMessage& message, const TokenMessage& parameters);
    416/2:       (const TokenMessage& message, const TokenMessage& parameters);
    421/1:       (const TokenMessage& message, const TokenMessage& parameters);
    421/2:       (const TokenMessage& message, const TokenMessage& parameters);
    426/1:       (const TokenMessage& message, const TokenMessage& parameters);
    426/2:       (const TokenMessage& message, const TokenMessage& parameters);
    431/1:    virtual void process_unexpected_not_message(const TokenMessage& message);
    436/1:    virtual void process_unexpected_rej_message(const TokenMessage& message);
    441/1:    virtual void process_unexpected_rej_not_message(const TokenMessage& message);
    446/1:    virtual void process_unexpected_yes_message(const TokenMessage& message);
    451/1:    virtual void process_unexpected_yes_not_message(const TokenMessage& message);
    476/1:    virtual void process_mdf_message(const TokenMessage& message);
    480/1:    virtual void process_ord_message(const TokenMessage& message);
    484/1:    virtual void process_sco_message(const TokenMessage& message);
    488/1:    virtual void process_now_message(const TokenMessage& message);
    503/1:       (bool is_broadcast, TokenMessage& receiving_powers, TokenMessage& press);
    503/2:       (bool is_broadcast, TokenMessage& receiving_powers, TokenMessage& press);
    503/3:       (bool is_broadcast, TokenMessage& receiving_powers, TokenMessage& press);
    513/1:    virtual void report_close(ProtocolError error);
    613/1:    void process_fm_message(const DipMessage& message);
  W030 Unused enumerator
    62:       FIRST_BOT_SPECIFIC_ERROR
  W032 Unused function
    111:    void set_report(bool onoff) { report_ = onoff; }
    120:    void send_orders_to_server();
    124:    void send_nme(fixed_string name, fixed_string version);
    135:    bool map_requested() const { return map_requested_; }
    143:    void send_broadcast_to_server(TokenMessage broadcast_message);
    144:    void send_press_to_server(const TokenMessage& press_to,
    150:    void send_bm_message(const byte_t* payload, uint16_t length) const;
  W042 Member could be private
    55:    enum StartupResult
    67:    BaseBot();
    116:    bool send_to_server(const TokenMessage& message);
    130:    void request_map();
    155:    void disconnect_from_server(ProtocolError error = GRACEFUL_CLOSE);
    162:    TokenMessage active_powers(bool self = false) const;
    169:    TokenMessage surviving_powers(bool self = false) const;
    174:    bool queue_event(BotEvent event, secs_t secs);
    179:    void cancel_event(BotEvent event);
    191:    virtual StartupResult initialise(const StartupParameters& parameters);
    196:    virtual void set_title(token_t msg, bool rcvd);
    201:    virtual void send_nme_or_obs();
    206:    virtual void process_ccd_message
    212:    virtual void process_drw_message(const TokenMessage& message);
    217:    virtual const std::vector< Token >& get_try_tokens() const;
    222:    virtual void process_frm_message(const TokenMessage& message);
    226:    virtual void process_huh_message(const TokenMessage& message);
    230:    virtual void process_lod_message(const TokenMessage& message);
    234:    virtual void process_mis_message(const TokenMessage& message);
    238:    virtual void process_off_message(const TokenMessage& message);
    243:    virtual void process_out_message(const TokenMessage& message);
    247:    virtual void process_prn_message(const Token* message, size_t size);
    251:    virtual void process_smr_message(const TokenMessage& message);
    255:    virtual void process_sve_message(const TokenMessage& message);
    260:    virtual void process_thx_message(const TokenMessage& message);
    264:    virtual void process_tme_message(const TokenMessage& message);
    268:    virtual void process_adm_message(const TokenMessage& message);
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    278:    virtual void process_not_tme_message
    285:    virtual bool get_reconnect_details(Token& power, int& passcode) const;
    293:    virtual uint8_t reconnection_delay();
    298:    virtual void process_rej_nme_message
    303:    virtual void process_rej_iam_message
    308:    virtual void process_rej_hlo_message
    313:    virtual void process_rej_now_message
    318:    virtual void process_rej_sco_message
    323:    virtual void process_rej_hst_message
    328:    virtual void process_rej_sub_message
    333:    virtual void process_rej_gof_message
    338:    virtual void process_rej_ord_message
    343:    virtual void process_rej_tme_message
    348:    virtual void process_rej_drw_message
    353:    virtual void process_rej_snd_message
    358:    virtual void process_rej_adm_message
    363:    virtual void process_rej_mis_message
    368:    virtual void process_rej_not_gof_message
    373:    virtual void process_rej_not_drw_message
    378:    virtual void process_yes_nme_message
    383:    virtual void process_yes_obs_message
    389:    virtual void process_yes_iam_message
    394:    virtual void process_yes_gof_message
    399:    virtual void process_yes_tme_message
    404:    virtual void process_yes_drw_message
    410:    virtual void process_yes_snd_message
    415:    virtual void process_yes_not_gof_message
    420:    virtual void process_yes_not_drw_message
    425:    virtual void process_yes_not_sub_message
    431:    virtual void process_unexpected_not_message(const TokenMessage& message);
    436:    virtual void process_unexpected_rej_message(const TokenMessage& message);
    441:    virtual void process_unexpected_rej_not_message(const TokenMessage& message);
    446:    virtual void process_unexpected_yes_message(const TokenMessage& message);
    451:    virtual void process_unexpected_yes_not_message(const TokenMessage& message);
    456:    virtual void process_bm_message(const DipMessage& message);
    467:    virtual void process_hlo_message(const TokenMessage& message);
    472:    virtual void process_map_message(const TokenMessage& message);
    476:    virtual void process_mdf_message(const TokenMessage& message);
    480:    virtual void process_ord_message(const TokenMessage& message);
    484:    virtual void process_sco_message(const TokenMessage& message);
    488:    virtual void process_now_message(const TokenMessage& message);
    492:    virtual void process_slo_message(const TokenMessage& message);
    502:    virtual void report_failed_press
    508:    virtual void report_failed_connect();
    513:    virtual void report_close(ProtocolError error);
    524:    static void report_ccd(const Token& power, bool disorder);
    528:    void report_end(const TokenMessage& message) const;
    532:    void report_mdf() const;
    536:    void report_now() const;
    540:    void report_ords();
    544:    static void report_out(const Token& power);
    548:    void report_sco() const;
    552:    void report_smr(const TokenMessage& message) const;
    556:    void report_exit(fixed_string reason);
    566:    MapAndUnits* map_and_units;
    571:    std::set< Token > cd_powers;
    576:    std::set< Token > out_powers;
    580:    std::vector< PowerCentres > centres;
    584:    std::vector< PowerUnits > units;
  W050 Data is not private
    566:    MapAndUnits* map_and_units;
    571:    std::set< Token > cd_powers;
    576:    std::set< Token > out_powers;
    580:    std::vector< PowerCentres > centres;
    584:    std::vector< PowerUnits > units;
  W075 Virtual function is public
    91:    virtual bool process_command_line_parameter(char token, std::string& value);
    97:    virtual std::string report_command_line_parameters();
  W077 Virtual function has no overrides
    91:    virtual bool process_command_line_parameter(char token, std::string& value);
    97:    virtual std::string report_command_line_parameters();
    191:    virtual StartupResult initialise(const StartupParameters& parameters);
    196:    virtual void set_title(token_t msg, bool rcvd);
    201:    virtual void send_nme_or_obs();
    206:    virtual void process_ccd_message
    212:    virtual void process_drw_message(const TokenMessage& message);
    217:    virtual const std::vector< Token >& get_try_tokens() const;
    222:    virtual void process_frm_message(const TokenMessage& message);
    226:    virtual void process_huh_message(const TokenMessage& message);
    230:    virtual void process_lod_message(const TokenMessage& message);
    234:    virtual void process_mis_message(const TokenMessage& message);
    238:    virtual void process_off_message(const TokenMessage& message);
    243:    virtual void process_out_message(const TokenMessage& message);
    247:    virtual void process_prn_message(const Token* message, size_t size);
    251:    virtual void process_smr_message(const TokenMessage& message);
    255:    virtual void process_sve_message(const TokenMessage& message);
    260:    virtual void process_thx_message(const TokenMessage& message);
    264:    virtual void process_tme_message(const TokenMessage& message);
    268:    virtual void process_adm_message(const TokenMessage& message);
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    278:    virtual void process_not_tme_message
    285:    virtual bool get_reconnect_details(Token& power, int& passcode) const;
    293:    virtual uint8_t reconnection_delay();
    298:    virtual void process_rej_nme_message
    303:    virtual void process_rej_iam_message
    308:    virtual void process_rej_hlo_message
    313:    virtual void process_rej_now_message
    318:    virtual void process_rej_sco_message
    323:    virtual void process_rej_hst_message
    328:    virtual void process_rej_sub_message
    333:    virtual void process_rej_gof_message
    338:    virtual void process_rej_ord_message
    343:    virtual void process_rej_tme_message
    348:    virtual void process_rej_drw_message
    353:    virtual void process_rej_snd_message
    358:    virtual void process_rej_adm_message
    363:    virtual void process_rej_mis_message
    368:    virtual void process_rej_not_gof_message
    373:    virtual void process_rej_not_drw_message
    378:    virtual void process_yes_nme_message
    383:    virtual void process_yes_obs_message
    389:    virtual void process_yes_iam_message
    394:    virtual void process_yes_gof_message
    399:    virtual void process_yes_tme_message
    404:    virtual void process_yes_drw_message
    410:    virtual void process_yes_snd_message
    415:    virtual void process_yes_not_gof_message
    420:    virtual void process_yes_not_drw_message
    425:    virtual void process_yes_not_sub_message
    431:    virtual void process_unexpected_not_message(const TokenMessage& message);
    436:    virtual void process_unexpected_rej_message(const TokenMessage& message);
    441:    virtual void process_unexpected_rej_not_message(const TokenMessage& message);
    446:    virtual void process_unexpected_yes_message(const TokenMessage& message);
    451:    virtual void process_unexpected_yes_not_message(const TokenMessage& message);
    456:    virtual void process_bm_message(const DipMessage& message);
    467:    virtual void process_hlo_message(const TokenMessage& message);
    472:    virtual void process_map_message(const TokenMessage& message);
    476:    virtual void process_mdf_message(const TokenMessage& message);
    480:    virtual void process_ord_message(const TokenMessage& message);
    484:    virtual void process_sco_message(const TokenMessage& message);
    488:    virtual void process_now_message(const TokenMessage& message);
    492:    virtual void process_slo_message(const TokenMessage& message);
    502:    virtual void report_failed_press
    508:    virtual void report_failed_connect();
    513:    virtual void report_close(ProtocolError error);
  W082 Adjacent arguments have the same type
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    502:    virtual void report_failed_press
  W090 Function could be const
    206:    virtual void process_ccd_message
    212:    virtual void process_drw_message(const TokenMessage& message);
    243:    virtual void process_out_message(const TokenMessage& message);
    251:    virtual void process_smr_message(const TokenMessage& message);
    268:    virtual void process_adm_message(const TokenMessage& message);
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    467:    virtual void process_hlo_message(const TokenMessage& message);
    472:    virtual void process_map_message(const TokenMessage& message);
    476:    virtual void process_mdf_message(const TokenMessage& message);
    484:    virtual void process_sco_message(const TokenMessage& message);
    488:    virtual void process_now_message(const TokenMessage& message);
    492:    virtual void process_slo_message(const TokenMessage& message);
  W092 Function could be free
    75:    static BaseBot* instance();
    101:    static void send_to_console(std::ostringstream& report);
    179:    void cancel_event(BotEvent event);
    524:    static void report_ccd(const Token& power, bool disorder);
    544:    static void report_out(const Token& power);
    556:    void report_exit(fixed_string reason);
    716:    static bool send_buff(DipIpBuffer& buff);
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    674:       SentPressInfo() : resend_partial(false), is_broadcast(false) { }
C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.cpp
  W006 reinterpret_cast
    192:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
    220:    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  W007 Cast down the inheritance hierarchy
    210:    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/BotThread.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W032 Unused function
    117:       bool operator<(const Wakeup& that) const
  W053 Data could be const
    112:       BotEvent event;       // event
  W055 Data need not be mutable
    113:       mutable secs_t secs;  // delay
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
  W114 Function could be tagged noexcept
    115:       Wakeup(BotEvent e, secs_t s) : event(e), secs(s) { }
C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.cpp
  W006 reinterpret_cast
    102:       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
    131:    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  W022 Add using statement
    1: namespace NodeBase
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotTrace.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W032 Unused function
    69:    DipHeader* Header() const;
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.cpp
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotTracer.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W104 File heading is not standard
    7: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/BotType.h
  W018 Remove #include directive
    21: #include "BaseBot.h"
  W024 Add forward declaration
    1: class Diplomacy::BaseBot
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    29: void ConvoySubversion::clear()  // <b>
    37: void ConvoySubversion::decrement()
C:/Users/gregu/Documents/rsc/rsc/dip/ConvoySubversion.h
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    49:    ConvoySubversion();  // sets members to default values
C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.cpp
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/DipModule.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W047 Data is init-only
    64:    static bool Registered;
  W092 Function could be free
    60:    static bool Register();
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.cpp
  W005 Functional cast
    448: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  W006 reinterpret_cast
    62:       reinterpret_cast < const IM_Message* >(this)->Display(stream);
    65:       reinterpret_cast < const RM_Message* >(this)->Display(stream);
    68:       reinterpret_cast < const DM_Message* >(this)->Display(stream);
    71:       reinterpret_cast < const FM_Message* >(this)->Display(stream);
    74:       reinterpret_cast < const EM_Message* >(this)->Display(stream);
    77:       reinterpret_cast < const BM_Message* >(this)->Display(stream);
    203:       auto header = reinterpret_cast< const DipHeader* >(source);
    214:       auto header = reinterpret_cast< const DipHeader* >(payload);
    235:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    241:       auto im = reinterpret_cast< IM_Message* >(src);
    249:       auto dm = reinterpret_cast< DM_Message* >(src);
    260:       auto em = reinterpret_cast< EM_Message* >(src);
    289:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    298:       auto rm = reinterpret_cast< RM_Message* >(msg);
    309:       auto dm = reinterpret_cast< DM_Message* >(msg);
    320:       auto em = reinterpret_cast< EM_Message* >(msg);
    343:    auto header = reinterpret_cast< const DipHeader* >(payload);
    371:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  W007 Cast down the inheritance hierarchy
    284:    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
    339:    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  W009 Pointer arithmetic
    217:       dest = payload + received;
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
  W106 Function does not invoke Debug::ft
    448: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
C:/Users/gregu/Documents/rsc/rsc/dip/DipProtocol.h
  W020 Using statement in header
    39: using namespace NodeBase;
    40: using namespace NetworkBase;
  W028 Unused data
    162: constexpr ProtocolError IM_TIMEOUT = 0x01;
    163: constexpr ProtocolError IM_EXPECTED = 0x02;
    164: constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
    165: constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
    166: constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
    167: constexpr ProtocolError IM_REPEATED = 0x06;
    168: constexpr ProtocolError IM_FROM_SERVER = 0x07;
    169: constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
    170: constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
    171: constexpr ProtocolError DM_BEFORE_RM = 0x0A;
    172: constexpr ProtocolError RM_EXPECTED = 0x0B;
    173: constexpr ProtocolError RM_REPEATED = 0x0C;
    174: constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
    175: constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
    197: constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  W032 Unused function
    250:    CliText* CreateText() const override;
  W042 Member could be private
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
  W053 Data could be const
    144:    DipHeader header;  // no parameters (length = 0)
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
  W104 File heading is not standard
    5: //  Copyright (C) 2019  Greg Utas
C:/Users/gregu/Documents/rsc/rsc/dip/DipTypes.h
  W020 Using statement in header
    28: using namespace NetworkBase;
    29: using namespace NodeBase;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Location.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    48: bool Location::operator<(const Location& that) const
C:/Users/gregu/Documents/rsc/rsc/dip/Location.h
  W032 Unused function
    75:    bool operator<(const Location& that) const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    49:    Location();
    53:    Location(ProvinceId p, const Token& c);
    58:    Location(const TokenMessage& where, const Token& unit_type);
    63:    Location(const TokenMessage& unit);
    67:    Location(const Location& that) = default;
    71:    Location& operator=(const Location& that) = default;
C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.cpp
  W097 Line indentation is not a multiple of the standard value
    127:              (our_winter_orders.number_of_waives != 0));
    240:           o != our_winter_orders.adjustments.end(); ++o)
    928:           b != r->second.adjustments.end(); ++b)
    1060:           o != orders.adjustments.end(); ++o, ++count)
    1431:                       loc != n->second.end(); ++loc)
    2129:               winter->number_of_waives >= winter->number_of_orders_required)
    2151:               game_map[build_loc.province].home_powers.end())
    2158:               game_map[build_loc.province].neighbours.end())
    2197:               winter->number_of_waives >= winter->number_of_orders_required)
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    272: bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
    290: bool MapAndUnits::can_move_to_province
    586: TokenMessage MapAndUnits::encode_location(const Location& location) const
    864: TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
    1197: const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
    1446: MapAndUnits* MapAndUnits::instance()
    2547: Token MapAndUnits::province_token(ProvinceId province) const
    2677: bool MapAndUnits::set_move_by_single_step_convoy_order
C:/Users/gregu/Documents/rsc/rsc/dip/MapAndUnits.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W032 Unused function
    162:    static MapAndUnits* create_clone();
    166:    static void delete_clone(MapAndUnits*& clone);
    184:    bool set_hold_order(ProvinceId unit);
    185:    bool set_move_order(ProvinceId unit, Location dest);
    186:    bool set_support_to_hold_order(ProvinceId unit, ProvinceId client);
    187:    bool set_support_to_move_order
    189:    bool set_convoy_order(ProvinceId unit, ProvinceId client, ProvinceId dest);
    192:    bool set_move_by_single_step_convoy_order
    194:    bool set_disband_order(ProvinceId unit);
    195:    bool set_retreat_order(ProvinceId unit, Location dest);
    196:    void set_build_order(Location location);
    197:    bool set_remove_order(ProvinceId unit);
    198:    void set_waive_order();
    199:    void set_multiple_waive_orders(size_t waives);
    200:    void set_total_number_of_waive_orders(size_t waives);
    207:    Location find_adjustment(ProvinceId province) const;
    212:    bool cancel_remove_order(ProvinceId province);
    216:    bool unorder_adjustment(const TokenMessage& not_sub, PowerId power);
    220:    bool any_orders_entered() const;
    224:    void clear_all_orders();
    237:    size_t process_sub(const TokenMessage& sub, PowerId power, Token results[]);
    243:    bool get_variant_setting
    248:    void build_now(TokenMessage& now) const;
    252:    void build_sco(TokenMessage& sco) const;
    272:    Location find_result_unit_initial_location(ProvinceId province,
    283:    const LocationSet* get_destinations(ProvinceId province) const;
    289:       get_dislodged_unit_destinations(ProvinceId province) const;
    306:    void set_order_checking(bool on_submission, bool on_adjudication);
    310:    bool all_orders_received(PowerId power) const;
    314:    void adjudicate();
    319:    size_t get_adjudication_results(TokenMessage ord_messages[]) const;
    324:    bool apply_adjudication();
    332:    size_t get_centre_count(Token power) const;
    336:    size_t get_unit_count(Token power) const;
  W042 Member could be private
    116:    std::string map_name;             // map's name
    119:    TokenMessage variant;             // rules for this variant
    120:    ProvinceSet home_centres;         // our home centres
    121:    bool game_started;                // set when the game has begun
    126:    UnitOrderMap dislodged_units;     // dislodged units
    127:    WinterOrderMap winter_orders;     // winter orders
    128:    WinterOrders our_winter_orders;   // our winter orders
    129:    UnitOrderMap prev_movements;      // results of previous movement turn
    130:    UnitOrderMap prev_retreats;       // results of previous retreat turn
    132:    Token prev_movement_season;       // season for previous movement results
    136:    bool check_on_submission;    // check orders when submitted (not an AOA game)
    137:    bool check_on_adjudication;  // check orders when adjudicated (AOA game)
    143:    UnitSet our_units;              // our units
    144:    UnitSet our_dislodged_units;    // our units that must retreat or disband
    145:    ProvinceSet open_home_centres;  // our home centres available for builds
    146:    ProvinceSet our_centres;        // the centres that we currently own
    147:    word our_number_of_disbands;    // disbands required (negative for builds)
    190:    bool set_move_by_convoy_order(ProvinceId unit,
    211:    bool cancel_build_order(ProvinceId province);
    257:    std::string display_movement_order(const UnitOrder& unit,
    260:    std::string display_retreat_order(const UnitOrder& unit) const;
    278:    const LocationSet* get_neighbours(const Location& location) const;
    328:    TokenMessage encode_unit(const UnitOrder& unit) const;
  W048 Data is write-only
    121:    bool game_started;                // set when the game has begun
    147:    word our_number_of_disbands;    // disbands required (negative for builds)
  W050 Data is not private
    113:    Province game_map[PROVINCE_MAX];  // map details
    114:    ProvinceId number_of_provinces;   // number of provinces on map
    115:    PowerId number_of_powers;         // number of powers at outset
    116:    std::string map_name;             // map's name
    117:    Token our_power;                  // power that we are playing
    118:    int passcode;                     // our passcode
    119:    TokenMessage variant;             // rules for this variant
    120:    ProvinceSet home_centres;         // our home centres
    121:    bool game_started;                // set when the game has begun
    122:    bool game_over;                   // set when the game has ended
    123:    Token curr_season;                // current season of play
    124:    int curr_year;                    // current year of play
    125:    UnitOrderMap units;               // non-dislodged units
    126:    UnitOrderMap dislodged_units;     // dislodged units
    127:    WinterOrderMap winter_orders;     // winter orders
    128:    WinterOrders our_winter_orders;   // our winter orders
    129:    UnitOrderMap prev_movements;      // results of previous movement turn
    130:    UnitOrderMap prev_retreats;       // results of previous retreat turn
    131:    WinterOrderMap prev_adjustments;  // results of previous adjustment turn
    132:    Token prev_movement_season;       // season for previous movement results
    136:    bool check_on_submission;    // check orders when submitted (not an AOA game)
    137:    bool check_on_adjudication;  // check orders when adjudicated (AOA game)
    143:    UnitSet our_units;              // our units
    144:    UnitSet our_dislodged_units;    // our units that must retreat or disband
    145:    ProvinceSet open_home_centres;  // our home centres available for builds
    146:    ProvinceSet our_centres;        // the centres that we currently own
    147:    word our_number_of_disbands;    // disbands required (negative for builds)
  W082 Adjacent arguments have the same type
    190:    bool set_move_by_convoy_order(ProvinceId unit,
    399:    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  W092 Function could be free
    157:    static MapAndUnits* instance();
    162:    static MapAndUnits* create_clone();
    166:    static void delete_clone(MapAndUnits*& clone);
    260:    std::string display_retreat_order(const UnitOrder& unit) const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    62:    explicit PowerCentres(const Token& power) : power(power) { }
    72:    UnitLocation(const Token& unit, const Location& loc) :
    83:    explicit PowerUnits(const Token& power) : power(power) { }
    93:    explicit PowerOrders(const Token& power) : power(power) { }
    345:    ~MapAndUnits() = default;
C:/Users/gregu/Documents/rsc/rsc/dip/Province.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Province.h
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    48:    Province();
C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/StartupParameters.h
  W020 Using statement in header
    21: using namespace NetworkBase;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/Token.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    32: Token::Token(const category_t cat, const subtoken_t sub)
    40: int Token::get_number() const
    49: bool Token::is_number() const
    56: bool Token::is_power() const
    63: bool Token::is_province() const
    70: Token& Token::operator=(const Token& that)
    126: Token::SeasonType Token::order_season() const
    137: PowerId Token::power_id() const
    145: ProvinceId Token::province_id() const
    268: Token power_token(PowerId power)
    281: Token province_token(ProvinceId province)
  W119 Argument passed by value is modified
    155/1: bool Token::set_number(int number)
C:/Users/gregu/Documents/rsc/rsc/dip/Token.h
  W020 Using statement in header
    27: using namespace NodeBase;
  W028 Unused data
    212: constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
    213: constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
    214: constexpr category_t CATEGORY_BRACKET = 0x40;
    217: constexpr category_t CATEGORY_ORDER = 0x43;
    219: constexpr category_t CATEGORY_RESULT = 0x45;
    222: constexpr category_t CATEGORY_COMMAND = 0x48;
    223: constexpr category_t CATEGORY_PARAMETER = 0x49;
    224: constexpr category_t CATEGORY_PRESS = 0x4A;
  W042 Member could be private
    99:    bool is_number() const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    40:    Token() : full_(INVALID_TOKEN) { }
    44:    Token(token_t token) : full_(token) { }
    52:    Token(const Token& that) : full_(that.full_) { }
    56:    ~Token() = default;
    179:       split_t() : sub_(INVALID_TOKEN & 0xff), cat_(INVALID_TOKEN >> 8) { }
C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.cpp
  W097 Line indentation is not a multiple of the standard value
    393:              that.length_ * sizeof(Token));
    437:              that.length_ * sizeof(Token));
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    125: Token TokenMessage::at(size_t index) const
    137: void TokenMessage::clear()
    267: Token TokenMessage::front() const
    352: Token TokenMessage::operator[](size_t index) const
    477: bool TokenMessage::operator<(const TokenMessage& that) const
C:/Users/gregu/Documents/rsc/rsc/dip/TokenMessage.h
  W032 Unused function
    48:    explicit TokenMessage(const Token* stream);
    56:    TokenMessage(const TokenMessage& that);
    91:    Token operator[](size_t index) const;
    140:    void set_as_ascii(const std::string& text);
    170:    bool operator<(const TokenMessage& that) const;
  W042 Member could be private
    127:    size_t set_from(const Token* stream, size_t length);
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    333: TokenTextMap* TokenTextMap::instance()
C:/Users/gregu/Documents/rsc/rsc/dip/TokenTextMap.h
  W042 Member could be private
    37:    typedef std::map< Token, std::string > TokenToTextMap;
    38:    typedef std::map< std::string, Token > TextToTokenMap;
  W092 Function could be free
    42:    static TokenTextMap* instance();
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.cpp
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
C:/Users/gregu/Documents/rsc/rsc/dip/UnitOrder.h
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    99:    UnitOrder();
C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.cpp
  W022 Add using statement
    1: namespace NodeBase
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W106 Function does not invoke Debug::ft
    37: size_t WinterOrders::get_number_of_results() const
C:/Users/gregu/Documents/rsc/rsc/dip/WinterOrders.h
  W032 Unused function
    52:    size_t get_number_of_results() const;
  W104 File heading is not standard
    5: //  Diplomacy AI Client - Part of the DAIDE project (www.daide.org.uk).
  W114 Function could be tagged noexcept
    48:    WinterOrders();
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    61:    auto fake = reinterpret_cast< const Circuit* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W053 Data could be const
    90:    RegCell port_;
  W075 Virtual function is public
    69:    virtual std::string Name() const = 0;
    73:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h
  W020 Using statement in header
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
  W032 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    87:    static void* operator new(size_t size);
    92:    explicit MediaEndpt(MediaPsm& psm);
  W042 Member could be private
    104:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
  W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W027 Unused class
    42: class MediaFailureEvent : public Event
  W032 Unused function
    48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    56:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    118:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    107: CliParm* MediaParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    52:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    575:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    252:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    258: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h
  W020 Using statement in header
    37: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    119:    MediaEndpt* Mep() const { return mep_; }
  W042 Member could be private
    131:    Tone::Id GetOgTone() const { return ogTone_; }
    169:    void SetOgPort(Switch::PortId ogport);
    188:    Event* ReceiveMsg(Message& msg) override;
    192:    void PrepareOgMsgq() override;
  W075 Virtual function is public
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
  W077 Virtual function has no overrides
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto mpsm = static_cast< MediaPsm* >(psm);
    118:       auto mpsm = static_cast< MediaPsm* >(psm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W032 Unused function
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W077 Virtual function has no overrides
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    89: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W092 Function could be free
    65:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Tone* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    70:    Id Tid() const { return Id(tid_.GetId()); }
  W020 Using statement in header
    31: using namespace NodeBase;
  W032 Unused function
    70:    Id Tid() const { return Id(tid_.GetId()); }
  W037 Member hides inherited name
    74:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    87:    virtual ~Tone();
C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.cpp
  W006 reinterpret_cast
    86:    auto fake = reinterpret_cast< const Alarm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Alarm.h
  W053 Data could be const
    139:    RegCell aid_;
  W082 Adjacent arguments have the same type
    59:    Alarm(const std::string& name, const std::string& expl, secs_t delay);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    32:    return (void*) ((const_ptr_t) ptr2 - diff);
    32:    return (void*) ((const_ptr_t) ptr2 - diff);
    39:    return (void*) ((const_ptr_t) ptr1 + diff);
    39:    return (void*) ((const_ptr_t) ptr1 + diff);
    76:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
    76:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    32:    return (void*) ((const_ptr_t) ptr2 - diff);
    39:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    32:    return (void*) ((const_ptr_t) ptr2 - diff);
    39:    return (void*) ((const_ptr_t) ptr1 + diff);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h
  W082 Adjacent arguments have the same type
    51:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    55:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
C:/Users/gregu/Documents/rsc/rsc/nb/Allocators.h
  W028 Unused data
    143:       auto addr = Memory::Alloc(n * sizeof(T), MemImm);
    185:       auto addr = Memory::Alloc(n * sizeof(T), MemPerm);
    227:       auto addr = Memory::Alloc(n * sizeof(T), MemProt);
  W032 Unused function
    75:    DynAllocator() = default;
    79:    template< typename U > DynAllocator
    82:    template< typename U > DynAllocator& operator=
    85:    template< typename U > bool operator==
    91:    template<typename U > bool operator!=
    97:    T* allocate(size_t n) const
    105:    void deallocate(T* const addr, size_t n) const
    117:    ImmAllocator() = default;
    121:    template< typename U > ImmAllocator
    124:    template< typename U > ImmAllocator& operator=
    127:    template< typename U > bool operator==
    133:    template<typename U > bool operator!=
    139:    T* allocate(size_t n) const
    147:    void deallocate(T* const addr, size_t n) const
    159:    PermAllocator() = default;
    163:    template< typename U > PermAllocator
    166:    template< typename U > PermAllocator& operator=
    169:    template< typename U > bool operator==
    175:    template<typename U > bool operator!=
    181:    T* allocate(size_t n) const
    189:    void deallocate(T* const addr, size_t n) const
    201:    ProtAllocator() = default;
    205:    template< typename U > ProtAllocator
    208:    template< typename U > ProtAllocator& operator=
    211:    template< typename U > bool operator==
    217:    template<typename U > bool operator!=
    223:    T* allocate(size_t n) const
    231:    void deallocate(T* const addr, size_t n) const
    243:    TempAllocator() = default;
    247:    template< typename U > TempAllocator
    250:    template< typename U > TempAllocator& operator=
    253:    template< typename U > bool operator==
    259:    template<typename U > bool operator!=
    265:    T* allocate(size_t n) const
    273:    void deallocate(T* const addr, size_t n) const
  W033 Unused typedef
    73:    typedef T value_type;
    115:    typedef T value_type;
    157:    typedef T value_type;
    199:    typedef T value_type;
    241:    typedef T value_type;
  W091 Function could be static
    97:    T* allocate(size_t n) const
    265:    T* allocate(size_t n) const
  W092 Function could be free
    79:    template< typename U > DynAllocator
    105:    void deallocate(T* const addr, size_t n) const
    121:    template< typename U > ImmAllocator
    139:    T* allocate(size_t n) const
    147:    void deallocate(T* const addr, size_t n) const
    163:    template< typename U > PermAllocator
    181:    T* allocate(size_t n) const
    189:    void deallocate(T* const addr, size_t n) const
    205:    template< typename U > ProtAllocator
    223:    T* allocate(size_t n) const
    231:    void deallocate(T* const addr, size_t n) const
    247:    template< typename U > TempAllocator
    273:    void deallocate(T* const addr, size_t n) const
  W114 Function could be tagged noexcept
    75:    DynAllocator() = default;
    77:    ~DynAllocator() = default;
    117:    ImmAllocator() = default;
    119:    ~ImmAllocator() = default;
    159:    PermAllocator() = default;
    161:    ~PermAllocator() = default;
    201:    ProtAllocator() = default;
    203:    ~ProtAllocator() = default;
    243:    TempAllocator() = default;
    245:    ~TempAllocator() = default;
  W115 Function should not be tagged noexcept
    85:    template< typename U > bool operator==
    91:    template<typename U > bool operator!=
    127:    template< typename U > bool operator==
    133:    template<typename U > bool operator!=
    169:    template< typename U > bool operator==
    175:    template<typename U > bool operator!=
    211:    template< typename U > bool operator==
    217:    template<typename U > bool operator!=
    253:    template< typename U > bool operator==
    259:    template<typename U > bool operator!=
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h
  W032 Unused function
    170:    const T& Back() const
    178:    T& Back()
    186:    const T& At(size_t index) const
    194:    T& At(size_t index)
    218:    const T* Items() const { return array_; }
  W099 Line contains adjacent spaces
    249:    inline static fn_name Array_ctor()     { return "Array.ctor"; }
    250:    inline static fn_name Array_dtor()     { return "Array.dtor"; }
    251:    inline static fn_name Array_Init()     { return "Array.Init"; }
    252:    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
    254:    inline static fn_name Array_Erase()    { return "Array.Erase"; }
    255:    inline static fn_name Array_Replace()  { return "Array.Replace"; }
    256:    inline static fn_name Array_Extend()   { return "Array.Extend"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    135:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    162:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    100:       objects[count++] = const_cast< Base* >(this);
  W106 Function does not invoke Debug::ft
    130: void Base::Nullify(size_t n)
    158: Base::vptr_t Base::Vptr() const
  W119 Argument passed by value is modified
    130/1: void Base::Nullify(size_t n)
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h
  W042 Member could be private
    109:    virtual void Claim() { }
  W043 Member could be protected
    78:    virtual void Display(std::ostream& stream,
    102:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    78:    virtual void Display(std::ostream& stream,
    97:    virtual void GetSubtended(Base* objects[], size_t& count) const;
    109:    virtual void Claim() { }
    114:    virtual void ClaimBlocks();
    132:    virtual void Cleanup() { }
    140:    virtual void Startup(RestartLevel level) { }
    148:    virtual void Shutdown(RestartLevel level) { }
    152:    virtual MemoryType MemType() const { return MemPerm; }
    156:    virtual const char* ClassName() const;
  W077 Virtual function has no overrides
    156:    virtual const char* ClassName() const;
C:/Users/gregu/Documents/rsc/rsc/nb/CallbackRequest.h
  W075 Virtual function is public
    44:    virtual void Callback() { }
  W090 Function could be const
    44:    virtual void Callback() { }
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp
  W106 Function does not invoke Debug::ft
    52: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h
  W042 Member could be private
    66:    bool SetNext(const std::string& input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(c_string key, c_string def, c_string expl);
  W092 Function could be free
    76:    static fixed_string ValidTrueChars();
    81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h
  W042 Member could be private
    68:    bool SetNextValue(bool value) override;
  W060 Base class constructor is public
    39:    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
  W082 Adjacent arguments have the same type
    39:    CfgBoolParm(c_string key, c_string def, bool* field, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp
  W106 Function does not invoke Debug::ft
    70: bool CfgFlagParm::GetCurrValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h
  W042 Member could be private
    65:    bool SetNextValue(bool value) override;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(c_string key, c_string def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp
  W106 Function does not invoke Debug::ft
    72: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h
  W032 Unused function
    57:    word GetCurrValue() const { return *curr_; }
  W042 Member could be private
    81:    bool SetNext(const std::string& input) override;
  W053 Data could be const
    93:    word min_;
    97:    word max_;
  W060 Base class constructor is public
    39:    CfgIntParm(c_string key, c_string def, word* field,
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(c_string key, c_string def, word* field,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    136:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h
  W042 Member could be private
    65:    c_string Key() const;
    80:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    155:    Q1Link link_;
  W075 Virtual function is public
    69:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W077 Virtual function has no overrides
    115:    virtual std::string GetInput() const;
  W082 Adjacent arguments have the same type
    95:    CfgParm(c_string key, c_string def, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
  W106 Function does not invoke Debug::ft
    276: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h
  W090 Function could be const
    98:    void AddMainArg(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp
  W106 Function does not invoke Debug::ft
    66: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h
  W060 Base class constructor is public
    40:    CfgStrParm(c_string key, c_string def, std::string* field, c_string expl);
  W082 Adjacent arguments have the same type
    40:    CfgStrParm(c_string key, c_string def, std::string* field, c_string expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    91:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h
  W053 Data could be const
    117:    Q1Link link_;
  W092 Function could be free
    82:    static const std::string& ValidKeyChars();
    87:    static const std::string& ValidValueChars();
    92:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp
  W047 Data is init-only
    148:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  W107 Function does not invoke Debug::ft as first statement
    105:       Debug::ft(CinThread_Enter);
    150:    Debug::ft(CinThread_GetLine);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    220:    if(addr != nullptr) return (Object*) addr;
  W006 reinterpret_cast
    75:    auto fake = reinterpret_cast< const Class* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h
  W032 Unused function
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    70:    virtual void FreeQuasiSingleton(Object* obj);
    124:    bool SetVptr(Object& obj);
    131:    bool SetTemplate(Object& obj);
    138:    bool SetQuasiSingleton(Object& obj);
  W042 Member could be private
    66:    virtual Object* GetQuasiSingleton();
    118:    virtual Object* New(size_t size);
  W065 Base class virtual destructor is not public
    107:    virtual ~Class();
  W075 Virtual function is public
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W077 Virtual function has no overrides
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W090 Function could be const
    118:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h
  W065 Base class virtual destructor is not public
    85:    virtual ~CliAppData();
  W075 Virtual function is public
    66:    virtual void EventOccurred(Event evt);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h
  W060 Base class constructor is public
    39:    explicit CliBoolParm(c_string help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.cpp
  W119 Argument passed by value is modified
    158/3:    const string& expl, std::streamsize p) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h
  W043 Member could be protected
    40:    CliCharParm(c_string help, c_string chars,
  W060 Base class constructor is public
    40:    CliCharParm(c_string help, c_string chars,
  W082 Adjacent arguments have the same type
    40:    CliCharParm(c_string help, c_string chars,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h
  W075 Virtual function is public
    76:    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  W082 Adjacent arguments have the same type
    104:    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  W092 Function could be free
    136:    static Rc Exhausted(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    78:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    158:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    78:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    158:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h
  W082 Adjacent arguments have the same type
    59:    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
  W092 Function could be free
    64:    static void DescendTo(CliCookie& cookie, uint32_t index);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp
  W106 Function does not invoke Debug::ft
    136: uint32_t CliCookie::Index(uint32_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    103:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h
  W053 Data could be const
    106:    RegCell iid_;
  W075 Virtual function is public
    71:    virtual void Enter();
    76:    virtual void Exit();
  W077 Virtual function has no overrides
    76:    virtual void Exit();
  W082 Adjacent arguments have the same type
    98:    CliIncrement(c_string name, c_string help, uint32_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h
  W053 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
  W060 Base class constructor is public
    49:    CliIntParm(c_string help, word min, word max,
  W082 Adjacent arguments have the same type
    49:    CliIntParm(c_string help, word min, word max,
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    97:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h
  W032 Unused function
    168:    bool GetCharParm(char& c, CliThread& cli) const;
  W043 Member could be protected
    158:    bool GetBoolParm(bool& b, CliThread& cli) const;
    178:    bool GetPtrParm(void*& p, CliThread& cli) const;
    204:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    253:    bool IsOptional() const { return opt_; }
  W075 Virtual function is public
    135:    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
    143:    virtual void Explain(std::ostream& stream, col_t indent) const;
    153:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    163:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    173:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    183:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    211:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    221:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    231:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    238:    bool GetIdentifier(std::string& s, CliThread& cli,
    244:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W092 Function could be free
    323:    static Rc Mismatch(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    97:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h
  W043 Member could be protected
    39:    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
  W060 Base class constructor is public
    39:    explicit CliPtrParm(c_string help, bool opt = false, c_string tag = nullptr);
C:/Users/gregu/Documents/rsc/rsc/nb/CliStack.h
  W117 Line can merge with the next line and be under the length limit
    65:    const CliCommand* FindCommand
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.cpp
  W119 Argument passed by value is modified
    41/2: CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h
  W042 Member could be private
    61:    c_string HelpText() const;
  W043 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
  W060 Base class constructor is public
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W120 Function returns non-const reference or pointer to member data
    82:    Registry< CliParm >& Parms() { return parms_; }
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.cpp
  W119 Argument passed by value is modified
    144/2: void CliTextParm::Explain(ostream& stream, col_t indent) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h
  W060 Base class constructor is public
    49:    explicit CliTextParm(c_string help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp
  W106 Function does not invoke Debug::ft
    425: CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
  W119 Argument passed by value is modified
    780/2:    (const string& expl, size_t begin, size_t end, col_t indent) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h
  W032 Unused function
    121:    word Result() const { return result_; }
  W050 Data is not private
    187:    std::unique_ptr< CliBuffer > ibuf;
    191:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    91:    char CharPrompt(const std::string& prompt,
    217:    void Report1
  W120 Function returns non-const reference or pointer to member data
    159:    CliCookie& Cookie() { return cookie_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h
  W032 Unused function
    121:    ticks_t UsecsToTicks(usecs_t usecs);
    125:    const SysTime& TimeZero();
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    85:       auto req = static_cast< StreamRequest* >(msg);
  W047 Data is init-only
    93:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    139:       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h
  W092 Function could be free
    48:    static void Spool(c_string s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp
  W106 Function does not invoke Debug::ft
    48: void Debug::Assert(bool condition, debug32_t errval)
    141: void Debug::Reset()
  W107 Function does not invoke Debug::ft as first statement
    75:    Debug::ft(Debug_GenerateSwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h
  W082 Adjacent arguments have the same type
    92:    static void SwLog(fn_name_arg func, debug64_t errval,
  W092 Function could be free
    99:    static void Assert(bool condition, debug32_t errval = 0);
    104:    static void Progress(const std::string& s, bool force = false);
    108:    static void noop();
    148:    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h
  W032 Unused function
    56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h
  W042 Member could be private
    52:    static const std::string& RscPath();
  W092 Function could be free
    46:    static std::string strTimePlace();
    52:    static const std::string& RscPath();
    57:    static const std::string& HelpPath();
    63:    static const std::string& InputPath();
    68:    static const std::string& OutputPath();
    72:    static const std::string& ConsoleFileName();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    43:    Debug::ft(Exception_ctor1);
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h
  W032 Unused function
    65:    Exception(const Exception& that);
    66:    Exception(Exception&& that);
  W065 Base class virtual destructor is not public
    70:    virtual ~Exception() noexcept;
  W075 Virtual function is public
    50:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    234:       auto req = static_cast< FileRequest* >(msg);
  W032 Unused function
    56:    FileRequest(const FileRequest& that);
  W047 Data is init-only
    245:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    278:    MutexGuard guard(&ConsoleFileLock_);
    324:       guard(FunctionGuard::MakeUnpreemptable, faction <= PayloadFaction);
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h
  W082 Adjacent arguments have the same type
    64:    static void Spool(const std::string& name,
  W092 Function could be free
    46:    static ostringstreamPtr CreateStream();
    59:    static void Spool(const std::string& name, ostringstreamPtr& stream,
    64:    static void Spool(const std::string& name,
    73:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h
  W082 Adjacent arguments have the same type
    100:    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp
  W106 Function does not invoke Debug::ft
    40: int FunctionName::compare(fn_name_arg func, c_string str)
    47: size_t FunctionName::find(fn_name_arg func, c_string str)
    55: size_t FunctionName::rfind(fn_name_arg func, c_string str)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h
  W032 Unused function
    39:    size_t find(fn_name_arg func, c_string str);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W004 C-style cast
    391:          auto src = (ptr_t) this;
  W007 Cast down the inheritance hierarchy
    91:       auto curr = static_cast< FunctionTrace* >(rec);
    125:       auto curr = static_cast< FunctionTrace* >(rec);
    189:                   auto last = static_cast< const FunctionTrace* >(rec);
    266:       auto curr = static_cast< FunctionTrace* >(rec);
    305:          curr = static_cast< FunctionTrace* >(rec);
    373:       curr = static_cast< FunctionTrace* >(rec);
    426:          auto curr = static_cast< FunctionTrace* >(rec);
    491:          auto curr = static_cast< FunctionTrace* >(rec);
  W009 Pointer arithmetic
    392:          auto dst = src + sizeof(FunctionTrace);
C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h
  W032 Unused function
    55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp
  W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::ImmediateTrace()
    57: bool InitFlags::TraceInit()
    68: bool InitFlags::TraceWork()
C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp
  W047 Data is init-only
    308:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
C:/Users/gregu/Documents/rsc/rsc/nb/Log.cpp
  W006 reinterpret_cast
    106:    auto fake = reinterpret_cast< const Log* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h
  W053 Data could be const
    177:    RegCell lid_;
  W092 Function could be free
    115:    static Log* Find(fixed_string groupName, LogId id, LogGroup*& group);
    120:    static Log* Find(fixed_string log);
C:/Users/gregu/Documents/rsc/rsc/nb/LogBuffer.cpp
  W004 C-style cast
    327:    auto after = (ptr_t) next_ + size;
    340:       if(wrap && (after > (const_ptr_t) first)) return nullptr;
    347:       if(wrap || (after > (const_ptr_t) first)) return nullptr;
    520:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    520:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    522:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
    522:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  W006 reinterpret_cast
    120:    SetNext(reinterpret_cast< Entry* >(buff_));
    354:       where = reinterpret_cast< Entry* >(buff_);
    362:    SetNext(reinterpret_cast< Entry* >(after));
    403:          SetNext(reinterpret_cast< Entry* >(buff_));
  W009 Pointer arithmetic
    327:    auto after = (ptr_t) next_ + size;
    328:    auto wrap = after >= (buff_ + size_);
    355:       after = buff_ + size;
  W047 Data is init-only
    131:    MutexGuard guard(&lock_);
    259:    MutexGuard guard(&lock_);
    467:    MutexGuard guard(&lock_);
  W106 Function does not invoke Debug::ft
    513: void LogBuffer::UpdateMax()
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.cpp
  W006 reinterpret_cast
    115:    auto fake = reinterpret_cast< const LogGroup* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroup.h
  W042 Member could be private
    81:    id_t Gid() const { return gid_.GetId(); }
    85:    bool Suppressed() const { return suppressed_; }
  W053 Data could be const
    138:    RegCell gid_;
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.cpp
  W106 Function does not invoke Debug::ft
    193: LogGroup* LogGroupRegistry::Group(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/LogGroupRegistry.h
  W032 Unused function
    58:    Log* FindLog(const std::string& name, LogId id) const;
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    65:       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
  W047 Data is init-only
    208:    MutexGuard guard(&LogFileLock_);
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.h
  W092 Function could be free
    66:    static void CopyToConsole(const ostringstreamPtr& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp
  W004 C-style cast
    227:    auto seg = (Segment*) addr;
    284:    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
    335:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
    386:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  W092 Function could be free
    151:    static size_t Size();
  W106 Function does not invoke Debug::ft
    154: size_t SegmentHeader::Size()
    171: SysHeap* Memory::AccessHeap(MemoryType type)
    189: size_t Memory::Align(size_t size, size_t log2align)
    257: SysHeap* Memory::EnsureHeap(MemoryType type)
    311: const SysHeap* Memory::Heap(MemoryType type)
    405: size_t Memory::Words(size_t nBytes)
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h
  W032 Unused function
    60:    static void Set(void* dest, byte_t value, size_t nBytes);
    83:    static bool Verify(MemoryType type, void* addr);
  W092 Function could be free
    48:    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
    52:    static size_t Words(size_t nBytes);
    56:    static void Copy(void* dest, const void* source, size_t nBytes);
    60:    static void Set(void* dest, byte_t value, size_t nBytes);
    78:    static void* Realloc(void* addr, size_t nBytes);
    87:    static MemoryType Type(const void* addr);
    95:    static void Shutdown(RestartLevel level);
    99:    static SysHeap* EnsureHeap(MemoryType type);
    103:    static SysHeap* AccessHeap(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    66:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h
  W092 Function could be free
    57:    static c_string TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    68:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h
  W032 Unused function
    108:    ModuleId Mid() const { return mid_.GetId(); }
    116:    virtual ModuleId* Dependencies(size_t& count) const;
  W065 Base class virtual destructor is not public
    151:    virtual ~Module();
  W075 Virtual function is public
    116:    virtual ModuleId* Dependencies(size_t& count) const;
  W077 Virtual function has no overrides
    116:    virtual ModuleId* Dependencies(size_t& count) const;
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp
  W005 Functional cast
    106:          return RestartLevel(errval_);
  W106 Function does not invoke Debug::ft
    152: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h
  W092 Function could be free
    87:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp
  W106 Function does not invoke Debug::ft
    74: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h
  W060 Base class constructor is public
    41:    MsgBuffer();
    45:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    62:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp
  W107 Function does not invoke Debug::ft as first statement
    38:    Debug::ft(MutexGuard_ctor);
    51:       Debug::ft(MutexGuard_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/NbAppIds.h
  W028 Unused data
    93: constexpr FlagId FirstAppDebugFlag = 8;
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp
  W106 Function does not invoke Debug::ft
    119: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h
  W028 Unused data
    71: extern fixed_string NotImplementedExpl;
  W082 Adjacent arguments have the same type
    123: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    641:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    849:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1234:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    2949:       auto heap = Memory::Heap(MemoryType(m));
  W047 Data is init-only
    2200:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W092 Function could be free
    914:    static word DisplayHelp(const CliThread& cli, const string& key);
    2397:    static void SendAckToOutputFile(const CliThread& cli);
  W117 Line can merge with the next line and be under the length limit
    2927: fixed_string PoolsHeader1 =
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h
  W028 Unused data
    188:    static const id_t LastNbIndex     = 3;
  W060 Base class constructor is public
    41:    StatusCommand();
    55:    LogsAction();
    74:    explicit LogsCommand(bool bind = true);
    90:    SetWhatParm();
    103:    explicit SetCommand(bool bind = true);
    119:    IncludeWhatParm();
    133:    explicit IncludeCommand(bool bind = true);
    149:    ExcludeWhatParm();
    162:    explicit ExcludeCommand(bool bind = true);
    192:    explicit QueryCommand(bool bind = true);
    208:    SaveWhatParm();
    220:    explicit SaveCommand(bool bind = true);
    236:    ClearWhatParm();
    254:    explicit ClearCommand(bool bind = true);
  W111 Override of Object.Patch not found
    38: class StatusCommand : public CliCommand
    59: class LogsCommand : public CliCommand
    94: class SetCommand : public CliCommand
    123: class IncludeCommand : public CliCommand
    153: class ExcludeCommand : public CliCommand
    182: class QueryCommand : public CliCommand
    212: class SaveCommand : public CliCommand
    240: class ClearCommand : public CliCommand
C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h
  W047 Data is init-only
    64:    static bool Registered;
  W092 Function could be free
    60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    207:             stream << Faction(f) << CRLF;
  W106 Function does not invoke Debug::ft
    172: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h
  W042 Member could be private
    77:    static bool ThreadsEmpty();
  W092 Function could be free
    73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    77:    static bool ThreadsEmpty();
  W110 Override of Base.Display not found
    63: class NbTracer : public Permanent
  W111 Override of Object.Patch not found
    63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp
  W103 Function not sorted in standard order
    81: char BlockingReasonChar(BlockingReason reason)
    112: char FactionChar(Faction faction)
    132: LogType GetLogType(LogId id)
  W106 Function does not invoke Debug::ft
    81: char BlockingReasonChar(BlockingReason reason)
    112: char FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h
  W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
  W032 Unused function
    122: std::ostream& operator<<(std::ostream& stream, AlarmStatus status);
  W033 Unused typedef
    216: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
    217: typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
    218: typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
  W099 Line contains adjacent spaces
    215: typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
    216: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    141:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W106 Function does not invoke Debug::ft
    71: Object::ClassId Object::GetClassId() const
    82: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    109: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h
  W032 Unused function
    95:    ClassId GetClassId() const;
    107:    ObjectId GetObjectId() const;
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    121:    static void* operator new(size_t size, MemoryType type);
    122:    static void* operator new[](size_t size, MemoryType type);
    124:    static void operator delete[](void* addr);
    125:    static void operator delete(void* addr, MemoryType type);
    126:    static void operator delete[](void* addr, MemoryType type);
    135:    void MorphTo(Class& target);
  W042 Member could be private
    70:    typedef uint32_t InstanceId;  // identifies an object within a Class
    71:    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
    101:    virtual InstanceId GetInstanceId() const;
  W043 Member could be protected
    48:    typedef uint8_t sel_t;
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    69:    typedef id_t ClassId;         // identifies a Class
  W053 Data could be const
    140:    uintptr_t patchArea_;
  W075 Virtual function is public
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W077 Virtual function has no overrides
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W092 Function could be free
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    249:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
    273:          auto b = (ObjectBlock*) &seg[j];
    325:             auto b = (ObjectBlock*) &seg[j];
    361:             auto curr = (Pooled*) getptr1(item, diff);
    757:       return (ObjectBlock*) &blocks_[0][0];
    827:       return (ObjectBlock*) &blocks_[i][j];
    852:             auto b = (ObjectBlock*) &seg[j];
    884:    auto block = (const_ptr_t) ObjToBlock(obj);
    885:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    889:       auto b0 = (const_ptr_t) &blocks_[i][0];
    932:    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
    962:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    116:       reinterpret_cast< word* >(&pool->targSegments_), 0,
    490:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W099 Line contains adjacent spaces
    99:    CounterPtr      allocCount_;
    100:    CounterPtr      freeCount_;
    101:    CounterPtr      failCount_;
    102:    CounterPtr      auditCount_;
  W106 Function does not invoke Debug::ft
    289: size_t ObjectPool::AllocCount() const
    456: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    741: size_t ObjectPool::FailCount() const
    786: size_t ObjectPool::FreeCount() const
    793: bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
    805: size_t ObjectPool::InUseCount() const
    812: size_t ObjectPool::LowAvailCount() const
    819: ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
    838: Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
    911: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    920: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    929: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W110 Override of Base.Display not found
    79: class ObjectPoolSizeCfg : public CfgIntParm
    92: class ObjectPoolStats : public Dynamic
  W119 Argument passed by value is modified
    456/1: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    472/1: Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
    498/1: bool ObjectPool::Corrupt(size_t n)
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    94:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W042 Member could be private
    188:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    215:    virtual ~ObjectPool();
  W075 Virtual function is public
    105:    virtual Pooled* DeqBlock(size_t size);
    110:    virtual void EnqBlock(Pooled* obj, bool deleted);
    174:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  W077 Virtual function has no overrides
    105:    virtual Pooled* DeqBlock(size_t size);
    110:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    235:    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
    240:    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  W092 Function could be free
    262:    static ObjectBlock* ObjToBlock(const Pooled* obj);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
  W106 Function does not invoke Debug::ft
    291: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
  W042 Member could be private
    56:    static bool NullifyObjectData() { return NullifyObjectData_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h
  W032 Unused function
    57:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp
  W106 Function does not invoke Debug::ft
    48: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h
  W092 Function could be free
    41:    static PermanentHeap* Instance();
  W111 Override of Object.Patch not found
    36: class PermanentHeap : public SysHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    143:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    117:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
  W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    73:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W106 Function does not invoke Debug::ft
    128: Flags PS_Break()
    133: Flags PS_Delayed()
    138: Flags PS_Exit()
    143: Flags PS_Final()
    148: Flags PS_Interrupt()
    153: Flags PS_Native()
    158: Flags PS_NoError()
    163: Flags PS_NoLog()
    168: Flags PS_NoRecover()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h
  W053 Data could be const
    126:    uint8_t severity_;
    130:    Flags attrs_;
    134:    RegCell sid_;
  W065 Base class virtual destructor is not public
    110:    virtual ~PosixSignal();
  W082 Adjacent arguments have the same type
    104:    PosixSignal(signal_t value, c_string name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
  W106 Function does not invoke Debug::ft
    57: Flags PosixSignalRegistry::Attrs(signal_t value) const
    90: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    102: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h
  W032 Unused function
    56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ft(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h
  W032 Unused function
    62:    bool IsQueued() const { return next != nullptr; }
  W114 Function could be tagged noexcept
    48:    Q1Link();
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h
  W088 Argument could be const
    87/1:    bool Enq(T& elem)
    108/1:    bool Henq(T& elem)
    130/1:    bool Insert(T* prev, T& elem)
    165/1:    bool Exq(T& elem)
    322/1:    void Corrupt(T* elem)
  W099 Line contains adjacent spaces
    383:    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
    384:    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
    385:    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
    386:    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
    388:    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
    389:    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
    390:    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
    391:    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
    392:    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
    393:    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  W114 Function could be tagged noexcept
    57:    Q1Way() : diff_(NilDiff) { }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp
  W106 Function does not invoke Debug::ft
    40: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h
  W032 Unused function
    62:    bool IsQueued() const { return next != nullptr; }
  W114 Function could be tagged noexcept
    48:    Q2Link();
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h
  W088 Argument could be const
    144/1:    bool Exq(T& elem)
  W090 Function could be const
    144:    bool Exq(T& elem)
  W099 Line contains adjacent spaces
    357:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    358:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    359:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    360:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    361:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    362:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    363:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    364:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    365:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    367:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  W114 Function could be tagged noexcept
    55:    Q2Way() : diff_(NilDiff) { }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp
  W106 Function does not invoke Debug::ft
    38: RegCell::~RegCell()
    50: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.h
  W114 Function could be tagged noexcept
    50:    RegCell();
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h
  W088 Argument could be const
    275/1:    bool Erase(T& item)
  W099 Line contains adjacent spaces
    623:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    624:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    625:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    627:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    628:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    629:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    630:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    631:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    632:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    633:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h
  W092 Function could be free
    84:    static void Initiate(reinit_t reason, debug32_t errval);
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h
  W099 Line contains adjacent spaces
    127:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp
  W106 Function does not invoke Debug::ft
    125: Singletons* Singletons::Instance()
  W114 Function could be tagged noexcept
    42:    SingletonTuple(const Base** a, MemoryType t) : addr(a), type(t) { }
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h
  W060 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
  W117 Line can merge with the next line and be under the length limit
    41:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    86:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W106 Function does not invoke Debug::ft
    114: uint64_t Statistic::Overall() const
    259: uint64_t HighWatermark::Overall() const
    337: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h
  W042 Member could be private
    73:    static ptrdiff_t CellDiff();
  W043 Member could be protected
    69:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  W050 Data is not private
    96:    std::atomic_size_t curr_;
    100:    std::atomic_size_t prev_;
    104:    std::atomic_uint64_t total_;
    108:    size_t divisor_;
  W053 Data could be const
    120:    RegCell sid_;
  W060 Base class constructor is public
    136:    explicit Counter(const std::string& expl, size_t divisor = 1);
  W075 Virtual function is public
    65:    virtual uint64_t Overall() const;
    69:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    78:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  W099 Line contains adjacent spaces
    39: fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h
  W042 Member could be private
    63:    id_t Gid() const { return gid_.GetId(); }
    67:    static ptrdiff_t CellDiff();
  W053 Data could be const
    102:    RegCell gid_;
  W075 Virtual function is public
    75:    virtual void DisplayStats
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
  W106 Function does not invoke Debug::ft
    125: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h
  W042 Member could be private
    76:    StatisticsGroup* GetGroup(id_t gid) const;
    80:    void DisplayStats(std::ostream& stream, const Flags& options) const;
  W090 Function could be const
    110:    void StartInterval(bool first);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h
  W053 Data could be const
    53:    static secs_t LongIntervalSecs;
    58:    static secs_t ShortIntervalSecs;
    65:    static size_t WakeupsBetweenReports;
    70:    static ticks_t PrevToCurrTicks;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h
  W043 Member could be protected
    59:    StreamRequest(const StreamRequest& that);
  W060 Base class constructor is public
    54:    StreamRequest();
    59:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    99:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h
  W053 Data could be const
    109:    Q1Link link_;
  W092 Function could be free
    58:    static const std::string& ValidNameChars();
    63:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    57:    bool BindSymbol
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp
  W106 Function does not invoke Debug::ft
    33: std::istream& SysConsole::In()
    40: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h
  W032 Unused function
    95:    void GetCurrDir(std::string& dirName);
  W075 Virtual function is public
    47:    virtual void GetName(std::string& fileName) const = 0;
    51:    virtual bool IsSubdir() const = 0;
    55:    virtual bool AtEnd() const = 0;
    60:    virtual bool Advance() = 0;
  W082 Adjacent arguments have the same type
    107:    bool FindFiles(const char* dirName,
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp
  W056 Default constructor invoked: POD members not initialized
    57:    _finddata_t attributes_;
  W062 Member not included in member initialization list
    40:    FileWalker(const char* dirName, const char* fileSpec);
    57:    _finddata_t attributes_;
  W106 Function does not invoke Debug::ft
    99: bool FileWalker::AtEnd() const
    106: void FileWalker::GetName(string& fileName) const
    115: bool FileWalker::IsSubdir() const
  W110 Override of Base.Display not found
    37: class FileWalker : public FileList
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h
  W032 Unused function
    106:    static void* operator new[](size_t size);
    111:    static void operator delete[](void* addr);
  W090 Function could be const
    60:    bool Validate(const void* addr);
  W092 Function could be free
    92:    static void DisplayHeaps(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    163:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp
  W018 Remove #include directive
    23: #include "SysMemory.h"
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp
  W106 Function does not invoke Debug::ft
    48: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp
  W107 Function does not invoke Debug::ft as first statement
    107:    Debug::ft(SysMutex_Acquire);
C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h
  W027 Unused class
    61:    class SigBus : public PosixSignal
  W092 Function could be free
    41:    static void CreateNativeSignals();
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h
  W030 Unused enumerator
    58:       LowPriority,       // preemptable threads
  W082 Adjacent arguments have the same type
    110:    static SysThread_t Create(const ThreadEntry entry,
  W088 Argument could be const
    111/4:       const Thread* client, size_t stackSize, SysThreadId& nid);
  W090 Function could be const
    146:    DelayRc Delay(msecs_t msecs);
    152:    bool Interrupt();
  W092 Function could be free
    52:    static SysThreadId RunningThreadId();
    117:    static SysThread_t Wrap();
    121:    static void Delete(SysThread_t& thread);
    126:    static SysSentry_t CreateSentry();
    130:    static void DeleteSentry(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
    144:       (DWORD*) &nid);                  // updates thread's identifier
    345:    _set_se_translator((_se_translator_function) SE_Handler);
  W008 Cast removes const qualification
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
  W026 Unused argument
    52/2: void SE_Handler(uint32_t errval, void* ex)
  W106 Function does not invoke Debug::ft
    269: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    296: SysThreadId SysThread::RunningThreadId()
  W107 Function does not invoke Debug::ft as first statement
    57:    Debug::ft(NodeBase_SE_Handler);  //@
  W119 Argument passed by value is modified
    170/1: DelayRc SysThread::Delay(msecs_t msecs)
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h
  W026 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    164:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  W015 #include not sorted in standard order
    29: #include <dbghelp.h>
  W082 Adjacent arguments have the same type
    77:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W106 Function does not invoke Debug::ft
    122: DWORD64 StackInfo::GetFrame(fn_depth depth)
    138: fn_depth StackInfo::GetFrames()
    146: void StackInfo::Shutdown()
    155: DWORD StackInfo::Startup()
    267: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h
  W032 Unused function
    71:    bool TickTimingAvailable() const { return available_; }
  W110 Override of Base.Display not found
    41: class SysTickTimer : public Immutable
  W111 Override of Object.Patch not found
    41: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W056 Default constructor invoked: POD members not initialized
    44:    LARGE_INTEGER frequency;
    75:       LARGE_INTEGER now;
    81:       _timeb now;
  W106 Function does not invoke Debug::ft
    71: ticks_t SysTickTimer::TicksNow() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    361:          Truncate(TimeField(int(field) + 1));
    544:          return OutOfRange(TimeField(f));
  W106 Function does not invoke Debug::ft
    180: int16_t SysTime::DayOfWeek() const
    190: int16_t SysTime::DayOfYear() const
    206: const int16_t* SysTime::DaysPerMonth(int16_t year)
    214: size_t SysTime::DaysSinceT0() const
    244: bool SysTime::IsLeapYear(int16_t year)
    264: int64_t SysTime::MsecsSinceT0() const
  W119 Argument passed by value is modified
    105/1: void SysTime::AddDays(size_t days)
    140/1: void SysTime::AddMsecs(msecs_t msecs)
    404/1: void SysTime::SubDays(size_t days)
    439/1: void SysTime::SubMsecs(msecs_t msecs)
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h
  W032 Unused function
    77:    int16_t Get(TimeField field) const { return time_[field]; }
  W042 Member could be private
    81:    int16_t DayOfWeek() const;
    132:    c_string strMonth() const;
  W082 Adjacent arguments have the same type
    72:    SysTime(int16_t year, int16_t month, int16_t day,
  W092 Function could be free
    89:    static bool IsLeapYear(int16_t year);
    154:    static const int16_t* DaysPerMonth(int16_t year);
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp
  W056 Default constructor invoked: POD members not initialized
    41:    _timeb timebuff;
    42:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    34:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W106 Function does not invoke Debug::ft
    31: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h
  W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  W044 Typedef of pointer type
    88: typedef char* ptr_t;
    89: typedef const char* const_ptr_t;
    106: typedef const char* c_string;
    107: typedef const char* const fixed_string;
    112: typedef const char* const fn_name;      // for defining a function name
    113: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h
  W032 Unused function
    55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp
  W106 Function does not invoke Debug::ft
    30: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    37: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    44: void ThisThread::IncludeInTrace()
    51: void ThisThread::MakePreemptable()
    58: void ThisThread::MakeUnpreemptable()
    65: void ThisThread::MemProtect()
    72: void ThisThread::MemUnprotect()
    79: DelayRc ThisThread::Pause(msecs_t msecs)
    86: void ThisThread::PauseOver(word limit)
    93: word ThisThread::RtcPercentUsed()
    100: ThreadId ThisThread::RunningThreadId()
    107: TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
    114: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1169:    auto fake = reinterpret_cast< const Thread* >(&local);
  W009 Pointer arithmetic
    2681:    ptrdiff_t stacksize = &local - priv_->stackBase_;
  W047 Data is init-only
    483:    MutexGuard guard(&lock_);
    677:    MutexGuard guard(&lock_);
    712:    MutexGuard guard(&lock_);
  W092 Function could be free
    89:    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  W099 Line contains adjacent spaces
    265:    CounterPtr       traps_;
    266:    CounterPtr       yields_;
    267:    CounterPtr       exceeds_;
    271:    AccumulatorPtr   totUsecs_;
  W106 Function does not invoke Debug::ft
    439: ContextSwitch* ContextSwitches::AddSwitch()
    1150: TraceStatus Thread::CalcStatus(bool dynamic) const
    1529: main_t Thread::EnterThread(void* arg)
    1733: void Thread::FunctionInvoked(fn_name_arg func)
    1830: bool Thread::HasExited() const
    1893: bool Thread::IsLocked() const
    1900: Thread* Thread::LockedThread()
    1967: TraceRc Thread::LogContextSwitches(bool on)
    2092: SysThreadId Thread::NativeThreadId() const
    2120: DelayRc Thread::Pause(msecs_t msecs)
    2160: double Thread::PercentIdle()
    2521: bool Thread::RunningLocked()
    2672: void Thread::StackCheck()
    2944: TraceRc Thread::StartTracing(bool immediate, bool autostop)
    2980: void Thread::StopTracing()
    3043: void Thread::Trace(Thread* thr, fn_name_arg func, TraceRecordId rid, word info)
    3059: bool Thread::TraceRunningThread(Thread*& thr)
    3094: void Thread::TrapCheck()
  W107 Function does not invoke Debug::ft as first statement
    1653:    Debug::ft(Thread_ExitIfSafe);
    2466:    Debug::ft(Thread_ResumeLocked);
    2644:    Debug::ft(Thread_SignalHandler);
    2716:          Debug::ft(Thread_Start);
    3228:       Debug::ft(Thread_Unlock);
  W110 Override of Base.Display not found
    259: class ThreadStats : public Dynamic
    352: class ContextSwitches : public Permanent
    607: class Orphans : public Permanent
  W111 Override of Object.Patch not found
    352: class ContextSwitches : public Permanent
    607: class Orphans : public Permanent
    740: class ThreadPriv : public Permanent
  W114 Function could be tagged noexcept
    309:    ContextSwitch();
  W117 Line can merge with the next line and be under the length limit
    469: fixed_string SwitchFooter =
  W119 Argument passed by value is modified
    1776/1: bool Thread::HandleSignal(signal_t sig, uint32_t code)
    2120/1: DelayRc Thread::Pause(msecs_t msecs)
    3043/1: void Thread::Trace(Thread* thr, fn_name_arg func, TraceRecordId rid, word info)
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h
  W005 Functional cast
    157:    Id Tid() const { return Id(tid_.GetId()); }
  W026 Unused argument
    353/2:       (BlockingReason why, fn_name_arg func) { return true; }
    362/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W032 Unused function
    121:    static std::atomic_uint32_t* Vector();
    169:    bool ChangeFaction(Faction faction);
  W042 Member could be private
    125:    static bool TestFlag(FlagId fid);
    129:    static void ResetFlag(FlagId fid);
    161:    SysThreadId NativeThreadId() const;
    238:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    280:    virtual ~Thread();
  W075 Virtual function is public
    186:    virtual TraceStatus CalcStatus(bool dynamic) const;
    210:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  W077 Virtual function has no overrides
    210:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
    292:    virtual bool EnqMsg(MsgBuffer& msg);
    298:    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  W082 Adjacent arguments have the same type
    561:    void DisplaySummary
  W090 Function could be const
    117:    bool Interrupt(const Flags& mask = Flags());
    509:    void SetTrap(bool on);
    517:    void StackCheck();
    529:    void SetSignal(signal_t sig);
  W092 Function could be free
    105:    static void PauseOver(word limit);
    219:    static double PercentIdle();
    223:    static TraceRc LogContextSwitches(bool on);
    227:    static void DisplayContextSwitches(std::ostream& stream);
    439:    static SysThread::Priority FactionToPriority(Faction& faction);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp
  W106 Function does not invoke Debug::ft
    289: bool ThreadAdmin::BreakEnabled()
    386: void ThreadAdmin::Incr(Register r)
    494: word ThreadAdmin::TrapCount()
  W110 Override of Base.Display not found
    51: class ThreadsStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h
  W092 Function could be free
    90:    static int WarpFactor();
  W099 Line contains adjacent spaces
    176:    CfgIntParmPtr  initTimeoutMsecs_;
    177:    CfgIntParmPtr  schedTimeoutMsecs_;
    179:    CfgIntParmPtr  rtcTimeoutMsecs_;
    181:    CfgIntParmPtr  rtcLimit_;
    182:    CfgIntParmPtr  rtcInterval_;
    184:    CfgIntParmPtr  trapLimit_;
    185:    CfgIntParmPtr  trapInterval_;
    187:    CfgIntParmPtr  stackUsageLimit_;
    188:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp
  W106 Function does not invoke Debug::ft
    210: ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
    219: Thread* ThreadRegistry::GetThread(ThreadId tid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h
  W090 Function could be const
    112:    void AssociateIds(const Thread& thread);
C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h
  W043 Member could be protected
    48:    ticks_t GetTicks() const { return ticks_; }
    52:    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
    56:    SysThreadId Nid() const { return nid_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h
  W065 Base class virtual destructor is not public
    97:    virtual ~Tool();
  W075 Virtual function is public
    61:    virtual c_string Name() const = 0;
    65:    virtual c_string Expl() const = 0;
    71:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp
  W106 Function does not invoke Debug::ft
    117: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp
  W103 Function not sorted in standard order
    68: ostream& operator<<(ostream& stream, TraceStatus status)
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    125:    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
    235:    auto addr = (TraceRecord*) &buff_[end_];
    431:       next = (uword*) record + incr;
    449:             record = (TraceRecord*) buff_;  // case (b)
    453:          record = (TraceRecord*) next;
    462:       next = (uword*) record + incr;
    488:       auto record = (TraceRecord*) &buff_[start_];
    595:    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  W009 Pointer arithmetic
    431:       next = (uword*) record + incr;
    462:       next = (uword*) record + incr;
  W106 Function does not invoke Debug::ft
    111: TraceBuffer::TraceBuffer() :
    139: TraceBuffer::~TraceBuffer()
    153: void* TraceBuffer::AddRecord(size_t nBytes)
    354: bool TraceBuffer::Empty() const
    385: bool TraceBuffer::IsLocked()
    394: void TraceBuffer::Lock()
    414: void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
    475: void TraceBuffer::PurgeRecords(size_t end)
    543: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    747: void TraceBuffer::Unlock()
  W119 Argument passed by value is modified
    335/1: TraceRc TraceBuffer::DisplayTrace(ostream* stream, bool diff)
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h
  W032 Unused function
    173:    const SysTime& StartTimeFull() const { return startTime_; }
  W042 Member could be private
    182:    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  W110 Override of Base.Display not found
    62: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp
  W005 Functional cast
    42:    size_(int16_t(size)),
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h
  W032 Unused function
    99:    static void operator delete(void* addr, void* where) { }
  W042 Member could be private
    90:    static void operator delete(void* addr) { }
    94:    static void* operator new(size_t size, void* where);
  W043 Member could be protected
    71:    void Nullify() { owner_ = NIL_ID; }
  W050 Data is not private
    136:    Id rid_ : 8;
  W075 Virtual function is public
    80:    virtual bool Display(std::ostream& stream, bool diff);
  W090 Function could be const
    116:    virtual void ClaimBlocks() { }
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    58:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  W007 Cast down the inheritance hierarchy
    198:             auto ft = static_cast<FunctionTrace*>(rec);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W082 Adjacent arguments have the same type
    88:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W090 Function could be const
    82:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W092 Function could be free
    88:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W110 Override of Base.Display not found
    49: class FunctionProfiler : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    76:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    47: int FunctionStats::Compare(const FunctionStats& that) const
    65: void FunctionStats::IncrCalls(usecs_t net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W053 Data could be const
    84:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3221:    pool->time_[id1].Truncate(TimeField(field - 1));
    3252:    pool->time_[id1].Round(TimeField(field - 1), interval);
  W006 reinterpret_cast
    1367:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    1887:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2448:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
    3682:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W022 Add using statement
    1: namespace NodeBase
  W042 Member could be private
    3466:    typedef id_t Test;
  W047 Data is init-only
    278:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    470:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W053 Data could be const
    1231:    Q1Link link_;
    1743:    Q2Link link_;
  W082 Adjacent arguments have the same type
    219:    word Sort(const string& input, const string& output, string& expl) const;
  W092 Function could be free
    219:    word Sort(const string& input, const string& output, string& expl) const;
    3488:    static void UseBadPointer();
    3489:    static void LoopForever();
  W106 Function does not invoke Debug::ft
    1346: Q1WayItem::~Q1WayItem()
    1380: Q1WayPool::Q1WayPool()
    1409: void Q1WayPool::Reallocate()
    1866: Q2WayItem::~Q2WayItem()
    1900: Q2WayPool::Q2WayPool()
    1929: void Q2WayPool::Reallocate()
    2430: RegistryItem::~RegistryItem()
    2461: RegistryPool::RegistryPool()
  W107 Function does not invoke Debug::ft as first statement
    3562:       Debug::ft(RecoveryTestThread_Enter);
    3644:       Debug::ft(RecoveryTestThread_LoopForever);
  W110 Override of Base.Display not found
    1093: class LbcPool : public Temporary
    2852: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W028 Unused data
    80:    static const id_t LastNtIndex    = FuncTraceScope;
  W060 Base class constructor is public
    44:    CorruptWhatParm();
    56:    explicit CorruptCommand(bool bind = true);
    98:    NtSaveWhatParm();
    110:    explicit NtSaveCommand(bool bind = true);
    124:    SizesCommand();
    139:    TestcaseAction();
    160:    explicit TestcaseCommand(bool bind = true);
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    68:    return static_cast< NtTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W090 Function could be const
    82:    void Reset();
  W092 Function could be free
    45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.cpp
  W047 Data is init-only
    97:    FunctionGuard guard(FunctionGuard::MakePreemptable);
    247:    FunctionGuard guard(FunctionGuard::MakePreemptable);
  W106 Function does not invoke Debug::ft
    154: TestDatabase::State TestDatabase::GetState(const string& testcase)
C:/Users/gregu/Documents/rsc/rsc/nt/TestDatabase.h
  W110 Override of Base.Display not found
    41: class TestDatabase : public NodeBase::Temporary
  W114 Function could be tagged noexcept
    141:       TestInfo(State state, uint32_t hash) : state(state), hash(hash) { }
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h
  W026 Unused argument
    135/3:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
    140/1:    virtual void SocketFailed(SysSocket* socket) const { }
  W075 Virtual function is public
    98:    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
    106:    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
    125:    virtual void ReceiveBuff
    134:    virtual NodeBase::byte_t* HostToNetwork
    140:    virtual void SocketFailed(SysSocket* socket) const { }
  W088 Argument could be const
    135/1:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    80:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  W009 Pointer arithmetic
    198:       source += rcvd;
  W119 Argument passed by value is modified
    152/2:    (const IpPort& port, const byte_t* source, size_t size) const
    152/3:    (const IpPort& port, const byte_t* source, size_t size) const
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h
  W042 Member could be private
    87:    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  W050 Data is not private
    91:    const ipport_t port_;
    96:    IpPort* ipPort_;
    100:    SysIpL2Addr host_;
    104:    size_t recvs_;
    108:    SysIpL3Addr txAddr_;
    113:    SysIpL3Addr rxAddr_;
    117:    NodeBase::ticks_t ticks0_;
    121:    NodeBase::byte_t* buffer_;
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    73:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    92:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    132:       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  W009 Pointer arithmetic
    144:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    144:       Memory::Copy((buff_ + hdrSize_ + paySize), source, size);
    245:       bytes = buff_ + hdrSize_;
    271:    bytes += hdrSize_;
  W106 Function does not invoke Debug::ft
    206: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h
  W009 Pointer arithmetic
    101:    NodeBase::byte_t* PayloadPtr() const { return buff_ + hdrSize_; }
  W060 Base class constructor is public
    50:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
    54:    IpBuffer(const IpBuffer& that);
  W075 Virtual function is public
    114:    virtual size_t PayloadSize() const;
    133:    virtual bool AddBytes
  W082 Adjacent arguments have the same type
    50:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  W092 Function could be free
    168:    static size_t BuffSize(size_t nBytes);
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    299:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W099 Line contains adjacent spaces
    55:    CounterPtr       recvs_;
    56:    AccumulatorPtr   bytesRcvd_;
    59:    CounterPtr       discards_;
    60:    CounterPtr       rejects_;
    61:    CounterPtr       sends_;
    62:    AccumulatorPtr   bytesSent_;
    64:    CounterPtr       overflows_;
  W106 Function does not invoke Debug::ft
    208: size_t IpPort::Discards() const
  W110 Override of Base.Display not found
    49: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h
  W053 Data could be const
    195:    NodeBase::Q1Link link_;
  W075 Virtual function is public
    100:    virtual SysTcpSocket* CreateAppSocket();
    139:    virtual void DisplayStats
  W077 Virtual function has no overrides
    139:    virtual void DisplayStats
  W090 Function could be const
    177:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W082 Adjacent arguments have the same type
    46:    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp
  W106 Function does not invoke Debug::ft
    286: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W110 Override of Base.Display not found
    47: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    71:    auto fake = reinterpret_cast< const IpService* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h
  W032 Unused function
    85:    virtual NodeBase::CliText* CreateText() const = 0;
  W053 Data could be const
    150:    NodeBase::RegCell sid_;
  W065 Base class virtual destructor is not public
    137:    virtual ~IpService();
  W075 Virtual function is public
    57:    virtual NodeBase::c_string Name() const = 0;
    61:    virtual IpProtocol Protocol() const = 0;
    66:    virtual ipport_t Port() const = 0;
    70:    virtual NodeBase::Faction GetFaction() const = 0;
    74:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    78:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
    85:    virtual NodeBase::CliText* CreateText() const = 0;
    91:    virtual bool HasSharedSocket() const = 0;
    99:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W077 Virtual function has no overrides
    74:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    78:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  W090 Function could be const
    146:    virtual IpPort* CreatePort(ipport_t pid) = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h
  W032 Unused function
    48:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h
  W060 Base class constructor is public
    39:    NwClearWhatParm();
    54:    explicit NwClearCommand(bool bind = true);
    68:    NwExcludeWhatParm();
    81:    explicit NwExcludeCommand(bool bind = true);
    95:    NwIncludeWhatParm();
    108:    explicit NwIncludeCommand(bool bind = true);
    124:    explicit NwQueryCommand(bool bind = true);
    138:    NwStatusCommand() = default;
  W111 Override of Object.Patch not found
    43: class NwClearCommand : public NodeBase::ClearCommand
    72: class NwExcludeCommand : public NodeBase::ExcludeCommand
    99: class NwIncludeCommand : public NodeBase::IncludeCommand
    119: class NwQueryCommand : public NodeBase::QueryCommand
    135: class NwStatusCommand : public NodeBase::StatusCommand
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h
  W047 Data is init-only
    64:    static bool Registered;
  W092 Function could be free
    60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h
  W042 Member could be private
    55:    bool PeersEmpty() const;
    59:    bool PortsEmpty() const;
  W110 Override of Base.Display not found
    40: class NwTracer : public NodeBase::Permanent
  W111 Override of Object.Patch not found
    40: class NwTracer : public NodeBase::Permanent
  W114 Function could be tagged noexcept
    104:       PeerFilter();
    105:       PeerFilter(const SysIpL3Addr& a, NodeBase::TraceStatus s);
    115:       PortFilter();
    116:       PortFilter(ipport_t p, NodeBase::TraceStatus s);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.cpp
  W118 Copy/move constructor does not invoke base copy/move constructor
    47: SysIpL2Addr::SysIpL2Addr(const SysIpL2Addr& that) : v4Addr_(that.v4Addr_)
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h
  W060 Base class constructor is public
    40:    SysIpL2Addr();
    44:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    49:    explicit SysIpL2Addr(const std::string& text);
    53:    SysIpL2Addr(const SysIpL2Addr& that);
  W075 Virtual function is public
    77:    virtual std::string to_str() const;
  W092 Function could be free
    65:    static SysIpL2Addr LoopbackAddr();
    81:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W056 Default constructor invoked: POD members not initialized
    54:    in_addr result;
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W032 Unused function
    115:    bool operator!=(const SysIpL3Addr& that) const;
  W060 Base class constructor is public
    40:    SysIpL3Addr();
    45:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    51:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    59:    SysIpL3Addr
    64:    SysIpL3Addr(const SysIpL3Addr& that);
  W082 Adjacent arguments have the same type
    59:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    60:          auto netaddr = (sockaddr_in*) info->ai_addr;
    118:       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  W056 Default constructor invoked: POD members not initialized
    50:    addrinfo hints;
    109:    sockaddr_in addr;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp
  W106 Function does not invoke Debug::ft
    138: void SysSocket::SetStatus(bool ok, const string& err)
    162: bool SysSocket::SetTracing(bool tracing)
    170: bool SysSocket::Trace(TraceStatus status)
    181: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h
  W032 Unused function
    50: uint64_t htonll(uint64_t hostllong);
    53: uint64_t ntohll(uint32_t netllong);
  W043 Member could be protected
    99:    bool IsValid() const;
  W065 Base class virtual destructor is not public
    183:    virtual ~SysSocket();
  W075 Virtual function is public
    91:    virtual IpProtocol Protocol() const { return IpAny; }
    117:    virtual AllocRc SetService(const IpService* service, bool shared);
    121:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W092 Function could be free
    140:    static void StopLayer();
    204:    static void SetStatus(bool ok, const std::string& err);
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    105:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    224:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    231:       (char*) &max, &maxsize) == SOCKET_ERROR)
    241:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    248:       (char*) &max, &maxsize) == SOCKET_ERROR)
  W015 #include not sorted in standard order
    27: #include <windows.h>
  W056 Default constructor invoked: POD members not initialized
    69:    sockaddr_in addr;
    267:    WSAData wsaData;
  W106 Function does not invoke Debug::ft
    40: uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
    42: uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
    44: uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
    46: uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
    48: uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
    50: uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp
  W119 Argument passed by value is modified
    259/1: SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h
  W032 Unused function
    135:    bool LocAddr(SysIpL3Addr& locAddr);
    191:    IpBuffer* IcMsg() const { return icMsg_; }
  W042 Member could be private
    89:    NodeBase::word Connect(const SysIpL3Addr& remAddr);
    130:    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
    182:    bool IsOpen() const;
    217:    void Disconnect();
    222:    void Close();
  W075 Virtual function is public
    174:    virtual void Acquire();
    178:    virtual void Release();
  W077 Virtual function has no overrides
    174:    virtual void Acquire();
    178:    virtual void Release();
  W082 Adjacent arguments have the same type
    106:    static NodeBase::word Poll
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    46:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    90:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    151:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    259:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
    315:       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
    325:       (char*) &val, &valsize) == SOCKET_ERROR)
  W006 reinterpret_cast
    241:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
    286:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  W007 Cast down the inheritance hierarchy
    312:    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  W056 Default constructor invoked: POD members not initialized
    43:    sockaddr_in peer;
    84:    sockaddr_in peer;
    148:    sockaddr_in host;
    256:    sockaddr_in peer;
  W057 Default constructor invoked
    182:    std::unique_ptr< pollfd[] > list(new pollfd[size]);
  W119 Argument passed by value is modified
    120/1: bool SysTcpSocket::Listen(size_t backlog)
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h
  W042 Member could be private
    73:    NodeBase::word SendTo
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    50:          (char*) &max, &maxsize) == SOCKET_ERROR)
    79:       size, 0, (sockaddr*) &peer, &peersize);
    117:       size, 0, (sockaddr*) &peer, peersize);
  W006 reinterpret_cast
    78:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    116:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W056 Default constructor invoked: POD members not initialized
    69:    sockaddr_in peer;
    101:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    176:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    186:    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
    304:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    469:    auto sock = static_cast< SysTcpSocket* >(socket);
  W106 Function does not invoke Debug::ft
    489: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h
  W042 Member could be private
    78:    void Unblock() override;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    69:    auto thread = static_cast< TcpIoThread* >(GetThread());
    74:       thread = static_cast< TcpIoThread* >(CreateIoThread());
    80:    auto svc = static_cast< const TcpIpService* >(GetService());
    111:    auto svc = static_cast< const TcpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h
  W042 Member could be private
    86:    IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    40:    virtual bool AcceptsConns() const { return true; }
    45:    virtual size_t MaxConns() const = 0;
    50:    virtual size_t MaxBacklog() const = 0;
    54:    virtual bool Keepalive() const { return false; }
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    131:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    135:       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
    268:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h
  W042 Member could be private
    58:    void Unblock() override;
  W090 Function could be const
    82:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    59:    auto svc = static_cast< const UdpIpService* >(GetService());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h
  W042 Member could be private
    59:    IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    82: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    97: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    79: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    516: void PotsCircuit::Trace(const SignalEntry& entry)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h
  W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W032 Unused function
    91:    bool IsRinging() const { return ringing_; }
    95:    bool CanFlash() const { return flash_; }
    100:    Cause::Ind GetCause() const { return cause_; }
  W042 Member could be private
    132:    void ResetCircuit();
  W054 Data could be const pointer
    220:    PotsProfile* profile_;
  W056 Default constructor invoked: POD members not initialized
    168:    struct SignalEntry
    232:    SignalEntry trace_[TraceSize];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    76: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    69: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    69:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    39: using namespace NodeBase;
  W026 Unused argument
    93/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W042 Member could be private
    69:    Id Fid() const { return Id(fid_.GetId()); }
    77:    c_string FullName() const { return name_; }
    81:    bool CanBeDeactivated() const { return deactivation_; }
    97:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    114:    virtual ~PotsFeature();
  W075 Virtual function is public
    92:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    109:    PotsFeature(PotsFeature::Id fid, bool deactivation,
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    97:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    60/1:    virtual bool Deactivate(PotsProfile& profile);
    89/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W042 Member could be private
    64:    PotsFeature::Id Fid() const { return fid_; }
    68:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    97:    Q1Link link_;
  W065 Base class virtual destructor is not public
    81:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    55:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    60:    virtual bool Deactivate(PotsProfile& profile);
  W077 Virtual function has no overrides
    89:    virtual bool Unsubscribe(PotsProfile& profile);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W090 Function could be const
    57:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h
  W020 Using statement in header
    29: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    84: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W053 Data could be const
    59:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    443:       auto mep = static_cast< MediaEndpt* >(obj);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h
  W020 Using statement in header
    29: using namespace SessionTools;
  W022 Add using statement
    1: namespace NodeBase
  W060 Base class constructor is public
    40:    PbSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    113: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    569:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    738:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    859:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    947:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    584:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    645:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    752:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    778:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    872:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    960:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    581:    id_t             index;
    582:    word             sid, ind;
    584:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    644:    TestRc            rc;
    645:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    647:    id_t              index;
    648:    word              sid, ind;
    750:    word           port;
    752:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    777:    TestRc          rc;
    778:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    779:    word            port;
    871:    TestRc        rc;
    872:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    874:    bool          ring = false;
    875:    auto          exists = false;
    959:    TestRc        rc;
    960:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    962:    string        scan;
    963:    auto          digits = false;
    964:    auto          flash = false;
    965:    auto          exists = false;
  W106 Function does not invoke Debug::ft
    351: CliText* PotsAlertingSignal::CreateText() const
    365: CliText* PotsDigitsSignal::CreateText() const
    379: CliText* PotsFacilitySignal::CreateText() const
    393: CliText* PotsFlashSignal::CreateText() const
    407: CliText* PotsLockoutSignal::CreateText() const
    421: CliText* PotsOffhookSignal::CreateText() const
    435: CliText* PotsOnhookSignal::CreateText() const
    449: CliText* PotsProgressSignal::CreateText() const
    463: CliText* PotsReleaseSignal::CreateText() const
    477: CliText* PotsSuperviseSignal::CreateText() const
    516: CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
    558: CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
    728: CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
    849: CliParm* PotsRingParameter::CreateCliParm(Usage use) const
    937: CliParm* PotsScanParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h
  W020 Using statement in header
    46: using namespace NodeBase;
    47: using namespace SessionBase;
    48: using namespace MediaBase;
    49: using namespace CallBase;
  W028 Unused data
    106:    static const Id LastId    = NextId + 9;  // range constant
    134:    static const Id LastId   = NextId + 7;  // range constant
    226:    static const Ind MaxInd         = UINT8_MAX;
  W032 Unused function
    293:    MediaInfo* AddMedia(const MediaInfo& media);
    447:    void InjectFinalMsg() override;
  W043 Member could be protected
    269:    explicit PotsMessage(SbIpBufferPtr& buff);
  W060 Base class constructor is public
    269:    explicit PotsMessage(SbIpBufferPtr& buff);
    273:    PotsMessage(ProtocolSM* psm, size_t size);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    74: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    85: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    96: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W022 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp
  W015 #include not sorted in standard order
    97: #include "AnModule.h"
  W032 Unused function
    137: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
  W106 Function does not invoke Debug::ft
    92: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
  W106 Function does not invoke Debug::ft
    88: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    612:    auto fake = reinterpret_cast< const Context* >(&local);
    919:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    800:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    915:             (m)->FindParm(Parameter::Timeout);
  W106 Function does not invoke Debug::ft
    350: void Context::Dump() const
    986: bool Context::TraceOn()
    996: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    732:    Debug::ft(Context_ProcessWork);
  W119 Argument passed by value is modified
    726/1: void Context::ProcessWork(InvokerThread* inv)
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h
  W032 Unused function
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug32_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
  W037 Member hides inherited name
    166:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    313:    NodeBase::Q2Link link_;
    337:    NodeBase::Faction faction_;
  W056 Default constructor invoked: POD members not initialized
    224:    struct MessageEntry
    361:    MessageEntry trace_[TraceSize];
  W065 Base class virtual destructor is not public
    188:    virtual ~Context();
  W075 Virtual function is public
    98:    virtual ContextType Type() const = 0;
    102:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    106:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    110:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    132:    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  W088 Argument could be const
    292/1:    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  W090 Function could be const
    158:    bool StopTimer(const Base& owner, TimerId tid);
  W092 Function could be free
    119:    static void Kill(const std::string& errstr, NodeBase::debug32_t offset);
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug32_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp
  W106 Function does not invoke Debug::ft
    139: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h
  W042 Member could be private
    112:    virtual bool SaveContext();
    123:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    129:    virtual void FreeContext(bool freeMsg);
    157:    virtual bool Save();
    161:    virtual Event* Restore(EventHandler::Rc& rc);
    165:    virtual void Free();
  W075 Virtual function is public
    112:    virtual bool SaveContext();
    123:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    129:    virtual void FreeContext(bool freeMsg);
  W092 Function could be free
    54:    static bool IsValidId(Id eid)
    70:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h
  W065 Base class virtual destructor is not public
    124:    virtual ~EventHandler();
  W075 Virtual function is public
    115:    virtual Rc ProcessEvent
  W092 Function could be free
    84:    static bool AppCanRegister(Id ehid)
    92:    static bool AppCanUse(Id ehid)
  W111 Override of Object.Patch not found
    48: class EventHandler : public NodeBase::Protected
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    198:    auto fake = reinterpret_cast< const Factory* >(&local);
  W099 Line contains adjacent spaces
    49:    CounterPtr       icMsgsIntra_;
    50:    CounterPtr       icMsgsInter_;
    52:    CounterPtr       ogMsgsIntra_;
    53:    CounterPtr       ogMsgsInter_;
    55:    CounterPtr       contexts_;
    56:    CounterPtr       msgsDeleted_;
    57:    CounterPtr       ctxsDeleted_;
  W106 Function does not invoke Debug::ft
    215: size_t Factory::DiscardedContextCount() const
    222: size_t Factory::DiscardedMessageCount() const
  W110 Override of Base.Display not found
    43: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    91:    Id Fid() const { return Id(fid_.GetId()); }
  W026 Unused argument
    131/1:    virtual Message* AllocOgMsg(SignalId sid) const;
    151/1:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    151/2:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  W032 Unused function
    231:    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  W042 Member could be private
    151:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  W065 Base class virtual destructor is not public
    215:    virtual ~Factory();
  W075 Virtual function is public
    125:    virtual NodeBase::CliText* CreateText() const;
    131:    virtual Message* AllocOgMsg(SignalId sid) const;
    138:    virtual bool InjectMsg(Message& msg) const;
    144:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    151:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    161:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    183:    virtual void DisplayStats
  W077 Virtual function has no overrides
    183:    virtual void DisplayStats
  W082 Adjacent arguments have the same type
    168:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W088 Argument could be const
    161/1:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  W090 Function could be const
    161:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp
  W106 Function does not invoke Debug::ft
    153: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h
  W032 Unused function
    47:    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
    85:    bool operator!=(const GlobalAddress& that) const;
  W082 Adjacent arguments have the same type
    51:    GlobalAddress
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
  W106 Function does not invoke Debug::ft
    90: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    215:    auto fake = reinterpret_cast< const Initiator* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h
  W053 Data could be const
    134:    NodeBase::Q1Link link_;
  W065 Base class virtual destructor is not public
    96:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    91:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W088 Argument could be const
    105/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    189:          reinterpret_cast< word* >(&poolSize_), 1,
    229:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    184:    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    537:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W099 Line contains adjacent spaces
    67:    CounterPtr       requeues_;
    68:    CounterPtr       trojans_;
    69:    CounterPtr       lockouts_;
  W106 Function does not invoke Debug::ft
    714: void InvokerPool::RecordDelay(MsgPriority prio, msecs_t delay) const
    818: size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
    826: msecs_t InvokerPool::WorkQMaxDelay(MsgPriority prio) const
    834: size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  W110 Override of Base.Display not found
    60: class InvokerPoolStats : public Dynamic
    74: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    73:       { return NodeBase::Faction(faction_.GetId()); }
  W042 Member could be private
    96:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    121:    virtual ~InvokerPool();
  W075 Virtual function is public
    91:    virtual void DisplayStats
  W077 Virtual function has no overrides
    91:    virtual void DisplayStats
  W090 Function could be const
    152:    void KickThread();
    156:    Context* FindWork();
    180:    void Requeue(Context& ctx);
    188:    void ScheduledOut();
  W092 Function could be free
    192:    static bool GenerateLog(Factory::Rc rc);
    204:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    94:       auto p = reg->Pool(Faction(id));
  W106 Function does not invoke Debug::ft
    180: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    124:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W106 Function does not invoke Debug::ft
    113: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h
  W042 Member could be private
    56:    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
    64:    static ptrdiff_t CellDiff2();
  W053 Data could be const
    127:    NodeBase::RegCell iid_;
    153:    static NodeBase::word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h
  W032 Unused function
    63:    bool operator!=(const LocalAddress& that) const;
  W114 Function could be tagged noexcept
    46:    LocalAddress();
    50:    LocalAddress(const LocalAddress& that) = default;
    54:    LocalAddress& operator=(const LocalAddress& that) = default;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp
  W106 Function does not invoke Debug::ft
    245: MsgDirection Message::Dir() const
    334: ProtocolId Message::GetProtocol() const
    369: SignalId Message::GetSignal() const
    426: MsgHeader* Message::Header() const
  W119 Argument passed by value is modified
    622/1: bool Message::Retrieve(ProtocolSM* psm)
    697/1: bool Message::Send(Route route)
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h
  W029 Unused enum
    71:    enum Location
  W030 Unused enumerator
    73:       NotQueued,     // being built by a factory
    74:       ContextQ,      // has arrived at a context
    75:       PsmIncomingQ,  // has arrived at a PSM
    76:       PsmOutgoingQ,  // has been sent by a PSM
    77:       PsmPendingQ    // being built by a PSM
    87:       IllegalSignal,   // illegal signal found              0000  sid
    88:       IllegalParm,     // illegal parameter found          index  pid
    89:       IncompleteParm,  // parameter too short              index  pid
    90:       MissingParm,     // mandatory parameter missing       0000  pid
    91:       Overflow,        // last parameter extends past end  index  pid
    92:       Trampled         // last parameter trampled fence    index  pid
  W032 Unused function
    180:    Message* FindSignal(SignalId sid) const;
  W042 Member could be private
    328:    virtual void Handled(bool retain);
    332:    virtual bool SendFailure
  W043 Member could be protected
    131:    virtual InspectRc InspectMsg(NodeBase::debug32_t& errval) const;
    240:    NodeBase::MsgDirection Dir() const;
  W075 Virtual function is public
    131:    virtual InspectRc InspectMsg(NodeBase::debug32_t& errval) const;
    151:    virtual void Save();
    156:    virtual void Unsave();
    164:    virtual bool Retrieve(ProtocolSM* psm);
    171:    virtual bool Relay(ProtocolSM& ogPsm);
    175:    virtual bool SendToSelf();
    232:    virtual void SetReceiver(const GlobalAddress& receiver);
    236:    virtual void SetSender(const GlobalAddress& sender);
    261:    virtual bool Send(Route route);
    265:    virtual bool Restore();
  W077 Virtual function has no overrides
    151:    virtual void Save();
    156:    virtual void Unsave();
    164:    virtual bool Retrieve(ProtocolSM* psm);
    171:    virtual bool Relay(ProtocolSM& ogPsm);
    175:    virtual bool SendToSelf();
    232:    virtual void SetReceiver(const GlobalAddress& receiver);
    236:    virtual void SetSender(const GlobalAddress& sender);
    265:    virtual bool Restore();
    315:    virtual void Refresh();
    328:    virtual void Handled(bool retain);
    332:    virtual bool SendFailure
    341:    virtual void ClearContext() const;
  W090 Function could be const
    109:    void SetSignal(SignalId sid);
    113:    void SetJoin(bool join);
    224:    void SetProtocol(ProtocolId prid);
    228:    void SetPriority(MsgPriority prio);
    232:    virtual void SetReceiver(const GlobalAddress& receiver);
    236:    virtual void SetSender(const GlobalAddress& sender);
    358:    void SetRxAddr(const LocalAddress& rxaddr);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    84:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h
  W042 Member could be private
    60:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W092 Function could be free
    60:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h
  W042 Member could be private
    51:    uint8_t        spare    : 6;   // reserved for future use
  W099 Line contains adjacent spaces
    42:    LocalAddress   txAddr;         // source address
    43:    LocalAddress   rxAddr;         // destination address
    44:    MsgPriority    priority : 2;   // message's priority
    45:    bool           initial  : 1;   // true for initial message
    46:    bool           final    : 1;   // true for final message
    47:    bool           join     : 1;   // true to create PSM and join root SSM
    48:    bool           self     : 1;   // true for message to self
    49:    bool           injected : 1;   // true if sent by InjectCommand
    50:    bool           kill     : 1;   // true to kill context on arrival
    51:    uint8_t        spare    : 6;   // reserved for future use
    52:    Message::Route route    : 2;   // the route that the message took
    53:    ProtocolId     protocol : 16;  // message's protocol
    54:    SignalId       signal   : 16;  // message's signal
    55:    uint16_t       length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    83:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    157:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    221:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    278:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    357:    return const_cast< MsgPort* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h
  W028 Unused data
    142:    static const NodeBase::PooledObjectId MaxId;
  W092 Function could be free
    185:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    107:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W106 Function does not invoke Debug::ft
    199: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    82:    Id Pid() const { return Id(pid_.GetId()); }
  W030 Unused enumerator
    118:       StreamContainsIllegalParm,
  W032 Unused function
    86:    ProtocolId Prid() const { return prid_; }
  W065 Base class virtual destructor is not public
    176:    virtual ~Parameter();
  W075 Virtual function is public
    96:    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
    105:    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
    134:    virtual TestRc InjectMsg
    147:    virtual TestRc VerifyMsg
  W092 Function could be free
    152:    static NodeBase::c_string ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    93:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W106 Function does not invoke Debug::ft
    134: Parameter* Protocol::FirstParm() const
    147: Signal* Protocol::FirstSignal() const
    160: Parameter* Protocol::GetParameter(ParameterId pid) const
    172: Signal* Protocol::GetSignal(SignalId sid) const
    184: void Protocol::NextParm(Parameter*& parm) const
    197: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h
  W032 Unused function
    79:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W065 Base class virtual destructor is not public
    135:    virtual ~Protocol();
  W075 Virtual function is public
    79:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    111:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h
  W026 Unused argument
    167/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W032 Unused function
    68:    bool IsLowermost() const { return lower_ == nullptr; }
  W042 Member could be private
    112:    virtual ProtocolLayer* JoinPeer
    119:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W043 Member could be protected
    64:    bool IsUppermost() const { return upper_ == nullptr; }
    89:    virtual FactoryId GetFactory() const = 0;
  W065 Base class virtual destructor is not public
    143:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    52:    virtual MsgPort* Port() const = 0;
    56:    virtual ProtocolSM* UppermostPsm() const = 0;
    89:    virtual FactoryId GetFactory() const = 0;
    93:    virtual Message::Route Route() const = 0;
    102:    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
    112:    virtual ProtocolLayer* JoinPeer
    119:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W090 Function could be const
    184:    virtual Message* UnwrapMsg(Message& msg);
    191:    virtual Message* WrapMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
  W106 Function does not invoke Debug::ft
    80: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    433:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    692:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h
  W026 Unused argument
    301/1:    virtual void MsgHandled(Message& msg) { }
    307/1:    virtual void RestoreIcMsg(Message& msg) { }
    313/1:    virtual void RefreshMsg(Message& msg) { }
  W030 Unused enumerator
    96:       SignalUnknown,     // signal not recognized
    98:       ParameterUnknown,  // parameter not recognized
    99:       ParameterInvalid,  // parameter not valid for this signal
  W032 Unused function
    137:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    195:    bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    325:    virtual void InjectFinalMsg();
  W042 Member could be private
    68:    typedef uint8_t Priority;
    251:    bool SendMsg(Message& msg) override;
  W043 Member could be protected
    76:    enum IncomingRc
    85:    enum OutgoingRc
    131:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W053 Data could be const
    372:    FactoryId fid_;
  W077 Virtual function has no overrides
    241:    virtual void SetState(StateId stid);
    296:    virtual Priority GetPriority() const { return NormalPriority; }
    301:    virtual void MsgHandled(Message& msg) { }
    307:    virtual void RestoreIcMsg(Message& msg) { }
    313:    virtual void RefreshMsg(Message& msg) { }
  W090 Function could be const
    118:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h
  W032 Unused function
    86:    void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    49:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h
  W026 Unused argument
    50/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    50:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h
  W032 Unused function
    91:    StateId CurrState() const { return currState_; }
    104:    Message* SavedMsg() const { return savedMsg_; }
    213:    StateId CurrState() const { return currState_; }
    217:    StateId NextState() const { return nextState_; }
    358:    bool IsInitiation() const { return initiation_; }
    369:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    50:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    126:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    140:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h
  W111 Override of Object.Patch not found
    40: class SbAnalyzeMessage : public EventHandler
    54: class SbAnalyzeSap : public EventHandler
    68: class SbAnalyzeSnp : public EventHandler
    82: class SbForceTransition : public EventHandler
    96: class SbInitiationReq : public EventHandler
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    753:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    702:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    820:       auto msg = static_cast< Message* >(obj);
    907:       auto port = static_cast< MsgPort* >(obj);
    1119:       auto psm = static_cast< ProtocolSM* >(obj);
    1351:       auto ssm = static_cast< ServiceSM* >(obj);
    1564:       auto tmr = static_cast< Timer* >(obj);
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h
  W028 Unused data
    55:    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
    85:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    82:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    113:    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    64:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    76:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h
  W075 Virtual function is public
    43:    bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    62:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  W032 Unused function
    83:    static void operator delete(void* addr, SbPoolUser user);
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h
  W047 Data is init-only
    64:    static bool Registered;
  W092 Function could be free
    60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    224:       auto port = static_cast< MsgPort* >(obj);
    285:    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
    302:       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  W106 Function does not invoke Debug::ft
    406: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h
  W110 Override of Base.Display not found
    192: class TimerPool : public NodeBase::ObjectPool
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    145:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    150:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    465:    width -= col_t(label.size());
  W007 Cast down the inheritance hierarchy
    357:          bt = static_cast< BuffTrace* >(rec);
    860:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    863:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    890:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W119 Argument passed by value is modified
    341/1:    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h
  W042 Member could be private
    533:    const StateId stid_;
  W050 Data is not private
    490:    ServiceId owner_;
    494:    const EventId eid_;
    529:    const ServiceId sid_;
    533:    const StateId stid_;
    537:    const EventHandler::Rc rc_;
  W060 Base class constructor is public
    466:    EventTrace(Id rid, const Event& evt);
    511:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    172:    static BuffTrace* NextIcMsg
    482:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W092 Function could be free
    241:    static std::string OutputId(const std::string& label, NodeBase::id_t id);
    482:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h
  W082 Adjacent arguments have the same type
    128:    NodeBase::TraceRc SelectSignal
    182:       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  W110 Override of Base.Display not found
    113: class SbTracer : public NodeBase::Permanent
  W114 Function could be tagged noexcept
    181:       SignalFilter();
    182:       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    286:    auto fake = reinterpret_cast< const Service* >(&local);
  W106 Function does not invoke Debug::ft
    374: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    62:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    128:    bool Disable();
    132:    bool Enable();
  W042 Member could be private
    76:    static bool IsValidPortId(PortId pid)
    118:    bool IsModifiable() const { return modifiable_; }
    122:    bool IsModifier() const { return modifier_; }
  W043 Member could be protected
    66:    typedef ServicePortId PortId;
    84:    virtual NodeBase::c_string PortName(PortId pid) const;
  W065 Base class virtual destructor is not public
    183:    virtual ~Service();
  W075 Virtual function is public
    84:    virtual NodeBase::c_string PortName(PortId pid) const;
    114:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    178:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W092 Function could be free
    76:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    80: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp
  W004 C-style cast
    776:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    778:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  W007 Cast down the inheritance hierarchy
    460:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    464:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    465:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    516:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    522:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    524:             (sapEvent)->CurrInitiator();
    776:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    778:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
    881:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    885:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    948:                (initEvent)->GetModifier();
    988:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  W106 Function does not invoke Debug::ft
    315: Service* ServiceSM::GetService() const
  W119 Argument passed by value is modified
    404/1: EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
    848/2:    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
    916/2:    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h
  W026 Unused argument
    79/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    187/1:       (Event& currEvent, Event*& nextEvent);
    187/2:       (Event& currEvent, Event*& nextEvent);
  W032 Unused function
    132:    bool HasTriggered(TriggerId tid) const;
  W042 Member could be private
    95:    StateId NextState() const { return nextState_; }
  W065 Base class virtual destructor is not public
    167:    virtual ~ServiceSM();
  W075 Virtual function is public
    67:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    73:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    79:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    100:    virtual void SetNextState(StateId stid);
    107:    virtual void PsmDeleted(ProtocolSM& exPsm);
    121:    virtual void SetNextSap(TriggerId sap);
    127:    virtual void SetNextSnp(TriggerId snp);
    139:    virtual void MorphToService(ServiceId sid);
  W077 Virtual function has no overrides
    139:    virtual void MorphToService(ServiceId sid);
  W090 Function could be const
    186:    virtual EventHandler::Rc ProcessInitNack
    235:    EventHandler::Rc ProcessSsmqSap
    246:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    78:    auto fake = reinterpret_cast< const Signal* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    78:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    82:    ProtocolId Prid() const { return prid_; }
  W065 Base class virtual destructor is not public
    112:    virtual ~Signal();
  W075 Virtual function is public
    89:    virtual NodeBase::CliText* CreateText() const;
  W092 Function could be free
    63:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    99:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h
  W092 Function could be free
    86:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h
  W026 Unused argument
    48/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    42:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    48:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    56:    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    201:    auto fake = reinterpret_cast< const State* >(&local);
  W106 Function does not invoke Debug::ft
    130: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    165: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    248: EventHandlerId State::GetHandler(EventId eid) const
    256: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    57:    Id Stid() const { return Id(stid_.GetId()); }
  W032 Unused function
    61:    ServiceId Sid() const { return sid_; }
  W065 Base class virtual destructor is not public
    94:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h
  W027 Unused class
    37: class TextTlvMessage : public TlvMessage
  W032 Unused function
    58:    explicit TextTlvMessage(SbIpBufferPtr& text);
    62:    TextTlvMessage(ProtocolSM* psm, size_t size);
    68:    bool Receive();
  W077 Virtual function has no overrides
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
  W090 Function could be const
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    192:    auto fake = reinterpret_cast< const Timer* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h
  W037 Member hides inherited name
    52:    static ptrdiff_t LinkDiff();
  W042 Member could be private
    52:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    134:    TimerId tid_;
    146:    NodeBase::Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    120:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h
  W111 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W006 reinterpret_cast
    143:          auto psm = reinterpret_cast< const Base* >(t->Psm());
    155:          auto psm = reinterpret_cast< const Base* >(t->Psm());
  W119 Argument passed by value is modified
    77/1: Timer::QId TimerRegistry::CalcQId(secs_t secs) const
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp
  W106 Function does not invoke Debug::ft
    62: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    181:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    290:    return (Fence*) fence;
    448:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    70:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    516:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W009 Pointer arithmetic
    181:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    289:    auto fence = layout->bytes + layout->header.length;
  W056 Default constructor invoked: POD members not initialized
    198:    ParmIterator pit;
    321:    ParmIterator pit;
    341:    ParmIterator pit;
    402:    ParmIterator locpit;
  W119 Argument passed by value is modified
    246/2: TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h
  W006 reinterpret_cast
    268:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W032 Unused function
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    167:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    173:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    187:    TlvParmPtr AddBytes
    194:    TlvParmPtr CopyParm
    199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
    251:    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
    258:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    273:    size_t ParmOffset(ParmIterator& pit) const;
  W042 Member could be private
    156:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    161:    TlvParmPtr NextParm(ParmIterator& pit) const;
    182:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    245:    typedef uint16_t Fence;
    263:    virtual void AddFence();
    267:    TlvMsgLayout* TlvLayout() const
    278:    Fence* FencePtr() const;
    282:    void CheckFence() const;
  W056 Default constructor invoked: POD members not initialized
    313:    struct ParmIterator
  W060 Base class constructor is public
    50:    explicit TlvMessage(SbIpBufferPtr& buff);
    54:    TlvMessage(ProtocolSM* psm, size_t size);
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W075 Virtual function is public
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    182:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
    203:    virtual void DeleteParm(TlvParmLayout& parm);
  W077 Virtual function has no overrides
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    182:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, size_t plen);
    203:    virtual void DeleteParm(TlvParmLayout& parm);
    258:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    263:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    113:    template< class T > T* CopyType
  W088 Argument could be const
    203/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W092 Function could be free
    225:    static size_t Pad(size_t size)
  W119 Argument passed by value is modified
    114/3:       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    75:    auto& tmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h
  W032 Unused function
    71:    static Id ExtractPid(const TlvParmLayout& parm);
  W044 Typedef of pointer type
    58: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    59: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W092 Function could be free
    71:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    70:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h
  W032 Unused function
    39:    SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h
  W042 Member could be private
    77:    static bool IsValidId(Id tid)
  W065 Base class virtual destructor is not public
    102:    virtual ~Trigger();
  W092 Function could be free
    77:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    61:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    64:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    101:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    117:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    119:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    139:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    154:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    155:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    170:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    172:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    178:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    199:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    227:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    257:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    274:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    298:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    313:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    327:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    342:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    357:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    359:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    378:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    399:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    414:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    430:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    447:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    448:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    465:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    479:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    481:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    511:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    526:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    527:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    542:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    543:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    564:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    583:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    598:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    600:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    625:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    654:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    669:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    685:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    701:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    703:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    724:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    739:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    755:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    757:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    774:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    801:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    820:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    835:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    854:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    869:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    885:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    887:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    896:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    924:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    925:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    963:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    979:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    995:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    996:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    1011:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    1012:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1046:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1067:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    75:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    80:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    88:       SetNPsm(static_cast< CipPsm& >(psm));
    92:       SetUPsm(static_cast< MediaPsm& >(psm));
    132:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    384: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    112:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    193:       auto pmsg = static_cast< const PotsMessage* >(msg);
    195:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    199:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    200:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    275:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    97:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    98:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    95:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    116:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    106:       return static_cast< PotsCallPsm* >(psm);
    178:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    213:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    204:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    264:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    287:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    303:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    286:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    291:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    293:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    314:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    315:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    367:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    394:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    476:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    478:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    491:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    513:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    527:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    533:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    539:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    573:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    576:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    631:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    638:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    654:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    662:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    680:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h
  W020 Using statement in header
    42: using namespace NodeBase;
    43: using namespace SessionBase;
    44: using namespace CallBase;
  W026 Unused argument
    61/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1465:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    449:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1166:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1203:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1273:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1300:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1314:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1380:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1424:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1967:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1968:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1997:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    2012:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2014:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2021:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    2118:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2120:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2121:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    2122:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2217:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2231:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2245:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2259:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2275:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2290:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2304:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2319:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2334:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2335:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2350:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2351:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2365:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2387:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    436/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W053 Data could be const
    187:    Cause::Ind cause_;
  W092 Function could be free
    456:    static EventHandler::Rc SendFacilityNack(PotsMuxPsm* npsm, ServiceId sid);
  W117 Line can merge with the next line and be under the length limit
    606:    BindEventHandler
    622:    BindEventHandler
    626:    BindEventHandler
    628:    BindEventHandler
    630:    BindEventHandler
    634:    BindEventHandler
    642:    BindEventHandler
    644:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    290:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    617:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    622:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    623:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    640:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    648:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    686:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    716:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    811:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    813:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    908:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    930:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    953:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    955:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    961:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    984:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    1009:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1010:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    1030:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1031:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1035:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1054:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1056:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1060:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1101:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1102:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1104:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1151:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W042 Member could be private
    252:    void StartTimer(TimerId tid, secs_t duration);
  W053 Data could be const
    149:    Facility::Ind ind_;
  W075 Virtual function is public
    257:    void Cancel() override;
  W117 Line can merge with the next line and be under the length limit
    442:    BindEventHandler
    483:    BindEventHandler
    485:    BindEventHandler
    499:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h
  W020 Using statement in header
    30: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    131:    auto& pssm = static_cast< BcSsm& >(*Parent());
    133:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    85:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    175:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    181:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    198:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    249:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    252:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    364:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    417:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    752:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    755:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    828:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    896:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    997:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    998:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1020:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1051:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1052:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1075:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    663:    BindEventHandler
    679:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h
  W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    156/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W032 Unused function
    75:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W042 Member could be private
    158:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    55:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    56:    auto msg = static_cast< CipMessage* >(ame.Msg());
    58:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    91:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    108:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    110:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    135:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    136:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    138:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    176:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    186:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    210:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    228:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    247:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    248:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    250:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    298:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    316:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    317:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    319:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    362:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    363:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    365:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    417:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    435:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    453:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    471:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    489:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    522:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    523:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    553:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    572:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    573:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    603:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    623:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    624:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W099 Line contains adjacent spaces
    135:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    136:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    137:    auto          sid = msg->GetSignal();
    138:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    140:    CauseInfo*    cci;
    247:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    248:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    249:    auto          sid = msg->GetSignal();
    250:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    252:    CauseInfo*    cci;
    316:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    317:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    318:    auto          sid = msg->GetSignal();
    319:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    321:    CauseInfo*    cci;
    362:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    363:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    364:    auto          sid = msg->GetSignal();
    365:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    367:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h
  W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h
  W020 Using statement in header
    28: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h
  W005 Functional cast
    62:    ipport_t Port() const override { return ipport_t(port_); }
  W020 Using statement in header
    44: using namespace CallBase;
    45: using namespace NetworkBase;
    46: using namespace NodeBase;
    47: using namespace SessionBase;
  W032 Unused function
    75:    CliText* CreateText() const override;
  W042 Member could be private
    422:    ProtocolSM* TimerPsm(TimerId tid) const;
  W092 Function could be free
    136:    static void SendRelease(const Message& msg1);
  W110 Override of Base.Display not found
    55: class PotsCallIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W042 Member could be private
    45:    typedef uint8_t Id;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    83:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    120: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    203: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
  W042 Member could be private
    57:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    203:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    252:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    296:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    326:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h
  W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
  W053 Data could be const
    161:    PotsTreatmentQueue::QId qid_;
    165:    Q1Link link_;
    194:    Tone::Id tone_;
    198:    secs_t duration_;
  W075 Virtual function is public
    142:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    191:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    193:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    436:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    463:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    465:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    470:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    542:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    545:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    605:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    625:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    654:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    659:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    661:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    682:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    683:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    379:    BindMsgAnalyzer
    391:    BindMsgAnalyzer
    393:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h
  W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h
  W020 Using statement in header
    27: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    76: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h
  W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
  W053 Data could be const
    128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    151:          tt = static_cast< const TransTrace* >(rec);
    159:          auto mt = static_cast< const MsgTrace* >(rec);
    712:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    729:             trans = static_cast< const TransTrace* >(rec);
    741:             return static_cast< const MsgTrace* >(rec);
    758:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    779:             trans = static_cast< const TransTrace* >(rec);
    786:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    947:          tt = static_cast< const TransTrace* >(rec);
    983:             mt = static_cast< const MsgTrace* >(rec);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W119 Argument passed by value is modified
    1080/1:    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h
  W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    99:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W106 Function does not invoke Debug::ft
    88: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h
  W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W053 Data could be const
    145:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W106 Function does not invoke Debug::ft
    56: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W053 Data could be const
    85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    140:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace NodeTools
  W047 Data is init-only
    455:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h
  W020 Using statement in header
    29: using namespace NodeTools;
  W022 Add using statement
    1: namespace NodeBase
  W060 Base class constructor is public
    40:    StSizesCommand() = default;
C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    69:    return static_cast< StTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W082 Adjacent arguments have the same type
    75:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W092 Function could be free
    52:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    506:    auto tpsm = static_cast< TestPsm* >(Psm());
    523:    auto tssm = static_cast< TestSsm* >(RootSsm());
    577:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    855:       SetTestPsm(static_cast< TestPsm* >(&psm));
    977:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    978:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    1016:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1025:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    1036:    auto& tssm = static_cast< TestSsm& >(ssm);
    1054:    auto& tssm = static_cast< TestSsm& >(ssm);
    1073:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1074:    auto& tssm = static_cast< TestSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W117 Line can merge with the next line and be under the length limit
    760:    BindMsgAnalyzer
    764:    BindEventHandler
    766:    BindEventHandler
    778:    BindMsgAnalyzer
    782:    BindEventHandler
    784:    BindEventHandler
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h
  W020 Using statement in header
    43: using namespace NodeBase;
    44: using namespace SessionBase;
  W042 Member could be private
    265:    void UpdateTestPsm();
    345:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    351:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W090 Function could be const
    265:    void UpdateTestPsm();
