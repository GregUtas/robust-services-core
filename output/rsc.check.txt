LINE COUNTS
 source code   61185
       blank   34976
          //   14798
  license //    8489
separator //    6804
   tagged //     203
     text //   16181
          /*       0
           {   11996
           }   10415
          };    1584
   Debug::ft    3887
     fn_name    3865
    ...split      94
    #include    5124
    #<other>     992
       using     737
       TOTAL  181330

WARNING COUNTS
  W004    76  C-style cast
  W005    48  Functional cast
  W006    81  reinterpret_cast
  W007   518  Cast down the inheritance hierarchy
  W008    39  Cast removes const qualification
  W009     3  Pointer arithmetic
  W015     3  #include not sorted in standard order
  W017     1  Add #include directive
  W018     4  Remove #include directive
  W021    35  Add using statement
  W022    96  Remove using statement
  W025    26  Unused argument
  W026     9  Unused class
  W027    19  Unused data
  W028     1  Unused enum
  W029    20  Unused enumerator
  W032   129  Unused function
  W033     3  Unused typedef
  W036     5  No referent for friend declaration
  W038     9  Member hides inherited name
  W039     1  Class could be namespace
  W042   142  Member could be private
  W043    60  Member could be protected
  W044    11  Typedef of pointer type
  W047    30  Data is init-only
  W048     1  Data is write-only
  W050    24  Data is not private
  W053    74  Data could be const
  W054    15  Data could be const pointer
  W056    30  Default constructor invoked: POD members not initialized
  W057     3  Default constructor invoked
  W058    19  Default copy constructor invoked
  W059    15  Default assignment operator invoked
  W060    65  Base class constructor is public
  W061     1  Single-argument constructor is not explicit
  W065    27  Base class virtual destructor is not public
  W075   356  Virtual function is public
  W077   100  Virtual function has no overrides
  W082    80  Adjacent arguments have the same type
  W088    32  Argument could be const
  W090    70  Function could be const
  W092   142  Function could be free
  W099   282  Line contains adjacent spaces
  W102     1  Line length exceeds the standard maximum
  W106   476  Function does not invoke Debug::ft
  W107    17  Function does not invoke Debug::ft as first statement
  W109    29  Override of Base.Display not found
  W110    26  Override of Object.Patch not found
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE
W004 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(509):    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1083):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(534):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(566):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(434):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1102):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(336):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1171):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1366):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(140):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(436):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(532):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(951):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1027):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(77):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(220):    if(addr != nullptr) return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(98):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(386):          auto src = (ptr_t) this;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(225):    auto seg = (Segment*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(282):    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(333):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(384):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(238):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(261):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(313):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(350):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(714):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(784):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(809):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(841):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(846):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(889):    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(919):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(142):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(162):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(144):       (DWORD*) &nid);                  // updates thread's identifier
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(345):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(163):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(125):    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(235):    auto addr = (TraceRecord*) &buff_[end_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(428):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(446):             record = (TraceRecord*) buff_;  // case (b)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(450):          record = (TraceRecord*) next;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(459):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(485):       auto record = (TraceRecord*) &buff_[start_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(592):    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(58):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(77):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(71):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(90):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(131):       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(58):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(114):       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(87):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(206):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(213):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(223):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(230):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(43):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(71):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(116):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(224):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(47):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(76):       max, 0, (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(114):       len, 0, (sockaddr*) &peer, peersize);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(752):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(775):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(176):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(285):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(443):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(111): ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(275): ipport_t CipUdpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(378): ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(139):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(171):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(203):       *stream << setw(12) << LineType(t)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(215):          *stream << setw(6) << WarningCode(Warning(w))
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(216):             << setw(6) << WarningCounts[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2698):       *cli.obuf << ": " << Warning(item->warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(260):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(312):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(363):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(369):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(374):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(695):    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1333):    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(822):          stream << uint64_t(num_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(155):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(927):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(65):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(106):          return RestartLevel(errval_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(484):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(692):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1089):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2440):       auto heap = Memory::Heap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(207):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(97):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(362):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(543):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(158):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp(38):    size_(int16_t(size)),
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3033):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3064):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(87):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(70):    Faction GetFaction() const { return Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(92):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(79):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(701):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(143):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(148):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(462):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(59):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(75):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(54):    Id Stid() const { return Id(stid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(227):       return MsgSize(Memory::Align(size, Log2Align));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(108): ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
W006 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(70):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(71):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(497):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(97):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(134):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(120):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(528):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(61):    auto fake = reinterpret_cast< const CodeDir* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1618):    auto fake = reinterpret_cast< const CodeFile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(280):    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(64):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(118):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(575):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(65):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(133):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(161):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(137):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(75):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(103):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(96):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(64):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(141):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(477):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(116):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(69):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(89):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(81):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(100):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(33):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1170):    auto fake = reinterpret_cast< const Thread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(71):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1179):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1699):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2260):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3494):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(276):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(69):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(206):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), max, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(251):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), len, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(75):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(113):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(88):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(97):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(87):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(578):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(747):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(868):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(956):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(573):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(886):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(202):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(210):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(225):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(124):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(102):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(92):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(77):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(65):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(283):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(77):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(190):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(191):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(119):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(142):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(154):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(66):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(511):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(268):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(70):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(96):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(97):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1466):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(85):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(206):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(89):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(100):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(92):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(139):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(151):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(172):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(182):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(68):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(114):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(165):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(51):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(53):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(543):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(573):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(885):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(919):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1049):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1448):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1453):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(405):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(920):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(463):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(472):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(504):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(505):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(624):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(782):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(818):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1044):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1049):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1142):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1275):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1307):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1330):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1579):    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3394):    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(77):    auto curr = static_cast< CodeFileSet* >(Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(89):       curr = static_cast< CodeFileSet* >(prev->Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(109):    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(121):       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(400):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(432):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(433):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(545):       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(577):       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(612):    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(63):    auto that = static_cast< CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(99):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(136):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(150):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(210):          static_cast< const Function* >(item)->IsInline())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(222):          auto args = static_cast< ClassInst* >(usingClass)->GetSpec()->Args();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1057):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1060):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1077):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1876):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1902):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(802):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(851):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(864):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1284):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1292):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1427):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1471):    auto ref = static_cast< CxxNamed* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1613):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(375):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(399):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(453):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(464):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(469):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(481):             item = static_cast< CxxScoped* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(755):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1043):          auto cls = static_cast< Class* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1197):       auto cls = static_cast< Class* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1953):          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1963):       ref = static_cast< Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1346):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1414):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1708):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1754):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2579):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2976):             static_cast< ClassData* >(data)->SetInit(m->get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3187):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4471):       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4472):       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(91):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(262):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(297):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1354):          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1504):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1517):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1556):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1561):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1836):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(383):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(422):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(430):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(438):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(444):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(409):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(435):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(487):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(520):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(549):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(590):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(613):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(709):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1100):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1105):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1130):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1517):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1536):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1632):       (arg.item->Root())->FindDtor(Context::Scope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1680):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1700):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1721):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1745):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1928):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1930):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2268):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2307):       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2330):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1602):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1606):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp(93):       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(363):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(615):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(688):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(727):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(824):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(825):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(984):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1257):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1363):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1386):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1414):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1609):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1709):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1758):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1764):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2015):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2021):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2183):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2225):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2686):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2732):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2879):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2905):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2987):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3023):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3081):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3285):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3663):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(253):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(94):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(118):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(84):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(217):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(91):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(125):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(189):                   auto last = static_cast< const FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(261):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(300):          curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(368):       curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(421):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(486):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(89):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(66):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(62):       (static_cast< CfgFileTimeParm* >(reg->FindParm("StatsFileName")));
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(198):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(66):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(156):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(175):    auto svc = static_cast< TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(266):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(412):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(107):    auto svc = static_cast< TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(106):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(240):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(441):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(593):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(654):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(881):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(969):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(763):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(882):             (m)->FindParm(Parameter::Timeout);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(181):    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(533):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(82):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(80):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(154):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(220):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(277):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(434):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(48):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(48):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(124):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(138):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(819):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(906):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1118):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1350):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1563):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(108):    auto sbbuff = SbIpBufferPtr(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(59):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(71):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(223):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(284):    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(301):       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(355):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(857):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(859):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(888):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(457):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(461):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(462):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(513):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(519):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(521):             (sapEvent)->CurrInitiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(775):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(879):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(883):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(946):                (initEvent)->GetModifier();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(986):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(97):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(73):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(60):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(63):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(100):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(116):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(118):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(138):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(153):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(154):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(169):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(171):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(177):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(198):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(225):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(255):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(272):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(296):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(311):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(325):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(340):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(355):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(357):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(376):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(397):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(412):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(428):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(445):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(446):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(463):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(477):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(479):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(509):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(524):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(525):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(540):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(541):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(562):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(581):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(596):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(598):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(623):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(652):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(667):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(683):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(699):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(701):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(722):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(737):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(753):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(755):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(772):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(798):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(817):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(832):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(851):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(866):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(882):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(884):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(893):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(920):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(921):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(959):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(975):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(991):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(992):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1007):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1008):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1042):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1063):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(73):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(78):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(86):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(90):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(130):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(82):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(82):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(114):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(195):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(197):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(201):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(202):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(265):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(94):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(115):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(105):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(177):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(212):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(203):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(263):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(286):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(302):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(56):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(58):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(56):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(58):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(56):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(58):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(292):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(297):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(299):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(320):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(321):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(373):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(400):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(482):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(484):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(497):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(519):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(533):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(539):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(545):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(579):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(582):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(637):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(644):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(659):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(667):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(685):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(448):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1167):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1204):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1274):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1301):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1315):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1381):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1425):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1974):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1975):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2005):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2020):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2022):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2029):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2126):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2128):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2129):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2130):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2225):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2239):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2253):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2267):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2283):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2298):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2312):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2327):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2342):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2343):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2358):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2359):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2373):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2395):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(290):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(617):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(622):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(623):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(640):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(648):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(686):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(716):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(811):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(813):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(908):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(930):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(961):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(963):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(969):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(993):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1018):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1019):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1039):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1040):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1044):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1063):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1065):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1069):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1109):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1110):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1112):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1157):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(133):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(135):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(83):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(173):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(179):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(196):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(247):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(250):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(362):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(415):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(748):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(751):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(824):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(892):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(999):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1000):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1022):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1053):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1054):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1077):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(54):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(55):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(57):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(90):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(107):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(109):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(173):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(183):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(207):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(225):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(244):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(294):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(312):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(315):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(357):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(360):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(410):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(428):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(446):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(464):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(482):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(515):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(516):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(546):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(565):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(566):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(596):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(616):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(617):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(81):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(255):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(299):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(329):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(191):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(436):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(463):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(470):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(542):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(545):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(605):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(625):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(662):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(667):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(669):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(690):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(691):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(151):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(159):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(712):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(729):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(741):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(758):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(779):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(786):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(947):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(983):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(139):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(69):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(509):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(526):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(580):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(858):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(986):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(987):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1025):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1034):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1045):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1063):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1082):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1083):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(534):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(566):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1275):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1389):    return static_cast< CxxScope* >(const_cast< Class* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1872):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(140):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(434):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(470):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(839):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(977):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1375):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2501):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(755):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1102):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2178):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3151):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3320):       (const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3578):    func->SetTemplate(const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(336):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1127):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1171):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1366):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1746):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(140):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(436):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(532):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(951):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1027):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(297):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(285):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1606):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(98):       objects[count++] = const_cast< Base* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(356):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(698):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W009 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(205):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(261):    bytes += hdrSize_;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(29): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(26): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(96): #include "AnModule.h"
W017 Add #include directive
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(1): "Debug.h"
W018 Remove #include directive
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(28): #include <vector>
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.cpp(25): #include <sstream>
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(23): #include "SysMemory.h"
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(28): #include "Debug.h"
W021 Add using statement
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NetworkBase
W022 Remove using statement
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(49): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(50): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(54): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.cpp(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(41): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.cpp(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmFactory.cpp(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.cpp(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(38): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(51): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(52): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(55): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(42): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(44): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(45): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace NodeBase;
W025 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(385/2):    word AddInclude(const WarningLog& log, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(472/4):       const string& forward, string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(590/1):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(594/1):    static void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(52/2): void SE_Handler(uint32_t errval, void* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(354/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(362/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(87/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122/1):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(174/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(302/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(308/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(314/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(52/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(435/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(159/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W026 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(296): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(192): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(54):    class SigAlrm : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(68):    class SigBus : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(96):    class SigQuit : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(110):    class SigSys : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(124):    class SigVtAlrm : public PosixSignal
W027 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(388):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(532): extern const Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(533): extern const Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(537): extern const Flags Stats_Mask;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(68): extern fixed_string NotImplementedExpl;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(153):    static const id_t LastNbIndex     = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(82):    static const Bid MaxBid = MaxSegments << ObjectsPerSegmentLog2;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(81):    static const id_t LastNtIndex    = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(105):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(133):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(225):    static const Ind MaxInd         = UINT8_MAX;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(144):    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(58):    static const id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(87):    static const id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(116):    static const id_t LastSbIndex   = LastNwIndex + 5;
W028 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):    enum Location
W029 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(148):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(58):       LowPriority,       // preemptable threads
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(147):    DebugLog,    // only useful to software designers
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       NotQueued,     // being built by a factory
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       ContextQ,      // has arrived at a context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(93):       PsmIncomingQ,  // has arrived at a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(94):       PsmOutgoingQ,  // has been sent by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(95):       PsmPendingQ    // being built by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(105):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(106):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(107):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(108):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(109):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(110):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(115):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(97):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(99):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(100):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(66):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(214):    Digit GetDigit(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(180):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(247):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(318):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(371):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(195):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(76):    bool operator!=(const WarningLog& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(442):    Iter Find(SourceList& list, const Iter& iter, const string& source) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(423):    Numeric(NumericType type, size_t width, bool sign)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(131):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(271):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(64):    std::string& Prefix(std::string&& scope);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(222):    size_t GetCurr() const { return lexer_.Curr(); }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(87):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(120):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(65):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(57):    word GetCurrValue() const { return *curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(90):    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(119):    bool SetVptr(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(126):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(133):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(167):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(113):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(72):    ticks_t TicksPerSec();
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(121):    ticks_t UsecsToTicks(usecs_t usecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(125):    const SysTime& TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(96):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(60):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(61):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(54):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(66):    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h(39):    size_t find(fn_name_arg func, const char* str);
  C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(79):    static bool Verify(MemoryType type, void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(103):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(95):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(107):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(121):    static void* operator new(size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(122):    static void* operator new[](size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(124):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(125):    static void operator delete(void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(126):    static void operator delete[](void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(135):    void MorphTo(Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h(57):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(101):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(106):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(71):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(76):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(122):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(170):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(169):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(96):    static void operator delete(void* addr, void* where) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(79):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(50):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(112):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(131):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(92):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(96):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(101):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(292):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(446):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(134): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(272):    size_t MsgCount(bool priority, bool standard) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(219):    void SetFaction(Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(54):    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(82):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(53):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(198):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(83):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(75):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(138):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(196):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(326):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(86):    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(93):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(106):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(215):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(219):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(360):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(371):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(86):    static void operator delete(void* addr, SbPoolUser user);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(125):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(129):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(134):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(79):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(58):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(60):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(64):    TextTlvMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(70):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(64):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(69):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(78):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(169):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(175):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(189):    TlvParmPtr AddBytes(const byte_t* src, MsgSize size, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(195):    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(251):    byte_t* FindBytes(MsgSize& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(258):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(273):    int ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(72):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(78):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(76):    virtual CliText* CreateText() const override;
W033 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(176): typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(177): typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
W036 No referent for friend declaration
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(56):       friend class Singleton< SigAlrm >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(70):       friend class Singleton< SigBus >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(98):       friend class Singleton< SigQuit >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(112):       friend class Singleton< SigSys >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(126):       friend class Singleton< SigVtAlrm >;
W038 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(316):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(883):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(213):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(69):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(167):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
W039 Class could be namespace
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(34): class Log
W042 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(146):    typedef uint8_t DigitCount;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(183):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(202):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(226):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(234):    virtual void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(238):    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(419):    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1152):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(495):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(45):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(123):    static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(109):    bool IsTemplateHeader() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(115):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(156):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(160):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(354):    Function* FindFuncByRole(FunctionRole role, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(358):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(801):    Namespace* OuterSpace()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(807):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(236):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(276):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(270):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(46):    CxxLocation() : file(nullptr), pos(std::string::npos), internal(false) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(973):    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1001):    size_t MinArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1006):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1068):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(157):    bool ThisCharIs(char c);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(206):    std::string NextOperator() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(69):    CodeDir* FindDir(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(90):    LibrarySet* FindVar(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(64):    bool IsReadOnly() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(170):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(53):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(132):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(170):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(189):    virtual Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(193):    virtual void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(67):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(81):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(60):    const char* Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(75):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(101):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    const char* HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1892):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(70):    typedef uint32_t InstanceId;  // identifies an object within a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(71):    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(191):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(56):    static bool NullifyObjectData() { return NullifyObjectData_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(66):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(57):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(61):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(77):    StatisticsGroup* GetGroup(id_t gid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(81):    void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(85):    static std::string StatsFileName() { return StatsFileName_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(80):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(131):    const char* strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(126):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(130):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(162):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(239):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(178):    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(87):    static void operator delete(void* addr) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(91):    static void* operator new(size_t size, void* where);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3278):    typedef id_t Test;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(163):    virtual void ConcludeTest(CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(97):    virtual bool ExitOnRestart(RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(117):    virtual MsgSize PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(97):    IpPort* Provision(ipport_t pid);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(56):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(60):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(108):    bool operator==(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(94):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(192):    void Close();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(86):    word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(126):    word Send(const byte_t* data, size_t len);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(70):    word SendTo(const byte_t* data, size_t len, const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(73):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(72):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(57):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(54):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(133):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(71):    const char* FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(75):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(91):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(59):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(63):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(159):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(163):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(167):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(92):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(63):    static word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(71):    static ptrdiff_t CellDiff2();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(350):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(354):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(69):    typedef uint8_t Priority;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(252):    virtual bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(115):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(119):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(97):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(158):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(163):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(184):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(245):    typedef uint16_t Fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(267):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(278):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(282):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(161):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(421):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(45):    typedef uint8_t Id;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(57):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(341):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(110):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(75):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(83):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(87):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(729):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(126):    bool IsInternal() const { return loc_.internal; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(212):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(221):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(290):    void Accessed() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(300):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(304):    std::string strLocation() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(309):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(835):    Cxx::ItemType GetLocale() const { return locale_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(839):    TemplateRole GetTemplateRole() const { return role_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(301):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(305):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(309):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(51):    CodeFile* GetImplFile() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(86):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(91):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(148):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(102):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(157):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(177):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(203):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(225):    bool GetFileName(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(237):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(248):    const char* Help() const { return help_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(252):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(48):    typedef uint8_t sel_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(69):    typedef id_t ClassId;         // identifies a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(48):    ticks_t GetTicks() const { return ticks_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(52):    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(56):    SysThreadId Nid() const { return nid_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(70):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(64):    IpPort* Port() const { return port_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(69):    IoThread* GetThread() const { return thread_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(99):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(149):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(258):    MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(71):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(96):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(77):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(86):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(132):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(63):    typedef ServicePortId PortId;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
W044 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(86): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(87): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(103): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(108): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(109): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(59): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(60): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W047 Data is init-only
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(459):    SetOfIds baseIds_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(436):    static bool Initialized;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(149):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(92):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(133):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(227):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(287):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp(307):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(156):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1696):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(130):    static T* Instance_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(482):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(676):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(711):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(258):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(454):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(62):    static bool Registered;
W048 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(227):    LibraryVarSet* varSet_;
W050 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(301):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(279):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(179):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(183):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(89):    std::atomic_uint32_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(93):    std::atomic_uint32_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(97):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(101):    uint32_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(133):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(101):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(106):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(110):    size_t rxSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(114):    size_t txSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(118):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(122):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(126):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(130):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(134):    ticks_t ticks0_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(138):    byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(492):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(496):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(531):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(539):    const EventHandler::Rc rc_;
W053 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(171):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(340):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(356):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(519):    SourceList intIncls_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(303):    CxxToken* via_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(81):    bool const_ : 1;       // type is const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(82):    bool constptr_ : 1;    // pointer is const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(85):    TagCount refs_ : 8;    // number of references
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1238):    bool added_ : 1;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(218):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(77):    FlagId fid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(93):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(97):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(117):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(93):    Id id_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(105):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(140):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(114):    signal_t value_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(126):    uint8_t severity_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(130):    Flags attrs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(134):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(118):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(122):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(100):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(104):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(53):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(58):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(65):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static ticks_t PrevToCurrTicks;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(96):    DynString name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(108):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(105):    char abbr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(109):    bool safe_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(105):    size_t size_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(78):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1043):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1555):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(181):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(185):    ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(149):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(93):    PotsFeature::Id fid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(97):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(59):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(312):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(336):    Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(214):    Id eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(267):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(120):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(124):    ServiceId aid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(128):    TriggerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(136):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(134):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(160):    static word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(187):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(373):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(118):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(117):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(136):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(148):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(118):    Id tid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(186):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(147):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(161):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(165):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(194):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(198):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(144):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W054 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(143):    const char* default_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(147):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(69):    const char* chars_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(109):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(113):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(331):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(339):    const char* tag_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(110):    const char* text_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(118):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(122):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(189):    IpService* service_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(221):    PotsProfile* profile_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(133):    const char* abbr_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(137):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(271):    const char* name_;
W056 Default constructor invoked: POD members not initialized
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.win.cpp(55):    _finddata_t fileAttrs;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3256):       WarningLog log;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(848):    FileLevel item;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1368):    DataInitAttrs attrs;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(754):       IntLiteral::Tags tags;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(801):       FloatLiteral::Tags tags;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(865):    IntLiteral::Tags tags;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(92):    SingletonTuple entry;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(44):    LARGE_INTEGER frequency;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(75):       LARGE_INTEGER now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(81):       _timeb now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    _timeb timebuff;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(43):    tm timeofday;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(52):    in_addr result;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(48):    addrinfo hints;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(105):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(52):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(261):    WSAData wsaData;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(40):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(65):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(113):    sockaddr_in host;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(221):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(66):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(98):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(233):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(360):    MessageEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(193):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(316):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(336):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(397):    ParmIterator locpit;
W057 Default constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3675):    CxxUsageSets symbols;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3363):    CxxUsageSets usages;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(147):    auto list = std::unique_ptr< pollfd[] >(new pollfd[count]);
W058 Default copy constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(155):    arg_(arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1929):    attrs_(Numeric::Nil)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(367):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(404):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(54):    objAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(41): GlobalAddress::GlobalAddress() : sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(52):    sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(66):    sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(80):    sbAddr_(sbAddr)
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(43):    txAddr(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(44):    rxAddr(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(56):    locAddr_(msg.GetReceiver()),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(57):    remAddr_(msg.GetSender()),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(71):    locAddr_(GlobalAddress::NilAddr),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(72):    remAddr_(GlobalAddress::NilAddr),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(597):    locAddr_(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(598):    remAddr_(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(41):    locAddr_(mt.LocAddr()),
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(42):    remAddr_(NilLocalAddress),
W059 Default assignment operator invoked
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(147):       addr = GlobalAddress(peer, PotsCallIpPort, PotsCallFactoryId);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(202):       addr = GlobalAddress(peer, PotsShelfIpPort, PotsShelfFactoryId);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(35): const GlobalAddress GlobalAddress::NilAddr = GlobalAddress();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(204):    peerPort->remAddr_ = peerPrevRemAddr;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(205):    remAddr_ = GlobalAddress::NilAddr;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(317):    peerPrevRemAddr = peerPort->remAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(318):    locAddr_ = GlobalAddress(peerPort->locAddr_, locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(319):    remAddr_ = peerPort->locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(320):    peerPort->remAddr_ = locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(377):       remAddr_ = msg.GetSender();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(382):          locAddr_ = GlobalAddress(msg.RxIpAddr(), locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(421):       locAddr_ = GlobalAddress(txaddr, locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(422):       remAddr_ = msg.GetReceiver();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(481):       peer->remAddr_ = locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(419):       addr = GlobalAddress(addr, dest->EnsurePort()->LocAddr().SbAddr());
W060 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(236):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(const char* help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(41):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(55):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(68):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(84):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(98):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(114):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(127):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(157):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(173):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(185):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(201):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(219):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(134):    explicit Counter(const std::string& expl, uint32_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(52):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(45):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(57):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(99):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(111):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(125):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(140):    TestcaseAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(159):    explicit TestcaseCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(51):    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(55):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(41):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(56):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(69):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(95):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(108):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(123):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(136):    NwStatusCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(42):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(46):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(51):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(55):    SysIpL2Addr(const SysIpL2Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(42):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(47):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(53):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(61):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(66):    SysIpL3Addr(const SysIpL3Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(41):    PbSizesCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(268):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(272):    PotsMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(468):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(513):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(52):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(56):    TlvMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(64):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(69):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(41):    StSizesCommand() { }
W061 Single-argument constructor is not explicit
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(168):    DigitString(Address::DN dn);
W065 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(186):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(82):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(107):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(85):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(65):    virtual ~Exception() noexcept;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(146):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(218):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(105):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(281):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(92):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(131):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(178):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(108):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(76):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(189):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(126):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(203):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(93):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(117):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(173):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(136):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(150):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(179):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(169):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(109):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(91):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(99):    virtual ~Trigger();
W075 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1076):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1213):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(472):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(477):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(512):    virtual void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(124):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(131):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(265):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(273):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(278):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(295):    virtual Class* GetClassTemplate() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(310):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(425):    virtual bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(442):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(450):    virtual Class* DirectClass() const override { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(826):    virtual CxxScoped* FindItem(const std::string& name) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(236):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(241):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(247):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(276):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(411):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(415):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(424):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(465):    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(64):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(76):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(92):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(108):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(128):    virtual bool Display(std::ostream& stream) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(118):    virtual void SetPos(CodeFile* file, size_t pos) { loc_.SetLoc(file, pos); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(131):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(139):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(144):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(150):    virtual void SetScope(CxxScope* scope) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(154):    virtual void SetAccess(Cxx::Access access) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(160):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(165):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(173):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(179):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(185):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(191):    virtual bool GetScopedName(std::string& name, size_t n) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(196):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(201):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(205):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(212):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(216):    virtual id_t GetDeclFid() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(221):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(238):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(248):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(254):    virtual CxxNamed* DirectType() const { return Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(259):    virtual bool FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(263):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(268):    virtual bool Instantiate() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(272):    virtual bool IsInTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(279):    virtual StackArg NameToArg(Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(285):    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(578):    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(786):    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(790):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(831):    virtual void SetLocale(Cxx::ItemType locale);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(843):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(854):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(858):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(862):    virtual void SetConst(bool readonly) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(866):    virtual void SetConstPtr(bool constptr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(870):    virtual void SetPtrs(TagCount ptrs) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(874):    virtual void SetRefs(TagCount refs) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(878):    virtual void SetArrayPos(int8_t pos) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(882):    virtual void SetPtrDetached(bool on) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(886):    virtual void SetRefDetached(bool on) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(891):    virtual void SetReferent(CxxNamed* ref, bool use) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(897):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(903):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(908):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(912):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(916):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(920):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(924):    virtual TypeTags GetTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(929):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(934):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(938):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(944):    virtual void AdjustPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(949):    virtual void RemoveRefs() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(954):    virtual TagCount PtrCount(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(958):    virtual TagCount RefCount() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(962):    virtual TagCount ArrayCount() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(967):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(971):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(975):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(986):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(992):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(997):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1003):    virtual void Instantiating() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(81):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(86):    virtual Using* GetUsingFor(const std::string& name, size_t prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(94):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(326):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1093):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1097):    virtual void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1101):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1216):    virtual void WasCalled() override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(68):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(77):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(95):    virtual void AddFiles(SetOfIds& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(445):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(828):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1209):    virtual bool ResolveTypedef(Typedef* type, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(79):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(85):    virtual const std::string* Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(89):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(94):    virtual std::string TypeString(bool arg) const { return ERROR_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(98):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(102):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(106):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(111):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(116):    virtual bool IsIndirect() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(120):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(129):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(134):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(139):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(144):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(150):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(155):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(159):    virtual void GetConvertibleTypes(StackArgVector& types) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(164):    virtual CxxNamed* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(170):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(175):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(181):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(185):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(190):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(202):    virtual bool WasWritten(const StackArg* arg, bool passed);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(207):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(212):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(218):    virtual void RecordUsage() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(223):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(227):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(231):    virtual std::string Trace() const { return EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(235):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(240):    virtual void Print
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(246):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(72):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(78):    virtual word Check(std::ostream* stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(84):    virtual word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(90):    virtual word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(95):    virtual word Fix(CliThread& cli, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(100):    virtual word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(106):    virtual word List(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(114):    virtual word Parse(std::string& expl, const std::string& opts) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(120):    virtual word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(127):    virtual word Show(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(133):    virtual word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(139):    virtual word Trim(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(148):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(149):    virtual LibrarySet* Assign(LibrarySet* rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* Union(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(164):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(165):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(166):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(64):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(68):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(97):    virtual void GetSubtended(Base* objects[], size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(114):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(132):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(140):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(148):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(64):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(66):    virtual void EventOccurred(Event evt);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(71):    virtual Rc GetTextParmRc
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(65):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(70):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(134):    virtual CliParm* AccessParm(CliCookie& cookie, size_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(142):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(152):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(162):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(172):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(182):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(210):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(220):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(230):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(243):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(45):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(62):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(108):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(113):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(177):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(58):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(69):    virtual void DisplayStats(std::ostream& stream, id_t id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(187):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(211):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(56):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(60):    virtual const char* Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(66):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(77):    virtual bool Display(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(93):    virtual IpBuffer* AllocBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(109):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(61):    virtual bool InsertSocket(SysSocket* socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(117):    virtual MsgSize PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(136):    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(90):    virtual SysSocket* CreateAppSocket(size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(125):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(53):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(57):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(62):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(66):    virtual Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(70):    virtual size_t RxSize() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(74):    virtual size_t TxSize() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(79):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual SysSocket* CreateAppSocket() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(93):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(79):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(78):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(82):    virtual void Acquire() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(86):    virtual void Release() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(116):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(41):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(46):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(86):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(50):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(101):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(105):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(109):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(113):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(117):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(121):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(134):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(140):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(88):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(149):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(169):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(174):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(182):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(189):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(193):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(279):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(283):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(93):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(102):    virtual CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(131):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(144):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(112):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(59):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(63):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(96):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(100):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(109):    virtual SysSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(52):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(44):    virtual bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(111):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(69):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(75):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(102):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(109):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(123):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(129):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(86):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(41):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(78):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(184):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    virtual void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(137):    virtual EventHandler::Rc ApplyTreatment
W077 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(472):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(476):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(477):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(70):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(108):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(113):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(211):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(293):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(299):    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(163):    virtual void ConcludeTest(CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(93):    virtual bool ConditionalPause(word percent);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(136):    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(125):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual SysSocket* CreateAppSocket() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(88):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(169):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(174):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(182):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(189):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(193):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(283):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(337):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(350):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(354):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(362):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(242):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(297):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(302):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(308):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(314):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(79):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(86):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(78):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(184):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(199):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(258):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(263):    virtual void AddFence();
W082 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1217):    BcFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(471):    word InsertForward(Iter& iter, const string& nspace,
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(292):    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(237):    TypeMatch CalcMatchWith(const StackArg& that, const std::string& thisType,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(288):    TypeMatch MatchWith(const StackArg& that, const std::string& thisType,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(511):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(732):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(986):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(326):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1296):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1133):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(41): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(58): size_t RfindScopeOperator(const string& name, size_t begin, size_t end);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(121):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(621):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(214):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(64):    word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(106):    word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(470):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(515):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(50):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(54):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(90):    CfgParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(92):    CfgFileTimeParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(100):    CliCommand(const char* comm, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(58):    CliCommandSet(const char* comm, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(92):    CliIncrement(const char* name, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(237):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(243):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(91):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(72):    static void SwErr
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void Progress(const std::string& s, bool eol, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(57):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(76):    std::string strIndex(int n, int width = 0, bool colon = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(96):    std::string strCenter(const std::string& s, int breadth, int blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(120): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(238):    bool BidToIndices(Bid bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(243):    bool IndicesToBid(size_t i, size_t j, Bid& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(99):    PosixSignal(signal_t value, const char* name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(53):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(105):    static SysThread_t Create(const ThreadEntry entry,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(72):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(71):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(561):    void DisplaySummary
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(77):    IoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(51):    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(48):    IpPortCfgParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(61):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(167):    SysSocket(ipport_t port, IpProtocol proto,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(71):    SysTcpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(103):    static word Poll(SysTcpSocket* sockets[], size_t count, msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(53):    SysUdpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(51):    TcpIoThread(Faction faction, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(45):    UdpIoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(103):    PotsFeature(PotsFeature::Id fid, bool deactivation,
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(133):    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(157):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(58):    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(88):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(169):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(129):    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(181):       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(174):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(55):    SsmFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(115):    template< typename T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(70):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(347):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(321/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(419/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(438/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(471/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(530/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(531/1):    bool GetChar(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(532/1):    bool GetStr(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(542/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(543/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(550/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(554/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(563/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(564/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(565/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(566/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(567/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(568/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(569/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(570/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h(102/1):       (CliThread& cli, const std::string& expl, std::streamsize p = -1) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(79/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(100/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(122/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(157/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(321/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(266/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(106/4):       const Thread* client, size_t stackSize, SysThreadId& nid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(291/1):    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150/1):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(107/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(203/1):    virtual void DeleteParm(TlvParmLayout& parm);
W090 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(80):    msecs_t Originate();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1168):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(124):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(125):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(126):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(127):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(128):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(129):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(130):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(131):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(132):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(133):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(134):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(139):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(140):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(141):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(149):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(150):    void EraseLocal(const CxxScoped* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(154):    void EraseLocals();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(175):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(74):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(106):    word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(124):    bool Replace(size_t index, const T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(94):    void AddMainArg(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(72):    word Report(word rc, const std::string& expl, col_t indent = 2);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(196):    const CliCommand* ParseCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(115):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(55):    bool Validate(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(141):    DelayRc Delay(msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(147):    bool Interrupt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(118):    bool Interrupt(const Flags& mask = Flags());
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(509):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(517):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(529):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h(112):    void AssociateIds(const Thread& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(113):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(77):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(162):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(77):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(57):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(159):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(148):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(152):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(176):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(184):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(127):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(131):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(242):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(246):    void SetPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(379):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(119):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(188):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(238):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(249):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(79):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(86):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
W092 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(167):    static const char* strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(87):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(101):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(117):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(121):    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(125):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h(86):    static bool IsCodeFile(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(111):    static word FindWarning(const WarningLog& log);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(123):    static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(128):    static bool IsSortedByWarning
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(133):    static string WarningCode(Warning warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(442):    Iter Find(SourceList& list, const Iter& iter, const string& source) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(486):    static word Report(string& expl, fixed_string text, word rc = 0);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(231):    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(110):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(178):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(579):    static size_t CreateCodeError(const std::string& name, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(299):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(594):    static void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(667):    static std::string Location();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1296):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1309):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(279):    static void ShrinkExpression(const ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(473):    static TypeSpecPtr CreateRef();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(610):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(51):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(64):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(185):    static bool IsValidIdentifier(const std::string& id);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(190):    static word Counted(std::string& result, const size_t* count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(195):    static word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(470):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(650):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(65):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(77):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(82):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(87):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(132):    static Rc Exhausted(CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(63):    static void DescendTo(CliCookie& cookie, size_t index);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(322):    static Rc Mismatch(CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(47):    static void Spool(const char* s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(81):    static void Assert(bool condition, debug32_t errval = 0)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void Progress(const std::string& s, bool eol, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(96):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(140):    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(44):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(57):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(62):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(40):    static ostringstreamPtr Create(fixed_string title);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(45):    static void Spool(ostringstreamPtr& log);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(49):    static std::string FileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(151):    static size_t Size();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(44):    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(48):    static size_t Words(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(52):    static void Copy(void* dest, const void* source, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(74):    static void* Realloc(void* addr, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(83):    static MemoryType Type(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(91):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(99):    static SysHeap* EnsureHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(103):    static SysHeap* AccessHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static const char* TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(87):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(757):    static word DisplayHelpFile(CliThread& cli, const string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1892):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(257):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(80):    static void Initiate(reinit_t reason, debug32_t errval);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(52):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(57):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(87):    static void DisplayHeaps(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(37):    static void CreateNativeSignals();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(52):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(112):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(116):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(121):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(125):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(88):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(153):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(88):    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(106):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(220):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(224):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(228):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(439):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(90):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3300):    static void UseBadPointer();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3301):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(166):    static size_t BuffSize(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(67):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(83):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(130):    static bool StartLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(134):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(56):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(72):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(86):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(94):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(188):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(200):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(291):    static const char* strPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(187):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(149):    static const char* ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(243):    static std::string OutputId(const std::string& label, id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(60):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(88):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(225):    static MsgSize Pad(MsgSize size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(302):    inline static fn_name TlvMessage_FindType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(304):    inline static fn_name TlvMessage_AddType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(306):    inline static fn_name TlvMessage_CopyType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(308):    inline static fn_name TlvMessage_VerifyParm()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(72):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(455):    static EventHandler::Rc SendFacilityNack
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(137):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(47):    static StTestData* Access(CliThread& cli);
W099 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(81):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(84):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(138):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(183):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(217):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(220):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(540):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(541):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(543):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(572):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(573):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(575):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(576):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(918):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(919):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(920):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(921):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(923):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(924):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1048):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1049):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1050):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1052):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1053):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(425):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(428):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(98):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(99):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(100):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(101):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(102):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(103):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(104):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(105):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(106):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(107):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(108):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(109):    CxxWord("DP",  "-",    "-",  T),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(110):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(111):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(112):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(113):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(114):    CxxWord("P",   "P",    "-",  T),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(115):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(116):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(117):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(118):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(119):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(120):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(121):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(122):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(123):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(124):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(125):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(126):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(127):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(128):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(129):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(130):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(131):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(132):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(133):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(155):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(156):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(157):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(158):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(159):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(160):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(161):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(162):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(163):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(164):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(165):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(167):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(168):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(169):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(170):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(171):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(172):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(173):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(174):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(175):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(176):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(177):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(178):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(179):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(180):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(181):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(182):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(183):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(184):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(185):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(186):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(187):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(188):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(189):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(190):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(191):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(192):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(193):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(194):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(195):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(196):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(197):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(198):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(199):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(200):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(201):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(202):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(203):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(204):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(205):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(206):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(207):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(208):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(209):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(210):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(211):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(212):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(213):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(214):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(215):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(216):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(217):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(218):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(219):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(220):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(93):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(253):    inline static fn_name Array_ctor()     { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(254):    inline static fn_name Array_dtor()     { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(255):    inline static fn_name Array_Init()     { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(256):    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(258):    inline static fn_name Array_Erase()    { return "Array.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(259):    inline static fn_name Array_Replace()  { return "Array.Replace"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(260):    inline static fn_name Array_Extend()   { return "Array.Extend"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(174): typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(95):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(96):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(97):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(98):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(387):    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(394):    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(395):    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(396):    inline static fn_name Q1Way_Count()  { return "Q1Way.Count"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(397):    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(398):    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(360):    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(361):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(362):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(626):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(634):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(635):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(126):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(39): fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(264):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(265):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(266):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(270):    AccumulatorPtr   totUsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(176):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(177):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(179):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(181):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(184):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(187):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(55):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(56):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(60):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(61):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(590):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(591):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(593):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(653):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(654):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(656):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(657):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(759):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(786):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(788):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(880):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(881):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(883):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(884):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(968):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(969):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(971):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(972):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(973):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(974):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(49):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(50):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(53):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(56):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(64):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(65):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(66):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(44):    LocalAddress      txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    LocalAddress      rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool              initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool              final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool              join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool              self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    bool              injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    bool              kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    Message::Route    route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    ProtocolId        protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(56):    SignalId          signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(57):    MsgSize           length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(138):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(244):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(246):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(249):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(312):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(314):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(315):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(317):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(357):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(359):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(360):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(362):    CauseInfo*    cci;
W102 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(300):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
W106 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(98): Faction PotsShelfIpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(111): ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(115): size_t PotsShelfIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(119): size_t PotsShelfIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1387): void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(123): CliParm* CauseParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(109): CliParm* ProgressParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(265): Faction CipUdpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(275): ipport_t CipUdpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(279): size_t CipUdpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(283): size_t CipUdpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(360): Faction CipTcpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(364): size_t CipTcpService::MaxBacklog() const { return 200; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(368): size_t CipTcpService::MaxConns() const { return TcpIoThread::MaxConns; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(378): ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(382): size_t CipTcpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(386): size_t CipTcpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(432): CliText* CipIamSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(446): CliText* CipCpgSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(460): CliText* CipAnmSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(474): CliText* CipRelSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(518): CliParm* CipRouteParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(622): CliParm* CipCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(646): CliParm* CipCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(672): CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(698): CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(169): Digit DigitString::GetDigit(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(118): bool CodeDir::IsSubsDir() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(295): bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(311): bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(957): bool Editor::IsSorted(const SourceLine& line1, const SourceLine& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(964): void Editor::PushBack(SourceList& list, const string& source)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2860): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3010): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3018): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3026): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3035): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3043): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3051): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3059): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3068): Include* CodeFile::InsertInclude(const string& fn)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3086): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3094): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(3102): void CodeFile::InsertUsing(UsingPtr& use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(301): bool IsUnusedItemWarning(Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(378): void Class::AddItem(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1272): Class* Class::GetClassTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1386): CxxScope* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1641): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1648): bool Class::SetCurrAccess(Cxx::Access access)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2349): Function* CxxArea::FoundFunc(Function* func, SymbolView* view, TypeMatch match)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2357): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(47): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(150): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(244): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(251): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(389): void Context::Trace(CxxTrace::Action act)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(397): void Context::Trace(CxxTrace::Action act, const StackArg& arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(405): void Context::Trace(CxxTrace::Action act, word err, const string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(413): void Context::Trace(CxxTrace::Action act, const CodeFile& file)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(421): void Context::Trace(CxxTrace::Action act, const CxxToken* token)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(429): void Context::WasCalled(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(615): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(802): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(162): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(171): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(180): id_t CxxNamed::GetDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(189): bool CxxNamed::GetScopedName(string& name, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(198): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(207): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(542): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(939): Numeric DataSpec::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(959): CxxScope* DataSpec::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(968): TypeTags DataSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(975): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1108): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1815): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1890): CxxScoped* QualName::GetForward() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1971): TypeName* QualName::Last() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2193): size_t QualName::Size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2468): CxxNamed* TypeName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2635): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2844): void TypeSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2851): void TypeSpec::AdjustPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2866): TagCount TypeSpec::ArrayCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2874): TagCount TypeSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2882): TypeSpec* TypeSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2904): void TypeSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2911): void TypeSpec::EnteringScope(const CxxScope* scope)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2918): TypeTags TypeSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2928): bool TypeSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2936): void TypeSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2943): bool TypeSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2951): TypeMatch TypeSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2960): TypeMatch TypeSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2991): TagCount TypeSpec::PtrCount(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2999): TagCount TypeSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3007): TagCount TypeSpec::RefCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3015): TagCount TypeSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3023): void TypeSpec::RemoveRefs()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3030): StackArg TypeSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3038): void TypeSpec::SetArrayPos(int8_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3045): void TypeSpec::SetConst(bool readonly)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3052): void TypeSpec::SetConstPtr(bool constptr)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3070): void TypeSpec::SetPtrDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3077): void TypeSpec::SetPtrs(TagCount ptrs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3084): void TypeSpec::SetRefDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3091): void TypeSpec::SetReferent(CxxNamed* ref, bool use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(3098): void TypeSpec::SetRefs(TagCount refs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(113): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(232): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(240): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(279): bool Block::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(804): id_t CxxScope::GetDistinctDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1252): CodeFile* Data::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1259): const Data* Data::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1268): CodeFile* Data::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1442): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1450): bool Data::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1562): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3192): Function* Function::FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3221): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3257): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3267): CodeFile* Function::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3274): const Function* Function::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3283): CodeFile* Function::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3292): void Function::GetDefnRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3300): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3808): bool Function::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4155): void Function::SetDefnRange(size_t begin, size_t end)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4493): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4500): void FuncSpec::AdjustPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4514): TagCount FuncSpec::ArrayCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4521): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4528): void FuncSpec::Check() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4535): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4557): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4576): bool FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4584): TypeTags FuncSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4591): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4598): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4605): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4612): void FuncSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4620): bool FuncSpec::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4627): bool FuncSpec::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4634): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4642): TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4652): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4674): TagCount FuncSpec::PtrCount(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4681): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4688): TagCount FuncSpec::RefCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4695): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4702): void FuncSpec::RemoveRefs()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4709): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4716): void FuncSpec::SetArrayPos(int8_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4724): void FuncSpec::SetConst(bool readonly)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4732): void FuncSpec::SetConstPtr(bool constptr)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4740): void FuncSpec::SetPtrDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4748): void FuncSpec::SetPtrs(TagCount ptrs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4756): void FuncSpec::SetRefDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4764): void FuncSpec::SetReferent(CxxNamed* ref, bool use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4772): void FuncSpec::SetRefs(TagCount refs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(295): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(396): void CxxScoped::AddFiles(SetOfIds& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(531): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(540): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(549): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(558): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(567): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(575): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(588): bool CxxScoped::IsIndirect() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1103): void Enumerator::RecordAccess(Cxx::Access access) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1167): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1362): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1628): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1637): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1646): CxxNamed* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(283): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(363): bool Do::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(573): bool For::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(679): bool If::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(1081): bool While::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(90): template< typename T > void Erase(const CxxScoped* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(188): template< typename T > void ListSymbols(const string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(225): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(232): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(239): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(246): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(253): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(260): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(267): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(296): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(303): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(310): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(317): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(665): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(672): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(679): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(686): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(693): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(700): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(707): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(741): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(748): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(755): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(762): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(342): void CxxUsageSets::AddBase(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(350): void CxxUsageSets::AddDirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(358): void CxxUsageSets::AddForward(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(369): void CxxUsageSets::AddIndirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(377): void CxxUsageSets::AddUser(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(723): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(784): Numeric IntLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(889): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(914): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(930): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2641): TypeSpec* StrLiteral::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(613): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(637): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(710): bool Lexer::GetNthLine(size_t n, string& s) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(102): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(75): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(82): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(89): LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(107): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(154): LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(161): LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(168): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(187): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(194): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(201): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(230): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(249): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(256): LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(263): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(270): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(297): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(304): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(311): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(320): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(346): LibrarySet* LibrarySet::OpError() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(462): LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(469): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(476): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(107): CliParm* MediaParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(259): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(89): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(79): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(128): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(157): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(52): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(70): bool CfgFlagParm::GetCurrValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(72): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(274): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(68): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(79): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(136): size_t CliCookie::Index(size_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(368): CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(134): void Debug::Reset()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(40): int FunctionName::compare(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(47): size_t FunctionName::find(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(56): size_t FunctionName::rfind(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::ImmediateTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(57): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(68): bool InitFlags::TraceWork()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(154): size_t SegmentHeader::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(171): SysHeap* Memory::AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(189): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(255): SysHeap* Memory::EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(309): const SysHeap* Memory::Heap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(403): size_t Memory::Words(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(152): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(74): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(114): word ExplainTraceRc(CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(172): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(45): char NodeBase::BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char NodeBase::FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(71): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(82): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(109): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(277): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(443): bool ObjectPool::BidToIndices(Bid bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(698): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(743): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(750): bool ObjectPool::IndicesToBid(size_t i, size_t j, Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(762): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(769): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(776): ObjectBlock* ObjectPool::Next(Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(795): Pooled* ObjectPool::NextUsed(Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(868): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(877): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(886): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(289): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(48): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(124): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(129): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(134): Flags PS_Exit()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(139): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(144): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(149): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(154): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(159): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(164): Flags PS_NoRecover()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(57): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(90): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(102): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(39): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(37): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(49): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(125): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(117): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(258): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(334): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(147): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(32): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(39): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(48): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(269): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(296): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(121): DWORD64 StackInfo::GetFrame(fn_depth depth)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(137): fn_depth StackInfo::GetFrames()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(145): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(154): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(265): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(71): ticks_t SysTickTimer::TicksNow() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(181): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(191): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(207): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(215): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(245): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(265): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(30): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(29): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(36): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(43): void ThisThread::MakePreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(50): void ThisThread::MakeUnpreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(57): void ThisThread::MemProtect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(64): void ThisThread::MemUnprotect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(71): DelayRc ThisThread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(78): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(85): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(92): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(99): TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(106): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(438): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1151): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1532): main_t Thread::EnterThread(void* arg)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1736): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1833): bool Thread::HasExited() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1896): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1903): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1970): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2095): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2123): DelayRc Thread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2163): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2522): bool Thread::RunningLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2673): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2945): TraceRc Thread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2981): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3044): void Thread::Trace
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3061): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3096): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(287): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(385): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(493): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(209): ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(218): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(117): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(111): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(139): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(153): void* TraceBuffer::AddRecord(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(351): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(382): bool TraceBuffer::IsLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(391): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(411): void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(472): void TraceBuffer::PurgeRecords(size_t end)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(540): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(743): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(97): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(60): void FunctionStats::IncrCalls(usecs_t net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1158): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1192): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1221): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1678): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1712): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1741): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2242): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2273): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(205): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(205): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(283): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(78): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(110): SysIpL2Addr SysIpL2Addr::LoopbackAddr()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(149): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(157): bool SysSocket::Trace(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(168): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(428): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(97): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(82): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(79): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(97): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(79): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(515): void PotsCircuit::Trace(const SignalEntry& entry)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(76): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(69): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(84): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(113): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(356): CliText* PotsAlertingSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(370): CliText* PotsDigitsSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(384): CliText* PotsFacilitySignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(398): CliText* PotsFlashSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(412): CliText* PotsLockoutSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(426): CliText* PotsOffhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(440): CliText* PotsOnhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(454): CliText* PotsProgressSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(468): CliText* PotsReleaseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(482): CliText* PotsSuperviseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(525): CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(567): CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(737): CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(858): CliParm* PotsRingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(946): CliParm* PotsScanParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(74): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(85): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(96): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(91): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(87): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(329): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(953): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(963): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(138): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(219): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(226): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(151): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(89): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(698): void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(802): size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(810): msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(818): size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(178): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(113): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(244): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(331): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(366): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(422): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(194): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(135): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(148): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(161): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(173): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(185): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(198): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(79): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(406): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(371): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(79): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(312): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(125): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(157): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(237): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(245): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(60): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(385): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(98): Faction PotsCallIpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(108): ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(112): size_t PotsCallIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(116): size_t PotsCallIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(118): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(200): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(77): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(89): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(56): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(106):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(151):    Debug::ft(CinThread_GetLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(63):    Debug::ft(Debug_GenerateSwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(45):    Debug::ft(Exception_ctor1);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(38):    Debug::ft(MutexGuard_ctor);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(51):       Debug::ft(MutexGuard_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ft(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp(106):    Debug::ft(SysMutex_Acquire);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(57):    Debug::ft(NodeBase_SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1656):    Debug::ft(Thread_ExitIfSafe);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2467):    Debug::ft(Thread_ResumeLocked);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2645):    Debug::ft(Thread_SignalHandler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2717):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3230):       Debug::ft(Thread_Unlock);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3374):       Debug::ft(RecoveryTestThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3456):       Debug::ft(RecoveryTestThread_LoopForever);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(695):    Debug::ft(Context_ProcessWork);
W109 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(44): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(223): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(296): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(337): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(87): class CxxSymbols: public Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(46): class Interpreter : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(87): class CfgFileTimeParm : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(75): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(88): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(258): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(51): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(63): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(905): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2664): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(49): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(47): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(42): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(38): class SysUdpSocket : public SysSocket
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(43): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(57): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(71): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(194): class TimerPool : public ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(115): class SbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(54): class PotsCallIpService : public UdpIpService
W110 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(38): class StatusCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(59): class SetCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(88): class IncludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(118): class ExcludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(147): class QueryCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(177): class SaveCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(205): class ClearCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(36): class PermanentHeap : public SysHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(740): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(45): class NwClearCommand : public ClearCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(73): class NwExcludeCommand : public ExcludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(99): class NwIncludeCommand : public IncludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(118): class NwQueryCommand : public QueryCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(133): class NwStatusCommand : public StatusCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(42): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(50): class EventHandler : public Protected
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(42): class SbAnalyzeMessage : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(56): class SbAnalyzeSap : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(70): class SbAnalyzeSnp : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(84): class SbForceTransition : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(98): class SbInitiationReq : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(90): class TimeoutParameter : public TlvParameter
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp
  W021 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h
  W022 Remove using statement
    34: using namespace NodeBase;
  W032 Unused function
    66:    virtual CliText* CreateText() const override;
  W109 Override of Base.Display not found
    44: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    139:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    151:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    172:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    182:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    70:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    71:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    68:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp
  W005 Functional cast
    111: ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  W106 Function does not invoke Debug::ft
    98: Faction PotsShelfIpService::GetFaction() const { return PayloadFaction; }
    111: ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
    115: size_t PotsShelfIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    119: size_t PotsShelfIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    509:    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
    1083:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  W006 reinterpret_cast
    497:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W021 Add using statement
    1: namespace MediaBase
  W053 Data could be const
    171:    Q1Link link_;
  W090 Function could be const
    80:    msecs_t Originate();
  W092 Function could be free
    167:    static const char* strState(State state);
  W106 Function does not invoke Debug::ft
    1387: void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  W109 Override of Base.Display not found
    223: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h
  W092 Function could be free
    87:    static void DisplayStateCounts
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    114:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    165:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h
  W022 Remove using statement
    34: using namespace NodeBase;
  W032 Unused function
    214:    Digit GetDigit(DigitCount i) const;
  W042 Member could be private
    146:    typedef uint8_t DigitCount;
    176:    static bool IsValidDigit(Digit d)
    183:    Rc AddDigit(Digit d);
    202:    DigitCount Size() const;
    226:    bool operator==(const DigitString& that) const;
  W043 Member could be protected
    125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W061 Single-argument constructor is not explicit
    168:    DigitString(Address::DN dn);
  W092 Function could be free
    101:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    117:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    121:    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
    125:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    176:    static bool IsValidDigit(Digit d)
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    134:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W106 Function does not invoke Debug::ft
    123: CliParm* CauseParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h
  W022 Remove using statement
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    51:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    53:    auto& bcssm = static_cast< BcSsm& >(ssm);
    79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W099 Line contains adjacent spaces
    79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    81:    auto          sid = msg->GetSignal();
    82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    84:    CauseInfo*    cci;
    136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    138:    auto       sid = msg->GetSignal();
    139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    183:    auto       sid = msg->GetSignal();
    184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    217:    auto          sid = msg->GetSignal();
    218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    220:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    120:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W106 Function does not invoke Debug::ft
    109: CliParm* ProgressParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h
  W022 Remove using statement
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp
  W005 Functional cast
    275: ipport_t CipUdpService::Port() const { return ipport_t(port_); }
    378: ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  W006 reinterpret_cast
    528:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    543:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    573:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    885:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    919:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1049:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1448:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1453:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W099 Line contains adjacent spaces
    540:    id_t        idx;
    541:    word        fid, rid;
    543:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    572:    TestRc       rc;
    573:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    575:    id_t         idx;
    576:    word         fid, rid;
    918:    auto          state = GetState();
    919:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    920:    auto          sig = tmsg.GetSignal();
    921:    TimeoutInfo*  toi = nullptr;
    923:    auto          err = true;
    924:    debug64_t     error;
    1048:    auto          state = GetState();
    1049:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1050:    auto          sig = msg.GetSignal();
    1052:    auto          err = true;
    1053:    debug64_t     error;
  W106 Function does not invoke Debug::ft
    265: Faction CipUdpService::GetFaction() const { return PayloadFaction; }
    275: ipport_t CipUdpService::Port() const { return ipport_t(port_); }
    279: size_t CipUdpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    283: size_t CipUdpService::TxSize() const { return IoThread::MaxTxBuffSize; }
    360: Faction CipTcpService::GetFaction() const { return PayloadFaction; }
    364: size_t CipTcpService::MaxBacklog() const { return 200; }
    368: size_t CipTcpService::MaxConns() const { return TcpIoThread::MaxConns; }
    378: ipport_t CipTcpService::Port() const { return ipport_t(port_); }
    382: size_t CipTcpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    386: size_t CipTcpService::TxSize() const { return IoThread::MaxTxBuffSize; }
    432: CliText* CipIamSignal::CreateText() const
    446: CliText* CipCpgSignal::CreateText() const
    460: CliText* CipAnmSignal::CreateText() const
    474: CliText* CipRelSignal::CreateText() const
    518: CliParm* CipRouteParameter::CreateCliParm(Usage use) const
    622: CliParm* CipCallingParameter::CreateCliParm(Usage use) const
    646: CliParm* CipCalledParameter::CreateCliParm(Usage use) const
    672: CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
    698: CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h
  W022 Remove using statement
    49: using namespace NodeBase;
    50: using namespace SessionBase;
  W026 Unused class
    296: class CipUdpService : public UdpIpService
  W032 Unused function
    180:    MediaInfo* AddMedia(const MediaInfo& media);
    247:    virtual void InjectFinalMsg() override;
    318:    virtual CliText* CreateText() const override;
    371:    virtual CliText* CreateText() const override;
  W042 Member could be private
    234:    virtual void EnsureMediaMsg() override;
    238:    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    419:    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W109 Override of Base.Display not found
    296: class CipUdpService : public UdpIpService
    337: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp
  W021 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h
  W022 Remove using statement
    53: using namespace NodeBase;
    54: using namespace SessionBase;
  W038 Member hides inherited name
    316:    static const Id NextId = FirstId + 50;
    883:    static const Id NextId                 = FirstUn + 7;
  W042 Member could be private
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1152:    CipPsm* AllocNPsm();
  W043 Member could be protected
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W053 Data could be const
    340:    Progress::Ind progress_;
    356:    Cause::Ind cause_;
  W075 Virtual function is public
    1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1020:    virtual EventHandler::Rc RaiseRemoteProgress
    1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1030:    virtual EventHandler::Rc RaiseLocalProgress
    1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1045:    virtual EventHandler::Rc RaiseLocalRelease
    1047:    virtual EventHandler::Rc RaiseRemoteRelease
    1049:    virtual EventHandler::Rc RaiseReleaseCall
    1051:    virtual EventHandler::Rc RaiseApplyTreatment
    1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1076:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1083:    virtual EventHandler::Rc HandleLocalAlerting();
    1088:    virtual EventHandler::Rc HandleLocalAnswer();
    1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1105:    virtual CipMessage* BuildCipIam();
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1213:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W077 Virtual function has no overrides
    1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1020:    virtual EventHandler::Rc RaiseRemoteProgress
    1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1030:    virtual EventHandler::Rc RaiseLocalProgress
    1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1045:    virtual EventHandler::Rc RaiseLocalRelease
    1047:    virtual EventHandler::Rc RaiseRemoteRelease
    1049:    virtual EventHandler::Rc RaiseReleaseCall
    1051:    virtual EventHandler::Rc RaiseApplyTreatment
    1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1083:    virtual EventHandler::Rc HandleLocalAlerting();
    1088:    virtual EventHandler::Rc HandleLocalAnswer();
    1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1105:    virtual CipMessage* BuildCipIam();
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  W082 Adjacent arguments have the same type
    1217:    BcFactory(Id fid, ProtocolId prid, const char* name);
  W090 Function could be const
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1168:    CipMessage* BuildCipRel(Cause::Ind cause);
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    405:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    920:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W102 Line length exceeds the standard maximum
    300:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp
  W021 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    139:       auto rc = AddDigit(Digit(ds.digits_[i]));
    171:    if(i < Size()) return Digit(digits_[i]);
  W106 Function does not invoke Debug::ft
    169: Digit DigitString::GetDigit(DigitCount i) const
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    463:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    472:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    504:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    505:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    624:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    782:          return static_cast< ProxyBcPsm* >(p);
    818:          ppsm = static_cast< ProxyBcPsm* >(psm);
    1044:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1049:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W099 Line contains adjacent spaces
    423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    425:    auto          sid = msg->GetSignal();
    426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    428:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h
  W022 Remove using statement
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused class
    192: class ProxyBcDisconnecting : public BcDisconnecting
  W027 Unused data
    63:    static const ServicePortId NextPortId = FirstPortId + 1;
    219:    static const Id NextId        = FirstId + 4;
    303:    static const Id NextId              = FirstId + 7;
    388:    static const Id NextId          = FirstId + 3;
  W032 Unused function
    195:    explicit ProxyBcDisconnecting(ServiceId sid);
  W038 Member hides inherited name
    63:    static const ServicePortId NextPortId = FirstPortId + 1;
    213:    static const Id FirstId = BcEvent::NextId;
    219:    static const Id NextId        = FirstId + 4;
    303:    static const Id NextId              = FirstId + 7;
  W042 Member could be private
    495:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    472:    virtual EventHandler::Rc RaiseReleaseUser
    474:    virtual EventHandler::Rc RaiseProxyProgress
    476:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    477:    virtual EventHandler::Rc RaiseProxyRelease
    512:    virtual void SetUPsm(MediaPsm& psm) override;
  W077 Virtual function has no overrides
    472:    virtual EventHandler::Rc RaiseReleaseUser
    474:    virtual EventHandler::Rc RaiseProxyProgress
    476:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    477:    virtual EventHandler::Rc RaiseProxyRelease
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
  W021 Add using statement
    1: namespace SessionBase
  W042 Member could be private
    45:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp
  W006 reinterpret_cast
    61:    auto fake = reinterpret_cast< const CodeDir* >(&local);
  W106 Function does not invoke Debug::ft
    118: bool CodeDir::IsSubsDir() const
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h
  W092 Function could be free
    86:    static bool IsCodeFile(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.win.cpp
  W056 Default constructor invoked: POD members not initialized
    55:    _finddata_t fileAttrs;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp
  W005 Functional cast
    203:       *stream << setw(12) << LineType(t)
    215:          *stream << setw(6) << WarningCode(Warning(w))
    216:             << setw(6) << WarningCounts[w] << spaces(2) << Warning(w) << CRLF;
    2698:       *cli.obuf << ": " << Warning(item->warning);
  W006 reinterpret_cast
    1618:    auto fake = reinterpret_cast< const CodeFile* >(&local);
  W007 Cast down the inheritance hierarchy
    1142:          auto base = static_cast< const Class* >(*b);
    1275:       auto base = static_cast< const Class* >(*b);
    1307:                auto type = static_cast< const Typedef* >(*item2);
    1330:          auto type = static_cast< const Typedef* >(*item1);
    1579:    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
    3394:    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  W025 Unused argument
    385/2:    word AddInclude(const WarningLog& log, string& expl);
    472/4:       const string& forward, string& expl);
  W032 Unused function
    76:    bool operator!=(const WarningLog& that) const;
    442:    Iter Find(SourceList& list, const Iter& iter, const string& source) const;
  W042 Member could be private
    123:    static bool IsSortedByFile
  W053 Data could be const
    519:    SourceList intIncls_;
  W056 Default constructor invoked: POD members not initialized
    3256:       WarningLog log;
  W057 Default constructor invoked
    3675:    CxxUsageSets symbols;
  W082 Adjacent arguments have the same type
    471:    word InsertForward(Iter& iter, const string& nspace,
  W092 Function could be free
    111:    static word FindWarning(const WarningLog& log);
    123:    static bool IsSortedByFile
    128:    static bool IsSortedByWarning
    133:    static string WarningCode(Warning warning);
    442:    Iter Find(SourceList& list, const Iter& iter, const string& source) const;
    486:    static word Report(string& expl, fixed_string text, word rc = 0);
  W106 Function does not invoke Debug::ft
    295: bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
    311: bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
    957: bool Editor::IsSorted(const SourceLine& line1, const SourceLine& line2)
    964: void Editor::PushBack(SourceList& list, const string& source)
    2860: LineType CodeFile::GetLineType(size_t n) const
    3010: void CodeFile::InsertClass(Class* cls)
    3018: void CodeFile::InsertData(Data* data)
    3026: bool CodeFile::InsertDirective(DirectivePtr& dir)
    3035: void CodeFile::InsertEnum(Enum* item)
    3043: void CodeFile::InsertForw(Forward* forw)
    3051: void CodeFile::InsertFunc(Function* func)
    3059: void CodeFile::InsertInclude(IncludePtr& incl)
    3068: Include* CodeFile::InsertInclude(const string& fn)
    3086: void CodeFile::InsertMacro(Macro* macro)
    3094: void CodeFile::InsertType(Typedef* type)
    3102: void CodeFile::InsertUsing(UsingPtr& use)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h
  W042 Member could be private
    109:    bool IsTemplateHeader() const;
  W047 Data is init-only
    459:    SetOfIds baseIds_;
  W092 Function could be free
    231:    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    534:    LibrarySet* nbSet = (LibrarySet*) this;
    566:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    77:    auto curr = static_cast< CodeFileSet* >(Users(true));
    89:       curr = static_cast< CodeFileSet* >(prev->Users(true));
    109:    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
    121:       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
    400:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
    432:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    433:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    545:       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
    577:       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
    612:    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  W008 Cast removes const qualification
    534:    LibrarySet* nbSet = (LibrarySet*) this;
    566:    LibrarySet* nsSet = (LibrarySet*) this;
  W056 Default constructor invoked: POD members not initialized
    848:    FileLevel item;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp
  W043 Member could be protected
    110:    static LibrarySet* Evaluate(CliThread& cli);
  W092 Function could be free
    110:    static LibrarySet* Evaluate(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp
  W007 Cast down the inheritance hierarchy
    63:    auto that = static_cast< CodeSet* >(rhs);
    99:    auto that = static_cast< const CodeSet* >(rhs);
    136:    auto that = static_cast< const CodeSet* >(rhs);
    150:    auto that = static_cast< const CodeSet* >(rhs);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp
  W106 Function does not invoke Debug::ft
    301: bool IsUnusedItemWarning(Warning warning)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h
  W018 Remove #include directive
    28: #include <vector>
  W027 Unused data
    532: extern const Flags NoLF_Mask;
    533: extern const Flags Last_Mask;
    537: extern const Flags Stats_Mask;
  W082 Adjacent arguments have the same type
    292:    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    260:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    312:          oper = Cxx::Operator(i);
    363:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    369:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    374:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W099 Line contains adjacent spaces
    98:    CxxWord("-",   "-",    "D",  F),  // AUTO
    99:    CxxWord("-",   "-",    "b",  T),  // BREAK
    100:    CxxWord("-",   "-",    "c",  T),  // CASE
    101:    CxxWord("C",   "C",    "-",  T),  // CLASS
    102:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    103:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    104:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    105:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    106:    CxxWord("-",   "-",    "d",  T),  // DO
    107:    CxxWord("E",   "E",    "E",  T),  // ENUM
    108:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    109:    CxxWord("DP",  "-",    "-",  T),  // EXTERN
    110:    CxxWord("-",   "-",    "f",  T),  // FOR
    111:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    112:    CxxWord("H",   "H",    "H",  F),  // HASH
    113:    CxxWord("-",   "-",    "i",  T),  // IF
    114:    CxxWord("P",   "P",    "-",  T),  // INLINE
    115:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    116:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    117:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    118:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    119:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    120:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    121:    CxxWord("-",   "-",    "r",  T),  // RETURN
    122:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    123:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    124:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    125:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    126:    CxxWord("-",   "-",    "t",  T),  // TRY
    127:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    128:    CxxWord("C",   "C",    "-",  T),  // UNION
    129:    CxxWord("U",   "U",    "U",  T),  // USING
    130:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    131:    CxxWord("-",   "-",    "w",  T),  // WHILE
    132:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    133:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    155:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    156:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    157:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    158:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    159:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    160:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    161:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    162:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    163:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    164:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    165:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    167:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    168:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    169:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    170:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    171:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    172:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    173:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    174:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    175:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    176:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    177:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    178:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    179:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    180:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    181:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    182:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    183:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    184:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    185:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    186:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    187:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    188:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    189:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    190:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    191:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    192:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    193:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    194:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    195:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    196:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    197:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    198:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    199:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    200:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    201:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    202:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    203:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    204:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    205:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    206:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    207:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    208:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    209:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    210:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    211:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    212:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    213:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    214:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    215:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    216:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    217:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    218:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    219:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    220:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h
  W032 Unused function
    423:    Numeric(NumericType type, size_t width, bool sign)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    210:          static_cast< const Function* >(item)->IsInline())
    222:          auto args = static_cast< ClassInst* >(usingClass)->GetSpec()->Args();
    1057:    auto area = static_cast< CxxArea* >(GetScope());
    1060:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1077:          auto c = static_cast< Class* >(*s);
    1876:       auto func = static_cast< const Function* >(item);
    1902:       auto func = static_cast< const Function* >(item);
  W008 Cast removes const qualification
    1275:    return const_cast< Class* >(this);
    1389:    return static_cast< CxxScope* >(const_cast< Class* >(this));
    1872:       return const_cast< ClassInst* >(this);
  W056 Default constructor invoked: POD members not initialized
    1368:    DataInitAttrs attrs;
  W106 Function does not invoke Debug::ft
    378: void Class::AddItem(CxxNamed* item)
    1272: Class* Class::GetClassTemplate() const
    1386: CxxScope* Class::GetTemplate() const
    1641: Class* Class::OuterClass() const
    1648: bool Class::SetCurrAccess(Cxx::Access access)
    2349: Function* CxxArea::FoundFunc(Function* func, SymbolView* view, TypeMatch match)
    2357: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    434:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W007 Cast down the inheritance hierarchy
    802:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    140:       override { return const_cast< CxxArea* >(this); }
    434:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    470:       override { return const_cast< Class* >(this); }
    839:       override { return const_cast< Namespace* >(this); }
  W042 Member could be private
    115:    Typedef* FindType(const std::string& name) const;
    156:    Enum* FindEnum(const std::string& name) const;
    160:    Enumerator* FindEnumerator(const std::string& name) const;
    354:    Function* FindFuncByRole(FunctionRole role, bool base) const;
    358:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    801:    Namespace* OuterSpace()
    807:    Namespace* FindNamespace(const std::string& name) const;
  W043 Member could be protected
    75:    const ClassPtrVector* Classes() const { return &classes_; }
    83:    const EnumPtrVector* Enums() const { return &enums_; }
    87:    const ForwardPtrVector* Forws() const { return &forws_; }
  W060 Base class constructor is public
    236:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W075 Virtual function is public
    124:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    131:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    265:    virtual ClassInst* EnsureInstance(const TypeName* type);
    273:    virtual Class* BaseClass()
    278:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    295:    virtual Class* GetClassTemplate() const;
    310:    virtual bool DerivesFrom(const Class* cls) const;
    425:    virtual bool AddAnonymousUnion(const ClassPtr& cls) override;
    442:    virtual void CheckIfUsed(Warning warning) const override;
    450:    virtual Class* DirectClass() const override { return GetClass(); }
    826:    virtual CxxScoped* FindItem(const std::string& name) const override;
  W092 Function could be free
    178:    static Function* FoundFunc
    579:    static size_t CreateCodeError(const std::string& name, debug32_t offset);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    851:       auto macro = static_cast< Macro* >(ref_);
    864:       auto macro = static_cast< Macro* >(ref_);
  W106 Function does not invoke Debug::ft
    47: void AlignLeft(ostream& stream, const string& prefix)
    150: CxxToken* Define::AutoType() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h
  W042 Member could be private
    236:    virtual CxxToken* GetValue() const = 0;
    276:    virtual CxxToken* RootType() const override { return GetValue(); }
  W043 Member could be protected
    729:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    301:    size_t refs_ : 16;
  W075 Virtual function is public
    236:    virtual CxxToken* GetValue() const = 0;
    241:    virtual bool IsDefined() const { return true; }
    247:    virtual void SetExpr(ExprPtr& rhs);
    276:    virtual CxxToken* RootType() const override { return GetValue(); }
    411:    virtual bool AddElif(Elif* e) { return false; }
    415:    virtual bool AddElse(const Else* e) { return false; }
    424:    virtual bool HasCompiledCode() const { return compile_; }
    465:    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp
  W007 Cast down the inheritance hierarchy
    1284:       auto thisClass = static_cast< Class* >(thisRoot);
    1292:             auto thatClass = static_cast< Class* >(thatRoot);
    1427:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    1471:    auto ref = static_cast< CxxNamed* >(item);
    1613:          static_cast< Class* >(root)->BlockCopied(this);
  W058 Default copy constructor invoked
    155:    arg_(arg)
  W075 Virtual function is public
    64:    virtual bool Display(std::ostream& stream) override;
    76:    virtual bool Display(std::ostream& stream) override;
    92:    virtual bool Display(std::ostream& stream) override;
    108:    virtual bool Display(std::ostream& stream) override;
    128:    virtual bool Display(std::ostream& stream) override;
  W106 Function does not invoke Debug::ft
    244: bool Context::OptionIsOn(char opt)
    251: bool Context::ParsingTemplateInstance()
    389: void Context::Trace(CxxTrace::Action act)
    397: void Context::Trace(CxxTrace::Action act, const StackArg& arg)
    405: void Context::Trace(CxxTrace::Action act, word err, const string& expl)
    413: void Context::Trace(CxxTrace::Action act, const CodeFile& file)
    421: void Context::Trace(CxxTrace::Action act, const CxxToken* token)
    429: void Context::WasCalled(Function* func)
    615: OptionalCode* ParseFrame::Optional() const
    802: CxxScope* ParseFrame::Scope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h
  W025 Unused argument
    590/1:    static void Shutdown(RestartLevel level);
    594/1:    static void Startup(RestartLevel level) { }
  W032 Unused function
    131:    size_t Arrays() const;
    271:    bool operator!=(const StackArg& that) const;
  W042 Member could be private
    270:    bool operator==(const StackArg& that) const;
  W050 Data is not private
    279:    CxxToken* item;
  W053 Data could be const
    303:    CxxToken* via_;
  W082 Adjacent arguments have the same type
    237:    TypeMatch CalcMatchWith(const StackArg& that, const std::string& thisType,
    288:    TypeMatch MatchWith(const StackArg& that, const std::string& thisType,
  W092 Function could be free
    299:    static void ContextFunctionIsNonConst();
    594:    static void Startup(RestartLevel level) { }
    667:    static std::string Location();
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp
  W005 Functional cast
    695:    if(arrays_ != nullptr) count += TagCount(arrays_->size());
    1333:    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  W007 Cast down the inheritance hierarchy
    375:          space = static_cast< Namespace* >(item);
    399:          cls = static_cast< Class* >(item);
    453:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    464:             auto tdef = static_cast< Typedef* >(item);
    469:             item = static_cast< CxxScoped* >(root);
    481:             item = static_cast< CxxScoped* >(ref);
    755:    return static_cast< Class* >(root);
    1043:          auto cls = static_cast< Class* >(ref);
    1197:       auto cls = static_cast< Class* >(ref);
    1953:          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
    1963:       ref = static_cast< Function* >(ref)->FindRootFunc();
  W008 Cast removes const qualification
    977:    return const_cast< DataSpec* >(this);
    1375:    const_cast< DataSpec* >(this)->FindReferent();
    2501:    return const_cast< TypeName* >(this);
  W106 Function does not invoke Debug::ft
    162: CxxArea* CxxNamed::GetArea() const
    171: Class* CxxNamed::GetClass() const
    180: id_t CxxNamed::GetDeclFid() const
    189: bool CxxNamed::GetScopedName(string& name, size_t n) const
    198: Namespace* CxxNamed::GetSpace() const
    207: bool CxxNamed::IsInTemplateInstance() const
    542: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    939: Numeric DataSpec::GetNumeric() const
    959: CxxScope* DataSpec::GetScope() const
    968: TypeTags DataSpec::GetTags() const
    975: TypeSpec* DataSpec::GetTypeSpec() const
    1108: bool DataSpec::IsAutoDecl() const
    1815: TypeName* QualName::At(size_t n) const
    1890: CxxScoped* QualName::GetForward() const
    1971: TypeName* QualName::Last() const
    2193: size_t QualName::Size() const
    2468: CxxNamed* TypeName::DirectType() const
    2635: void TypeName::PushBack(TypeNamePtr& type)
    2844: void TypeSpec::AddArray(ArraySpecPtr& array)
    2851: void TypeSpec::AdjustPtrs(TagCount count)
    2866: TagCount TypeSpec::ArrayCount() const
    2874: TagCount TypeSpec::Arrays() const
    2882: TypeSpec* TypeSpec::Clone() const
    2904: void TypeSpec::EnterArrays() const
    2911: void TypeSpec::EnteringScope(const CxxScope* scope)
    2918: TypeTags TypeSpec::GetTags() const
    2928: bool TypeSpec::HasArrayDefn() const
    2936: void TypeSpec::Instantiating() const
    2943: bool TypeSpec::MatchesExactly(const TypeSpec* that) const
    2951: TypeMatch TypeSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    2960: TypeMatch TypeSpec::MatchTemplateArg(const TypeSpec* that) const
    2991: TagCount TypeSpec::PtrCount(bool arrays) const
    2999: TagCount TypeSpec::Ptrs(bool arrays) const
    3007: TagCount TypeSpec::RefCount() const
    3015: TagCount TypeSpec::Refs() const
    3023: void TypeSpec::RemoveRefs()
    3030: StackArg TypeSpec::ResultType() const
    3038: void TypeSpec::SetArrayPos(int8_t pos)
    3045: void TypeSpec::SetConst(bool readonly)
    3052: void TypeSpec::SetConstPtr(bool constptr)
    3070: void TypeSpec::SetPtrDetached(bool on)
    3077: void TypeSpec::SetPtrs(TagCount ptrs)
    3084: void TypeSpec::SetRefDetached(bool on)
    3091: void TypeSpec::SetReferent(CxxNamed* ref, bool use)
    3098: void TypeSpec::SetRefs(TagCount refs)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1102:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    755:       override { return const_cast< QualName* >(this); }
    1102:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W042 Member could be private
    46:    CxxLocation() : file(nullptr), pos(std::string::npos), internal(false) { }
  W043 Member could be protected
    126:    bool IsInternal() const { return loc_.internal; }
    212:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    221:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    290:    void Accessed() const;
    300:    void DisplayReferent(std::ostream& stream, bool fq) const;
    304:    std::string strLocation() const;
    309:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    835:    Cxx::ItemType GetLocale() const { return locale_; }
    839:    TemplateRole GetTemplateRole() const { return role_; }
  W053 Data could be const
    81:    bool const_ : 1;       // type is const
    82:    bool constptr_ : 1;    // pointer is const
    85:    TagCount refs_ : 8;    // number of references
  W075 Virtual function is public
    118:    virtual void SetPos(CodeFile* file, size_t pos) { loc_.SetLoc(file, pos); }
    131:    virtual bool IsDeclaredInFunction() const { return false; }
    139:    virtual bool IsStatic() const { return true; }
    144:    virtual CxxScope* GetScope() const { return nullptr; }
    150:    virtual void SetScope(CxxScope* scope) const { }
    154:    virtual void SetAccess(Cxx::Access access) { }
    160:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    165:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    173:    virtual CxxScope* GetTemplate() const { return nullptr; }
    179:    virtual std::string QualifiedName(bool scopes, bool templates)
    185:    virtual std::string ScopedName(bool templates) const;
    191:    virtual bool GetScopedName(std::string& name, size_t n) const;
    196:    virtual CxxArea* GetArea() const;
    201:    virtual Function* GetFunction() const { return nullptr; }
    205:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    212:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    216:    virtual id_t GetDeclFid() const;
    221:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    238:    virtual bool EnterScope() { return true; }
    248:    virtual bool IsImplemented() const { return true; }
    254:    virtual CxxNamed* DirectType() const { return Referent(); }
    259:    virtual bool FindReferent();
    263:    virtual void SetAsReferent(const CxxNamed* user) { }
    268:    virtual bool Instantiate() { return false; }
    272:    virtual bool IsInTemplateInstance() const;
    279:    virtual StackArg NameToArg(Cxx::Operator op);
    285:    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
    578:    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
    786:    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
    790:    virtual bool ResolveTemplate
    831:    virtual void SetLocale(Cxx::ItemType locale);
    843:    virtual Function* GetFuncSpec() const { return nullptr; }
    854:    virtual TypeSpec* Clone() const = 0;
    858:    virtual void AddArray(ArraySpecPtr& array) = 0;
    862:    virtual void SetConst(bool readonly) = 0;
    866:    virtual void SetConstPtr(bool constptr) = 0;
    870:    virtual void SetPtrs(TagCount ptrs) = 0;
    874:    virtual void SetRefs(TagCount refs) = 0;
    878:    virtual void SetArrayPos(int8_t pos) = 0;
    882:    virtual void SetPtrDetached(bool on) = 0;
    886:    virtual void SetRefDetached(bool on) = 0;
    891:    virtual void SetReferent(CxxNamed* ref, bool use) = 0;
    897:    virtual TagCount Ptrs(bool arrays) const = 0;
    903:    virtual TagCount Refs() const = 0;
    908:    virtual TagCount Arrays() const = 0;
    912:    virtual bool HasArrayDefn() const = 0;
    916:    virtual void EnteringScope(const CxxScope* scope) = 0;
    920:    virtual void EnterArrays() const = 0;
    924:    virtual TypeTags GetTags() const = 0;
    929:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    934:    virtual void DisplayTags(std::ostream& stream) const = 0;
    938:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    944:    virtual void AdjustPtrs(TagCount count) = 0;
    949:    virtual void RemoveRefs() = 0;
    954:    virtual TagCount PtrCount(bool arrays) const = 0;
    958:    virtual TagCount RefCount() const = 0;
    962:    virtual TagCount ArrayCount() const = 0;
    967:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    971:    virtual StackArg ResultType() const = 0;
    975:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    986:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    992:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    997:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1003:    virtual void Instantiating() const = 0;
  W082 Adjacent arguments have the same type
    511:    TypeMatch MatchTemplate(const TypeName* that,
    732:    TypeMatch MatchTemplate(const QualName* that,
    986:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp
  W007 Cast down the inheritance hierarchy
    1346:    auto cls = static_cast< Class* >(root);
    1414:          auto op = static_cast< Operation* >(expr);
    1708:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    1754:    auto data = static_cast< FuncData* >(next_.get());
    2579:       if(!static_cast< Function* >(item)->virtual_)
    2976:             static_cast< ClassData* >(data)->SetInit(m->get());
    3187:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    4471:       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
    4472:       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  W008 Cast removes const qualification
    2178:    return FoundFunc(const_cast< Function* >(this), args, match);
    3151:    auto prev = const_cast< Function* >(this);
    3320:       (const_cast< Function* >(this));
    3578:    func->SetTemplate(const_cast< Function* >(this));
  W057 Default constructor invoked
    3363:    CxxUsageSets usages;
  W106 Function does not invoke Debug::ft
    113: bool Block::CrlfOver(Form form) const
    232: CxxToken* Block::FirstStatement() const
    240: Function* Block::GetFunction() const
    279: bool Block::InLine() const
    804: id_t CxxScope::GetDistinctDeclFid() const
    1252: CodeFile* Data::GetDeclFile() const
    1259: const Data* Data::GetDefn() const
    1268: CodeFile* Data::GetDefnFile() const
    1442: bool Data::IsConst() const
    1450: bool Data::IsConstPtr() const
    1562: bool Data::WasRead()
    3192: Function* Function::FoundFunc
    3221: FunctionRole Function::FuncRole() const
    3257: FunctionType Function::FuncType() const
    3267: CodeFile* Function::GetDeclFile() const
    3274: const Function* Function::GetDefn() const
    3283: CodeFile* Function::GetDefnFile() const
    3292: void Function::GetDefnRange(size_t& begin, size_t& end) const
    3300: CxxScope* Function::GetScope() const
    3808: bool Function::IsInTemplateInstance() const
    4155: void Function::SetDefnRange(size_t begin, size_t end)
    4493: void FuncSpec::AddArray(ArraySpecPtr& array)
    4500: void FuncSpec::AdjustPtrs(TagCount count)
    4514: TagCount FuncSpec::ArrayCount() const
    4521: TagCount FuncSpec::Arrays() const
    4528: void FuncSpec::Check() const
    4535: TypeSpec* FuncSpec::Clone() const
    4557: void FuncSpec::EnterArrays() const
    4576: bool FuncSpec::FindReferent()
    4584: TypeTags FuncSpec::GetTags() const
    4591: TypeName* FuncSpec::GetTemplateArgs() const
    4598: TypeSpec* FuncSpec::GetTypeSpec() const
    4605: bool FuncSpec::HasArrayDefn() const
    4612: void FuncSpec::Instantiating() const
    4620: bool FuncSpec::IsConst() const
    4627: bool FuncSpec::IsConstPtr() const
    4634: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    4642: TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    4652: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    4674: TagCount FuncSpec::PtrCount(bool arrays) const
    4681: TagCount FuncSpec::Ptrs(bool arrays) const
    4688: TagCount FuncSpec::RefCount() const
    4695: TagCount FuncSpec::Refs() const
    4702: void FuncSpec::RemoveRefs()
    4709: StackArg FuncSpec::ResultType() const
    4716: void FuncSpec::SetArrayPos(int8_t pos)
    4724: void FuncSpec::SetConst(bool readonly)
    4732: void FuncSpec::SetConstPtr(bool constptr)
    4740: void FuncSpec::SetPtrDetached(bool on)
    4748: void FuncSpec::SetPtrs(TagCount ptrs)
    4756: void FuncSpec::SetRefDetached(bool on)
    4764: void FuncSpec::SetReferent(CxxNamed* ref, bool use)
    4772: void FuncSpec::SetRefs(TagCount refs)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    336:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    336:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1127:       const override { return const_cast< Function* >(this); }
  W029 Unused enumerator
    148:       Multiple   // two statements or more
  W042 Member could be private
    973:    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
    1001:    size_t MinArgs() const;
    1006:    size_t MaxArgs() const { return args_.size(); }
    1068:    bool IsInvokedInBase() const;
  W043 Member could be protected
    301:    bool IsExtern() const { return extern_; }
    305:    bool IsConstexpr() const { return constexpr_; }
    309:    bool WasInited() const { return GetDecl()->inited_; }
  W075 Virtual function is public
    81:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    86:    virtual Using* GetUsingFor(const std::string& name, size_t prefix)
    94:    virtual void AccessibilityOf
    326:    virtual void Promote
    1093:    virtual void CheckAccessControl() const override;
    1097:    virtual void CheckIfHiding() const override;
    1101:    virtual void CheckIfUsed(Warning warning) const override;
    1216:    virtual void WasCalled() override;
  W082 Adjacent arguments have the same type
    326:    virtual void Promote
    1296:    static TypeMatch MatchTemplate
  W092 Function could be free
    1296:    static TypeMatch MatchTemplate
    1309:    static Function* InstantiateError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1171:    return (CxxToken*) this;
    1366:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    91:          auto func = static_cast< Function* >(GetScope());
    262:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    297:    return static_cast< Class* >(name_->GetReferent());
    1354:          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
    1504:          space = static_cast< Namespace* >(item);
    1517:          cls = static_cast< Class* >(item);
    1556:             auto tdef = static_cast< Typedef* >(item);
    1561:             item = static_cast< CxxScoped* >(root);
    1836:       static_cast< CxxArea* >(scope)->AddFunc(func);
  W008 Cast removes const qualification
    1171:    return (CxxToken*) this;
    1366:    return (CxxToken*) this;
    1746:    const_cast< Friend* >(this)->FindReferent();
  W058 Default copy constructor invoked
    1929:    attrs_(Numeric::Nil)
  W106 Function does not invoke Debug::ft
    295: Class* BaseDecl::GetClass() const
    396: void CxxScoped::AddFiles(SetOfIds& imSet) const
    531: CodeFile* CxxScoped::GetImplFile() const
    540: bool CxxScoped::IsAuto() const
    549: bool CxxScoped::IsConst() const
    558: bool CxxScoped::IsConstPtr() const
    567: bool CxxScoped::IsDeclaredInFunction() const
    575: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    588: bool CxxScoped::IsIndirect() const
    1103: void Enumerator::RecordAccess(Cxx::Access access) const
    1167: CxxToken* Forward::AutoType() const
    1362: CxxToken* Friend::AutoType() const
    1628: Function* Friend::GetFunction() const
    1637: QualName* Friend::GetQualName() const
    1646: CxxNamed* Friend::GetReferent() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    140:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    436:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    532:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    951:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1027:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    140:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    436:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    532:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    951:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1027:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W043 Member could be protected
    51:    CodeFile* GetImplFile() const;
    86:    CxxScoped* FindInheritedName() const;
    91:    void DisplayFiles(std::ostream& stream) const;
    99:    virtual bool IsUnused() const { return false; }
  W053 Data could be const
    1238:    bool added_ : 1;
  W075 Virtual function is public
    68:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
    77:    virtual void RecordAccess(Cxx::Access access) const;
    95:    virtual void AddFiles(SetOfIds& imSet) const;
    99:    virtual bool IsUnused() const { return false; }
    445:    virtual void CheckAccessControl() const override;
    828:    virtual bool ResolveTemplate
    1209:    virtual bool ResolveTypedef(Typedef* type, size_t n) const
  W082 Adjacent arguments have the same type
    1133:    Using(QualNamePtr& name, bool space, bool added = false);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp
  W106 Function does not invoke Debug::ft
    283: void CxxStatement::EnterBlock()
    363: bool Do::InLine() const
    573: bool For::InLine() const
    679: bool If::InLine() const
    1081: bool While::InLine() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    41: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
    58: size_t RfindScopeOperator(const string& name, size_t begin, size_t end);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h
  W032 Unused function
    64:    std::string& Prefix(std::string&& scope);
  W082 Adjacent arguments have the same type
    121:    size_t Replace(std::string& code,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W007 Cast down the inheritance hierarchy
    383:    return static_cast< Macro* >(macros.front());
    422:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    430:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    438:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    444:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W106 Function does not invoke Debug::ft
    90: template< typename T > void Erase(const CxxScoped* item,
    188: template< typename T > void ListSymbols(const string& name,
    225: void CxxSymbols::EraseClass(const Class* cls)
    232: void CxxSymbols::EraseData(const Data* data)
    239: void CxxSymbols::EraseEnum(const Enum* item)
    246: void CxxSymbols::EraseEtor(const Enumerator* etor)
    253: void CxxSymbols::EraseForw(const Forward* forw)
    260: void CxxSymbols::EraseFriend(const Friend* frnd)
    267: void CxxSymbols::EraseFunc(const Function* func)
    296: void CxxSymbols::EraseMacro(const Macro* macro)
    303: void CxxSymbols::EraseSpace(const Namespace* space)
    310: void CxxSymbols::EraseTerm(const Terminal* term)
    317: void CxxSymbols::EraseType(const Typedef* type)
    665: void CxxSymbols::InsertClass(Class* cls)
    672: void CxxSymbols::InsertData(Data* data)
    679: void CxxSymbols::InsertEnum(Enum* item)
    686: void CxxSymbols::InsertEtor(Enumerator* etor)
    693: void CxxSymbols::InsertForw(Forward* forw)
    700: void CxxSymbols::InsertFriend(Friend* frnd)
    707: void CxxSymbols::InsertFunc(Function* func)
    741: void CxxSymbols::InsertMacro(Macro* macro)
    748: void CxxSymbols::InsertSpace(Namespace* space)
    755: void CxxSymbols::InsertTerm(Terminal* term)
    762: void CxxSymbols::InsertType(Typedef* type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h
  W090 Function could be const
    124:    void InsertClass(Class* cls);
    125:    void InsertData(Data* data);
    126:    void InsertEtor(Enumerator* etor);
    127:    void InsertEnum(Enum* item);
    128:    void InsertForw(Forward* forw);
    129:    void InsertFriend(Friend* frnd);
    130:    void InsertFunc(Function* func);
    131:    void InsertMacro(Macro* macro);
    132:    void InsertSpace(Namespace* space);
    133:    void InsertTerm(Terminal* term);
    134:    void InsertType(Typedef* type);
    139:    void EraseClass(const Class* cls);
    140:    void EraseData(const Data* data);
    141:    void EraseEtor(const Enumerator* etor);
    142:    void EraseEnum(const Enum* item);
    143:    void EraseForw(const Forward* forw);
    144:    void EraseFriend(const Friend* frnd);
    145:    void EraseFunc(const Function* func);
    146:    void EraseMacro(const Macro* macro);
    147:    void EraseSpace(const Namespace* space);
    148:    void EraseTerm(const Terminal* term);
    149:    void EraseType(const Typedef* type);
    150:    void EraseLocal(const CxxScoped* name);
    154:    void EraseLocals();
  W109 Override of Base.Display not found
    87: class CxxSymbols: public Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp
  W005 Functional cast
    822:          stream << uint64_t(num_);
  W007 Cast down the inheritance hierarchy
    409:    auto oper = static_cast< Operation* >(item.get());
    435:          auto ante = static_cast< Operation* >(prev.get());
    487:       auto oper = static_cast< Operation* >(item.get());
    520:    auto oper = static_cast< Operation* >(prev.get());
    549:       auto oper = static_cast< Operation* >(item.get());
    590:    auto oper = static_cast< Operation* >(item.get());
    613:       auto ante = static_cast< Operation* >(prev.get());
    709:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1100:       inClass = static_cast< Class* >(inRoot);
    1105:       outClass = static_cast< Class* >(outRoot);
    1130:    auto call = static_cast< Operation* >(args_.front().get());
    1517:       func = static_cast< Function* >(proc.item);
    1536:       cls = static_cast< Class* >(proc.item);
    1632:       (arg.item->Root())->FindDtor(Context::Scope());
    1680:       auto newCall = static_cast< Operation* >(args_.front().get());
    1700:    auto cls = static_cast< Class* >(spec.item->Root());
    1721:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    1745:       cls = static_cast< Class* >(root);
    1928:       area = static_cast< Class* >(targ);
    1930:       static_cast< Class* >(targ)->Instantiate();
    2268:    auto cls = static_cast< Class* >(root);
    2307:       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
    2330:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    297:    CxxToken* prev = const_cast< CxxToken* >(this);
  W106 Function does not invoke Debug::ft
    342: void CxxUsageSets::AddBase(const CxxNamed* item)
    350: void CxxUsageSets::AddDirect(const CxxNamed* item)
    358: void CxxUsageSets::AddForward(const CxxNamed* item)
    369: void CxxUsageSets::AddIndirect(const CxxNamed* item)
    377: void CxxUsageSets::AddUser(const CxxNamed* item)
    723: Numeric FloatLiteral::GetNumeric() const
    784: Numeric IntLiteral::GetNumeric() const
    889: CxxToken* Literal::AutoType() const
    914: CxxToken* Literal::RootType() const
    930: Cxx::ItemType Literal::Type() const
    2641: TypeSpec* StrLiteral::GetTypeSpec() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    285:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W058 Default copy constructor invoked
    367:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
    404:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  W075 Virtual function is public
    79:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    85:    virtual const std::string* Name() const;
    89:    virtual QualName* GetQualName() const { return nullptr; }
    94:    virtual std::string TypeString(bool arg) const { return ERROR_STR; }
    98:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    102:    virtual bool IsConst() const { return false; }
    106:    virtual bool IsConstPtr() const { return false; }
    111:    virtual bool IsAuto() const { return false; }
    116:    virtual bool IsIndirect() const { return false; }
    120:    virtual bool IsInitializing() const { return false; }
    129:    virtual CxxToken* AutoType() const { return nullptr; }
    134:    virtual Namespace* GetSpace() const { return nullptr; }
    139:    virtual Class* GetClass() const { return nullptr; }
    144:    virtual Class* Declarer() const { return GetClass(); }
    150:    virtual TypeName* GetTemplateArgs() const;
    155:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    159:    virtual void GetConvertibleTypes(StackArgVector& types) { }
    164:    virtual CxxNamed* Referent() const;
    170:    virtual void EnterBlock();
    175:    virtual void ExitBlock() { }
    181:    virtual bool AppendUnary() { return false; }
    185:    virtual CxxToken* Back() { return this; }
    190:    virtual bool WasRead() { return false; }
    202:    virtual bool WasWritten(const StackArg* arg, bool passed);
    207:    virtual bool SetNonConst() { return true; }
    212:    virtual void WasMutated(const StackArg* arg) { }
    218:    virtual void RecordUsage() const { }
    223:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
    227:    virtual void Check() const { }
    231:    virtual std::string Trace() const { return EMPTY_STR; }
    235:    virtual bool InLine() const { return true; }
    240:    virtual void Print
    246:    virtual void Shrink() { }
  W082 Adjacent arguments have the same type
    621:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W090 Function could be const
    175:    virtual void ExitBlock() { }
  W092 Function could be free
    279:    static void ShrinkExpression(const ExprPtr& expr);
    473:    static TypeSpecPtr CreateRef();
    610:    static void PushType(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    155:          type = LibTokenType(i);
  W092 Function could be free
    51:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W099 Line contains adjacent spaces
    93:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    94:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    95:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    96:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    97:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    98:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    99:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    100:    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
    101:    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h
  W092 Function could be free
    64:    static bool IsOperator(const std::string& s);
  W109 Override of Base.Display not found
    46: class Interpreter : public Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    927:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    1602:          auto def = static_cast< Define* >(item);
    1606:             auto code = const_cast< string* >(source_);
  W008 Cast removes const qualification
    1606:             auto code = const_cast< string* >(source_);
  W056 Default constructor invoked: POD members not initialized
    754:       IntLiteral::Tags tags;
    801:       FloatLiteral::Tags tags;
    865:    IntLiteral::Tags tags;
  W106 Function does not invoke Debug::ft
    613: size_t Lexer::GetLineNum(size_t pos) const
    637: size_t Lexer::GetLineStart(size_t line) const
    710: bool Lexer::GetNthLine(size_t n, string& s) const
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h
  W042 Member could be private
    157:    bool ThisCharIs(char c);
    206:    std::string NextOperator() const;
  W047 Data is init-only
    436:    static bool Initialized;
  W082 Adjacent arguments have the same type
    214:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  W092 Function could be free
    185:    static bool IsValidIdentifier(const std::string& id);
C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp
  W007 Cast down the inheritance hierarchy
    93:       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h
  W042 Member could be private
    69:    CodeDir* FindDir(const std::string& name) const;
    90:    LibrarySet* FindVar(const std::string& name) const;
  W048 Data is write-only
    227:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    64:    word Import
    106:    word Assign(const std::string& name,
  W090 Function could be const
    74:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    106:    word Assign(const std::string& name,
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp
  W106 Function does not invoke Debug::ft
    102: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp
  W006 reinterpret_cast
    280:    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  W106 Function does not invoke Debug::ft
    75: LibrarySet* LibrarySet::AffectedBy() const
    82: LibrarySet* LibrarySet::Affecters() const
    89: LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
    107: LibrarySet* LibrarySet::CommonAffecters() const
    154: LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
    161: LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
    168: LibrarySet* LibrarySet::Directories() const
    187: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    194: LibrarySet* LibrarySet::Files() const
    201: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    230: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    249: LibrarySet* LibrarySet::Implements() const
    256: LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
    263: bool LibrarySet::IsReadOnly() const
    270: bool LibrarySet::IsTemporary() const
    297: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    304: LibrarySet* LibrarySet::NeededBy() const
    311: LibrarySet* LibrarySet::Needers() const
    320: word LibrarySet::NotImplemented(string& expl) const
    346: LibrarySet* LibrarySet::OpError() const
    462: LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
    469: LibrarySet* LibrarySet::UsedBy(bool self) const
    476: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h
  W042 Member could be private
    64:    bool IsReadOnly() const;
    170:    static ptrdiff_t LinkDiff();
  W043 Member could be protected
    148:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  W053 Data could be const
    218:    Q2Link link_;
  W065 Base class virtual destructor is not public
    186:    virtual ~LibrarySet();
  W075 Virtual function is public
    72:    virtual LibSetType GetType() const;
    78:    virtual word Check(std::ostream* stream, std::string& expl) const;
    84:    virtual word Count(std::string& result) const;
    90:    virtual word Countlines(std::string& result) const;
    95:    virtual word Fix(CliThread& cli, std::string& expl) const;
    100:    virtual word Format(std::string& expl) const;
    106:    virtual word List(std::ostream& stream, std::string& expl) const;
    114:    virtual word Parse(std::string& expl, const std::string& opts) const;
    120:    virtual word Scan(std::ostream& stream,
    127:    virtual word Show(std::string& result) const;
    133:    virtual word Sort(std::ostream& stream, std::string& expl) const;
    139:    virtual word Trim(std::ostream& stream, std::string& expl) const;
    148:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
    149:    virtual LibrarySet* Assign(LibrarySet* rhs);
    150:    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
    151:    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
    152:    virtual LibrarySet* Union(const LibrarySet* rhs) const;
    153:    virtual LibrarySet* Directories() const;
    154:    virtual LibrarySet* Files() const;
    155:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    156:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    157:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    158:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    159:    virtual LibrarySet* Implements() const;
    160:    virtual LibrarySet* UsedBy(bool self) const;
    161:    virtual LibrarySet* Users(bool self) const;
    162:    virtual LibrarySet* AffectedBy() const;
    163:    virtual LibrarySet* Affecters() const;
    164:    virtual LibrarySet* CommonAffecters() const;
    165:    virtual LibrarySet* NeededBy() const;
    166:    virtual LibrarySet* Needers() const;
  W092 Function could be free
    190:    static word Counted(std::string& result, const size_t* count);
    195:    static word Shown(std::string& result);
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    363:    auto op = static_cast< Operation* >(call.get());
    615:    auto brace = static_cast< BraceInit* >(token.get());
    688:    auto cast = static_cast< Operation* >(token.get());
    727:    auto c = static_cast< Catch* >(statement.get());
    824:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    825:    static_cast< ClassData* >(data.get())->SetWidth(width);
    984:    auto cond = static_cast< Operation* >(token.get());
    1257:    auto cast = static_cast< Operation* >(token.get());
    1363:    auto op = static_cast< Operation* >(token.get());
    1386:    auto delOp = static_cast< Operation* >(token.get());
    1414:    auto d = static_cast< Do* >(statement.get());
    1609:    auto f = static_cast< For* >(statement.get());
    1709:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    1758:          curr = static_cast< FuncData* >(data.get());
    1764:          curr = static_cast< FuncData* >(subseq.get());
    2015:             static_cast< If* >(first)->SetElseIf();
    2021:    auto i = static_cast< If* >(statement.get());
    2183:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2225:    auto newOp = static_cast< Operation* >(token.get());
    2686:    static_cast< Return* >(statement.get())->AddExpr(expr);
    2732:    auto op = static_cast< Operation* >(token.get());
    2879:    auto op = static_cast< Operation* >(token.get());
    2905:    auto s = static_cast< Switch* >(statement.get());
    2987:    auto op = static_cast< Operation* >(token.get());
    3023:    auto t = static_cast< Try* >(statement.get());
    3081:    auto op = static_cast< Operation* >(token.get());
    3285:    auto w = static_cast< While* >(statement.get());
    3663:          auto op = static_cast< Operation* >(token)->Op();
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h
  W032 Unused function
    222:    size_t GetCurr() const { return lexer_.Curr(); }
  W082 Adjacent arguments have the same type
    470:    static bool SetCompoundType
    515:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W088 Argument could be const
    321/1:    bool GetStatements(BlockPtr& block, bool braced);
    419/1:    bool GetCtorInit(FunctionPtr& func);
    438/1:    bool GetArguments(FunctionPtr& func);
    471/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    530/1:    bool GetNum(ExprPtr& expr);
    531/1:    bool GetChar(ExprPtr& expr);
    532/1:    bool GetStr(ExprPtr& expr);
    542/1:    bool GetCast(ExprPtr& expr);
    543/1:    bool GetPrecedence(ExprPtr& expr);
    550/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    554/1:    bool GetSubscript(ExprPtr& expr);
    563/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    564/1:    bool GetConditional(ExprPtr& expr);
    565/1:    bool GetDefined(ExprPtr& expr);
    566/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    567/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    568/1:    bool GetSizeOf(ExprPtr& expr);
    569/1:    bool GetThrow(ExprPtr& expr);
    570/1:    bool GetTypeId(ExprPtr& expr);
  W092 Function could be free
    470:    static bool SetCompoundType
    650:    static std::string Indent();
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const Circuit* >(&local);
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h
  W053 Data could be const
    90:    RegCell port_;
  W075 Virtual function is public
    64:    virtual std::string Name() const = 0;
    68:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h
  W025 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
  W032 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    87:    static void* operator new(size_t size);
    92:    explicit MediaEndpt(MediaPsm& psm);
  W042 Member could be private
    104:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
  W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h
  W022 Remove using statement
    33: using namespace NodeBase;
  W026 Unused class
    42: class MediaFailureEvent : public Event
  W032 Unused function
    48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    56:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    118:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W106 Function does not invoke Debug::ft
    107: CliParm* MediaParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h
  W022 Remove using statement
    31: using namespace NodeBase;
  W042 Member could be private
    53:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    575:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    253:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W106 Function does not invoke Debug::ft
    259: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h
  W022 Remove using statement
    37: using namespace NodeBase;
  W032 Unused function
    120:    MediaEndpt* Mep() const { return mep_; }
  W042 Member could be private
    132:    Tone::Id GetOgTone() const { return ogTone_; }
    170:    void SetOgPort(Switch::PortId ogport);
    189:    virtual Event* ReceiveMsg(Message& msg) override;
    193:    virtual void PrepareOgMsgq() override;
  W075 Virtual function is public
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
  W077 Virtual function has no overrides
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto mpsm = static_cast< MediaPsm* >(psm);
    118:       auto mpsm = static_cast< MediaPsm* >(psm);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W032 Unused function
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W077 Virtual function has no overrides
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp
  W106 Function does not invoke Debug::ft
    89: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h
  W092 Function could be free
    65:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Tone* >(&local);
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    65:    Id Tid() const { return Id(tid_.GetId()); }
  W022 Remove using statement
    31: using namespace NodeBase;
  W032 Unused function
    65:    Id Tid() const { return Id(tid_.GetId()); }
  W038 Member hides inherited name
    69:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    82:    virtual ~Tone();
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
    77:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h
  W082 Adjacent arguments have the same type
    50:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    54:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h
  W090 Function could be const
    124:    bool Replace(size_t index, const T& item)
  W099 Line contains adjacent spaces
    253:    inline static fn_name Array_ctor()     { return "Array.ctor"; }
    254:    inline static fn_name Array_dtor()     { return "Array.dtor"; }
    255:    inline static fn_name Array_Init()     { return "Array.Init"; }
    256:    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
    258:    inline static fn_name Array_Erase()    { return "Array.Erase"; }
    259:    inline static fn_name Array_Replace()  { return "Array.Replace"; }
    260:    inline static fn_name Array_Extend()   { return "Array.Extend"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    133:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    161:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    98:       objects[count++] = const_cast< Base* >(this);
  W106 Function does not invoke Debug::ft
    128: void Base::Nullify(size_t n)
    157: Base::vptr_t Base::Vptr() const
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h
  W042 Member could be private
    109:    virtual void Claim() { }
    152:    virtual MemoryType MemType() const { return MemPerm; }
  W043 Member could be protected
    78:    virtual void Display(std::ostream& stream,
    102:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    78:    virtual void Display(std::ostream& stream,
    97:    virtual void GetSubtended(Base* objects[], size_t& count) const;
    109:    virtual void Claim() { }
    114:    virtual void ClaimBlocks();
    132:    virtual void Cleanup() { }
    140:    virtual void Startup(RestartLevel level) { }
    148:    virtual void Shutdown(RestartLevel level) { }
    152:    virtual MemoryType MemType() const { return MemPerm; }
    156:    virtual const char* ClassName() const;
  W077 Virtual function has no overrides
    156:    virtual const char* ClassName() const;
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp
  W106 Function does not invoke Debug::ft
    52: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h
  W042 Member could be private
    66:    virtual bool SetNext(const std::string& input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(const char* key, const char* def, const char* expl);
  W092 Function could be free
    76:    static fixed_string ValidTrueChars();
    81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h
  W042 Member could be private
    67:    virtual bool SetNextValue(bool value) override;
  W060 Base class constructor is public
    38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  W082 Adjacent arguments have the same type
    38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp
  W106 Function does not invoke Debug::ft
    70: bool CfgFlagParm::GetCurrValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h
  W042 Member could be private
    65:    virtual bool SetNextValue(bool value) override;
  W053 Data could be const
    77:    FlagId fid_;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp
  W106 Function does not invoke Debug::ft
    72: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h
  W032 Unused function
    57:    word GetCurrValue() const { return *curr_; }
  W042 Member could be private
    81:    virtual bool SetNext(const std::string& input) override;
  W053 Data could be const
    93:    word min_;
    97:    word max_;
  W060 Base class constructor is public
    39:    CfgIntParm(const char* key, const char* def, word* field,
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(const char* key, const char* def, word* field,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    137:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h
  W042 Member could be private
    60:    const char* Key() const;
    75:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    155:    Q1Link link_;
  W054 Data could be const pointer
    143:    const char* default_;
    147:    const char* expl_;
  W075 Virtual function is public
    64:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W082 Adjacent arguments have the same type
    90:    CfgParm(const char* key, const char* def, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
  W106 Function does not invoke Debug::ft
    274: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h
  W032 Unused function
    90:    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  W090 Function could be const
    94:    void AddMainArg(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp
  W106 Function does not invoke Debug::ft
    68: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h
  W042 Member could be private
    101:    virtual bool SetNext(const std::string& input) override;
  W060 Base class constructor is public
    39:    CfgStrParm(const char* key, const char* def,
  W082 Adjacent arguments have the same type
    39:    CfgStrParm(const char* key, const char* def,
    92:    CfgFileTimeParm(const char* key, const char* def,
  W109 Override of Base.Display not found
    87: class CfgFileTimeParm : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h
  W053 Data could be const
    117:    Q1Link link_;
  W092 Function could be free
    77:    static const std::string& ValidNameChars();
    82:    static const std::string& ValidValueChars();
    87:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp
  W047 Data is init-only
    149:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  W107 Function does not invoke Debug::ft as first statement
    106:       Debug::ft(CinThread_Enter);
    151:    Debug::ft(CinThread_GetLine);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    220:    if(addr != nullptr) return (Object*) addr;
  W006 reinterpret_cast
    75:    auto fake = reinterpret_cast< const Class* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h
  W032 Unused function
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    70:    virtual void FreeQuasiSingleton(Object* obj);
    119:    bool SetVptr(Object& obj);
    126:    bool SetTemplate(Object& obj);
    133:    bool SetQuasiSingleton(Object& obj);
  W042 Member could be private
    66:    virtual Object* GetQuasiSingleton();
    113:    virtual Object* New(size_t size);
  W065 Base class virtual destructor is not public
    107:    virtual ~Class();
  W075 Virtual function is public
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W077 Virtual function has no overrides
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W090 Function could be const
    113:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h
  W053 Data could be const
    93:    Id id_;
  W065 Base class virtual destructor is not public
    85:    virtual ~CliAppData();
  W075 Virtual function is public
    66:    virtual void EventOccurred(Event evt);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h
  W060 Base class constructor is public
    39:    explicit CliBoolParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliBuffer.h
  W088 Argument could be const
    102/1:       (CliThread& cli, const std::string& expl, std::streamsize p = -1) const;
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h
  W043 Member could be protected
    39:    CliCharParm(const char* help, const char* chars,
  W054 Data could be const pointer
    69:    const char* chars_;
  W060 Base class constructor is public
    39:    CliCharParm(const char* help, const char* chars,
  W082 Adjacent arguments have the same type
    39:    CliCharParm(const char* help, const char* chars,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h
  W075 Virtual function is public
    71:    virtual Rc GetTextParmRc
  W082 Adjacent arguments have the same type
    100:    CliCommand(const char* comm, const char* help, size_t size = 32);
  W092 Function could be free
    132:    static Rc Exhausted(CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h
  W082 Adjacent arguments have the same type
    58:    CliCommandSet(const char* comm, const char* help, size_t size = 32);
  W092 Function could be free
    63:    static void DescendTo(CliCookie& cookie, size_t index);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp
  W106 Function does not invoke Debug::ft
    136: size_t CliCookie::Index(size_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    103:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h
  W053 Data could be const
    105:    RegCell iid_;
  W054 Data could be const pointer
    109:    const char* name_;
    113:    const char* help_;
  W075 Virtual function is public
    65:    virtual void Enter();
    70:    virtual void Exit();
  W077 Virtual function has no overrides
    70:    virtual void Exit();
  W082 Adjacent arguments have the same type
    92:    CliIncrement(const char* name, const char* help, size_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h
  W053 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
  W060 Base class constructor is public
    49:    CliIntParm(const char* help, word min, word max,
  W082 Adjacent arguments have the same type
    49:    CliIntParm(const char* help, word min, word max,
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    96:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h
  W032 Unused function
    167:    bool GetCharParm(char& c, CliThread& cli) const;
  W043 Member could be protected
    157:    bool GetBoolParm(bool& b, CliThread& cli) const;
    177:    bool GetPtrParm(void*& p, CliThread& cli) const;
    203:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    225:    bool GetFileName(std::string& s, CliThread& cli) const;
    237:    bool GetIdentifier(std::string& s, CliThread& cli,
    248:    const char* Help() const { return help_; }
    252:    bool IsOptional() const { return opt_; }
  W054 Data could be const pointer
    331:    const char* help_;
    339:    const char* tag_;
  W075 Virtual function is public
    134:    virtual CliParm* AccessParm(CliCookie& cookie, size_t depth) const;
    142:    virtual void Explain(std::ostream& stream, col_t indent) const;
    152:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    162:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    172:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    182:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    210:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    220:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    230:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    243:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    237:    bool GetIdentifier(std::string& s, CliThread& cli,
    243:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W092 Function could be free
    322:    static Rc Mismatch(CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    98:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h
  W043 Member could be protected
    38:    explicit CliPtrParm(const char* help,
  W060 Base class constructor is public
    38:    explicit CliPtrParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h
  W042 Member could be private
    61:    const char* HelpText() const;
  W043 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
  W054 Data could be const pointer
    110:    const char* text_;
  W060 Base class constructor is public
    48:    CliText(const char* help, const char* text,
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    48:    CliText(const char* help, const char* text,
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h
  W060 Base class constructor is public
    49:    explicit CliTextParm(const char* help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp
  W106 Function does not invoke Debug::ft
    368: CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h
  W032 Unused function
    113:    word Result() const { return result_; }
  W050 Data is not private
    179:    std::unique_ptr< CliBuffer > ibuf;
    183:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    91:    char CharPrompt(const std::string& prompt,
  W090 Function could be const
    72:    word Report(word rc, const std::string& expl, col_t indent = 2);
    196:    const CliCommand* ParseCommand();
C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h
  W032 Unused function
    72:    ticks_t TicksPerSec();
    121:    ticks_t UsecsToTicks(usecs_t usecs);
    125:    const SysTime& TimeZero();
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    84:       auto req = static_cast< StreamRequest* >(msg);
  W047 Data is init-only
    92:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    133:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h
  W092 Function could be free
    47:    static void Spool(const char* s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp
  W106 Function does not invoke Debug::ft
    134: void Debug::Reset()
  W107 Function does not invoke Debug::ft as first statement
    63:    Debug::ft(Debug_GenerateSwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h
  W032 Unused function
    96:    static void noop();
  W082 Adjacent arguments have the same type
    72:    static void SwErr
    92:    static void Progress(const std::string& s, bool eol, bool force = false);
  W092 Function could be free
    81:    static void Assert(bool condition, debug32_t errval = 0)
    92:    static void Progress(const std::string& s, bool eol, bool force = false);
    96:    static void noop();
    140:    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h
  W032 Unused function
    56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h
  W092 Function could be free
    46:    static std::string strTimePlace();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    45:    Debug::ft(Exception_ctor1);
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h
  W032 Unused function
    60:    Exception(const Exception& that);
    61:    Exception(Exception&& that);
  W065 Base class virtual destructor is not public
    65:    virtual ~Exception() noexcept;
  W075 Virtual function is public
    45:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    217:       auto req = static_cast< FileRequest* >(msg);
  W032 Unused function
    54:    FileRequest(const FileRequest& that);
  W047 Data is init-only
    227:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    287:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h
  W082 Adjacent arguments have the same type
    57:    static void Spool(const std::string& name,
  W092 Function could be free
    44:    static ostringstreamPtr CreateStream();
    57:    static void Spool(const std::string& name,
    62:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h
  W032 Unused function
    66:    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  W082 Adjacent arguments have the same type
    76:    std::string strIndex(int n, int width = 0, bool colon = true);
    96:    std::string strCenter(const std::string& s, int breadth, int blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp
  W106 Function does not invoke Debug::ft
    40: int FunctionName::compare(fn_name_arg func, const char* str)
    47: size_t FunctionName::find(fn_name_arg func, const char* str)
    56: size_t FunctionName::rfind(fn_name_arg func, const char* str)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h
  W032 Unused function
    39:    size_t find(fn_name_arg func, const char* str);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W004 C-style cast
    386:          auto src = (ptr_t) this;
  W007 Cast down the inheritance hierarchy
    91:       auto curr = static_cast< FunctionTrace* >(rec);
    125:       auto curr = static_cast< FunctionTrace* >(rec);
    189:                   auto last = static_cast< const FunctionTrace* >(rec);
    261:       auto curr = static_cast< FunctionTrace* >(rec);
    300:          curr = static_cast< FunctionTrace* >(rec);
    368:       curr = static_cast< FunctionTrace* >(rec);
    421:          auto curr = static_cast< FunctionTrace* >(rec);
    486:          auto curr = static_cast< FunctionTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h
  W032 Unused function
    55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp
  W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::ImmediateTrace()
    57: bool InitFlags::TraceInit()
    68: bool InitFlags::TraceWork()
C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp
  W047 Data is init-only
    307:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h
  W039 Class could be namespace
    34: class Log
  W092 Function could be free
    40:    static ostringstreamPtr Create(fixed_string title);
    45:    static void Spool(ostringstreamPtr& log);
    49:    static std::string FileName();
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    89:       auto req = static_cast< StreamRequest* >(msg);
  W047 Data is init-only
    156:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp
  W004 C-style cast
    225:    auto seg = (Segment*) addr;
    282:    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
    333:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
    384:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  W092 Function could be free
    151:    static size_t Size();
  W106 Function does not invoke Debug::ft
    154: size_t SegmentHeader::Size()
    171: SysHeap* Memory::AccessHeap(MemoryType type)
    189: size_t Memory::Align(size_t size, size_t log2align)
    255: SysHeap* Memory::EnsureHeap(MemoryType type)
    309: const SysHeap* Memory::Heap(MemoryType type)
    403: size_t Memory::Words(size_t nBytes)
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h
  W032 Unused function
    56:    static void Set(void* dest, byte_t value, size_t nBytes);
    79:    static bool Verify(MemoryType type, void* addr);
  W092 Function could be free
    44:    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
    48:    static size_t Words(size_t nBytes);
    52:    static void Copy(void* dest, const void* source, size_t nBytes);
    56:    static void Set(void* dest, byte_t value, size_t nBytes);
    74:    static void* Realloc(void* addr, size_t nBytes);
    83:    static MemoryType Type(const void* addr);
    91:    static void Shutdown(RestartLevel level);
    99:    static SysHeap* EnsureHeap(MemoryType type);
    103:    static SysHeap* AccessHeap(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    66:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h
  W092 Function could be free
    57:    static const char* TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h
  W032 Unused function
    103:    ModuleId Mid() const { return mid_.GetId(); }
    111:    virtual ModuleId* Dependencies(size_t& count) const;
  W065 Base class virtual destructor is not public
    146:    virtual ~Module();
  W075 Virtual function is public
    111:    virtual ModuleId* Dependencies(size_t& count) const;
  W077 Virtual function has no overrides
    111:    virtual ModuleId* Dependencies(size_t& count) const;
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp
  W005 Functional cast
    106:          return RestartLevel(errval_);
  W106 Function does not invoke Debug::ft
    152: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h
  W092 Function could be free
    87:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp
  W106 Function does not invoke Debug::ft
    74: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h
  W060 Base class constructor is public
    41:    MsgBuffer();
    45:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    62:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp
  W107 Function does not invoke Debug::ft as first statement
    38:    Debug::ft(MutexGuard_ctor);
    51:       Debug::ft(MutexGuard_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp
  W106 Function does not invoke Debug::ft
    114: word ExplainTraceRc(CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h
  W027 Unused data
    68: extern fixed_string NotImplementedExpl;
  W082 Adjacent arguments have the same type
    120: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    484:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    692:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1089:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    2440:       auto heap = Memory::Heap(MemoryType(m));
  W042 Member could be private
    1892:    static void SendAckToOutputFile(const CliThread& cli);
  W047 Data is init-only
    1696:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W092 Function could be free
    757:    static word DisplayHelpFile(CliThread& cli, const string& name);
    1892:    static void SendAckToOutputFile(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h
  W027 Unused data
    153:    static const id_t LastNbIndex     = 3;
  W060 Base class constructor is public
    41:    StatusCommand();
    55:    SetWhatParm();
    68:    explicit SetCommand(bool bind = true);
    84:    IncludeWhatParm();
    98:    explicit IncludeCommand(bool bind = true);
    114:    ExcludeWhatParm();
    127:    explicit ExcludeCommand(bool bind = true);
    157:    explicit QueryCommand(bool bind = true);
    173:    SaveWhatParm();
    185:    explicit SaveCommand(bool bind = true);
    201:    ClearWhatParm();
    219:    explicit ClearCommand(bool bind = true);
  W110 Override of Object.Patch not found
    38: class StatusCommand : public CliCommand
    59: class SetCommand : public CliCommand
    88: class IncludeCommand : public CliCommand
    118: class ExcludeCommand : public CliCommand
    147: class QueryCommand : public CliCommand
    177: class SaveCommand : public CliCommand
    205: class ClearCommand : public CliCommand
C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h
  W047 Data is init-only
    64:    static bool Registered;
  W092 Function could be free
    60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    207:             stream << Faction(f) << CRLF;
  W106 Function does not invoke Debug::ft
    172: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h
  W042 Member could be private
    77:    static bool ThreadsEmpty();
  W092 Function could be free
    73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    77:    static bool ThreadsEmpty();
  W109 Override of Base.Display not found
    63: class NbTracer : public Permanent
  W110 Override of Object.Patch not found
    63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp
  W106 Function does not invoke Debug::ft
    45: char NodeBase::BlockingReasonChar(BlockingReason reason)
    76: char NodeBase::FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h
  W029 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
  W033 Unused typedef
    175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
    176: typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
    177: typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
  W099 Line contains adjacent spaces
    174: typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
    175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    141:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W106 Function does not invoke Debug::ft
    71: Object::ClassId Object::GetClassId() const
    82: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    109: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h
  W032 Unused function
    95:    ClassId GetClassId() const;
    107:    ObjectId GetObjectId() const;
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    121:    static void* operator new(size_t size, MemoryType type);
    122:    static void* operator new[](size_t size, MemoryType type);
    124:    static void operator delete[](void* addr);
    125:    static void operator delete(void* addr, MemoryType type);
    126:    static void operator delete[](void* addr, MemoryType type);
    135:    void MorphTo(Class& target);
  W042 Member could be private
    70:    typedef uint32_t InstanceId;  // identifies an object within a Class
    71:    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
    101:    virtual InstanceId GetInstanceId() const;
  W043 Member could be protected
    48:    typedef uint8_t sel_t;
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    69:    typedef id_t ClassId;         // identifies a Class
  W053 Data could be const
    140:    uintptr_t patchArea_;
  W075 Virtual function is public
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W077 Virtual function has no overrides
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W092 Function could be free
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    238:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
    261:          auto b = (ObjectBlock*) &seg[j];
    313:             auto b = (ObjectBlock*) &seg[j];
    350:             auto curr = (Pooled*) getptr1(item, diff);
    714:       return (ObjectBlock*) &blocks_[0][0];
    784:       return (ObjectBlock*) &blocks_[i][j];
    809:             auto b = (ObjectBlock*) &seg[j];
    841:    auto block = (const_ptr_t) ObjToBlock(obj);
    842:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    846:       auto b0 = (const_ptr_t) &blocks_[i][0];
    889:    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
    919:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    477:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W008 Cast removes const qualification
    842:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  W099 Line contains adjacent spaces
    95:    CounterPtr      allocCount_;
    96:    CounterPtr      freeCount_;
    97:    CounterPtr      failCount_;
    98:    CounterPtr      auditCount_;
  W106 Function does not invoke Debug::ft
    277: size_t ObjectPool::AllocCount() const
    443: bool ObjectPool::BidToIndices(Bid bid, size_t& i, size_t& j) const
    698: size_t ObjectPool::FailCount() const
    743: size_t ObjectPool::FreeCount() const
    750: bool ObjectPool::IndicesToBid(size_t i, size_t j, Bid& bid) const
    762: size_t ObjectPool::InUseCount() const
    769: size_t ObjectPool::LowAvailCount() const
    776: ObjectBlock* ObjectPool::Next(Bid& bid) const
    795: Pooled* ObjectPool::NextUsed(Bid& bid) const
    868: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    877: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    886: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W109 Override of Base.Display not found
    75: class ObjectPoolSizeCfg : public CfgIntParm
    88: class ObjectPoolStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    97:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W027 Unused data
    82:    static const Bid MaxBid = MaxSegments << ObjectsPerSegmentLog2;
  W042 Member could be private
    191:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    218:    virtual ~ObjectPool();
  W075 Virtual function is public
    108:    virtual Pooled* DeqBlock(size_t size);
    113:    virtual void EnqBlock(Pooled* obj, bool deleted);
    177:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    108:    virtual Pooled* DeqBlock(size_t size);
    113:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    238:    bool BidToIndices(Bid bid, size_t& i, size_t& j) const;
    243:    bool IndicesToBid(size_t i, size_t j, Bid& bid) const;
  W092 Function could be free
    257:    static ObjectBlock* ObjToBlock(const Pooled* obj);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
  W106 Function does not invoke Debug::ft
    289: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
  W042 Member could be private
    56:    static bool NullifyObjectData() { return NullifyObjectData_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h
  W032 Unused function
    57:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp
  W106 Function does not invoke Debug::ft
    48: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h
  W092 Function could be free
    41:    static PermanentHeap* Instance();
  W110 Override of Object.Patch not found
    36: class PermanentHeap : public SysHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    142:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    116:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h
  W026 Unused class
    39: class PooledClass : public Class
  W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W106 Function does not invoke Debug::ft
    124: Flags PS_Break()
    129: Flags PS_Delayed()
    134: Flags PS_Exit()
    139: Flags PS_Final()
    144: Flags PS_Interrupt()
    149: Flags PS_Native()
    154: Flags PS_NoError()
    159: Flags PS_NoLog()
    164: Flags PS_NoRecover()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h
  W053 Data could be const
    114:    signal_t value_;
    126:    uint8_t severity_;
    130:    Flags attrs_;
    134:    RegCell sid_;
  W054 Data could be const pointer
    118:    const char* name_;
    122:    const char* expl_;
  W065 Base class virtual destructor is not public
    105:    virtual ~PosixSignal();
  W082 Adjacent arguments have the same type
    99:    PosixSignal(signal_t value, const char* name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
  W106 Function does not invoke Debug::ft
    57: Flags PosixSignalRegistry::Attrs(signal_t value) const
    90: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    102: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h
  W032 Unused function
    56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ft(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h
  W032 Unused function
    57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h
  W088 Argument could be const
    79/1:    bool Enq(T& elem)
    100/1:    bool Henq(T& elem)
    122/1:    bool Insert(T* prev, T& elem)
    157/1:    bool Exq(T& elem)
    321/1:    void Corrupt(T* elem)
  W099 Line contains adjacent spaces
    387:    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
    388:    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
    389:    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
    390:    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
    391:    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
    393:    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
    394:    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
    395:    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
    396:    inline static fn_name Q1Way_Count()  { return "Q1Way.Count"; }
    397:    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
    398:    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp
  W106 Function does not invoke Debug::ft
    39: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h
  W032 Unused function
    57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h
  W088 Argument could be const
    135/1:    bool Exq(T& elem)
  W090 Function could be const
    135:    bool Exq(T& elem)
  W099 Line contains adjacent spaces
    360:    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
    361:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    362:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    363:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    364:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    365:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    366:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    367:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    368:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    371:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp
  W106 Function does not invoke Debug::ft
    37: RegCell::~RegCell()
    49: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h
  W088 Argument could be const
    266/1:    bool Erase(T& item)
  W099 Line contains adjacent spaces
    625:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    626:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    627:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    629:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    630:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    631:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    632:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    633:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    634:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    635:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h
  W092 Function could be free
    80:    static void Initiate(reinit_t reason, debug32_t errval);
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h
  W047 Data is init-only
    130:    static T* Instance_;
  W099 Line contains adjacent spaces
    126:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp
  W056 Default constructor invoked: POD members not initialized
    92:    SingletonTuple entry;
  W106 Function does not invoke Debug::ft
    125: Singletons* Singletons::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h
  W060 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W106 Function does not invoke Debug::ft
    117: uint64_t Statistic::Overall() const
    258: uint64_t HighWatermark::Overall() const
    334: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h
  W042 Member could be private
    66:    static ptrdiff_t CellDiff();
  W043 Member could be protected
    62:    virtual void DisplayStat(std::ostream& stream) const;
  W050 Data is not private
    89:    std::atomic_uint32_t curr_;
    93:    std::atomic_uint32_t prev_;
    97:    std::atomic_uint64_t total_;
    101:    uint32_t divisor_;
  W053 Data could be const
    118:    RegCell sid_;
    122:    DynString expl_;
  W060 Base class constructor is public
    134:    explicit Counter(const std::string& expl, uint32_t divisor = 1);
  W075 Virtual function is public
    58:    virtual uint64_t Overall() const;
    62:    virtual void DisplayStat(std::ostream& stream) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    81:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  W099 Line contains adjacent spaces
    39: fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h
  W042 Member could be private
    57:    id_t Gid() const { return gid_.GetId(); }
    61:    static ptrdiff_t CellDiff();
  W053 Data could be const
    100:    RegCell gid_;
    104:    DynString expl_;
  W075 Virtual function is public
    69:    virtual void DisplayStats(std::ostream& stream, id_t id) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
  W007 Cast down the inheritance hierarchy
    62:       (static_cast< CfgFileTimeParm* >(reg->FindParm("StatsFileName")));
  W106 Function does not invoke Debug::ft
    147: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h
  W042 Member could be private
    77:    StatisticsGroup* GetGroup(id_t gid) const;
    81:    void DisplayStats(std::ostream& stream) const;
    85:    static std::string StatsFileName() { return StatsFileName_; }
  W090 Function could be const
    115:    void StartInterval(bool first);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h
  W053 Data could be const
    53:    static secs_t LongIntervalSecs;
    58:    static secs_t ShortIntervalSecs;
    65:    static size_t WakeupsBetweenReports;
    70:    static ticks_t PrevToCurrTicks;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.cpp
  W018 Remove #include directive
    25: #include <sstream>
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h
  W043 Member could be protected
    57:    StreamRequest(const StreamRequest& that);
  W060 Base class constructor is public
    52:    StreamRequest();
    57:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h
  W053 Data could be const
    96:    DynString name_;
    108:    Q1Link link_;
  W092 Function could be free
    52:    static const std::string& ValidNameChars();
    57:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    53:    bool BindSymbol
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp
  W106 Function does not invoke Debug::ft
    32: std::istream& SysConsole::In()
    39: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h
  W032 Unused function
    101:    static void* operator new[](size_t size);
    106:    static void operator delete[](void* addr);
  W090 Function could be const
    55:    bool Validate(const void* addr);
  W092 Function could be free
    87:    static void DisplayHeaps(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    162:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp
  W018 Remove #include directive
    23: #include "SysMemory.h"
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp
  W106 Function does not invoke Debug::ft
    48: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp
  W107 Function does not invoke Debug::ft as first statement
    106:    Debug::ft(SysMutex_Acquire);
C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h
  W026 Unused class
    54:    class SigAlrm : public PosixSignal
    68:    class SigBus : public PosixSignal
    96:    class SigQuit : public PosixSignal
    110:    class SigSys : public PosixSignal
    124:    class SigVtAlrm : public PosixSignal
  W036 No referent for friend declaration
    56:       friend class Singleton< SigAlrm >;
    70:       friend class Singleton< SigBus >;
    98:       friend class Singleton< SigQuit >;
    112:       friend class Singleton< SigSys >;
    126:       friend class Singleton< SigVtAlrm >;
  W092 Function could be free
    37:    static void CreateNativeSignals();
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h
  W029 Unused enumerator
    58:       LowPriority,       // preemptable threads
  W082 Adjacent arguments have the same type
    105:    static SysThread_t Create(const ThreadEntry entry,
  W088 Argument could be const
    106/4:       const Thread* client, size_t stackSize, SysThreadId& nid);
  W090 Function could be const
    141:    DelayRc Delay(msecs_t msecs);
    147:    bool Interrupt();
  W092 Function could be free
    52:    static SysThreadId RunningThreadId();
    112:    static SysThread_t Wrap();
    116:    static void Delete(SysThread_t& thread);
    121:    static SysSentry_t CreateSentry();
    125:    static void DeleteSentry(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
    144:       (DWORD*) &nid);                  // updates thread's identifier
    345:    _set_se_translator((_se_translator_function) SE_Handler);
  W008 Cast removes const qualification
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
  W025 Unused argument
    52/2: void SE_Handler(uint32_t errval, void* ex)
  W106 Function does not invoke Debug::ft
    269: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    296: SysThreadId SysThread::RunningThreadId()
  W107 Function does not invoke Debug::ft as first statement
    57:    Debug::ft(NodeBase_SE_Handler);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h
  W025 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    163:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  W015 #include not sorted in standard order
    29: #include <dbghelp.h>
  W082 Adjacent arguments have the same type
    72:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W106 Function does not invoke Debug::ft
    121: DWORD64 StackInfo::GetFrame(fn_depth depth)
    137: fn_depth StackInfo::GetFrames()
    145: void StackInfo::Shutdown()
    154: DWORD StackInfo::Startup()
    265: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h
  W032 Unused function
    71:    bool TickTimingAvailable() const { return available_; }
  W109 Override of Base.Display not found
    41: class SysTickTimer : public Immutable
  W110 Override of Object.Patch not found
    41: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W056 Default constructor invoked: POD members not initialized
    44:    LARGE_INTEGER frequency;
    75:       LARGE_INTEGER now;
    81:       _timeb now;
  W106 Function does not invoke Debug::ft
    71: ticks_t SysTickTimer::TicksNow() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    362:          Truncate(TimeField(int(field) + 1));
    543:          return OutOfRange(TimeField(f));
  W106 Function does not invoke Debug::ft
    181: int16_t SysTime::DayOfWeek() const
    191: int16_t SysTime::DayOfYear() const
    207: const int16_t* SysTime::DaysPerMonth(int16_t year)
    215: size_t SysTime::DaysSinceT0() const
    245: bool SysTime::IsLeapYear(int16_t year)
    265: int64_t SysTime::MsecsSinceT0() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h
  W032 Unused function
    76:    int16_t Get(TimeField field) const { return time_[field]; }
  W042 Member could be private
    80:    int16_t DayOfWeek() const;
    131:    const char* strMonth() const;
  W082 Adjacent arguments have the same type
    71:    SysTime(int16_t year, int16_t month, int16_t day,
  W092 Function could be free
    88:    static bool IsLeapYear(int16_t year);
    153:    static const int16_t* DaysPerMonth(int16_t year);
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp
  W056 Default constructor invoked: POD members not initialized
    42:    _timeb timebuff;
    43:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    33:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W106 Function does not invoke Debug::ft
    30: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h
  W027 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  W029 Unused enumerator
    147:    DebugLog,    // only useful to software designers
  W044 Typedef of pointer type
    86: typedef char* ptr_t;
    87: typedef const char* const_ptr_t;
    103: typedef const char* const fixed_string;
    108: typedef const char* const fn_name;      // for defining a function name
    109: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h
  W032 Unused function
    55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp
  W106 Function does not invoke Debug::ft
    29: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    36: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    43: void ThisThread::MakePreemptable()
    50: void ThisThread::MakeUnpreemptable()
    57: void ThisThread::MemProtect()
    64: void ThisThread::MemUnprotect()
    71: DelayRc ThisThread::Pause(msecs_t msecs)
    78: void ThisThread::PauseOver(word limit)
    85: word ThisThread::RtcPercentUsed()
    92: ThreadId ThisThread::RunningThreadId()
    99: TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
    106: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1170:    auto fake = reinterpret_cast< const Thread* >(&local);
  W047 Data is init-only
    482:    MutexGuard guard(&lock_);
    676:    MutexGuard guard(&lock_);
    711:    MutexGuard guard(&lock_);
  W092 Function could be free
    88:    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  W099 Line contains adjacent spaces
    264:    CounterPtr       traps_;
    265:    CounterPtr       yields_;
    266:    CounterPtr       exceeds_;
    270:    AccumulatorPtr   totUsecs_;
  W106 Function does not invoke Debug::ft
    438: ContextSwitch* ContextSwitches::AddSwitch()
    1151: TraceStatus Thread::CalcStatus(bool dynamic) const
    1532: main_t Thread::EnterThread(void* arg)
    1736: void Thread::FunctionInvoked(fn_name_arg func)
    1833: bool Thread::HasExited() const
    1896: bool Thread::IsLocked() const
    1903: Thread* Thread::LockedThread()
    1970: TraceRc Thread::LogContextSwitches(bool on)
    2095: SysThreadId Thread::NativeThreadId() const
    2123: DelayRc Thread::Pause(msecs_t msecs)
    2163: double Thread::PercentIdle()
    2522: bool Thread::RunningLocked()
    2673: void Thread::StackCheck()
    2945: TraceRc Thread::StartTracing(bool immediate, bool autostop)
    2981: void Thread::StopTracing()
    3044: void Thread::Trace
    3061: bool Thread::TraceRunningThread(Thread*& thr)
    3096: void Thread::TrapCheck()
  W107 Function does not invoke Debug::ft as first statement
    1656:    Debug::ft(Thread_ExitIfSafe);
    2467:    Debug::ft(Thread_ResumeLocked);
    2645:    Debug::ft(Thread_SignalHandler);
    2717:          Debug::ft(Thread_Start);
    3230:       Debug::ft(Thread_Unlock);
  W109 Override of Base.Display not found
    258: class ThreadStats : public Dynamic
    351: class ContextSwitches : public Permanent
    606: class Orphans : public Permanent
  W110 Override of Object.Patch not found
    351: class ContextSwitches : public Permanent
    606: class Orphans : public Permanent
    740: class ThreadPriv : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h
  W005 Functional cast
    158:    Id Tid() const { return Id(tid_.GetId()); }
  W025 Unused argument
    354/2:       (BlockingReason why, fn_name_arg func) { return true; }
    362/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W032 Unused function
    122:    static std::atomic_uint32_t* Vector();
    170:    bool ChangeFaction(Faction faction);
  W042 Member could be private
    126:    static bool TestFlag(FlagId fid);
    130:    static void ResetFlag(FlagId fid);
    162:    SysThreadId NativeThreadId() const;
    239:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    281:    virtual ~Thread();
  W075 Virtual function is public
    187:    virtual TraceStatus CalcStatus(bool dynamic) const;
    211:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    211:    virtual void DisplayStats(std::ostream& stream) const;
    293:    virtual bool EnqMsg(MsgBuffer& msg);
    299:    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  W082 Adjacent arguments have the same type
    561:    void DisplaySummary
  W090 Function could be const
    118:    bool Interrupt(const Flags& mask = Flags());
    509:    void SetTrap(bool on);
    517:    void StackCheck();
    529:    void SetSignal(signal_t sig);
  W092 Function could be free
    106:    static void PauseOver(word limit);
    220:    static double PercentIdle();
    224:    static TraceRc LogContextSwitches(bool on);
    228:    static void DisplayContextSwitches(std::ostream& stream);
    439:    static SysThread::Priority FactionToPriority(Faction& faction);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp
  W106 Function does not invoke Debug::ft
    287: bool ThreadAdmin::BreakEnabled()
    385: void ThreadAdmin::Incr(Register r)
    493: word ThreadAdmin::TrapCount()
  W109 Override of Base.Display not found
    51: class ThreadsStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h
  W092 Function could be free
    90:    static int WarpFactor();
  W099 Line contains adjacent spaces
    176:    CfgIntParmPtr  initTimeoutMsecs_;
    177:    CfgIntParmPtr  schedTimeoutMsecs_;
    179:    CfgIntParmPtr  rtcTimeoutMsecs_;
    181:    CfgIntParmPtr  rtcLimit_;
    182:    CfgIntParmPtr  rtcInterval_;
    184:    CfgIntParmPtr  trapLimit_;
    185:    CfgIntParmPtr  trapInterval_;
    187:    CfgIntParmPtr  stackUsageLimit_;
    188:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp
  W106 Function does not invoke Debug::ft
    209: ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
    218: Thread* ThreadRegistry::GetThread(ThreadId tid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h
  W090 Function could be const
    112:    void AssociateIds(const Thread& thread);
C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h
  W043 Member could be protected
    48:    ticks_t GetTicks() const { return ticks_; }
    52:    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
    56:    SysThreadId Nid() const { return nid_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h
  W053 Data could be const
    105:    char abbr_;
    109:    bool safe_;
  W065 Base class virtual destructor is not public
    92:    virtual ~Tool();
  W075 Virtual function is public
    56:    virtual const char* Name() const = 0;
    60:    virtual const char* Expl() const = 0;
    66:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp
  W106 Function does not invoke Debug::ft
    117: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    125:    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
    235:    auto addr = (TraceRecord*) &buff_[end_];
    428:       next = (uword*) record + incr;
    446:             record = (TraceRecord*) buff_;  // case (b)
    450:          record = (TraceRecord*) next;
    459:       next = (uword*) record + incr;
    485:       auto record = (TraceRecord*) &buff_[start_];
    592:    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  W106 Function does not invoke Debug::ft
    111: TraceBuffer::TraceBuffer() :
    139: TraceBuffer::~TraceBuffer()
    153: void* TraceBuffer::AddRecord(size_t nBytes)
    351: bool TraceBuffer::Empty() const
    382: bool TraceBuffer::IsLocked()
    391: void TraceBuffer::Lock()
    411: void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
    472: void TraceBuffer::PurgeRecords(size_t end)
    540: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    743: void TraceBuffer::Unlock()
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h
  W032 Unused function
    169:    const SysTime& StartTimeFull() const { return startTime_; }
  W042 Member could be private
    178:    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  W109 Override of Base.Display not found
    63: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp
  W005 Functional cast
    38:    size_(int16_t(size)),
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h
  W032 Unused function
    96:    static void operator delete(void* addr, void* where) { }
  W042 Member could be private
    87:    static void operator delete(void* addr) { }
    91:    static void* operator new(size_t size, void* where);
  W043 Member could be protected
    70:    void Nullify() { owner_ = NIL_ID; }
  W050 Data is not private
    133:    Id rid_ : 8;
  W075 Virtual function is public
    77:    virtual bool Display(std::ostream& stream);
  W090 Function could be const
    113:    virtual void ClaimBlocks() { }
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    58:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  W007 Cast down the inheritance hierarchy
    198:             auto ft = static_cast<FunctionTrace*>(rec);
  W106 Function does not invoke Debug::ft
    97: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h
  W053 Data could be const
    105:    size_t size_;
  W082 Adjacent arguments have the same type
    83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W090 Function could be const
    77:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W092 Function could be free
    83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W109 Override of Base.Display not found
    49: class FunctionProfiler : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    71:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W106 Function does not invoke Debug::ft
    60: void FunctionStats::IncrCalls(usecs_t net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h
  W053 Data could be const
    78:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3033:    pool->time_[id1].Truncate(TimeField(field - 1));
    3064:    pool->time_[id1].Round(TimeField(field - 1), interval);
  W006 reinterpret_cast
    1179:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    1699:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2260:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
    3494:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W042 Member could be private
    3278:    typedef id_t Test;
  W047 Data is init-only
    258:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W053 Data could be const
    1043:    Q1Link link_;
    1555:    Q2Link link_;
  W092 Function could be free
    3300:    static void UseBadPointer();
    3301:    static void LoopForever();
  W106 Function does not invoke Debug::ft
    1158: Q1WayItem::~Q1WayItem()
    1192: Q1WayPool::Q1WayPool()
    1221: void Q1WayPool::Reallocate()
    1678: Q2WayItem::~Q2WayItem()
    1712: Q2WayPool::Q2WayPool()
    1741: void Q2WayPool::Reallocate()
    2242: RegistryItem::~RegistryItem()
    2273: RegistryPool::RegistryPool()
  W107 Function does not invoke Debug::ft as first statement
    3374:       Debug::ft(RecoveryTestThread_Enter);
    3456:       Debug::ft(RecoveryTestThread_LoopForever);
  W109 Override of Base.Display not found
    905: class LbcPool : public Temporary
    2664: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h
  W027 Unused data
    81:    static const id_t LastNtIndex    = FuncTraceScope;
  W042 Member could be private
    163:    virtual void ConcludeTest(CliThread& cli) const;
  W060 Base class constructor is public
    45:    CorruptWhatParm();
    57:    explicit CorruptCommand(bool bind = true);
    99:    NtSaveWhatParm();
    111:    explicit NtSaveCommand(bool bind = true);
    125:    SizesCommand();
    140:    TestcaseAction();
    159:    explicit TestcaseCommand(bool bind = true);
  W077 Virtual function has no overrides
    163:    virtual void ConcludeTest(CliThread& cli) const;
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    66:    return static_cast< NtTestData* >(data);
  W022 Remove using statement
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h
  W092 Function could be free
    45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h
  W043 Member could be protected
    64:    IpPort* Port() const { return port_; }
  W075 Virtual function is public
    93:    virtual IpBuffer* AllocBuff
    109:    virtual void ReceiveBuff
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    77:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  W009 Pointer arithmetic
    205:       source += rcvd;
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h
  W042 Member could be private
    97:    virtual bool ExitOnRestart(RestartLevel level) const override;
  W050 Data is not private
    101:    const ipport_t port_;
    106:    IpPort* ipPort_;
    110:    size_t rxSize_;
    114:    size_t txSize_;
    118:    SysIpL2Addr host_;
    122:    size_t recvs_;
    126:    SysIpL3Addr txAddr_;
    130:    SysIpL3Addr rxAddr_;
    134:    ticks_t ticks0_;
    138:    byte_t* buffer_;
  W075 Virtual function is public
    61:    virtual bool InsertSocket(SysSocket* socket);
  W077 Virtual function has no overrides
    93:    virtual bool ConditionalPause(word percent);
  W082 Adjacent arguments have the same type
    77:    IoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    71:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    90:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    131:       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  W009 Pointer arithmetic
    261:    bytes += hdrSize_;
  W106 Function does not invoke Debug::ft
    205: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h
  W042 Member could be private
    117:    virtual MsgSize PayloadSize() const;
  W060 Base class constructor is public
    51:    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
    55:    IpBuffer(const IpBuffer& that);
  W075 Virtual function is public
    117:    virtual MsgSize PayloadSize() const;
    136:    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  W077 Virtual function has no overrides
    136:    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  W082 Adjacent arguments have the same type
    51:    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  W092 Function could be free
    166:    static size_t BuffSize(size_t nBytes);
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    276:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W099 Line contains adjacent spaces
    55:    CounterPtr       recvs_;
    56:    AccumulatorPtr   bytesRcvd_;
    59:    CounterPtr       discards_;
    60:    CounterPtr       rejects_;
    61:    CounterPtr       sends_;
    62:    AccumulatorPtr   bytesSent_;
    64:    CounterPtr       overflows_;
  W106 Function does not invoke Debug::ft
    205: size_t IpPort::Discards() const
  W109 Override of Base.Display not found
    49: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h
  W043 Member could be protected
    69:    IoThread* GetThread() const { return thread_; }
  W053 Data could be const
    181:    Q1Link link_;
    185:    ipport_t port_;
  W054 Data could be const pointer
    189:    IpService* service_;
  W075 Virtual function is public
    90:    virtual SysSocket* CreateAppSocket(size_t rxSize, size_t txSize);
    125:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    125:    virtual void DisplayStats(std::ostream& stream) const;
  W090 Function could be const
    162:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W082 Adjacent arguments have the same type
    48:    IpPortCfgParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp
  W106 Function does not invoke Debug::ft
    283: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W109 Override of Base.Display not found
    47: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const IpService* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h
  W032 Unused function
    79:    virtual CliText* CreateText() const = 0;
  W042 Member could be private
    97:    IpPort* Provision(ipport_t pid);
  W053 Data could be const
    149:    RegCell sid_;
  W065 Base class virtual destructor is not public
    131:    virtual ~IpService();
  W075 Virtual function is public
    53:    virtual const char* Name() const = 0;
    57:    virtual IpProtocol Protocol() const = 0;
    62:    virtual ipport_t Port() const = 0;
    66:    virtual Faction GetFaction() const = 0;
    70:    virtual size_t RxSize() const = 0;
    74:    virtual size_t TxSize() const = 0;
    79:    virtual CliText* CreateText() const = 0;
    85:    virtual SysSocket* CreateAppSocket() const { return nullptr; }
    93:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W077 Virtual function has no overrides
    85:    virtual SysSocket* CreateAppSocket() const { return nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    78: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h
  W032 Unused function
    50:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h
  W060 Base class constructor is public
    41:    NwClearWhatParm();
    56:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    95:    NwIncludeWhatParm();
    108:    explicit NwIncludeCommand(bool bind = true);
    123:    explicit NwQueryCommand(bool bind = true);
    136:    NwStatusCommand() { }
  W110 Override of Object.Patch not found
    45: class NwClearCommand : public ClearCommand
    73: class NwExcludeCommand : public ExcludeCommand
    99: class NwIncludeCommand : public IncludeCommand
    118: class NwQueryCommand : public QueryCommand
    133: class NwStatusCommand : public StatusCommand
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h
  W047 Data is init-only
    66:    static bool Registered;
  W092 Function could be free
    62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h
  W042 Member could be private
    56:    bool PeersEmpty() const;
    60:    bool PortsEmpty() const;
  W109 Override of Base.Display not found
    42: class NwTracer : public Permanent
  W110 Override of Object.Patch not found
    42: class NwTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h
  W060 Base class constructor is public
    42:    SysIpL2Addr();
    46:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    51:    explicit SysIpL2Addr(const std::string& text);
    55:    SysIpL2Addr(const SysIpL2Addr& that);
  W075 Virtual function is public
    79:    virtual std::string to_str() const;
  W092 Function could be free
    67:    static SysIpL2Addr LoopbackAddr();
    83:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W056 Default constructor invoked: POD members not initialized
    52:    in_addr result;
  W106 Function does not invoke Debug::ft
    110: SysIpL2Addr SysIpL2Addr::LoopbackAddr()
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W032 Unused function
    112:    bool operator!=(const SysIpL3Addr& that) const;
  W042 Member could be private
    108:    bool operator==(const SysIpL3Addr& that) const;
  W060 Base class constructor is public
    42:    SysIpL3Addr();
    47:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    53:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    61:    SysIpL3Addr
    66:    SysIpL3Addr(const SysIpL3Addr& that);
  W082 Adjacent arguments have the same type
    61:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    58:          auto netaddr = (sockaddr_in*) info->ai_addr;
    114:       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  W056 Default constructor invoked: POD members not initialized
    48:    addrinfo hints;
    105:    sockaddr_in addr;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp
  W106 Function does not invoke Debug::ft
    149: bool SysSocket::SetTracing(bool tracing)
    157: bool SysSocket::Trace(TraceStatus status)
    168: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h
  W042 Member could be private
    94:    bool IsValid() const;
    192:    void Close();
  W043 Member could be protected
    99:    bool IsOpen() const;
  W065 Base class virtual destructor is not public
    178:    virtual ~SysSocket();
  W075 Virtual function is public
    78:    virtual IpProtocol Protocol() const { return IpAny; }
    82:    virtual void Acquire() { }
    86:    virtual void Release() { }
    116:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W082 Adjacent arguments have the same type
    167:    SysSocket(ipport_t port, IpProtocol proto,
  W092 Function could be free
    130:    static bool StartLayer();
    134:    static void StopLayer();
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    87:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    206:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    213:       (char*) &max, &maxsize) == SOCKET_ERROR)
    223:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    230:       (char*) &max, &maxsize) == SOCKET_ERROR)
  W015 #include not sorted in standard order
    26: #include <windows.h>
  W056 Default constructor invoked: POD members not initialized
    52:    sockaddr_in addr;
    261:    WSAData wsaData;
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h
  W022 Remove using statement
    34: using namespace NodeBase;
  W032 Unused function
    131:    bool LocAddr(SysIpL3Addr& locAddr);
  W042 Member could be private
    86:    word Connect(const SysIpL3Addr& remAddr);
    126:    word Send(const byte_t* data, size_t len);
  W082 Adjacent arguments have the same type
    71:    SysTcpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
    103:    static word Poll(SysTcpSocket* sockets[], size_t count, msecs_t msecs);
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    43:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    71:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    116:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    224:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  W006 reinterpret_cast
    206:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), max, 0);
    251:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), len, 0);
  W056 Default constructor invoked: POD members not initialized
    40:    sockaddr_in peer;
    65:    sockaddr_in peer;
    113:    sockaddr_in host;
    221:    sockaddr_in peer;
  W057 Default constructor invoked
    147:    auto list = std::unique_ptr< pollfd[] >(new pollfd[count]);
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h
  W022 Remove using statement
    30: using namespace NodeBase;
  W042 Member could be private
    70:    word SendTo(const byte_t* data, size_t len, const SysIpL3Addr& remAddr);
  W082 Adjacent arguments have the same type
    53:    SysUdpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  W109 Override of Base.Display not found
    38: class SysUdpSocket : public SysSocket
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    47:          (char*) &max, &maxsize) == SOCKET_ERROR)
    76:       max, 0, (sockaddr*) &peer, &peersize);
    114:       len, 0, (sockaddr*) &peer, peersize);
  W006 reinterpret_cast
    75:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    113:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W056 Default constructor invoked: POD members not initialized
    66:    sockaddr_in peer;
    98:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    156:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    175:    auto svc = static_cast< TcpIpService* >(ipPort_->GetService());
    266:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    412:    auto sock = static_cast< SysTcpSocket* >(socket);
  W106 Function does not invoke Debug::ft
    428: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h
  W022 Remove using statement
    32: using namespace NodeBase;
  W042 Member could be private
    73:    virtual void Unblock() override;
  W082 Adjacent arguments have the same type
    51:    TcpIoThread(Faction faction, ipport_t port,
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    107:    auto svc = static_cast< TcpIpService* >(GetService());
  W022 Remove using statement
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W042 Member could be private
    72:    virtual IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    41:    virtual size_t MaxConns() const = 0;
    46:    virtual size_t MaxBacklog() const = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    106:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    240:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h
  W022 Remove using statement
    31: using namespace NodeBase;
  W042 Member could be private
    57:    virtual void Unblock() override;
  W082 Adjacent arguments have the same type
    45:    UdpIoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  W090 Function could be const
    77:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.cpp
  W022 Remove using statement
    27: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h
  W042 Member could be private
    54:    virtual IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp
  W106 Function does not invoke Debug::ft
    97: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp
  W106 Function does not invoke Debug::ft
    82: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
  W106 Function does not invoke Debug::ft
    79: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h
  W022 Remove using statement
    30: using namespace NodeBase;
    31: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
  W106 Function does not invoke Debug::ft
    97: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h
  W022 Remove using statement
    31: using namespace NodeBase;
    32: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
  W106 Function does not invoke Debug::ft
    79: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h
  W022 Remove using statement
    30: using namespace NodeBase;
    31: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp
  W022 Remove using statement
    35: using namespace SessionBase;
  W106 Function does not invoke Debug::ft
    515: void PotsCircuit::Trace(const SignalEntry& entry)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h
  W021 Add using statement
    1: namespace MediaBase
  W022 Remove using statement
    40: using namespace NodeBase;
    41: using namespace SessionBase;
  W032 Unused function
    92:    bool IsRinging() const { return ringing_; }
    96:    bool CanFlash() const { return flash_; }
    101:    Cause::Ind GetCause() const { return cause_; }
  W042 Member could be private
    133:    void ResetCircuit();
  W054 Data could be const pointer
    221:    PotsProfile* profile_;
  W056 Default constructor invoked: POD members not initialized
    233:    SignalEntry trace_[TraceSize];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
  W106 Function does not invoke Debug::ft
    76: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
  W106 Function does not invoke Debug::ft
    69: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    63:    Id Fid() const { return Id(fid_.GetId()); }
  W025 Unused argument
    87/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W042 Member could be private
    63:    Id Fid() const { return Id(fid_.GetId()); }
    71:    const char* FullName() const { return name_; }
    75:    bool CanBeDeactivated() const { return deactivation_; }
    91:    static ptrdiff_t CellDiff();
  W054 Data could be const pointer
    133:    const char* abbr_;
    137:    const char* name_;
  W065 Base class virtual destructor is not public
    108:    virtual ~PotsFeature();
  W075 Virtual function is public
    86:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    103:    PotsFeature(PotsFeature::Id fid, bool deactivation,
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    97:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h
  W025 Unused argument
    55/1:    virtual bool Deactivate(PotsProfile& profile);
    89/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W042 Member could be private
    59:    PotsFeature::Id Fid() const { return fid_; }
    63:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    93:    PotsFeature::Id fid_;
    97:    Q1Link link_;
  W065 Base class virtual destructor is not public
    76:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    50:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    55:    virtual bool Deactivate(PotsProfile& profile);
  W077 Virtual function has no overrides
    89:    virtual bool Unsubscribe(PotsProfile& profile);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
  W106 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
  W090 Function could be const
    57:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
  W106 Function does not invoke Debug::ft
    84: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h
  W022 Remove using statement
    30: using namespace NodeBase;
  W053 Data could be const
    59:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    441:       auto mep = static_cast< MediaEndpt* >(obj);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W060 Base class constructor is public
    41:    PbSizesCommand() { }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp
  W059 Default assignment operator invoked
    147:       addr = GlobalAddress(peer, PotsCallIpPort, PotsCallFactoryId);
    202:       addr = GlobalAddress(peer, PotsShelfIpPort, PotsShelfFactoryId);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    87:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W058 Default copy constructor invoked
    54:    objAddr_(NilLocalAddress)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h
  W022 Remove using statement
    41: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
  W106 Function does not invoke Debug::ft
    113: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    578:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    747:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    868:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    956:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    593:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    654:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    761:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    787:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    881:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    969:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W099 Line contains adjacent spaces
    590:    id_t             index;
    591:    word             sid, ind;
    593:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    653:    TestRc            rc;
    654:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    656:    id_t              index;
    657:    word              sid, ind;
    759:    word           port;
    761:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    786:    TestRc          rc;
    787:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    788:    word            port;
    880:    TestRc        rc;
    881:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    883:    bool          ring = false;
    884:    auto          exists = false;
    968:    TestRc        rc;
    969:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    971:    string        scan;
    972:    auto          digits = false;
    973:    auto          flash = false;
    974:    auto          exists = false;
  W106 Function does not invoke Debug::ft
    356: CliText* PotsAlertingSignal::CreateText() const
    370: CliText* PotsDigitsSignal::CreateText() const
    384: CliText* PotsFacilitySignal::CreateText() const
    398: CliText* PotsFlashSignal::CreateText() const
    412: CliText* PotsLockoutSignal::CreateText() const
    426: CliText* PotsOffhookSignal::CreateText() const
    440: CliText* PotsOnhookSignal::CreateText() const
    454: CliText* PotsProgressSignal::CreateText() const
    468: CliText* PotsReleaseSignal::CreateText() const
    482: CliText* PotsSuperviseSignal::CreateText() const
    525: CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
    567: CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
    737: CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
    858: CliParm* PotsRingParameter::CreateCliParm(Usage use) const
    946: CliParm* PotsScanParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h
  W022 Remove using statement
    45: using namespace NodeBase;
    46: using namespace SessionBase;
  W027 Unused data
    105:    static const Id LastId    = NextId + 9;  // range constant
    133:    static const Id LastId   = NextId + 7;  // range constant
    225:    static const Ind MaxInd         = UINT8_MAX;
  W032 Unused function
    292:    MediaInfo* AddMedia(const MediaInfo& media);
    446:    virtual void InjectFinalMsg() override;
  W043 Member could be protected
    268:    explicit PotsMessage(SbIpBufferPtr& buff);
  W060 Base class constructor is public
    268:    explicit PotsMessage(SbIpBufferPtr& buff);
    272:    PotsMessage(ProtocolSM* psm, MsgSize size);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp
  W106 Function does not invoke Debug::ft
    74: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
  W106 Function does not invoke Debug::ft
    85: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
  W106 Function does not invoke Debug::ft
    96: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h
  W022 Remove using statement
    31: using namespace NodeBase;
    32: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp
  W015 #include not sorted in standard order
    96: #include "AnModule.h"
  W032 Unused function
    134: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
  W106 Function does not invoke Debug::ft
    91: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
  W106 Function does not invoke Debug::ft
    87: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    573:    auto fake = reinterpret_cast< const Context* >(&local);
    886:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    763:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    882:             (m)->FindParm(Parameter::Timeout);
  W106 Function does not invoke Debug::ft
    329: void Context::Dump() const
    953: bool Context::TraceOn()
    963: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    695:    Debug::ft(Context_ProcessWork);
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h
  W025 Unused argument
    122/1:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  W032 Unused function
    117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
    272:    size_t MsgCount(bool priority, bool standard) const;
  W038 Member hides inherited name
    167:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    312:    Q2Link link_;
    336:    Faction faction_;
  W056 Default constructor invoked: POD members not initialized
    360:    MessageEntry trace_[TraceSize];
  W065 Base class virtual destructor is not public
    189:    virtual ~Context();
  W075 Virtual function is public
    101:    virtual ContextType Type() const = 0;
    105:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    109:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    113:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    133:    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  W088 Argument could be const
    291/1:    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  W090 Function could be const
    159:    bool StopTimer(const Base& owner, TimerId tid);
  W092 Function could be free
    122:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
    127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp
  W106 Function does not invoke Debug::ft
    138: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h
  W042 Member could be private
    114:    virtual bool SaveContext();
    125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    131:    virtual void FreeContext(bool freeMsg);
    159:    virtual bool Save();
    163:    virtual Event* Restore(EventHandler::Rc& rc);
    167:    virtual void Free();
  W053 Data could be const
    214:    Id eid_;
  W075 Virtual function is public
    114:    virtual bool SaveContext();
    125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    131:    virtual void FreeContext(bool freeMsg);
  W092 Function could be free
    56:    static bool IsValidId(Id eid)
    72:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h
  W065 Base class virtual destructor is not public
    126:    virtual ~EventHandler();
  W075 Virtual function is public
    117:    virtual Rc ProcessEvent
  W092 Function could be free
    86:    static bool AppCanRegister(Id ehid)
    94:    static bool AppCanUse(Id ehid)
  W110 Override of Object.Patch not found
    50: class EventHandler : public Protected
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    202:    auto fake = reinterpret_cast< const Factory* >(&local);
  W099 Line contains adjacent spaces
    49:    CounterPtr       icMsgsIntra_;
    50:    CounterPtr       icMsgsInter_;
    52:    CounterPtr       ogMsgsIntra_;
    53:    CounterPtr       ogMsgsInter_;
    55:    CounterPtr       contexts_;
    56:    CounterPtr       msgsDeleted_;
    57:    CounterPtr       ctxsDeleted_;
  W106 Function does not invoke Debug::ft
    219: size_t Factory::DiscardedContextCount() const
    226: size_t Factory::DiscardedMessageCount() const
  W109 Override of Base.Display not found
    43: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    87:    Id Fid() const { return Id(fid_.GetId()); }
  W021 Add using statement
    1: namespace SessionBase
  W025 Unused argument
    127/1:    virtual Message* AllocOgMsg(SignalId sid) const;
  W032 Unused function
    219:    void SetFaction(Faction faction) { faction_ = faction; }
  W053 Data could be const
    267:    ProtocolId prid_;
  W054 Data could be const pointer
    271:    const char* name_;
  W065 Base class virtual destructor is not public
    203:    virtual ~Factory();
  W075 Virtual function is public
    121:    virtual CliText* CreateText() const;
    127:    virtual Message* AllocOgMsg(SignalId sid) const;
    134:    virtual bool InjectMsg(Message& msg) const;
    140:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
    172:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    172:    virtual void DisplayStats(std::ostream& stream) const;
  W082 Adjacent arguments have the same type
    157:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W088 Argument could be const
    150/1:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  W090 Function could be const
    150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp
  W106 Function does not invoke Debug::ft
    151: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp
  W058 Default copy constructor invoked
    41: GlobalAddress::GlobalAddress() : sbAddr_(NilLocalAddress)
    52:    sbAddr_(NilLocalAddress)
    66:    sbAddr_(NilLocalAddress)
    80:    sbAddr_(sbAddr)
  W059 Default assignment operator invoked
    35: const GlobalAddress GlobalAddress::NilAddr = GlobalAddress();
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h
  W022 Remove using statement
    31: using namespace NodeBase;
  W032 Unused function
    54:    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
    82:    bool operator!=(const GlobalAddress& that) const;
  W082 Adjacent arguments have the same type
    58:    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
  W106 Function does not invoke Debug::ft
    89: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    210:    auto fake = reinterpret_cast< const Initiator* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h
  W053 Data could be const
    120:    ServiceId sid_;
    124:    ServiceId aid_;
    128:    TriggerId tid_;
    136:    Q1Link link_;
  W065 Base class virtual destructor is not public
    93:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    88:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W088 Argument could be const
    107/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    225:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    181:    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    533:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W099 Line contains adjacent spaces
    64:    CounterPtr       requeues_;
    65:    CounterPtr       trojans_;
    66:    CounterPtr       lockouts_;
  W106 Function does not invoke Debug::ft
    698: void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
    802: size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
    810: msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
    818: size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  W109 Override of Base.Display not found
    57: class InvokerPoolStats : public Dynamic
    71: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    70:    Faction GetFaction() const { return Faction(faction_.GetId()); }
  W042 Member could be private
    92:    static ptrdiff_t CellDiff();
  W065 Base class virtual destructor is not public
    117:    virtual ~InvokerPool();
  W075 Virtual function is public
    88:    virtual void DisplayStats(std::ostream& stream) const;
  W077 Virtual function has no overrides
    88:    virtual void DisplayStats(std::ostream& stream) const;
  W090 Function could be const
    148:    void KickThread();
    152:    Context* FindWork();
    176:    void Requeue(Context& ctx);
    184:    void ScheduledOut();
  W092 Function could be free
    188:    static bool GenerateLog(Factory::Rc rc);
    200:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    92:       auto p = reg->Pool(Faction(id));
  W106 Function does not invoke Debug::ft
    178: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    124:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W106 Function does not invoke Debug::ft
    113: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h
  W042 Member could be private
    63:    static word RtcYieldPercent() { return RtcYieldPercent_; }
    71:    static ptrdiff_t CellDiff2();
  W053 Data could be const
    134:    RegCell iid_;
    160:    static word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h
  W032 Unused function
    53:    bool operator!=(const LocalAddress& that) const;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp
  W106 Function does not invoke Debug::ft
    244: MsgDirection Message::Dir() const
    331: ProtocolId Message::GetProtocol() const
    366: SignalId Message::GetSignal() const
    422: MsgHeader* Message::Header() const
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h
  W028 Unused enum
    89:    enum Location
  W029 Unused enumerator
    91:       NotQueued,     // being built by a factory
    92:       ContextQ,      // has arrived at a context
    93:       PsmIncomingQ,  // has arrived at a PSM
    94:       PsmOutgoingQ,  // has been sent by a PSM
    95:       PsmPendingQ    // being built by a PSM
    105:       IllegalSignal,   // illegal signal found              0000  sid
    106:       IllegalParm,     // illegal parameter found          index  pid
    107:       IncompleteParm,  // parameter too short              index  pid
    108:       MissingParm,     // mandatory parameter missing       0000  pid
    109:       Overflow,        // last parameter extends past end  index  pid
    110:       Trampled         // last parameter trampled fence    index  pid
  W032 Unused function
    198:    Message* FindSignal(SignalId sid) const;
  W042 Member could be private
    350:    virtual void Handled(bool retain);
    354:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  W043 Member could be protected
    149:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    258:    MsgDirection Dir() const;
  W075 Virtual function is public
    149:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    169:    virtual void Save();
    174:    virtual void Unsave();
    182:    virtual bool Retrieve(ProtocolSM* psm);
    189:    virtual bool Relay(ProtocolSM& ogPsm);
    193:    virtual bool SendToSelf();
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    279:    virtual bool Send(Route route);
    283:    virtual bool Restore();
  W077 Virtual function has no overrides
    169:    virtual void Save();
    174:    virtual void Unsave();
    182:    virtual bool Retrieve(ProtocolSM* psm);
    189:    virtual bool Relay(ProtocolSM& ogPsm);
    193:    virtual bool SendToSelf();
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    283:    virtual bool Restore();
    337:    virtual void Refresh();
    350:    virtual void Handled(bool retain);
    354:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
    362:    virtual void ClearContext() const;
  W090 Function could be const
    127:    void SetSignal(SignalId sid);
    131:    void SetJoin(bool join);
    242:    void SetProtocol(ProtocolId prid);
    246:    void SetPriority(Priority prio);
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    379:    void SetRxAddr(const LocalAddress& rxaddr);
  W092 Function could be free
    291:    static const char* strPriority(Priority prio);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    82:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.cpp
  W022 Remove using statement
    35: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h
  W042 Member could be private
    58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W092 Function could be free
    58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp
  W058 Default copy constructor invoked
    43:    txAddr(NilLocalAddress),
    44:    rxAddr(NilLocalAddress),
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h
  W021 Add using statement
    1: namespace NetworkBase
  W042 Member could be private
    53:    uint8_t           spare    : 6;   // reserved for future use
  W099 Line contains adjacent spaces
    44:    LocalAddress      txAddr;         // source address
    45:    LocalAddress      rxAddr;         // destination address
    47:    bool              initial  : 1;   // true for initial message
    48:    bool              final    : 1;   // true for final message
    49:    bool              join     : 1;   // true to create PSM and join root SSM
    50:    bool              self     : 1;   // true for message to self
    51:    bool              injected : 1;   // true if sent by InjectCommand
    52:    bool              kill     : 1;   // true to kill context on arrival
    53:    uint8_t           spare    : 6;   // reserved for future use
    54:    Message::Route    route    : 2;   // the route that the message took
    55:    ProtocolId        protocol : 16;  // message's protocol
    56:    SignalId          signal   : 16;  // message's signal
    57:    MsgSize           length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    80:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    154:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    220:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    277:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    356:    return const_cast< MsgPort* >(this);
  W058 Default copy constructor invoked
    56:    locAddr_(msg.GetReceiver()),
    57:    remAddr_(msg.GetSender()),
    71:    locAddr_(GlobalAddress::NilAddr),
    72:    remAddr_(GlobalAddress::NilAddr),
  W059 Default assignment operator invoked
    204:    peerPort->remAddr_ = peerPrevRemAddr;
    205:    remAddr_ = GlobalAddress::NilAddr;
    317:    peerPrevRemAddr = peerPort->remAddr_;
    318:    locAddr_ = GlobalAddress(peerPort->locAddr_, locAddr_.sbAddr_);
    319:    remAddr_ = peerPort->locAddr_;
    320:    peerPort->remAddr_ = locAddr_;
    377:       remAddr_ = msg.GetSender();
    382:          locAddr_ = GlobalAddress(msg.RxIpAddr(), locAddr_.sbAddr_);
    421:       locAddr_ = GlobalAddress(txaddr, locAddr_.sbAddr_);
    422:       remAddr_ = msg.GetReceiver();
    481:       peer->remAddr_ = locAddr_;
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h
  W022 Remove using statement
    32: using namespace NodeBase;
  W027 Unused data
    144:    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  W092 Function could be free
    187:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    102:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W106 Function does not invoke Debug::ft
    194: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    79:    Id Pid() const { return Id(pid_.GetId()); }
  W029 Unused enumerator
    115:       StreamContainsIllegalParm,
  W032 Unused function
    83:    ProtocolId Prid() const { return prid_; }
  W053 Data could be const
    187:    ProtocolId prid_;
  W065 Base class virtual destructor is not public
    173:    virtual ~Parameter();
  W075 Virtual function is public
    93:    virtual void DisplayMsg(std::ostream& stream,
    102:    virtual CliParm* CreateCliParm(Usage use) const;
    131:    virtual TestRc InjectMsg
    144:    virtual TestRc VerifyMsg
  W092 Function could be free
    149:    static const char* ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W106 Function does not invoke Debug::ft
    135: Parameter* Protocol::FirstParm() const
    148: Signal* Protocol::FirstSignal() const
    161: Parameter* Protocol::GetParameter(ParameterId pid) const
    173: Signal* Protocol::GetSignal(SignalId sid) const
    185: void Protocol::NextParm(Parameter*& parm) const
    198: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h
  W005 Functional cast
    71:    Id Prid() const { return Id(prid_.GetId()); }
  W032 Unused function
    80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W042 Member could be private
    71:    Id Prid() const { return Id(prid_.GetId()); }
  W065 Base class virtual destructor is not public
    136:    virtual ~Protocol();
  W075 Virtual function is public
    80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    112:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h
  W025 Unused argument
    174/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W032 Unused function
    75:    bool IsLowermost() const { return lower_ == nullptr; }
  W042 Member could be private
    119:    virtual ProtocolLayer* JoinPeer
    126:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W043 Member could be protected
    71:    bool IsUppermost() const { return upper_ == nullptr; }
    96:    virtual FactoryId GetFactory() const = 0;
  W065 Base class virtual destructor is not public
    150:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    59:    virtual MsgPort* Port() const = 0;
    63:    virtual ProtocolSM* UppermostPsm() const = 0;
    96:    virtual FactoryId GetFactory() const = 0;
    100:    virtual Message::Route Route() const = 0;
    109:    virtual SysSocket* CreateAppSocket();
    119:    virtual ProtocolLayer* JoinPeer
    126:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    434:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    698:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h
  W022 Remove using statement
    37: using namespace NodeBase;
  W025 Unused argument
    302/1:    virtual void MsgHandled(Message& msg) { }
    308/1:    virtual void RestoreIcMsg(Message& msg) { }
    314/1:    virtual void RefreshMsg(Message& msg) { }
  W029 Unused enumerator
    97:       SignalUnknown,     // signal not recognized
    99:       ParameterUnknown,  // parameter not recognized
    100:       ParameterInvalid,  // parameter not valid for this signal
  W032 Unused function
    138:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    196:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    326:    virtual void InjectFinalMsg();
  W042 Member could be private
    69:    typedef uint8_t Priority;
    252:    virtual bool SendMsg(Message& msg) override;
  W043 Member could be protected
    77:    enum IncomingRc
    86:    enum OutgoingRc
    132:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W053 Data could be const
    373:    FactoryId fid_;
  W077 Virtual function has no overrides
    242:    virtual void SetState(StateId stid);
    297:    virtual Priority GetPriority() const { return NormalPriority; }
    302:    virtual void MsgHandled(Message& msg) { }
    308:    virtual void RestoreIcMsg(Message& msg) { }
    314:    virtual void RefreshMsg(Message& msg) { }
  W090 Function could be const
    119:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h
  W022 Remove using statement
    30: using namespace NodeBase;
  W032 Unused function
    86:    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/PsmFactory.cpp
  W022 Remove using statement
    32: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    48:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W025 Unused argument
    52/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    52:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W032 Unused function
    93:    StateId CurrState() const { return currState_; }
    106:    Message* SavedMsg() const { return savedMsg_; }
    215:    StateId CurrState() const { return currState_; }
    219:    StateId NextState() const { return nextState_; }
    360:    bool IsInitiation() const { return initiation_; }
    371:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    48:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    124:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    138:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h
  W022 Remove using statement
    32: using namespace NodeBase;
  W110 Override of Object.Patch not found
    42: class SbAnalyzeMessage : public EventHandler
    56: class SbAnalyzeSap : public EventHandler
    70: class SbAnalyzeSnp : public EventHandler
    84: class SbForceTransition : public EventHandler
    98: class SbInitiationReq : public EventHandler
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    752:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    701:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    819:       auto msg = static_cast< Message* >(obj);
    906:       auto port = static_cast< MsgPort* >(obj);
    1118:       auto psm = static_cast< ProtocolSM* >(obj);
    1350:       auto ssm = static_cast< ServiceSM* >(obj);
    1563:       auto tmr = static_cast< Timer* >(obj);
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h
  W022 Remove using statement
    31: using namespace NodeBase;
  W027 Unused data
    58:    static const id_t LastSbIndex    = LastNwIndex + 9;
    87:    static const id_t LastSbIndex   = LastNwIndex + 6;
    116:    static const id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    77:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    108:    auto sbbuff = SbIpBufferPtr(static_cast< SbIpBuffer* >(buff.release()));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    59:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    71:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W075 Virtual function is public
    44:    virtual bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    65:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  W022 Remove using statement
    31: using namespace NodeBase;
  W032 Unused function
    86:    static void operator delete(void* addr, SbPoolUser user);
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.cpp
  W021 Add using statement
    1: namespace NetworkBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h
  W047 Data is init-only
    66:    static bool Registered;
  W092 Function could be free
    62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    223:       auto port = static_cast< MsgPort* >(obj);
    284:    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
    301:       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  W106 Function does not invoke Debug::ft
    406: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h
  W109 Override of Base.Display not found
    194: class TimerPool : public ObjectPool
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    143:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    148:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    462:    width -= col_t(label.size());
  W007 Cast down the inheritance hierarchy
    355:          bt = static_cast< BuffTrace* >(rec);
    857:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    859:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    888:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W058 Default copy constructor invoked
    597:    locAddr_(NilLocalAddress),
    598:    remAddr_(NilLocalAddress),
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h
  W042 Member could be private
    535:    const StateId stid_;
  W050 Data is not private
    492:    ServiceId owner_;
    496:    const EventId eid_;
    531:    const ServiceId sid_;
    535:    const StateId stid_;
    539:    const EventHandler::Rc rc_;
  W060 Base class constructor is public
    468:    EventTrace(Id rid, const Event& evt);
    513:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    169:    static BuffTrace* NextIcMsg
    484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W092 Function could be free
    243:    static std::string OutputId(const std::string& label, id_t id);
    484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.cpp
  W021 Add using statement
    1: namespace NetworkBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h
  W082 Adjacent arguments have the same type
    129:    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
    181:       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  W109 Override of Base.Display not found
    115: class SbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    283:    auto fake = reinterpret_cast< const Service* >(&local);
  W106 Function does not invoke Debug::ft
    371: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    59:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    125:    bool Disable();
    129:    bool Enable();
  W042 Member could be private
    73:    static bool IsValidPortId(PortId pid)
    115:    bool IsModifiable() const { return modifiable_; }
    119:    bool IsModifier() const { return modifier_; }
  W043 Member could be protected
    63:    typedef ServicePortId PortId;
    81:    virtual const char* PortName(PortId pid) const;
  W065 Base class virtual destructor is not public
    179:    virtual ~Service();
  W075 Virtual function is public
    81:    virtual const char* PortName(PortId pid) const;
    111:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    174:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W092 Function could be free
    73:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp
  W106 Function does not invoke Debug::ft
    79: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp
  W004 C-style cast
    773:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    775:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  W007 Cast down the inheritance hierarchy
    457:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    461:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    462:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    513:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    519:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    521:             (sapEvent)->CurrInitiator();
    773:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    775:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
    879:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    883:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    946:                (initEvent)->GetModifier();
    986:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  W106 Function does not invoke Debug::ft
    312: Service* ServiceSM::GetService() const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h
  W025 Unused argument
    81/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    189/2:       (Event& currEvent, Event*& nextEvent);
    189/1:       (Event& currEvent, Event*& nextEvent);
  W032 Unused function
    134:    bool HasTriggered(TriggerId tid) const;
  W042 Member could be private
    97:    StateId NextState() const { return nextState_; }
  W065 Base class virtual destructor is not public
    169:    virtual ~ServiceSM();
  W075 Virtual function is public
    69:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    75:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    81:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    102:    virtual void SetNextState(StateId stid);
    109:    virtual void PsmDeleted(ProtocolSM& exPsm);
    123:    virtual void SetNextSap(TriggerId sap);
    129:    virtual void SetNextSnp(TriggerId snp);
    141:    virtual void MorphToService(ServiceId sid);
  W077 Virtual function has no overrides
    141:    virtual void MorphToService(ServiceId sid);
  W090 Function could be const
    188:    virtual EventHandler::Rc ProcessInitNack
    238:    EventHandler::Rc ProcessSsmqSap
    249:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    77:    auto fake = reinterpret_cast< const Signal* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    75:    Id Sid() const { return Id(sid_.GetId()); }
  W032 Unused function
    79:    ProtocolId Prid() const { return prid_; }
  W053 Data could be const
    118:    ProtocolId prid_;
  W065 Base class virtual destructor is not public
    109:    virtual ~Signal();
  W075 Virtual function is public
    86:    virtual CliText* CreateText() const;
  W092 Function could be free
    60:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    97:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h
  W022 Remove using statement
    30: using namespace NodeBase;
  W092 Function could be free
    88:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.cpp
  W022 Remove using statement
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h
  W025 Unused argument
    47/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    41:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    47:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    55:    SsmFactory(Id fid, ProtocolId prid, const char* name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    190:    auto fake = reinterpret_cast< const State* >(&local);
  W106 Function does not invoke Debug::ft
    125: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    157: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    237: EventHandlerId State::GetHandler(EventId eid) const
    245: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    54:    Id Stid() const { return Id(stid_.GetId()); }
  W032 Unused function
    58:    ServiceId Sid() const { return sid_; }
  W053 Data could be const
    117:    ServiceId sid_;
  W065 Base class virtual destructor is not public
    91:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W032 Unused function
    60:    explicit TextTlvMessage(SbIpBufferPtr& text);
    64:    TextTlvMessage(ProtocolSM* psm, MsgSize size);
    70:    bool Receive();
  W077 Virtual function has no overrides
    79:    virtual SbIpBufferPtr Parse() = 0;
    86:    virtual SbIpBufferPtr Build() = 0;
  W090 Function could be const
    79:    virtual SbIpBufferPtr Parse() = 0;
    86:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    191:    auto fake = reinterpret_cast< const Timer* >(&local);
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h
  W038 Member hides inherited name
    54:    static ptrdiff_t LinkDiff();
  W042 Member could be private
    54:    static ptrdiff_t LinkDiff();
  W053 Data could be const
    136:    TimerId tid_;
    148:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    119:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h
  W022 Remove using statement
    33: using namespace NodeBase;
  W110 Override of Object.Patch not found
    90: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W006 reinterpret_cast
    142:          auto psm = reinterpret_cast< const Base* >(t->Psm());
    154:          auto psm = reinterpret_cast< const Base* >(t->Psm());
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp
  W106 Function does not invoke Debug::ft
    60: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    176:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    285:    return (Fence*) fence;
    443:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    66:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    511:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W017 Add #include directive
    1: "Debug.h"
  W056 Default constructor invoked: POD members not initialized
    193:    ParmIterator pit;
    316:    ParmIterator pit;
    336:    ParmIterator pit;
    397:    ParmIterator locpit;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h
  W005 Functional cast
    227:       return MsgSize(Memory::Align(size, Log2Align));
  W006 reinterpret_cast
    268:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W018 Remove #include directive
    28: #include "Debug.h"
  W022 Remove using statement
    37: using namespace NodeBase;
  W032 Unused function
    64:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    69:    TlvMessage(const Message& msg, ProtocolSM* psm);
    78:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    169:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    175:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    189:    TlvParmPtr AddBytes(const byte_t* src, MsgSize size, ParameterId pid);
    195:    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
    199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    251:    byte_t* FindBytes(MsgSize& size, ParameterId pid) const;
    258:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    273:    int ParmOffset(ParmIterator& pit) const;
  W042 Member could be private
    158:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    163:    TlvParmPtr NextParm(ParmIterator& pit) const;
    184:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    245:    typedef uint16_t Fence;
    263:    virtual void AddFence();
    267:    TlvMsgLayout* TlvLayout() const
    278:    Fence* FencePtr() const;
    282:    void CheckFence() const;
  W060 Base class constructor is public
    52:    explicit TlvMessage(SbIpBufferPtr& buff);
    56:    TlvMessage(ProtocolSM* psm, MsgSize size);
    64:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    69:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W075 Virtual function is public
    78:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    184:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    203:    virtual void DeleteParm(TlvParmLayout& parm);
  W077 Virtual function has no overrides
    78:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    184:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    199:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    203:    virtual void DeleteParm(TlvParmLayout& parm);
    258:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    263:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    115:    template< typename T > T* CopyType
  W088 Argument could be const
    203/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W092 Function could be free
    225:    static MsgSize Pad(MsgSize size)
    302:    inline static fn_name TlvMessage_FindType()
    304:    inline static fn_name TlvMessage_AddType()
    306:    inline static fn_name TlvMessage_CopyType()
    308:    inline static fn_name TlvMessage_VerifyParm()
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    73:    auto& tmsg = static_cast< const TlvMessage& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h
  W022 Remove using statement
    31: using namespace NodeBase;
  W032 Unused function
    72:    static Id ExtractPid(const TlvParmLayout& parm);
  W044 Typedef of pointer type
    59: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    60: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W092 Function could be free
    72:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    70:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  W022 Remove using statement
    37: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h
  W032 Unused function
    39:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h
  W042 Member could be private
    74:    static bool IsValidId(Id tid)
  W053 Data could be const
    118:    Id tid_;
  W065 Base class virtual destructor is not public
    99:    virtual ~Trigger();
  W092 Function could be free
    74:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    60:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    63:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    100:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    116:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    118:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    138:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    153:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    154:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    169:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    171:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    177:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    198:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    225:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    255:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    272:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    296:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    311:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    325:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    340:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    355:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    357:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    376:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    397:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    412:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    428:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    445:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    446:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    463:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    477:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    479:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    509:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    524:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    525:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    540:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    541:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    562:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    581:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    596:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    598:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    623:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    652:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    667:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    683:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    699:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    701:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    722:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    737:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    753:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    755:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    772:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    798:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    817:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    832:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    851:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    866:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    882:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    884:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    893:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    920:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    921:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    959:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    975:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    991:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    992:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    1007:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    1008:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1042:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1063:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  W021 Add using statement
    1: namespace MediaBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    73:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    78:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    86:       SetNPsm(static_cast< CipPsm& >(psm));
    90:       SetUPsm(static_cast< MediaPsm& >(psm));
    130:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W106 Function does not invoke Debug::ft
    385: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    82:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W021 Add using statement
    1: namespace CallBase
    1: namespace Cause
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    82:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W021 Add using statement
    1: namespace CallBase
    1: namespace Cause
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    114:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    195:       auto pmsg = static_cast< const PotsMessage* >(msg);
    197:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    201:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    202:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    265:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  W022 Remove using statement
    38: using namespace MediaBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    96:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    97:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    94:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    115:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp
  W005 Functional cast
    108: ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  W106 Function does not invoke Debug::ft
    98: Faction PotsCallIpService::GetFaction() const { return PayloadFaction; }
    108: ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
    112: size_t PotsCallIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    116: size_t PotsCallIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    105:       return static_cast< PotsCallPsm* >(psm);
    177:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    212:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    203:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    263:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    286:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    302:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W021 Add using statement
    1: namespace CallBase
    1: namespace Cause
    1: namespace MediaBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    56:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    58:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  W021 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    56:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    58:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  W021 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    56:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    58:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  W021 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    292:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    297:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    299:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    320:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    321:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    373:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    400:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    482:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    484:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    497:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    519:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    533:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    539:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    545:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    579:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    582:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    637:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    644:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    659:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    667:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    685:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  W021 Add using statement
    1: namespace MediaBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h
  W022 Remove using statement
    42: using namespace NodeBase;
  W025 Unused argument
    61/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1466:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    448:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1167:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1204:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1274:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1301:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1315:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1381:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1425:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1974:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1975:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    2005:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    2020:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2022:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2029:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    2126:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2128:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2129:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    2130:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2225:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2239:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2253:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2267:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2283:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2298:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2312:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2327:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2342:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2343:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2358:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2359:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2373:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2395:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W021 Add using statement
    1: namespace NetworkBase
  W022 Remove using statement
    51: using namespace MediaBase;
    52: using namespace CallBase;
  W025 Unused argument
    435/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W053 Data could be const
    186:    Cause::Ind cause_;
  W092 Function could be free
    455:    static EventHandler::Rc SendFacilityNack
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    290:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    617:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    622:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    623:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    640:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    648:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    686:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    716:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    811:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    813:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    908:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    930:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    961:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    963:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    969:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    993:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    1018:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1019:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    1039:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1040:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1044:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1063:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1065:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1069:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1109:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1110:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1112:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1157:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W021 Add using statement
    1: namespace NetworkBase
  W022 Remove using statement
    55: using namespace CallBase;
  W042 Member could be private
    252:    void StartTimer(TimerId tid, secs_t duration);
  W053 Data could be const
    147:    Facility::Ind ind_;
  W075 Virtual function is public
    257:    virtual void Cancel() override;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h
  W022 Remove using statement
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    133:    auto& pssm = static_cast< BcSsm& >(*Parent());
    135:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  W022 Remove using statement
    31: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    83:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    173:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    179:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  W021 Add using statement
    1: namespace CallBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    196:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    247:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    250:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    362:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    415:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    748:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    751:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    824:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    892:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    999:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1000:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1022:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1053:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1054:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1077:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  W022 Remove using statement
    42: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h
  W022 Remove using statement
    45: using namespace NodeBase;
    46: using namespace SessionBase;
  W025 Unused argument
    159/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W032 Unused function
    78:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W042 Member could be private
    161:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    54:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    55:    auto msg = static_cast< CipMessage* >(ame.Msg());
    57:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    90:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    107:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    109:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    133:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    134:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    136:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    173:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    183:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    207:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    225:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    244:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    245:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    247:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    294:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    312:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    313:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    315:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    357:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    358:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    360:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    410:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    428:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    446:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    464:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    482:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    515:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    516:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    546:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    565:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    566:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    596:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    616:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    617:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W021 Add using statement
    1: namespace MediaBase
  W099 Line contains adjacent spaces
    133:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    134:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    135:    auto          sid = msg->GetSignal();
    136:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    138:    CauseInfo*    cci;
    244:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    245:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    246:    auto          sid = msg->GetSignal();
    247:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    249:    CauseInfo*    cci;
    312:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    313:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    314:    auto          sid = msg->GetSignal();
    315:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    317:    CauseInfo*    cci;
    357:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    358:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    359:    auto          sid = msg->GetSignal();
    360:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    362:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp
  W021 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h
  W022 Remove using statement
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h
  W022 Remove using statement
    44: using namespace NodeBase;
    45: using namespace SessionBase;
  W032 Unused function
    76:    virtual CliText* CreateText() const override;
  W042 Member could be private
    421:    ProtocolSM* TimerPsm(TimerId tid) const;
  W092 Function could be free
    137:    static void SendRelease(const Message& msg1);
  W109 Override of Base.Display not found
    54: class PotsCallIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h
  W042 Member could be private
    45:    typedef uint8_t Id;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    81:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W021 Add using statement
    1: namespace CallBase
    1: namespace Cause
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h
  W022 Remove using statement
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
  W021 Add using statement
    1: namespace MediaBase
  W106 Function does not invoke Debug::ft
    118: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    200: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
  W042 Member could be private
    57:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    206:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    255:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    299:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    329:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h
  W053 Data could be const
    161:    PotsTreatmentQueue::QId qid_;
    165:    Q1Link link_;
    194:    Tone::Id tone_;
    198:    secs_t duration_;
  W075 Virtual function is public
    137:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    191:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    193:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    436:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    463:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    465:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    470:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    542:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    545:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    605:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    625:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    662:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    667:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    669:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    690:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    691:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  W021 Add using statement
    1: namespace CallBase
    1: namespace Cause
    1: namespace MediaBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h
  W022 Remove using statement
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp
  W021 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W058 Default copy constructor invoked
    41:    locAddr_(mt.LocAddr()),
    42:    remAddr_(NilLocalAddress),
  W106 Function does not invoke Debug::ft
    77: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h
  W053 Data could be const
    128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    151:          tt = static_cast< const TransTrace* >(rec);
    159:          auto mt = static_cast< const MsgTrace* >(rec);
    712:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    729:             trans = static_cast< const TransTrace* >(rec);
    741:             return static_cast< const MsgTrace* >(rec);
    758:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    779:             trans = static_cast< const TransTrace* >(rec);
    786:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    947:          tt = static_cast< const TransTrace* >(rec);
    983:             mt = static_cast< const MsgTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W106 Function does not invoke Debug::ft
    89: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h
  W053 Data could be const
    144:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W106 Function does not invoke Debug::ft
    56: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h
  W053 Data could be const
    85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    139:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W021 Add using statement
    1: namespace NetworkBase
  W047 Data is init-only
    454:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h
  W022 Remove using statement
    29: using namespace NodeBase;
  W060 Base class constructor is public
    41:    StSizesCommand() { }
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h
  W047 Data is init-only
    62:    static bool Registered;
  W092 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    69:    return static_cast< StTestData* >(data);
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h
  W082 Adjacent arguments have the same type
    70:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W092 Function could be free
    47:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    509:    auto tpsm = static_cast< TestPsm* >(Psm());
    526:    auto tssm = static_cast< TestSsm* >(RootSsm());
    580:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    858:       SetTestPsm(static_cast< TestPsm* >(&psm));
    986:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    987:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    1025:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1034:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    1045:    auto& tssm = static_cast< TestSsm& >(ssm);
    1063:    auto& tssm = static_cast< TestSsm& >(ssm);
    1082:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1083:    auto& tssm = static_cast< TestSsm& >(ssm);
  W059 Default assignment operator invoked
    419:       addr = GlobalAddress(addr, dest->EnsurePort()->LocAddr().SbAddr());
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h
  W022 Remove using statement
    43: using namespace NodeBase;
  W042 Member could be private
    265:    void UpdateTestPsm();
    341:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    347:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W090 Function could be const
    265:    void UpdateTestPsm();
