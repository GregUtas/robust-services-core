
WARNING COUNTS (* if supported by >fix)
  W004   140  C-style cast
  W005    58  Functional cast
  W006   120  reinterpret_cast
  W007   662  Cast down the inheritance hierarchy
  W008    50  Cast removes const qualification
  W009    15  Pointer arithmetic
* W015     3  #include not sorted in standard order
* W020   171  Using statement in header
* W022   203  Add using statement
* W023     1  Remove using statement
  W026    70  Unused argument
  W027     6  Unused class
* W028    39  Unused data
* W029     1  Unused enum
* W030    19  Unused enumerator
* W032   122  Unused function
* W033     1  Unused typedef
  W037    15  Member hides inherited name
  W038     1  Class could be namespace
* W042   157  Member could be private
* W043    74  Member could be protected
  W044     8  Typedef of pointer type
* W047     1  Data is init-only
* W048     4  Data is write-only
  W050    26  Data is not private
* W053    54  Data could be const
* W054     1  Data could be const pointer
* W055     1  Data need not be mutable
  W056     5  Implicit constructor invoked: POD members not initialized
* W060    58  Base class constructor is public
* W065    10  Base class virtual destructor is not public
  W075   406  Virtual function is public
* W077    58  Virtual function has no overrides
  W082   116  Adjacent arguments have the same type
* W088    15  Argument could be const
* W090    99  Function could be const
* W091     1  Function could be static
* W092    42  Function could be free
* W099   293  Line contains adjacent spaces
* W100     1  Insertion of blank line recommended
  W102     4  Line length exceeds the standard maximum
* W106   658  Function does not invoke Debug::ft
  W107    16  Function does not invoke Debug::ft as first statement
  W110    38  Override of Base.Display not found
* W111    11  Override of Object.Patch not found
* W117    37  Line can merge with the next line and be under the length limit
  W119    94  Argument passed by value is modified
  W120     5  Function returns non-const reference or pointer to member data
  W121     2  Static member function has indirect argument for its class
  W125     1  Non-const cast is not a downcast
* W127     1  Data could be free
* W130     9  Redundant scope
  W131     2  C-style preprocessor directive
  W141     3  Function could move to a subclass
* W143     2  Auto variable copies an object returned by reference
* W144     1  Auto variable copies an object returned by const reference
* W145     7  Auto variable copies an object
  W147     4  Trailing comment not aligned with one above
====================================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE (i = informational)
W004 C-style cast
  an/PotsTrafficThread.cpp(493):    Singleton<TrafficCallPool>::Extant()->Enq((TrafficCall*) addr);
  an/PotsTrafficThread.cpp(1053):    timewheel_ = (Q1Way<TrafficCall>*) Memory::Alloc(size, MemDynamic);
  ct/CodeFileSet.cpp(641):    LibrarySet* nbSet = (LibrarySet*) this;
  ct/CodeFileSet.cpp(669):    LibrarySet* nsSet = (LibrarySet*) this;
  ct/CxxArea.h(529):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxArea.h(901):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  ct/CxxNamed.h(1266):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxNamed.h(1474):    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  ct/CxxScope.cpp(4706):    if(tmplt_ != nullptr) return (CxxScope*) this;
  ct/CxxScope.h(396):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScope.h(1366):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScoped.cpp(1877):    return (CxxToken*) this;
  ct/CxxScoped.cpp(2106):    return (CxxToken*) this;
  ct/CxxScoped.cpp(2919):    return (CxxToken*) this;
  ct/CxxScoped.cpp(3013):    return (CxxScoped*) this;
  ct/CxxScoped.cpp(3026):    return (CxxToken*) this;
  ct/CxxScoped.h(205):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  ct/CxxScoped.h(604):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScoped.h(1535):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScoped.h(1632):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxSymbols.cpp(414):    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  nb/Algorithms.cpp(108):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  nb/Algorithms.cpp(108):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  nb/BuddyHeap.cpp(332):       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
  nb/BuddyHeap.cpp(377):    auto block = (const HeapBlock*) addr;
  nb/BuddyHeap.cpp(482):    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
  nb/BuddyHeap.cpp(522):    heap_->state = (uint8_t*) (heapAddr + infoSize);
  nb/BuddyHeap.cpp(554):          ReleaseBlock((HeapBlock*) addr, level);
  nb/BuddyHeap.cpp(565):       ReserveBlock((HeapBlock*) addr);
  nb/BuddyHeap.cpp(673):                   if(block < (HeapBlock*) heap_)
  nb/BuddyHeap.cpp(675):                   else if(block < (HeapBlock*) heap_->minAddr)
  nb/BuddyHeap.cpp(752):    FreeBlock((HeapBlock*) addr, level);
  nb/BuddyHeap.cpp(800):    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
  nb/BuddyHeap.cpp(900):       auto size = BlockToSize((const HeapBlock*) addr);
  nb/BuddyHeap.cpp(903):       auto index = BlockToIndex((const HeapBlock*) addr, level);
  nb/BuddyHeap.cpp(955):       if((HeapBlock*) block->link.prev->next != block)
  nb/BuddyHeap.cpp(957):       if((HeapBlock*) block->link.next->prev != block)
  nb/Class.cpp(227):    return (Object*) addr;
  nb/CliPtrParm.cpp(89):          p = (void*) n;
  nb/Formatters.cpp(162):       auto base = (const Base*) obj;
  nb/LogBuffer.cpp(313):    auto after = (ptr_t) next_ + size;
  nb/LogBuffer.cpp(326):       if(wrap && (after > (const_ptr_t) first)) return nullptr;
  nb/LogBuffer.cpp(333):       if(wrap || (after > (const_ptr_t) first)) return nullptr;
  nb/LogBuffer.cpp(507):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  nb/LogBuffer.cpp(507):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  nb/LogBuffer.cpp(509):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  nb/LogBuffer.cpp(509):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  nb/ObjectPool.cpp(87):    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
  nb/ObjectPool.cpp(311):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, std::nothrow);
  nb/ObjectPool.cpp(335):          auto b = (ObjectBlock*) &seg[j];
  nb/ObjectPool.cpp(385):             auto b = (ObjectBlock*) &seg[j];
  nb/ObjectPool.cpp(421):             auto curr = (Pooled*) getptr1(item, diff);
  nb/ObjectPool.cpp(856):       return (ObjectBlock*) &blocks_[0][0];
  nb/ObjectPool.cpp(902):          auto b = (ObjectBlock*) &seg[j];
  nb/ObjectPool.cpp(950):       return (ObjectBlock*) &blocks_[i][j];
  nb/ObjectPool.cpp(975):             auto b = (ObjectBlock*) &seg[j];
  nb/ObjectPool.cpp(1006):    auto block = (const_ptr_t) ObjToBlock(obj);
  nb/ObjectPool.cpp(1007):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  nb/ObjectPool.cpp(1011):       auto b0 = (const_ptr_t) &blocks_[i][0];
  nb/ObjectPool.cpp(1074):          auto b = (ObjectBlock*) &seg[j];
  nb/Pooled.cpp(137):    auto obj = (Pooled*) addr;
  nb/Q1Way.h(143):       auto ante = (Q1Link*)
  nb/Q1Way.h(166):       return (T*) getptr1(item, diff_);  // location of item's vptr
  nb/Q1Way.h(212):       return (T*) getptr1(item, diff_);     // location of item's vptr
  nb/Q1Way.h(233):          item = (Q1Link*)
  nb/Q1Way.h(247):       elem = (T*) getptr1(item, diff_);     // location of item's vptr
  nb/Q1Way.h(260):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  nb/Q1Way.h(332):          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
  nb/Q1Way.h(340):       auto item = (Q1Link*)                   // start at the current item
  nb/Q1Way.h(342):       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
  nb/Q1Way.h(360):       return (Q1Link*) getptr2(&elem, diff_);
  nb/Q2Way.h(145):       return (T*) getptr1(item, diff_);    // location of item's vptr
  nb/Q2Way.h(174):       return (T*) getptr1(item, diff_);     // location of item's vptr
  nb/Q2Way.h(191):          item = (Q2Link*)
  nb/Q2Way.h(197):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  nb/Q2Way.h(208):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  nb/Q2Way.h(218):       return (T*) getptr1(item, diff_);     // location of item's vptr
  nb/Q2Way.h(235):          item = (Q2Link*)
  nb/Q2Way.h(241):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  nb/Q2Way.h(252):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  nb/Q2Way.h(336):       return (Q2Link*) getptr2(&elem, diff_);
  nb/Registry.h(116):       registry_ = (T**) Memory::Alloc(size, mem);
  nb/Registry.h(506):                auto cell = (RegCell*) getptr2(item, diff_);
  nb/Registry.h(564):       return (RegCell*) getptr2(&item, diff_);
  nb/Registry.h(579):       auto table = (T**) Memory::Alloc(size, mem_);
  nb/Singleton.h(85):       reg->BindInstance((const Base**) &Instance_, type);
  nb/Singleton.h(104):       reg->UnbindInstance((const Base**) &Instance_);
  nb/SlabHeap.cpp(369):       auto succ = (void*) (uintptr_t(addr) + size);
  nb/SysStackTrace.win.cpp(163):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, std::nothrow);
  nb/SysThread.win.cpp(193):       (_beginthreadex_proc_type) EnterThread, (void*) client, 0, &id);
  nb/SysThread.win.cpp(193):       (_beginthreadex_proc_type) EnterThread, (void*) client, 0, &id);
  nb/SysThread.win.cpp(204):       SetThreadPriorityBoost((HANDLE) nthread_, true);
  nb/SysThread.win.cpp(218):       CloseHandle((HANDLE) nthread_);
  nb/SysThread.win.cpp(255):    if(!SetThreadPriority((HANDLE) nthread_, PriorityMap[prio]))
  nb/SysThread.win.cpp(297):    _set_se_translator((_se_translator_function) SE_Handler);
  nb/TraceBuffer.cpp(216):    buff_ = (TraceRecord**)
  nb/TraceBuffer.cpp(220):    funcs_ = (FunctionTrace*)
  nt/FunctionProfiler.cpp(93):    functionq_ = (Q2Way<FunctionStats>*) Memory::Alloc(size, MemTemporary);
  nw/IoThread.cpp(78):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  nw/IpBuffer.cpp(158):    bytes_ = (byte_t*) newbytes;
  nw/SysIpL2Addr.win.cpp(66):                auto netaddr = (sockaddr_in*) curr->ai_addr;
  nw/SysIpL2Addr.win.cpp(74):                auto netaddr = (sockaddr_in6*) curr->ai_addr;
  nw/SysIpL3Addr.win.cpp(65):          auto netaddr = (sockaddr_in*) info->ai_addr;
  nw/SysIpL3Addr.win.cpp(88):          auto netaddr = (sockaddr_in6*) info->ai_addr;
  nw/SysIpL3Addr.win.cpp(138):       HostToNetwork((IPv4Addr&) ipv4addr.sin_addr.s_addr, ipv4addr.sin_port);
  nw/SysIpL3Addr.win.cpp(139):       addrinfo = (sockaddr*) &ipv4addr;
  nw/SysIpL3Addr.win.cpp(148):       addrinfo = (sockaddr*) &ipv6addr;
  nw/SysSocket.win.cpp(109):          (const char*)&dual, sizeof(dual)) == SOCKET_ERROR)
  nw/SysSocket.win.cpp(135):       addr = (sockaddr*) &ipv4addr;
  nw/SysSocket.win.cpp(145):       addr = (sockaddr*) &ipv6addr;
  nw/SysSocket.win.cpp(276):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  nw/SysSocket.win.cpp(283):       (char*) &max, &maxsize) == SOCKET_ERROR)
  nw/SysSocket.win.cpp(295):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  nw/SysSocket.win.cpp(302):       (char*) &max, &maxsize) == SOCKET_ERROR)
  nw/SysTcpSocket.win.cpp(56):       peer = (sockaddr*) &ipv6peer;
  nw/SysTcpSocket.win.cpp(61):       peer = (sockaddr*) &ipv4peer;
  nw/SysTcpSocket.win.cpp(111):       peer = (sockaddr*) &ipv6peer;
  nw/SysTcpSocket.win.cpp(118):          ((IPv4Addr&) ipv4peer.sin_addr.s_addr, ipv4peer.sin_port);
  nw/SysTcpSocket.win.cpp(119):       peer = (sockaddr*) &ipv4peer;
  nw/SysTcpSocket.win.cpp(200):       self = (sockaddr*) &ipv6self;
  nw/SysTcpSocket.win.cpp(205):       self = (sockaddr*) &ipv4self;
  nw/SysTcpSocket.win.cpp(338):       peer = (sockaddr*) &ipv6peer;
  nw/SysTcpSocket.win.cpp(343):       peer = (sockaddr*) &ipv4peer;
  nw/SysTcpSocket.win.cpp(409):       (char*) &linger_opts, sizeof(linger)) != SOCKET_ERROR)
  nw/SysTcpSocket.win.cpp(435):       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
  nw/SysTcpSocket.win.cpp(445):       (char*) &val, &valsize) == SOCKET_ERROR)
  nw/SysUdpSocket.win.cpp(58):          (char*) &max, &maxsize) == SOCKET_ERROR)
  nw/SysUdpSocket.win.cpp(99):       peer = (sockaddr*) &ipv6peer;
  nw/SysUdpSocket.win.cpp(104):       peer = (sockaddr*) &ipv4peer;
  nw/SysUdpSocket.win.cpp(185):       peer = (sockaddr*) &ipv6peer;
  nw/SysUdpSocket.win.cpp(192):          ((IPv4Addr&) ipv4peer.sin_addr.s_addr, ipv4peer.sin_port);
  nw/SysUdpSocket.win.cpp(193):       peer = (sockaddr*) &ipv4peer;
  sb/SbIncrement.cpp(767):    ((ProtocolSM*) p)->Kill();
  sb/TlvMessage.cpp(166):    auto pptr = (TlvParm*) (layout->bytes + layout->header.length);
  sb/TlvMessage.cpp(250):    return (Fence*) fence;
  sb/TlvMessage.cpp(395):    pit.pptr = (TlvParm*) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  cb/BcProtocol.cpp(509):    if(route->identifier != RouteResult::Id(rid)) return ParmValueMismatch;
  cb/DigitString.cpp(137):       auto rc = AddDigit(Digit(ds.digits_[i]));
  cb/DigitString.cpp(148):    if(i < Size()) return Digit(digits_[i]);
  ct/CodeFile.cpp(1183):          << spaces(3) << LineType(t) << CRLF;
  ct/CodeWarning.cpp(230):          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
  ct/CodeWarning.cpp(231):          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
  ct/CodeWarning.cpp(232):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  ct/CodeWarning.cpp(291):          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
  ct/CtIncrement.cpp(1375):       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
  ct/CtIncrement.cpp(1390):    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  ct/Cxx.cpp(653):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  ct/Cxx.cpp(701):          oper = Cxx::Operator(i);
  ct/Cxx.cpp(750):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  ct/Cxx.cpp(756):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  ct/Cxx.cpp(761):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  ct/CxxExecute.cpp(1781):             return TypeMatch(match - 1);
  ct/CxxExecute.cpp(2244):    if(item_->GetTypeSpec()->Tags()->PtrCount(false) >= TagCount(ptrs))
  ct/CxxNamed.cpp(4422):    if(TagCount(n) >= ptrs_) return false;
  ct/CxxNamed.cpp(4450):    if(TagCount(n) >= ptrs_) return false;
  ct/CxxNamed.cpp(4521):       if(TagCount(n) >= ptrs_) ptrs_ = n + 1;
  ct/Editor.cpp(1077):       if(int(begin) < info->depth) begin = info->depth;
  ct/Editor.cpp(2143):    *Cli_->obuf << ": " << Warning(log.warning_);
  ct/Interpreter.cpp(147):          type = LibTokenType(i);
  ct/Lexer.cpp(2366):          fp *= std::pow(10.0, int(num));
  ct/Lexer.cpp(2473):          oper = Cxx::Operator(match->second);
  mb/Tones.h(73):    Id Tid() const { return Id(tid_.GetId()); }
  nb/BuddyHeap.cpp(787):    return BlockState(state);
  nb/Memory.cpp(225):       heaps.push_back(Memory::AccessHeap(MemoryType(m)));
  nb/NbIncrement.cpp(644):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  nb/NbIncrement.cpp(1045):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  nb/NbIncrement.cpp(1234):          auto type = MemoryType(id);
  nb/NbIncrement.cpp(1251):       auto type = MemoryType(memtype);
  nb/NbIncrement.cpp(1283):          auto type = MemoryType(m);
  nb/NbIncrement.cpp(1294):          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
  nb/NbIncrement.cpp(1304):          auto type = MemoryType(memtype);
  nb/NbIncrement.cpp(1670):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  nb/NbIncrement.cpp(3305):       auto heap = Memory::AccessHeap(MemoryType(m));
  nb/NbTracer.cpp(228):             stream << Faction(f) << CRLF;
  nb/ObjectPool.h(98):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  nb/TraceBuffer.cpp(593):    stream << indent << "buffsize : " << int(std::log2(size_));
  nt/NtIncrement.cpp(3180):    auto test = RecoveryThread::Test(index);
  nw/SysIpL2Addr.cpp(64):    byte = uint8_t(value);
  nw/SysIpL2Addr.cpp(101):    quartet = uint16_t(value);
  nw/SysIpL3Addr.cpp(64):    port = ipport_t(value);
  pb/PotsFeature.h(72):    Id Fid() const { return Id(fid_.GetId()); }
  sb/Factory.cpp(245):       if(icSignals_[i]) stream << int(i) << SPACE;
  sb/Factory.cpp(253):       if(ogSignals_[i]) stream << int(i) << SPACE;
  sb/Factory.h(90):    Id Fid() const { return Id(fid_.GetId()); }
  sb/InvokerPool.h(72):       { return NodeBase::Faction(faction_.GetId()); }
  sb/InvokerPoolRegistry.cpp(89):       auto p = reg->Pool(Faction(id));
  sb/Parameter.h(85):    Id Pid() const { return Id(pid_.GetId()); }
  sb/SbIncrement.cpp(724):       auto pool = reg->Pool(Faction(sf));
  sb/SbTrace.cpp(103):    width -= col_t(label.size());
  sb/SbTrace.cpp(193):          stream << strClass(reg->Services().At(ServiceId(cid_)), false);
  sb/SbTrace.cpp(198):          stream << strClass(reg->Factories().At(FactoryId(cid_)), false);
  sb/Service.h(66):    Id Sid() const { return Id(sid_.GetId()); }
  sb/Signal.h(81):    Id Sid() const { return Id(sid_.GetId()); }
  sb/State.h(60):    Id Stid() const { return Id(stid_.GetId()); }
W006 reinterpret_cast
  an/PotsShelfHandler.cpp(68):    auto pptr = reinterpret_cast<TlvParm*>(sbuff->PayloadPtr());
  an/PotsShelfHandler.cpp(69):    auto phi = reinterpret_cast<PotsHeaderInfo*>(pptr->bytes);
  an/PotsTrafficThread.cpp(483):    auto fake = reinterpret_cast<const TrafficCall*>(&local);
  cb/BcAddress.cpp(90):    reinterpret_cast<const DigitString*>(bytes)->Display(stream, prefix);
  cb/BcCause.cpp(112):    reinterpret_cast<const CauseInfo*>(bytes)->Display(stream, prefix);
  cb/BcProgress.cpp(98):    reinterpret_cast<const ProgressInfo*>(bytes)->Display(stream, prefix);
  cb/BcProtocol.cpp(452):    reinterpret_cast<const RouteResult*>(bytes)->Display(stream, prefix);
  dip/BaseBot.cpp(214):    auto em = reinterpret_cast<EM_Message*>(buff->PayloadPtr());
  dip/BaseBot.cpp(513):    const auto& dm = reinterpret_cast<const DM_Message&>(message);
  dip/BaseBot.cpp(514):    auto tokens = reinterpret_cast<const Token*>(&dm.tokens);
  dip/BaseBot.cpp(640):    const auto& em = reinterpret_cast<const EM_Message&>(message);
  dip/BaseBot.cpp(1293):       const auto& rm = reinterpret_cast<const RM_Message&>(message);
  dip/BaseBot.cpp(2082):    auto bm = reinterpret_cast<DipMessage*>(buff->PayloadPtr());
  dip/BaseBot.cpp(2154):    auto im = reinterpret_cast<IM_Message*>(buff->PayloadPtr());
  dip/BaseBot.cpp(2295):    auto dm = reinterpret_cast<DM_Message*>(buff->PayloadPtr());
  dip/BaseBot.cpp(2299):    message.get_tokens(reinterpret_cast<Token*>(&dm->tokens), count);
  dip/BotThread.cpp(187):    auto msg = reinterpret_cast<BM_Message*>(buff->PayloadPtr());
  dip/BotThread.cpp(216):    auto message = reinterpret_cast<const DipMessage*>(ipb->HeaderPtr());
  dip/BotTrace.cpp(100):       auto message = reinterpret_cast<const DipMessage*>(buff_->HeaderPtr());
  dip/BotTrace.cpp(129):    return reinterpret_cast<DipHeader*>(buff_->HeaderPtr());
  dip/DipProtocol.cpp(62):       reinterpret_cast<const IM_Message*>(this)->Display(stream);
  dip/DipProtocol.cpp(65):       reinterpret_cast<const RM_Message*>(this)->Display(stream);
  dip/DipProtocol.cpp(68):       reinterpret_cast<const DM_Message*>(this)->Display(stream);
  dip/DipProtocol.cpp(71):       reinterpret_cast<const FM_Message*>(this)->Display(stream);
  dip/DipProtocol.cpp(74):       reinterpret_cast<const EM_Message*>(this)->Display(stream);
  dip/DipProtocol.cpp(77):       reinterpret_cast<const BM_Message*>(this)->Display(stream);
  dip/DipProtocol.cpp(198):       auto header = reinterpret_cast<const DipHeader*>(source);
  dip/DipProtocol.cpp(208):       auto header = reinterpret_cast<const DipHeader*>(payload);
  dip/DipProtocol.cpp(227):    auto msg = reinterpret_cast<DipHeader*>(buff.PayloadPtr());
  dip/DipProtocol.cpp(233):       auto im = reinterpret_cast<IM_Message*>(src);
  dip/DipProtocol.cpp(241):       auto dm = reinterpret_cast<DM_Message*>(src);
  dip/DipProtocol.cpp(252):       auto em = reinterpret_cast<EM_Message*>(src);
  dip/DipProtocol.cpp(279):    auto msg = reinterpret_cast<DipHeader*>(buff.PayloadPtr());
  dip/DipProtocol.cpp(288):       auto rm = reinterpret_cast<RM_Message*>(msg);
  dip/DipProtocol.cpp(299):       auto dm = reinterpret_cast<DM_Message*>(msg);
  dip/DipProtocol.cpp(310):       auto em = reinterpret_cast<EM_Message*>(msg);
  dip/DipProtocol.cpp(331):    auto header = reinterpret_cast<const DipHeader*>(payload);
  dip/DipProtocol.cpp(356):    auto msg = reinterpret_cast<BM_Message*>(buff->PayloadPtr());
  mb/Circuit.cpp(58):    auto fake = reinterpret_cast<const Circuit*>(&local);
  mb/MediaParameter.cpp(97):    reinterpret_cast<const MediaInfo*>(bytes)->Display(stream, prefix);
  mb/MediaPsm.cpp(529):       auto cxi = reinterpret_cast<MediaInfo*>(pptr->bytes);
  mb/Tones.cpp(61):    auto fake = reinterpret_cast<const Tone*>(&local);
  nb/Alarm.cpp(118):    auto fake = reinterpret_cast<const Alarm*>(&local);
  nb/Base.cpp(95):    auto obj = reinterpret_cast<ObjectStruct*>(this);
  nb/Base.cpp(158):    auto obj = reinterpret_cast<const ObjectStruct*>(this);
  nb/CfgParm.cpp(135):    auto fake = reinterpret_cast<const CfgParm*>(&local);
  nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast<const CfgTuple*>(&local);
  nb/Class.cpp(93):    auto fake = reinterpret_cast<const Class*>(&local);
  nb/CliCommandSet.cpp(73):    auto& commands = reinterpret_cast<Registry<CliCommand>& >(Parms());
  nb/CliCommandSet.cpp(174):       reinterpret_cast<const Registry<CliCommand>& >(Parms());
  nb/CliIncrement.cpp(102):    auto fake = reinterpret_cast<const CliIncrement*>(&local);
  nb/CliParm.cpp(113):    auto fake = reinterpret_cast<const CliParm*>(&local);
  nb/Daemon.cpp(75):    auto fake = reinterpret_cast<const Daemon*>(&local);
  nb/Deferred.cpp(99):    auto fake = reinterpret_cast<const Deferred*>(&local);
  nb/Log.cpp(204):    auto fake = reinterpret_cast<const Log*>(&local);
  nb/LogBuffer.cpp(122):    SetNext(reinterpret_cast<Entry*>(buff_));
  nb/LogBuffer.cpp(340):       where = reinterpret_cast<Entry*>(buff_);
  nb/LogBuffer.cpp(348):    SetNext(reinterpret_cast<Entry*>(after));
  nb/LogBuffer.cpp(385):          SetNext(reinterpret_cast<Entry*>(buff_));
  nb/LogGroup.cpp(123):    auto fake = reinterpret_cast<const LogGroup*>(&local);
  nb/Module.cpp(65):    auto fake = reinterpret_cast<const Module*>(&local);
  nb/Mutex.cpp(143):    auto fake = reinterpret_cast<const Mutex*>(&local);
  nb/Object.cpp(114):    auto obj = reinterpret_cast<ObjectStruct*>(this);
  nb/ObjectPool.cpp(557):    auto fake = reinterpret_cast<const ObjectPool*>(&local);
  nb/Pooled.cpp(115):    auto fake = reinterpret_cast<const Pooled*>(&local);
  nb/PosixSignal.cpp(71):    auto fake = reinterpret_cast<const PosixSignal*>(&local);
  nb/Statistics.cpp(89):    auto fake = reinterpret_cast<const Statistic*>(&local);
  nb/StatisticsGroup.cpp(87):    auto fake = reinterpret_cast<const StatisticsGroup*>(&local);
  nb/Symbol.cpp(96):    auto fake = reinterpret_cast<const Symbol*>(&local);
  nb/SysTypes.cpp(40):    auto bytes = reinterpret_cast<uint8_t*>(&value);
  nb/Thread.cpp(1260):    auto p = reinterpret_cast<char*>(BAD_POINTER);
  nb/Tool.cpp(67):    auto fake = reinterpret_cast<const Tool*>(&local);
  nt/FunctionStats.cpp(78):    auto fake = reinterpret_cast<const FunctionStats*>(&local);
  nt/NtIncrement.cpp(1603):    auto fake = reinterpret_cast<const Q1WayItem*>(&local);
  nt/NtIncrement.cpp(2097):    auto fake = reinterpret_cast<const Q2WayItem*>(&local);
  nt/NtIncrement.cpp(2608):    auto fake = reinterpret_cast<const RegistryItem*>(&local);
  nw/IpPort.cpp(307):    auto fake = reinterpret_cast<const IpPort*>(&local);
  nw/IpService.cpp(72):    auto fake = reinterpret_cast<const IpService*>(&local);
  nw/LocalAddrTest.cpp(243):       auto payload = reinterpret_cast<SysIpL3Addr*>(buff->PayloadPtr());
  nw/SysTcpSocket.win.cpp(311):    auto rcvd = recv(Socket(), reinterpret_cast<char*>(buff), size, 0);
  nw/SysTcpSocket.win.cpp(382):    auto sent = send(Socket(), reinterpret_cast<const char*>(data), size, 0);
  nw/SysUdpSocket.win.cpp(109):       reinterpret_cast<char*>(buff), size, 0, peer, &peersize);
  nw/SysUdpSocket.win.cpp(198):       reinterpret_cast<const char*>(data), size, 0, peer, peersize);
  pb/PotsFeature.cpp(84):    auto fake = reinterpret_cast<const PotsFeature*>(&local);
  pb/PotsFeatureProfile.cpp(94):    auto fake = reinterpret_cast<const PotsFeatureProfile*>(&local);
  pb/PotsProfile.cpp(84):    auto fake = reinterpret_cast<const PotsProfile*>(&local);
  pb/PotsProtocol.cpp(454):    reinterpret_cast<const PotsFacilityInfo*>(bytes)->Display(stream, prefix);
  pb/PotsProtocol.cpp(636):    reinterpret_cast<const PotsHeaderInfo*>(bytes)->Display(stream, prefix);
  pb/PotsProtocol.cpp(749):    reinterpret_cast<const PotsRingInfo*>(bytes)->Display(stream, prefix);
  pb/PotsProtocol.cpp(831):    reinterpret_cast<const PotsScanInfo*>(bytes)->Display(stream, prefix);
  sb/Context.cpp(571):    auto fake = reinterpret_cast<const Context*>(&local);
  sb/Context.cpp(860):             auto toi = reinterpret_cast<TimeoutInfo*>(pptr->bytes);
  sb/Factory.cpp(202):    auto fake = reinterpret_cast<const Factory*>(&local);
  sb/Initiator.cpp(218):    auto fake = reinterpret_cast<const Initiator*>(&local);
  sb/InvokerPool.cpp(283):    auto fake = reinterpret_cast<const InvokerPool*>(&local);
  sb/InvokerThread.cpp(130):    auto fake = reinterpret_cast<const InvokerThread*>(&local);
  sb/Parameter.cpp(109):    auto fake = reinterpret_cast<const Parameter*>(&local);
  sb/Protocol.cpp(90):    auto fake = reinterpret_cast<const Protocol*>(&local);
  sb/SbInputHandler.cpp(75):    auto header = reinterpret_cast<const MsgHeader*>(source);
  sb/SbIpBuffer.h(62):       { return reinterpret_cast<MsgHeader*>(HeaderPtr()); }
  sb/Service.cpp(285):    auto fake = reinterpret_cast<const Service*>(&local);
  sb/Signal.cpp(82):    auto fake = reinterpret_cast<const Signal*>(&local);
  sb/State.cpp(198):    auto fake = reinterpret_cast<const State*>(&local);
  sb/Timer.cpp(188):    auto fake = reinterpret_cast<const Timer*>(&local);
  sb/TimerProtocol.cpp(106):    auto toi = reinterpret_cast<const TimeoutInfo*>(bytes);
  sb/TlvMessage.cpp(64):    auto encap = reinterpret_cast<const TlvMsgLayout*>(parm.bytes);
  sb/TlvMessage.cpp(459):    auto encap = reinterpret_cast<TlvMsgLayout*>(pptr->bytes);
  sb/TlvMessage.h(79):       return reinterpret_cast<T*>(pptr->bytes);
  sb/TlvMessage.h(93):       auto dest = reinterpret_cast<T*>(pptr->bytes);
  sb/TlvMessage.h(128):       parm = (pptr == nullptr ? nullptr : reinterpret_cast<T*>(pptr->bytes));
  sb/TlvMessage.h(281):       { return reinterpret_cast<TlvMsgLayout*>(Buffer()->HeaderPtr()); }
  sb/TlvProtocol.cpp(67):       auto pptr = reinterpret_cast<TlvParm*>(&bytes[index]);
  sn/PotsCallHandler.cpp(89):    auto pptr = reinterpret_cast<TlvParm*>(sbuff->PayloadPtr());
  sn/PotsCallHandler.cpp(90):    auto phi = reinterpret_cast<PotsHeaderInfo*>(pptr->bytes);
  sn/PotsCwmService.cpp(1381):          auto ring = reinterpret_cast<PotsRingInfo*>(pptr->bytes);
  sn/PotsTreatments.cpp(79):    auto fake = reinterpret_cast<const PotsTreatmentQueue*>(&local);
  sn/PotsTreatments.cpp(188):    auto fake = reinterpret_cast<const PotsTreatment*>(&local);
  st/MscAddress.cpp(85):    auto fake = reinterpret_cast<const MscAddress*>(&local);
  st/MscContext.cpp(92):    auto fake = reinterpret_cast<const MscContext*>(&local);
  st/MscContextPair.cpp(87):    auto fake = reinterpret_cast<const MscContextPair*>(&local);
W007 Cast down the inheritance hierarchy
  an/PotsShelfFactory.cpp(124):    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
  an/PotsShelfFactory.cpp(137):    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
  an/PotsShelfFactory.cpp(157):    auto& pmsg = static_cast<Pots_NU_Message&>(msg);
  an/PotsShelfFactory.cpp(167):    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
  an/PotsShelfHandler.cpp(66):    auto sbuff = static_cast<SbIpBuffer*>(buff.get());
  cb/BcAddress.cpp(107):    auto& tlvmsg = static_cast<TlvMessage&>(msg);
  cb/BcAddress.cpp(155):    const auto& tlvmsg = static_cast<const TlvMessage&>(msg);
  cb/BcHandlers.cpp(41):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(43):    auto& bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(65):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(66):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(120):    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(121):    auto       msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(161):    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(162):    auto       msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(191):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(192):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast<BcSsm&>(ssm);
  cb/BcProtocol.cpp(465):    auto&       tlvmsg = static_cast<TlvMessage&>(msg);
  cb/BcProtocol.cpp(493):    const auto&  tlvmsg = static_cast<const TlvMessage&>(msg);
  cb/BcProtocol.cpp(760):       if(m->GetSignal() == sid) return static_cast<CipMessage*>(m);
  cb/BcProtocol.cpp(790):    auto&         tmsg = static_cast<TlvMessage&>(msg);
  cb/BcProtocol.cpp(920):    auto&         tmsg = static_cast<TlvMessage&>(msg);
  cb/BcProtocol.cpp(1258):    const auto& tmsg = static_cast<const CipMessage&>(msg);
  cb/BcProtocol.cpp(1263):    auto fac = static_cast<SsmFactory*>(reg->Factories().At(rte->selector));
  cb/BcSsm.cpp(385):    auto& rre = static_cast<BcRemoteReleaseEvent&>(currEvent);
  cb/BcSsm.cpp(826):       auto fac = static_cast<BcFactory*>(reg->Factories().At(route_.selector));
  cb/ProxyBcSessions.cpp(360):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/ProxyBcSessions.cpp(361):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  cb/ProxyBcSessions.cpp(363):    auto&         pssm = static_cast<ProxyBcSsm&>(ssm);
  cb/ProxyBcSessions.cpp(392):    auto& ppe = static_cast<ProxyBcProgressEvent&>(currEvent);
  cb/ProxyBcSessions.cpp(401):       auto& pssm = static_cast<ProxyBcSsm&>(ssm);
  cb/ProxyBcSessions.cpp(427):    auto& pssm = static_cast<ProxyBcSsm&>(ssm);
  cb/ProxyBcSessions.cpp(428):    auto ppsm = static_cast<ProxyBcPsm*>(Context::ContextPsm());
  cb/ProxyBcSessions.cpp(532):    auto pssm = static_cast<ProxyBcSsm*>(RootSsm());
  cb/ProxyBcSessions.cpp(673):          return static_cast<ProxyBcPsm*>(p);
  cb/ProxyBcSessions.cpp(705):          ppsm = static_cast<ProxyBcPsm*>(psm);
  cb/ProxyBcSessions.cpp(910):    const auto& tmsg = static_cast<const CipMessage&>(msg);
  cb/ProxyBcSessions.cpp(915):    auto fac = static_cast<SsmFactory*>(reg->Factories().At(rte->selector));
  ct/CodeDir.cpp(69):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeDir.cpp(126):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeDir.cpp(143):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeDirSet.cpp(94):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeDirSet.cpp(121):       auto dir = static_cast<CodeDir*>(*d);
  ct/CodeDirSet.cpp(130):       auto dir = static_cast<CodeDir*>(*d);
  ct/CodeFile.cpp(87):          auto base = static_cast<const Class*>(*b);
  ct/CodeFile.cpp(243):       auto base = static_cast<const Class*>(*b);
  ct/CodeFile.cpp(305):                auto type = static_cast<const Typedef*>(*item2);
  ct/CodeFile.cpp(328):          auto type = static_cast<const Typedef*>(*item1);
  ct/CodeFile.cpp(1088):       auto f = static_cast<const CodeFile*>(*i);
  ct/CodeFile.cpp(1096):       auto f = static_cast<const CodeFile*>(*u);
  ct/CodeFile.cpp(1173):       static_cast<const CodeFile*>(*f)->GetLineCounts();
  ct/CodeFile.cpp(1509):       auto file = static_cast<const CodeFile*>(*f);
  ct/CodeFile.cpp(1711):          auto file = static_cast<const CodeFile*>(*d);
  ct/CodeFile.cpp(2130):       auto file = static_cast<const CodeFile*>(*f);
  ct/CodeFile.cpp(2294):       const auto& name = static_cast<const CodeFile*>(*f)->Name();
  ct/CodeFile.cpp(2452):                auto incl = static_cast<const CodeFile*>(*a);
  ct/CodeFile.cpp(2560):          auto file = static_cast<const CodeFile*>(*d);
  ct/CodeFile.cpp(2589):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFile.cpp(2620):       auto base = static_cast<const Class*>(*b);
  ct/CodeFileSet.cpp(80):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(193):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(252):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(277):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(308):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(334):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(362):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(405):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(459):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(485):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(511):    const auto& dirSet = static_cast<const CodeDirSet*>(that)->Items();
  ct/CodeFileSet.cpp(518):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(558):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(583):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(620):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(774):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(802):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(911):       files.push_back(static_cast<CodeFile*>(*f));
  ct/CodeFileSet.cpp(938):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(1018):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(1045):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeFileSet.cpp(1075):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeItemSet.cpp(122):       auto item = static_cast<CxxNamed*>(*i);
  ct/CodeItemSet.cpp(148):       auto item = static_cast<CxxNamed*>(*i);
  ct/CodeItemSet.cpp(176):       auto item = static_cast<CxxNamed*>(*i);
  ct/CodeItemSet.cpp(198):       auto item = static_cast<CxxNamed*>(*i);
  ct/CodeItemSet.cpp(217):       auto item = static_cast<CxxScoped*>(*i);
  ct/CodeItemSet.cpp(238):       auto item = static_cast<CxxScoped*>(*i);
  ct/CodeItemSet.cpp(260):       auto item = static_cast<CxxNamed*>(*i);
  ct/CodeWarning.cpp(203):       auto file = static_cast<CodeFile*>(*f);
  ct/CodeWarning.cpp(996):       if(static_cast<const Data*>(item_)->CannotBeConst()) return true;
  ct/CodeWarning.cpp(1029):       auto name = static_cast<const Friend*>(item_)->ScopedName(true);
  ct/CodeWarning.cpp(1051):       auto data = static_cast<const Data*>(item_);
  ct/CodeWarning.cpp(1093):       auto func = static_cast<Function*>(item_);
  ct/CodeWarning.cpp(1174):       auto cls = static_cast<const Class*>(item_);
  ct/CodeWarning.cpp(1198):       auto cls = static_cast<const Class*>(item_);
  ct/CodeWarning.cpp(1233):          auto func = static_cast<const Function*>(item_);
  ct/CtIncrement.cpp(1137):          auto dir = static_cast<CodeDir*>(*d);
  ct/CtIncrement.cpp(1160):          auto file = static_cast<CodeFile*>(*f);
  ct/CxxArea.cpp(108):       auto cls = static_cast<Class*>(call->Via()->Root());
  ct/CxxArea.cpp(281):          static_cast<const Function*>(item)->IsInline())
  ct/CxxArea.cpp(1249):       return static_cast<ClassInst*>(list.front());
  ct/CxxArea.cpp(1259):    auto area = static_cast<CxxArea*>(GetScope());
  ct/CxxArea.cpp(1270):          auto c = static_cast<Class*>(*s);
  ct/CxxArea.cpp(2688):       auto func = static_cast<const Function*>(item);
  ct/CxxArea.cpp(2731):       auto func = static_cast<const Function*>(item);
  ct/CxxArea.cpp(2740):       return tmplt_->FindFriend(static_cast<const CxxScope*>(ref));
  ct/CxxArea.h(993):    Namespace* OuterSpace() const { return static_cast<Namespace*>(GetScope()); }
  ct/CxxDirective.cpp(1035):       auto macro = static_cast<Macro*>(ref_);
  ct/CxxDirective.cpp(1048):       auto macro = static_cast<Macro*>(ref_);
  ct/CxxExecute.cpp(1735):          auto derived = static_cast<const Class*>(root);
  ct/CxxExecute.cpp(1846):       auto thisClass = static_cast<Class*>(thisRoot);
  ct/CxxExecute.cpp(1854):             auto thatClass = static_cast<Class*>(thatRoot);
  ct/CxxExecute.cpp(2015):    if(AutoType_.SetAutoTypeOn(*static_cast<FuncData*>(item_)))
  ct/CxxExecute.cpp(2069):       auto type = static_cast<TypeSpec*>(item_);
  ct/CxxExecute.cpp(2079):       spec->SetReferent(static_cast<CxxScoped*>(item_), nullptr);
  ct/CxxExecute.cpp(2294):          static_cast<Class*>(root)->BlockCopied(this);
  ct/CxxNamed.cpp(100):             static_cast<Function*>(tfunc)->SetTemplateParm();
  ct/CxxNamed.cpp(474):          space = static_cast<Namespace*>(item);
  ct/CxxNamed.cpp(498):          cls = static_cast<Class*>(item);
  ct/CxxNamed.cpp(552):          item = static_cast<Enum*>(item)->FindEnumerator(name);
  ct/CxxNamed.cpp(563):          auto tdef = static_cast<Typedef*>(item);
  ct/CxxNamed.cpp(568):          item = static_cast<CxxScoped*>(root);
  ct/CxxNamed.cpp(855):    return static_cast<Class*>(root);
  ct/CxxNamed.cpp(1301):    return (static_cast<Class*>(root)->FindCtor(nullptr) == nullptr);
  ct/CxxNamed.cpp(2195):    auto cls = (type == Cxx::Class ? static_cast<Class*>(inner) : nullptr);
  ct/CxxNamed.cpp(2431):       auto func = static_cast<Function*>(ref);
  ct/CxxNamed.cpp(2876):       TypeSpecPtr spec(static_cast<TypeSpec*>(spec_->Clone()));
  ct/CxxNamed.cpp(2881):       ExprPtr expr(static_cast<Expression*>(expr_->Clone()));
  ct/CxxNamed.cpp(3378):          TemplateArgPtr arg(static_cast<TemplateArg*>((*a)->Clone()));
  ct/CxxNamed.cpp(3696):          auto e = static_cast<const Enum*>(item);
  ct/CxxScope.cpp(110):             auto farg = static_cast<Function*>(a->item_);
  ct/CxxScope.cpp(956):       auto cls = static_cast<const Class*>(scope);
  ct/CxxScope.cpp(1746):          auto op = static_cast<Operation*>(expr);
  ct/CxxScope.cpp(1887):    auto item = static_cast<Data*>(FindTemplateAnalog(this));
  ct/CxxScope.cpp(1901):    auto item = static_cast<Data*>(FindTemplateAnalog(this));
  ct/CxxScope.cpp(1942):    auto item = static_cast<Data*>(FindTemplateAnalog(this));
  ct/CxxScope.cpp(1957):    auto item = static_cast<Data*>(FindTemplateAnalog(this));
  ct/CxxScope.cpp(2041):          static_cast<Block*>(GetScope())->DeleteItem(this);
  ct/CxxScope.cpp(2058):          static_cast<Block*>(GetScope())->ReplaceItem(this, next_.release());
  ct/CxxScope.cpp(3725):    else if(!static_cast<Function*>(item)->virtual_)
  ct/CxxScope.cpp(4503):       func = static_cast<Function*>(inst->FindTemplateAnalog(this));
  ct/CxxScope.cpp(4516):       auto i = FindArg(static_cast<const Argument*>(item), false);
  ct/CxxScope.cpp(4563):    return static_cast<Function*>((*cti)->FindInstanceAnalog(this));
  ct/CxxScope.cpp(5271):    auto that = static_cast<const Argument*>(FindTemplateAnalog(arg));
  ct/CxxScope.cpp(5726):    auto func = static_cast<Function*>(FindTemplateAnalog(this));
  ct/CxxScope.cpp(5738):    auto func = static_cast<Function*>(FindTemplateAnalog(this));
  ct/CxxScope.cpp(5957):                auto item = static_cast<CxxNamed*>(args.front().item_);
  ct/CxxScope.cpp(6146):       auto func = static_cast<Function*>(cls->FindTemplateAnalog(this));
  ct/CxxScoped.cpp(93):          auto func = static_cast<Function*>(GetScope());
  ct/CxxScoped.cpp(200):       const auto& fname = static_cast<Function*>(GetScope())->Name();
  ct/CxxScoped.cpp(216):    auto cls = static_cast<Class*>(ref);
  ct/CxxScoped.cpp(240):    auto func = static_cast<Function*>(GetScope());
  ct/CxxScoped.cpp(304):       auto item = static_cast<Argument*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(343):    auto item = static_cast<Argument*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(355):    auto item = static_cast<Argument*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(391):    GetClass()->EraseSubclass(static_cast<Class*>(GetScope()));
  ct/CxxScoped.cpp(421):    GetClass()->AddSubclass(static_cast<Class*>(Context::Scope()));
  ct/CxxScoped.cpp(455):    return static_cast<Class*>(name_->GetReferent());
  ct/CxxScoped.cpp(1181):          ref = static_cast<const Function*>(ref)->FindRootFunc();
  ct/CxxScoped.cpp(1532):    auto item = static_cast<Enum*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(1801):    auto item = static_cast<Enumerator*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(1837):    auto item = static_cast<Enumerator*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(2031):    auto item = static_cast<Forward*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(2153):    static_cast<Class*>(grantor_)->DeleteFriend(this);
  ct/CxxScoped.cpp(2251):          space = static_cast<Namespace*>(item);
  ct/CxxScoped.cpp(2264):          cls = static_cast<Class*>(item);
  ct/CxxScoped.cpp(2303):          auto tdef = static_cast<Typedef*>(item);
  ct/CxxScoped.cpp(2308):          item = static_cast<CxxScoped*>(root);
  ct/CxxScoped.cpp(2497):    auto item = static_cast<Friend*>(grantor_->FindTemplateAnalog(this));
  ct/CxxScoped.cpp(2642):       static_cast<CxxArea*>(scope)->AddFunc(func);
  ct/CxxScoped.cpp(2765):    auto func = static_cast<Function*>(GetScope());
  ct/CxxScoped.cpp(2858):    ref_ = static_cast<ClassData*>(cls->FindData(name_));
  ct/CxxScoped.cpp(3587):    auto item = static_cast<Typedef*>(FindTemplateAnalog(this));
  ct/CxxScoped.cpp(3777):          auto item = static_cast<Using*>(FindTemplateAnalog(this));
  ct/CxxStatement.cpp(371):    static_cast<Block*>(GetScope())->DeleteItem(this);
  ct/CxxStatement.cpp(1156):             static_cast<Class*>(result.item_)->InvokeCopyCtor();
  ct/CxxSymbols.cpp(273):                if(static_cast<const Function*>(list[idx])->IsStatic())
  ct/CxxSymbols.cpp(582):    return static_cast<Macro*>(macros.front());
  ct/CxxSymbols.cpp(619):       if((*s)->ScopedName(false) == name) return static_cast<CxxScope*>(*s);
  ct/CxxSymbols.cpp(627):       if((*c)->ScopedName(false) == name) return static_cast<CxxScope*>(*c);
  ct/CxxSymbols.cpp(635):       if(pos != string::npos) return static_cast<CxxScope*>(*s);
  ct/CxxSymbols.cpp(641):       if(pos != string::npos) return static_cast<CxxScope*>(*c);
  ct/CxxToken.cpp(948):    auto oper = static_cast<Operation*>(item.get());
  ct/CxxToken.cpp(974):          auto ante = static_cast<Operation*>(prev.get());
  ct/CxxToken.cpp(1033):       auto oper = static_cast<Operation*>(item.get());
  ct/CxxToken.cpp(1066):    auto oper = static_cast<Operation*>(prev.get());
  ct/CxxToken.cpp(1093):    auto oper = static_cast<Operation*>(item.get());
  ct/CxxToken.cpp(1151):    auto oper = static_cast<Operation*>(item.get());
  ct/CxxToken.cpp(1174):       auto ante = static_cast<Operation*>(prev.get());
  ct/CxxToken.cpp(1335):    Context::PushOp(static_cast<Operation*>(StartOfExpr.get()));
  ct/CxxToken.cpp(1883):       inClass = static_cast<Class*>(inRoot);
  ct/CxxToken.cpp(1888):       outClass = static_cast<Class*>(outRoot);
  ct/CxxToken.cpp(1944):    auto call = static_cast<Operation*>(args_.front().get());
  ct/CxxToken.cpp(2343):       func = static_cast<Function*>(proc.item_);
  ct/CxxToken.cpp(2358):       auto cls = static_cast<Class*>(proc.item_);
  ct/CxxToken.cpp(2401):       auto data = static_cast<Data*>(proc.item_);
  ct/CxxToken.cpp(2405):          func = static_cast<Function*>(root);
  ct/CxxToken.cpp(2479):    auto cls = static_cast<Class*>(arg.item_->Root());
  ct/CxxToken.cpp(2517):       auto newCall = static_cast<Operation*>(args_.front().get());
  ct/CxxToken.cpp(2538):    auto cls = static_cast<Class*>(spec.item_->Root());
  ct/CxxToken.cpp(2559):       auto ctorCall = static_cast<Operation*>(args_[2].get());
  ct/CxxToken.cpp(2583):       cls = static_cast<Class*>(root);
  ct/CxxToken.cpp(2782):       area = static_cast<Class*>(targ);
  ct/CxxToken.cpp(3153):    auto cls = static_cast<Class*>(root);
  ct/CxxToken.cpp(3220):          mem = static_cast<Function*>(mem)->InstantiateFunction(tmplt);
  ct/Editor.cpp(246):       auto func = static_cast<const Function*>(item);
  ct/Editor.cpp(686):    return static_cast<Namespace*>(scope);
  ct/Editor.cpp(728):    auto defn = static_cast<Data*>(data->GetMate());
  ct/Editor.cpp(815):    auto defn = static_cast<Function*>(func->GetMate());
  ct/Editor.cpp(843):    auto func = static_cast<const Function*>(item);
  ct/Editor.cpp(1136):    auto oper = static_cast<const Operation*>(log.item_);
  ct/Editor.cpp(1450):    static_cast<Class*>(log.item_)->SetClassTag(Cxx::StructType);
  ct/Editor.cpp(1499):          static_cast<Forward*>(*f)->SetClassTag(to);
  ct/Editor.cpp(1541):    auto decl = static_cast<CxxScope*>(log.item_);
  ct/Editor.cpp(1677):    auto item = static_cast<CxxScope*>(ParseFileItem(pos, space));
  ct/Editor.cpp(1692):          auto tname = static_cast<const TypeName*>(*r);
  ct/Editor.cpp(1709):       UpdateDebugFt(static_cast<Function*>(item));
  ct/Editor.cpp(1745):    auto func = static_cast<const Function*>(log.item_);
  ct/Editor.cpp(1815):    static_cast<Class*>(log.item_)->SetClassTag(Cxx::ClassType);
  ct/Editor.cpp(2074):    auto decl = static_cast<Function*>(log.item_);
  ct/Editor.cpp(2479):    static_cast<Function*>(log.item_)->SetExplicit(false);
  ct/Editor.cpp(2575):    static_cast<ClassData*>(log.item_)->SetMutable(false);
  ct/Editor.cpp(2611):    static_cast<Function*>(log.item_)->SetOverride(false);
  ct/Editor.cpp(2632):    auto qname = static_cast<const QualName*>(log.item_);
  ct/Editor.cpp(2696):    static_cast<Function*>(log.item_)->SetVirtual(false);
  ct/Editor.cpp(2766):       usages.directs.erase(static_cast<CxxNamed*>(*i));
  ct/Editor.cpp(2767):       usages.indirects.erase(static_cast<CxxNamed*>(*i));
  ct/Editor.cpp(2855):          auto data = static_cast<const Data*>(*i);
  ct/Editor.cpp(2869):             auto func = static_cast<const Function*>(*i);
  ct/Editor.cpp(2883):             auto data = static_cast<const Data*>(*i);
  ct/Editor.cpp(3033):    return FindSigEnd(static_cast<const Function*>(log.item_));
  ct/Editor.cpp(3354):    auto data = static_cast<Data*>(log.item_);
  ct/Editor.cpp(3421):    auto func = static_cast<Function*>(log.item_);
  ct/Editor.cpp(3523):    auto data = static_cast<Data*>(log.item_);
  ct/Editor.cpp(4145):    auto data = static_cast<Data*>(aref);
  ct/Editor.cpp(4152):    ReplaceImpl(static_cast<Function*>(log.item_));
  ct/Editor.cpp(4303):    auto func = static_cast<Function*>(log.item_);
  ct/Editor.cpp(4654):    auto cls = static_cast<Class*>(log.item_);
  ct/Editor.cpp(4955):    auto cls = static_cast<Class*>(item);
  ct/Editor.cpp(5385):       ns = static_cast<Namespace*>(ref)->OuterSpace();
  ct/Editor.cpp(5461):    auto func = static_cast<const Function*>(log.item_);
  ct/Editor.cpp(5542):    auto func = static_cast<const Function*>(log.item_);
  ct/Editor.cpp(5552):       auto slit = static_cast<StrLiteral*>(arg);
  ct/Editor.cpp(5566):    auto data = static_cast<SpaceData*>(arg->Referent());
  ct/Editor.cpp(5573):    auto slit = static_cast<StrLiteral*>(file_->PosToItem(lpos));
  ct/Editor.cpp(5600):    static_cast<Ifndef*>(log.item_)->ChangeName(guard);
  ct/Editor.cpp(5665):    auto type = static_cast<TypeName*>(log.item_);
  ct/Editor.cpp(6232):    static_cast<Function*>(log.item_)->SetExplicit(true);
  ct/Editor.cpp(6280):    static_cast<Function*>(log.item_)->SetOverride(true);
  ct/Editor.cpp(6384):    static_cast<Function*>(log.item_)->SetVirtual(true);
  ct/Editor.cpp(6672):       auto items = GetItemsForDefn(static_cast<const CxxScope*>(next));
  ct/Lexer.cpp(3255):          auto def = static_cast<Define*>(item);
  ct/Library.cpp(679):             auto f = static_cast<const Function*>(elem);
  ct/Parser.cpp(455):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(491):    auto op = static_cast<Operation*>(call.get());
  ct/Parser.cpp(796):    auto brace = static_cast<BraceInit*>(token.get());
  ct/Parser.cpp(863):    auto cast = static_cast<Operation*>(token.get());
  ct/Parser.cpp(900):    auto c = static_cast<Catch*>(statement.get());
  ct/Parser.cpp(1029):    static_cast<ClassData*>(data.get())->SetMutable(mute);
  ct/Parser.cpp(1030):    static_cast<ClassData*>(data.get())->SetWidth(width);
  ct/Parser.cpp(1193):    auto cond = static_cast<Operation*>(token.get());
  ct/Parser.cpp(1466):    auto cast = static_cast<Operation*>(token.get());
  ct/Parser.cpp(1627):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(1651):    auto delOp = static_cast<Operation*>(token.get());
  ct/Parser.cpp(1677):    auto d = static_cast<Do*>(statement.get());
  ct/Parser.cpp(1875):    auto f = static_cast<For*>(statement.get());
  ct/Parser.cpp(1977):       static_cast<FuncData*>(data.get())->SetExpression(expr);
  ct/Parser.cpp(1996):          typeSpec.reset(static_cast<TypeSpec*>(prev->GetTypeSpec()->Clone()));
  ct/Parser.cpp(2029):          curr = static_cast<FuncData*>(data.get());
  ct/Parser.cpp(2306):             static_cast<If*>(first)->SetElseIf();
  ct/Parser.cpp(2312):    auto i = static_cast<If*>(statement.get());
  ct/Parser.cpp(2474):    auto inner = static_cast<Namespace*>(outer)->EnsureNamespace(name);
  ct/Parser.cpp(2516):    auto newOp = static_cast<Operation*>(token.get());
  ct/Parser.cpp(2535):    static_cast<Operation*>(token.get())->SetNew();
  ct/Parser.cpp(2587):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(3001):    static_cast<Return*>(statement.get())->AddExpr(expr);
  ct/Parser.cpp(3046):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(3321):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(3345):    auto s = static_cast<Switch*>(statement.get());
  ct/Parser.cpp(3459):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(3491):    auto t = static_cast<Try*>(statement.get());
  ct/Parser.cpp(3549):    auto op = static_cast<Operation*>(token.get());
  ct/Parser.cpp(3841):    auto w = static_cast<While*>(statement.get());
  ct/Parser.cpp(4200):          auto op = static_cast<Operation*>(token)->Op();
  dip/BotThread.cpp(203):    DipIpBufferPtr ipb(static_cast<DipIpBuffer*>(msg));
  dip/DipProtocol.cpp(274):    auto dipbuff = static_cast<DipIpBuffer*>(&buff);
  dip/DipProtocol.cpp(327):    DipIpBufferPtr dipbuff(static_cast<DipIpBuffer*>(buff.release()));
  mb/MbPools.cpp(77):          auto mep = static_cast<const MediaEndpt*>(*obj);
  mb/MediaPsm.cpp(228):    if(root->Sid() != TestServiceId) return static_cast<MediaSsm*>(root);
  mb/MediaSsm.cpp(86):       auto mpsm = static_cast<MediaPsm*>(psm);
  mb/MediaSsm.cpp(108):       auto mpsm = static_cast<MediaPsm*>(psm);
  nb/CliCommandSet.cpp(73):    auto& commands = reinterpret_cast<Registry<CliCommand>& >(Parms());
  nb/CliCommandSet.cpp(174):       reinterpret_cast<const Registry<CliCommand>& >(Parms());
  nb/CoutThread.cpp(86):       auto req = static_cast<StreamRequest*>(msg);
  nb/FileThread.cpp(211):       auto req = static_cast<FileRequest*>(msg);
  nb/FunctionTrace.cpp(572):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(586):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(604):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(629):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(675):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(793):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(815):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(832):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/FunctionTrace.cpp(904):       auto curr = static_cast<FunctionTrace*>(rec);
  nb/LogThread.cpp(85):       (static_cast<CfgIntParm*>(reg->FindParm("NoSpoolingMessageCount")));
  nb/MemoryTrace.cpp(89):       auto curr = static_cast<MemoryTrace*>(rec);
  nb/NbPools.cpp(108):          auto buff = static_cast<const MsgBuffer*>(*obj);
  nb/TraceBuffer.cpp(447):          auto ft = static_cast<FunctionTrace*>(rec);
  nb/TraceBuffer.cpp(478):          auto ft = static_cast<FunctionTrace*>(rec);
  nt/FunctionProfiler.cpp(203):             auto ft = static_cast<FunctionTrace*>(rec);
  nt/NtTestData.cpp(62):    return static_cast<NtTestData*>(data);
  nw/NwDaemons.cpp(261):       (this, static_cast<const TcpIpService*>(service), port);
  nw/NwDaemons.cpp(272):    auto daemon = static_cast<TcpIoDaemon*>(reg->FindDaemon(name.c_str()));
  nw/NwDaemons.cpp(321):       (this, static_cast<const UdpIpService*>(service), port);
  nw/NwDaemons.cpp(332):    auto daemon = static_cast<UdpIoDaemon*>(reg->FindDaemon(name.c_str()));
  nw/SysTcpSocket.win.cpp(432):    bool alive = static_cast<const TcpIpService*>(service)->Keepalive();
  nw/TcpIoThread.cpp(215):    auto registrant = static_cast<SysTcpSocket*>(ipPort_->GetSocket());
  nw/TcpIoThread.cpp(225):    auto svc = static_cast<const TcpIpService*>(ipPort_->GetService());
  nw/TcpIoThread.cpp(310):    auto registrant = static_cast<SysTcpSocket*>(ipPort_->GetSocket());
  nw/TcpIoThread.cpp(472):    auto sock = static_cast<SysTcpSocket*>(socket);
  nw/TcpIpPort.cpp(61):    auto thread = static_cast<TcpIoThread*>(GetThread());
  nw/TcpIpPort.cpp(67):       thread = static_cast<TcpIoThread*>(CreateThread());
  nw/TcpIpPort.cpp(73):    auto svc = static_cast<const TcpIpService*>(GetService());
  nw/TcpIpPort.cpp(93):    auto svc = static_cast<const TcpIpService*>(GetService());
  nw/UdpIoThread.cpp(96):    auto socket = static_cast<SysUdpSocket*>(ipPort_->GetSocket());
  nw/UdpIoThread.cpp(100):       auto svc = static_cast<const UdpIpService*>(ipPort_->GetService());
  nw/UdpIoThread.cpp(201):       auto socket = static_cast<SysUdpSocket*>(ipPort_->GetSocket());
  nw/UdpIoThread.cpp(216):       auto socket = static_cast<SysUdpSocket*>(ipPort_->GetSocket());
  nw/UdpIpPort.cpp(53):    auto svc = static_cast<const UdpIpService*>(GetService());
  pb/PotsProtocol.cpp(467):    auto&            pmsg = static_cast<PotsMessage&>(msg);
  pb/PotsProtocol.cpp(524):    const auto&       pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(648):    auto&          pmsg = static_cast<PotsMessage&>(msg);
  pb/PotsProtocol.cpp(672):    const auto&     pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(760):    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(842):    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
  sb/Context.cpp(751):                inv = static_cast<InvokerThread*>(Thread::RunningThread());
  sb/Context.cpp(856):          auto pptr = static_cast<TlvMessage*>(m)->FindParm(Parameter::Timeout);
  sb/InvokerPool.cpp(240):    invokersCfg_.reset(static_cast<CfgIntParm*>(reg->FindParm(parmKey)));
  sb/InvokerPool.cpp(566):       auto inv = static_cast<InvokerThread*>(Thread::RunningThread());
  sb/MsgContext.cpp(75):    static_cast<MsgFactory*>(fac)->ProcessIcMsg(msg);
  sb/MsgPort.cpp(75):    locAddr_.sbAddr_.fid = static_cast<ProtocolSM&>(upper).GetFactory();
  sb/MsgPort.cpp(147):    return static_cast<PsmFactory*>(fac)->AllocIcPsm(msg, *this);
  sb/MsgPort.cpp(205):    auto port = static_cast<MsgPort*>(pool->BidToObj(locAddr.bid));
  sb/MsgPort.cpp(260):       static_cast<PsmFactory*>(fac)->PortAllocated(*this, msg);
  sb/ProtocolSM.cpp(405):       auto psm = static_cast<ProtocolSM*>(layer);
  sb/RootServiceSM.cpp(47):    ctx_ = static_cast<SsmContext*>(Context::RunningContext());
  sb/SbDaemons.cpp(119):    auto daemon = static_cast<InvokerDaemon*>(reg->FindDaemon(name.c_str()));
  sb/SbHandlers.cpp(51):    auto pid = ssm.CalcPort(static_cast<const AnalyzeMsgEvent&>(currEvent));
  sb/SbHandlers.cpp(121):    auto& fte = static_cast<ForceTransitionEvent&>(currEvent);
  sb/SbHandlers.cpp(135):    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
  sb/SbInputHandler.cpp(103):    SbIpBufferPtr sbbuff(static_cast<SbIpBuffer*>(buff.release()));
  sb/SbInvokerPools.cpp(62):       (static_cast<CfgIntParm*>(reg->FindParm("NoIngressQueueLength")));
  sb/SbInvokerPools.cpp(73):       (static_cast<CfgIntParm*>(reg->FindParm("NoIngressMessageCount")));
  sb/SbPools.cpp(185):          auto ctx = static_cast<const Context*>(*obj);
  sb/SbPools.cpp(272):          auto msg = static_cast<const Message*>(*obj);
  sb/SbPools.cpp(343):       auto port = static_cast<MsgPort*>(obj);
  sb/SbPools.cpp(377):          auto port = static_cast<const MsgPort*>(*obj);
  sb/SbPools.cpp(432):    auto psm = static_cast<ProtocolSM*>(NextUsed(PsmToAudit_));
  sb/SbPools.cpp(449):       psm = static_cast<ProtocolSM*>(NextUsed(PsmToAudit_));
  sb/SbPools.cpp(488):          auto psm = static_cast<const ProtocolSM*>(*obj);
  sb/SbPools.cpp(546):          auto ssm = static_cast<const ServiceSM*>(*obj);
  sb/SbPools.cpp(661):          auto tmr = static_cast<const Timer*>(*obj);
  sb/SbTrace.cpp(403):          bt = static_cast<BuffTrace*>(rec);
  sb/SbTrace.cpp(856):       curr_ = static_cast<const AnalyzeSapEvent&>(sxp).CurrEvent()->Eid();
  sb/SbTrace.cpp(859):       curr_ = static_cast<const AnalyzeSnpEvent&>(sxp).CurrEvent()->Eid();
  sb/SbTrace.cpp(886):    mod_((static_cast<const InitiationReqEvent&>(sip)).GetModifier())
  sb/ServiceSM.cpp(474):             tid = static_cast<AnalyzeSapEvent*>(sapEvent)->GetTrigger();
  sb/ServiceSM.cpp(478):          modifierSsm = static_cast<AnalyzeSapEvent*>(sapEvent)->CurrSsm();
  sb/ServiceSM.cpp(479):          currEvent = static_cast<AnalyzeSapEvent*>(sapEvent)->CurrEvent();
  sb/ServiceSM.cpp(530):             tid = static_cast<AnalyzeSapEvent*>(sapEvent)->GetTrigger();
  sb/ServiceSM.cpp(536):          currEvent = static_cast<AnalyzeSapEvent*>(sapEvent)->CurrEvent();
  sb/ServiceSM.cpp(537):          modifierInit = static_cast<AnalyzeSapEvent*>
  sb/ServiceSM.cpp(790):             else if(static_cast<AnalyzeSapEvent*>(nextEvent)
  sb/ServiceSM.cpp(793):             else if(static_cast<AnalyzeSapEvent*>(nextEvent)
  sb/ServiceSM.cpp(891):          initEvent = static_cast<InitiationReqEvent*>(nextEvent);
  sb/ServiceSM.cpp(895):             initEvent->SetSapEvent(static_cast<AnalyzeSapEvent&>(sapEvent));
  sb/ServiceSM.cpp(957):             auto sibling = static_cast<InitiationReqEvent*>
  sb/ServiceSM.cpp(998):    auto& initEvent = static_cast<InitiationReqEvent&>(currEvent);
  sb/SsmContext.cpp(82):    return static_cast<SsmFactory*>(fac)->AllocRoot(msg, psm);
  sb/TlvIntParameter.h(69):       auto& tlvmsg = static_cast<TlvMessage&>(msg);
  sb/TlvIntParameter.h(101):       const auto& tlvmsg = static_cast<const TlvMessage&>(msg);
  sb/TlvParameter.cpp(67):    const auto& tmsg = static_cast<const TlvMessage&>(msg);
  sn/PotsBcHandlers.cpp(58):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(61):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(96):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(109):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(111):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(128):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(140):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(141):    auto& ode = static_cast<BcOriginationDeniedEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(156):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(158):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(164):       auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
  sn/PotsBcHandlers.cpp(185):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsBcHandlers.cpp(210):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(237):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(251):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(272):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(284):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(296):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(308):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(320):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(322):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(339):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(358):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(370):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(383):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(397):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(398):    auto& rre = static_cast<BcRemoteReleaseEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(412):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(424):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(426):    auto cmsg = static_cast<CipMessage*>(npsm->FirstRcvdMsg());
  sn/PotsBcHandlers.cpp(453):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(465):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(466):    auto& tde = static_cast<BcTerminationDeniedEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(478):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(479):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(497):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(514):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(526):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(528):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(551):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(577):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(589):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(602):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(615):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(617):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(635):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(647):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(663):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(665):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(682):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsBcHandlers.cpp(707):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(723):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(736):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(752):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(765):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(781):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(783):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(792):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsBcHandlers.cpp(817):    auto& ate = static_cast<BcApplyTreatmentEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(818):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(854):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(868):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(882):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(883):    auto& lre = static_cast<BcLocalReleaseEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(896):    auto& cte = static_cast<BcReleaseCallEvent&>(currEvent);
  sn/PotsBcHandlers.cpp(897):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(929):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsBcHandlers.cpp(950):    auto& rue = static_cast<ProxyBcReleaseUserEvent&>(currEvent);
  sn/PotsBcSsm.cpp(75):       auto& ppsm = static_cast<PotsCallPsm&>(psm);
  sn/PotsBcSsm.cpp(80):       auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(port));
  sn/PotsBcSsm.cpp(88):       SetNPsm(static_cast<CipPsm&>(psm));
  sn/PotsBcSsm.cpp(92):       SetUPsm(static_cast<MediaPsm&>(psm));
  sn/PotsBcSsm.cpp(128):    auto pmsg = static_cast<PotsMessage*>(ame.Msg());
  sn/PotsBicService.cpp(80):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsBocService.cpp(80):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsCallFactory.cpp(49):    const auto& icmsg = static_cast<const PotsMessage&>(msg1);
  sn/PotsCallFactory.cpp(116):    const auto& pmsg = static_cast<const Pots_UN_Message&>(msg);
  sn/PotsCallFactory.cpp(194):       auto pmsg = static_cast<const PotsMessage*>(msg);
  sn/PotsCallFactory.cpp(196):       cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
  sn/PotsCallFactory.cpp(200):       auto ppsm = static_cast<const PotsCallPsm*>(port.Upper());
  sn/PotsCallFactory.cpp(201):       cct = static_cast<PotsCircuit*>(tsw->GetCircuit(ppsm->TsPort()));
  sn/PotsCallHandler.cpp(87):    auto sbuff = static_cast<SbIpBuffer*>(buff.get());
  sn/PotsCallHandler.cpp(108):    auto prof = static_cast<PotsCircuit*>(cct)->Profile();
  sn/PotsCallPsm.cpp(96):       return static_cast<PotsCallPsm*>(psm);
  sn/PotsCallPsm.cpp(162):    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
  sn/PotsCallPsm.cpp(197):    auto& pmsg = static_cast<Pots_NU_Message&>(msg);
  sn/PotsCcwService.cpp(186):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsCcwService.cpp(244):       auto& ire = static_cast<InitiationReqEvent&>(currEvent);
  sn/PotsCcwService.cpp(265):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCcwService.cpp(278):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsCfbService.cpp(53):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsCfbService.cpp(55):    auto cfbp = static_cast<PotsCfbFeatureProfile*>(prof->FindFeature(CFB));
  sn/PotsCfnService.cpp(53):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsCfnService.cpp(55):    auto cfnp = static_cast<PotsCfnFeatureProfile*>(prof->FindFeature(CFN));
  sn/PotsCfuService.cpp(53):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsCfuService.cpp(55):    auto cfup = static_cast<PotsCfuFeatureProfile*>(prof->FindFeature(CFU));
  sn/PotsCfxService.cpp(264):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsCfxService.cpp(269):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsCfxService.cpp(271):       auto& cssm = static_cast<PotsCfxSsm&>(ssm);
  sn/PotsCfxService.cpp(290):    auto& cssm = static_cast<PotsCfxSsm&>(ssm);
  sn/PotsCfxService.cpp(291):    auto& pssm = static_cast<PotsBcSsm&>(*cssm.Parent());
  sn/PotsCfxService.cpp(335):       auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCfxService.cpp(360):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsCfxService.cpp(437):    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
  sn/PotsCfxService.cpp(439):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsCfxService.cpp(452):          cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFU));
  sn/PotsCfxService.cpp(474):          cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFU));
  sn/PotsCfxService.cpp(488):       cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFU));
  sn/PotsCfxService.cpp(494):       cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFB));
  sn/PotsCfxService.cpp(500):       cfnp = static_cast<PotsCfnFeatureProfile*>(prof->FindFeature(CFN));
  sn/PotsCfxService.cpp(529):    auto& sap = static_cast<AnalyzeSapEvent&>(currEvent);
  sn/PotsCfxService.cpp(532):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsCfxService.cpp(587):       auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsCfxService.cpp(594):    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
  sn/PotsCfxService.cpp(608):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCfxService.cpp(616):       auto& snp = static_cast<AnalyzeSnpEvent&>(currEvent);
  sn/PotsCfxService.cpp(632):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsCwmService.cpp(468):    PotsMuxSsm* Mux() const { return static_cast<PotsMuxSsm*>(Parent()); }
  sn/PotsCwmService.cpp(1094):    auto hldNPsm = static_cast<PotsMuxPsm*>(Context::ContextPsm());
  sn/PotsCwmService.cpp(1131):          auto bcUPsm = static_cast<PotsCallPsm*>(psm);
  sn/PotsCwmService.cpp(1201):    auto msg = static_cast<PotsMessage*>(Context::ContextMsg());
  sn/PotsCwmService.cpp(1226):    auto npsm = static_cast<PotsMuxPsm*>(Context::ContextPsm());
  sn/PotsCwmService.cpp(1238):    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
  sn/PotsCwmService.cpp(1298):    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
  sn/PotsCwmService.cpp(1340):    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
  sn/PotsCwmService.cpp(1860):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsCwmService.cpp(1861):    auto pmsg = static_cast<Pots_NU_Message*>(ame.Msg());
  sn/PotsCwmService.cpp(1888):    auto& mux = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(1900):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsCwmService.cpp(1902):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(1909):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsCwmService.cpp(2003):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2005):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsCwmService.cpp(2006):    auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
  sn/PotsCwmService.cpp(2007):    auto npsm = static_cast<PotsMuxPsm*>(pmsg->Psm());
  sn/PotsCwmService.cpp(2100):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2112):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2124):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2136):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2150):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2162):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2174):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2186):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2198):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2199):    auto& are = static_cast<PotsCwmActiveReleaseEvent&>(currEvent);
  sn/PotsCwmService.cpp(2211):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2212):    auto& ire = static_cast<PotsCwmInactiveReleaseEvent&>(currEvent);
  sn/PotsCwmService.cpp(2224):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwmService.cpp(2244):    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
  sn/PotsCwtService.cpp(297):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsCwtService.cpp(569):    auto& sap = static_cast<AnalyzeSapEvent&>(currEvent);
  sn/PotsCwtService.cpp(574):       auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(575):       auto ate = static_cast<BcApplyTreatmentEvent*>(sap.CurrEvent());
  sn/PotsCwtService.cpp(590):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(598):       auto& snp = static_cast<AnalyzeSnpEvent&>(currEvent);
  sn/PotsCwtService.cpp(629):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(657):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(743):    auto& init = static_cast<InitiationReqEvent&>(currEvent);
  sn/PotsCwtService.cpp(745):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(838):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(860):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsCwtService.cpp(880):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsCwtService.cpp(882):    auto& cwtssm = static_cast<PotsCwbSsm&>(ssm);
  sn/PotsCwtService.cpp(888):       auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
  sn/PotsCwtService.cpp(911):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsCwtService.cpp(934):    auto& cwtssm = static_cast<PotsCwbSsm&>(ssm);
  sn/PotsCwtService.cpp(935):    auto& pssm = static_cast<PotsBcSsm&>(*ssm.Parent());
  sn/PotsCwtService.cpp(953):    auto& relevt = static_cast<PotsCwtReleaseEvent&>(currEvent);
  sn/PotsCwtService.cpp(954):    auto& cwtssm = static_cast<PotsCwbSsm&>(ssm);
  sn/PotsCwtService.cpp(958):       auto pssm = static_cast<PotsBcSsm*>(cwtssm.Parent());
  sn/PotsCwtService.cpp(977):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsCwtService.cpp(979):    auto& cwtssm = static_cast<PotsCwtSsm&>(ssm);
  sn/PotsCwtService.cpp(983):       auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
  sn/PotsCwtService.cpp(1024):    auto& cwtssm = static_cast<PotsCwtSsm&>(ssm);
  sn/PotsCwtService.cpp(1025):    auto& relevt = static_cast<PotsCwtReleaseEvent&>(currEvent);
  sn/PotsCwtService.cpp(1027):    auto pssm = static_cast<PotsBcSsm*>(cwtssm.Parent());
  sn/PotsCwtService.cpp(1072):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsDiscService.cpp(115):    auto& pssm = static_cast<BcSsm&>(*Parent());
  sn/PotsDiscService.cpp(117):    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
  sn/PotsHtlService.cpp(81):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsHtlService.cpp(154):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsHtlService.cpp(160):       auto htlp = static_cast<PotsHtlFeatureProfile*>(prof->FindFeature(HTL));
  sn/PotsMultiplexer.cpp(183):    const auto& pmsg = static_cast<const PotsMessage&>(msg);
  sn/PotsMultiplexer.cpp(229):    const auto& pmsg = static_cast<const PotsMessage&>(msg);
  sn/PotsMultiplexer.cpp(232):    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
  sn/PotsMultiplexer.cpp(332):    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
  sn/PotsMultiplexer.cpp(385):    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
  sn/PotsMultiplexer.cpp(684):    auto& npsm = static_cast<PotsMuxPsm&>(psm);
  sn/PotsMultiplexer.cpp(687):    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(port));
  sn/PotsMultiplexer.cpp(752):    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
  sn/PotsMultiplexer.cpp(814):    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
  sn/PotsMultiplexer.cpp(910):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsMultiplexer.cpp(911):    auto pmsg = static_cast<Pots_NU_Message*>(ame.Msg());
  sn/PotsMultiplexer.cpp(931):    auto& mux = static_cast<PotsMuxSsm&>(ssm);
  sn/PotsMultiplexer.cpp(956):    auto& mux = static_cast<PotsMuxSsm&>(ssm);
  sn/PotsMultiplexer.cpp(957):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsMultiplexer.cpp(978):    auto& mux = static_cast<PotsMuxSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(56):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(57):    auto msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(59):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(105):    auto msg = static_cast<CipMessage*>(Context::ContextMsg());
  sn/PotsProxyHandlers.cpp(107):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(132):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(133):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(135):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(171):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(181):    auto upsm = static_cast<ProxyBcPsm*>(pssm.UPsm());
  sn/PotsProxyHandlers.cpp(202):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(217):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(236):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(237):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(239):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(282):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(300):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(301):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(303):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(346):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(347):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(349):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(398):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(413):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(428):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(443):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(458):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(489):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(490):    auto upsm = static_cast<MediaPsm*>(Context::ContextPsm());
  sn/PotsProxyHandlers.cpp(517):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(533):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(534):    auto upsm = static_cast<MediaPsm*>(Context::ContextPsm());
  sn/PotsProxyHandlers.cpp(561):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(579):    auto& cte = static_cast<BcReleaseCallEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(580):    auto& pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsSusService.cpp(79):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsTreatments.cpp(235):    auto pssm = static_cast<PotsBcSsm*>(ate.Owner());
  sn/PotsTreatments.cpp(274):    auto pssm = static_cast<PotsBcSsm*>(ate.Owner());
  sn/PotsTreatments.cpp(300):    auto pssm = static_cast<PotsBcSsm*>(ate.Owner());
  sn/PotsWmlService.cpp(193):    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
  sn/PotsWmlService.cpp(195):    auto wmlp = static_cast<PotsWmlFeatureProfile*>(prof->FindFeature(WML));
  sn/PotsWmlService.cpp(391):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsWmlService.cpp(415):    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
  sn/PotsWmlService.cpp(417):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsWmlService.cpp(422):    wmlp_ = static_cast<PotsWmlFeatureProfile*>(prof->FindFeature(WML));
  sn/PotsWmlService.cpp(489):    auto& sap = static_cast<AnalyzeSapEvent&>(currEvent);
  sn/PotsWmlService.cpp(492):    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsWmlService.cpp(552):       auto& pssm = static_cast<PotsBcSsm&>(*Parent());
  sn/PotsWmlService.cpp(570):    auto pssm = static_cast<PotsBcSsm*>(Parent());
  sn/PotsWmlService.cpp(593):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsWmlService.cpp(598):       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
  sn/PotsWmlService.cpp(600):       auto& wssm = static_cast<PotsWmlSsm&>(ssm);
  sn/PotsWmlService.cpp(619):    auto& wssm = static_cast<PotsWmlSsm&>(ssm);
  sn/PotsWmlService.cpp(620):    auto& pssm = static_cast<PotsBcSsm&>(*wssm.Parent());
  st/MscBuilder.cpp(140):          tt = static_cast<const TransTrace*>(rec);
  st/MscBuilder.cpp(148):          auto mt = static_cast<const MsgTrace*>(rec);
  st/MscBuilder.cpp(675):    auto rxnet = static_cast<const TransTrace*>(events_[index]);
  st/MscBuilder.cpp(692):             trans = static_cast<const TransTrace*>(rec);
  st/MscBuilder.cpp(704):             return static_cast<const MsgTrace*>(rec);
  st/MscBuilder.cpp(719):    auto txmsg = static_cast<const MsgTrace*>(events_[index]);
  st/MscBuilder.cpp(740):             trans = static_cast<const TransTrace*>(rec);
  st/MscBuilder.cpp(747):             auto rxmsg = static_cast<const MsgTrace*>(rec);
  st/MscBuilder.cpp(900):          tt = static_cast<const TransTrace*>(rec);
  st/MscBuilder.cpp(936):             mt = static_cast<const MsgTrace*>(rec);
  st/StIncrement.cpp(112):    auto ctx = static_cast<Context*>(pool->FirstUsed(bid));
  st/StTestData.cpp(64):    return static_cast<StTestData*>(data);
  st/TestSessions.cpp(480):    auto tpsm = static_cast<TestPsm*>(Psm());
  st/TestSessions.cpp(495):    auto tssm = static_cast<TestSsm*>(RootSsm());
  st/TestSessions.cpp(543):       if(p->GetFactory() == TestFactoryId) return static_cast<TestPsm*>(p);
  st/TestSessions.cpp(785):       SetTestPsm(static_cast<TestPsm*>(&psm));
  st/TestSessions.cpp(890):    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  st/TestSessions.cpp(891):    auto tmsg = static_cast<TestMessage*>(ame.Msg());
  st/TestSessions.cpp(924):    auto tmsg = static_cast<TestMessage*>(Context::ContextMsg());
  st/TestSessions.cpp(933):    auto apsm = static_cast<SsmFactory*>(afac)->AllocOgPsm(*amsg);
  st/TestSessions.cpp(944):    auto& tssm = static_cast<TestSsm&>(ssm);
  st/TestSessions.cpp(960):    auto& tssm = static_cast<TestSsm&>(ssm);
  st/TestSessions.cpp(975):    auto tmsg = static_cast<TestMessage*>(Context::ContextMsg());
  st/TestSessions.cpp(976):    auto& tssm = static_cast<TestSsm&>(ssm);
W008 Cast removes const qualification
  ct/CodeFileSet.cpp(641):    LibrarySet* nbSet = (LibrarySet*) this;
  ct/CodeFileSet.cpp(669):    LibrarySet* nsSet = (LibrarySet*) this;
  ct/CodeWarning.cpp(94):    item_(const_cast<CxxToken*>(item)),
  ct/CxxArea.cpp(1362):       auto self = const_cast<Class*>(this);
  ct/CxxArea.cpp(1568):    return const_cast<Class*>(this);
  ct/CxxArea.cpp(1732):    return const_cast<Class*>(this);
  ct/CxxArea.cpp(2684):       return const_cast<ClassInst*>(this);
  ct/CxxArea.h(137):    CxxArea* GetArea() const override { return const_cast<CxxArea*>(this); }
  ct/CxxArea.h(529):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxArea.h(574):    Class* GetClass() const override { return const_cast<Class*>(this); }
  ct/CxxArea.h(901):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  ct/CxxArea.h(1036):    Namespace* GetSpace() const override { return const_cast<Namespace*>(this); }
  ct/CxxNamed.cpp(1090):    return const_cast<DataSpec*>(this);
  ct/CxxNamed.cpp(1656):    const_cast<DataSpec*>(this)->FindReferent();
  ct/CxxNamed.cpp(3570):    return const_cast<TypeName*>(this);
  ct/CxxNamed.h(749):       { return const_cast<QualName*>(this); }
  ct/CxxNamed.h(1266):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScope.cpp(761):       if(NarrowestAccessUsed(const_cast<ClassData*>(this)) >= Cxx::Public)
  ct/CxxScope.cpp(3089):    return FoundFunc(const_cast<Function*>(this), args);
  ct/CxxScope.cpp(3860):          if(NarrowestAccessUsed(const_cast<Function*>(this)) >= Cxx::Public)
  ct/CxxScope.cpp(4472):    auto prev = const_cast<Function*>(this);
  ct/CxxScope.cpp(4696):    if(IsTemplate()) return const_cast<Function*>(this);
  ct/CxxScope.cpp(4706):    if(tmplt_ != nullptr) return (CxxScope*) this;
  ct/CxxScope.h(396):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScope.h(1366):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScope.h(1426):       { return const_cast<Function*>(this); }
  ct/CxxScoped.cpp(732):    if(n == 0) return const_cast<CxxScoped*>(this);
  ct/CxxScoped.cpp(1877):    return (CxxToken*) this;
  ct/CxxScoped.cpp(2106):    return (CxxToken*) this;
  ct/CxxScoped.cpp(2543):    const_cast<Friend*>(this)->FindReferent();
  ct/CxxScoped.cpp(2569):    const_cast<Friend*>(this)->SetScope(decl->GetSpace());
  ct/CxxScoped.cpp(2580):    const_cast<Friend*>(this)->SetScope(scope);
  ct/CxxScoped.cpp(2919):    return (CxxToken*) this;
  ct/CxxScoped.cpp(3013):    return (CxxScoped*) this;
  ct/CxxScoped.cpp(3026):    return (CxxToken*) this;
  ct/CxxScoped.h(205):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  ct/CxxScoped.h(604):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScoped.h(1535):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxScoped.h(1632):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  ct/CxxToken.cpp(778):       const_cast<CxxToken*>(this) : nullptr);
  ct/CxxToken.cpp(823):    CxxToken* prev = const_cast<CxxToken*>(this);
  ct/CxxToken.h(518):    virtual CxxToken* RootType() const { return const_cast<CxxToken*>(this); }
  ct/Parser.cpp(4461):       func->SetTemplate(const_cast<Function*>(tmplt));
  nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  nb/Base.cpp(67):    objects.push_back(const_cast<Base*>(this));
  nb/SysThread.win.cpp(193):       (_beginthreadex_proc_type) EnterThread, (void*) client, 0, &id);
  sb/MsgPort.cpp(342):    return const_cast<MsgPort*>(this);
  sb/ProtocolSM.cpp(650):    if(upper == nullptr) return const_cast<ProtocolSM*>(this);
  sb/TlvMessage.cpp(395):    pit.pptr = (TlvParm*) &pit.mptr->bytes[nextIndex];
W009 Pointer arithmetic
  dip/DipProtocol.cpp(211):       dest = payload + received;
  nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  nb/LogBuffer.cpp(313):    auto after = (ptr_t) next_ + size;
  nb/LogBuffer.cpp(314):    auto wrap = after >= (buff_ + size_);
  nb/LogBuffer.cpp(341):       after = buff_ + size;
  nb/Thread.cpp(2966):    ptrdiff_t stacksize = &local - priv_->stackBase_;
  nw/IoThread.cpp(187):       source += rcvd;
  nw/IpBuffer.cpp(134):       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
  nw/IpBuffer.cpp(134):       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
  nw/IpBuffer.cpp(238):       bytes = bytes_ + hdrSize_;
  nw/IpBuffer.cpp(262):    bytes += hdrSize_;
  nw/IpBuffer.h(111):    NodeBase::byte_t* PayloadPtr() const { return bytes_ + hdrSize_; }
  sb/TlvMessage.cpp(166):    auto pptr = (TlvParm*) (layout->bytes + layout->header.length);
  sb/TlvMessage.cpp(249):    auto fence = layout->bytes + layout->header.length;
W015 #include not sorted in standard order
  nb/SysStackTrace.win.cpp(30): #include <Windows.h>
  nw/SysSocket.win.cpp(28): #include <WinSock2.h>
  rsc/main.cpp(33): #include "SysTypes.h"
W020 Using statement in header
  an/AnIncrement.h(28): using namespace NodeBase;
  an/AnModule.h(28): using namespace NodeBase;
  an/PotsShelf.h(31): using namespace NodeBase;
  an/PotsShelf.h(32): using namespace SessionBase;
  an/PotsShelf.h(33): using namespace NetworkBase;
  an/PotsTrafficThread.h(35): using namespace NodeBase;
  an/PotsTrafficThread.h(36): using namespace CallBase;
  cb/BcAddress.h(33): using namespace NodeBase;
  cb/BcAddress.h(34): using namespace SessionBase;
  cb/BcCause.h(32): using namespace NodeBase;
  cb/BcCause.h(33): using namespace SessionBase;
  cb/BcProgress.h(32): using namespace NodeBase;
  cb/BcProgress.h(33): using namespace SessionBase;
  cb/BcProtocol.h(50): using namespace NodeBase;
  cb/BcProtocol.h(51): using namespace NetworkBase;
  cb/BcProtocol.h(52): using namespace SessionBase;
  cb/BcProtocol.h(53): using namespace MediaBase;
  cb/BcRouting.h(31): using namespace SessionBase;
  cb/BcSessions.h(53): using namespace MediaBase;
  cb/BcSessions.h(54): using namespace NodeBase;
  cb/BcSessions.h(55): using namespace SessionBase;
  cb/CbModule.h(28): using namespace NodeBase;
  cb/ProxyBcSessions.h(33): using namespace MediaBase;
  cb/ProxyBcSessions.h(34): using namespace NodeBase;
  cb/ProxyBcSessions.h(35): using namespace SessionBase;
  cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  cn/CnModule.h(28): using namespace NodeBase;
  ct/CodeWarning.h(38): using NodeBase::word;
  ct/CxxCharLiteral.h(35): using namespace NodeBase;
  ct/CxxStrLiteral.h(41): using namespace NodeBase;
  ct/Editor.h(47): using namespace NodeBase;
  ct/Editor.h(48): using std::string;
  ct/Library.h(46): using namespace NodeBase;
  dip/BaseBot.h(39): using namespace NodeBase;
  dip/BotThread.h(38): using namespace NodeBase;
  dip/BotTrace.h(35): using namespace NodeBase;
  dip/BotTracer.h(30): using namespace NodeBase;
  dip/DipModule.h(30): using namespace NodeBase;
  dip/DipProtocol.h(39): using namespace NodeBase;
  dip/DipProtocol.h(40): using namespace NetworkBase;
  dip/DipTypes.h(26): using namespace NetworkBase;
  dip/DipTypes.h(27): using namespace NodeBase;
  dip/MapAndUnits.h(31): using namespace NodeBase;
  dip/StartupParameters.h(21): using namespace NetworkBase;
  dip/Token.h(27): using namespace NodeBase;
  mb/Circuit.h(32): using namespace NodeBase;
  mb/Circuit.h(33): using namespace SessionBase;
  mb/MbModule.h(28): using namespace NodeBase;
  mb/MbPools.h(28): using namespace NodeBase;
  mb/MediaEndpt.h(34): using namespace NodeBase;
  mb/MediaEndpt.h(35): using namespace SessionBase;
  mb/MediaFailureEvent.h(33): using namespace NodeBase;
  mb/MediaFailureEvent.h(34): using namespace SessionBase;
  mb/MediaParameter.h(31): using namespace NodeBase;
  mb/MediaParameter.h(32): using namespace SessionBase;
  mb/MediaPsm.h(37): using namespace NodeBase;
  mb/MediaPsm.h(38): using namespace SessionBase;
  mb/MediaSsm.h(29): using namespace NodeBase;
  mb/MediaSsm.h(30): using namespace SessionBase;
  mb/Switch.h(37): using namespace NodeBase;
  mb/ToneRegistry.h(31): using namespace NodeBase;
  mb/Tones.h(31): using namespace NodeBase;
  nt/FunctionProfiler.h(37): using namespace NodeBase;
  nt/FunctionStats.h(31): using namespace NodeBase;
  nt/NtIncrement.h(32): using namespace NodeBase;
  nt/NtModule.h(28): using namespace NodeBase;
  nt/NtTestData.h(31): using namespace NodeBase;
  nt/RecoveryThread.h(35): using namespace NodeBase;
  nw/IpService.h(38): using namespace NodeBase;
  nw/IpServiceCfg.h(29): using namespace NodeBase;
  nw/LocalAddrTest.h(33): using namespace NodeBase;
  on/OnModule.h(28): using namespace NodeBase;
  pb/PbModule.h(28): using namespace NodeBase;
  pb/PotsBicFeature.h(28): using namespace NodeBase;
  pb/PotsBocFeature.h(28): using namespace NodeBase;
  pb/PotsCfbFeature.h(30): using namespace CallBase;
  pb/PotsCfbFeature.h(31): using namespace NodeBase;
  pb/PotsCfnFeature.h(31): using namespace CallBase;
  pb/PotsCfnFeature.h(32): using namespace NodeBase;
  pb/PotsCfuFeature.h(30): using namespace CallBase;
  pb/PotsCfuFeature.h(31): using namespace NodeBase;
  pb/PotsCircuit.h(40): using namespace MediaBase;
  pb/PotsCircuit.h(41): using namespace CallBase;
  pb/PotsCircuit.h(42): using namespace NodeBase;
  pb/PotsCircuit.h(43): using namespace SessionBase;
  pb/PotsCliParms.h(28): using namespace NodeBase;
  pb/PotsCwtFeature.h(28): using namespace NodeBase;
  pb/PotsCxfFeature.h(28): using namespace NodeBase;
  pb/PotsFeature.h(39): using namespace NodeBase;
  pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  pb/PotsFeatures.h(29): using namespace CallBase;
  pb/PotsFeatures.h(30): using namespace NodeBase;
  pb/PotsHtlFeature.h(30): using namespace NodeBase;
  pb/PotsHtlFeature.h(31): using namespace CallBase;
  pb/PotsIncrement.h(28): using namespace NodeBase;
  pb/PotsProfile.h(36): using namespace NodeBase;
  pb/PotsProfile.h(37): using namespace CallBase;
  pb/PotsProfile.h(38): using namespace SessionBase;
  pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  pb/PotsProfileRegistry.h(36): using namespace CallBase;
  pb/PotsProtocol.h(45): using namespace NodeBase;
  pb/PotsProtocol.h(46): using namespace SessionBase;
  pb/PotsProtocol.h(47): using namespace MediaBase;
  pb/PotsProtocol.h(48): using namespace CallBase;
  pb/PotsSusFeature.h(28): using namespace NodeBase;
  pb/PotsTwcFeature.h(28): using namespace NodeBase;
  pb/PotsWmlFeature.h(31): using namespace CallBase;
  pb/PotsWmlFeature.h(32): using namespace NodeBase;
  rn/RnModule.h(28): using namespace NodeBase;
  sn/PotsBcHandlers.h(28): using namespace NodeBase;
  sn/PotsBcHandlers.h(29): using namespace SessionBase;
  sn/PotsBicService.h(29): using namespace NodeBase;
  sn/PotsBicService.h(30): using namespace SessionBase;
  sn/PotsBocService.h(29): using namespace NodeBase;
  sn/PotsBocService.h(30): using namespace SessionBase;
  sn/PotsCcwService.h(28): using namespace NodeBase;
  sn/PotsCcwService.h(29): using namespace SessionBase;
  sn/PotsCfbService.h(29): using namespace NodeBase;
  sn/PotsCfbService.h(30): using namespace SessionBase;
  sn/PotsCfnService.h(29): using namespace NodeBase;
  sn/PotsCfnService.h(30): using namespace SessionBase;
  sn/PotsCfuService.h(29): using namespace NodeBase;
  sn/PotsCfuService.h(30): using namespace SessionBase;
  sn/PotsCfxService.h(42): using namespace NodeBase;
  sn/PotsCfxService.h(43): using namespace SessionBase;
  sn/PotsCfxService.h(44): using namespace CallBase;
  sn/PotsCwtService.h(30): using namespace NodeBase;
  sn/PotsCwtService.h(31): using namespace SessionBase;
  sn/PotsHtlService.h(29): using namespace NodeBase;
  sn/PotsHtlService.h(30): using namespace SessionBase;
  sn/PotsMultiplexer.h(45): using namespace MediaBase;
  sn/PotsMultiplexer.h(46): using namespace CallBase;
  sn/PotsMultiplexer.h(47): using namespace NodeBase;
  sn/PotsMultiplexer.h(48): using namespace SessionBase;
  sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  sn/PotsProxyHandlers.h(29): using namespace SessionBase;
  sn/PotsProxySessions.h(28): using namespace CallBase;
  sn/PotsProxySessions.h(29): using namespace NodeBase;
  sn/PotsSessions.h(44): using namespace CallBase;
  sn/PotsSessions.h(45): using namespace NetworkBase;
  sn/PotsSessions.h(46): using namespace NodeBase;
  sn/PotsSessions.h(47): using namespace SessionBase;
  sn/PotsStatistics.h(30): using namespace NodeBase;
  sn/PotsStatistics.h(31): using namespace CallBase;
  sn/PotsSusService.h(30): using namespace NodeBase;
  sn/PotsSusService.h(31): using namespace SessionBase;
  sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  sn/PotsTreatments.h(45): using namespace NodeBase;
  sn/PotsTreatments.h(46): using namespace SessionBase;
  sn/PotsTreatments.h(47): using namespace MediaBase;
  sn/PotsTreatments.h(48): using namespace CallBase;
  sn/PotsWmlService.h(29): using namespace NodeBase;
  sn/PotsWmlService.h(30): using namespace SessionBase;
  sn/SnIncrement.h(28): using namespace NodeBase;
  sn/SnModule.h(28): using namespace NodeBase;
  st/MscAddress.h(41): using namespace NodeBase;
  st/MscAddress.h(42): using namespace SessionBase;
  st/MscBuilder.h(54): using namespace NodeBase;
  st/MscBuilder.h(55): using namespace SessionBase;
  st/MscContext.h(33): using namespace NodeBase;
  st/MscContext.h(34): using namespace SessionBase;
  st/MscContextPair.h(34): using namespace NodeBase;
  st/StIncrement.h(28): using namespace NodeBase;
  st/StModule.h(28): using namespace NodeBase;
  st/StTestData.h(32): using namespace NodeBase;
  st/StTestData.h(33): using namespace SessionBase;
  st/TestSessions.h(43): using namespace NodeBase;
  st/TestSessions.h(44): using namespace SessionBase;
W022 Add using statement
  an/AnIncrement.cpp(0):  // namespace NodeBase
  an/AnModule.cpp(0):  // namespace NodeBase
  an/PotsShelfFactory.cpp(0):  // namespace MediaBase
  an/PotsShelfFactory.cpp(0):  // namespace NodeBase
  an/PotsShelfFactory.cpp(0):  // namespace SessionBase
  an/PotsShelfHandler.cpp(0):  // namespace MediaBase
  an/PotsShelfHandler.cpp(0):  // namespace NetworkBase
  an/PotsShelfHandler.cpp(0):  // namespace NodeBase
  an/PotsShelfHandler.cpp(0):  // namespace SessionBase
  an/PotsShelfIpService.cpp(0):  // namespace NetworkBase
  an/PotsShelfIpService.cpp(0):  // namespace NodeBase
  an/PotsTrafficThread.cpp(0):  // namespace CallBase
  an/PotsTrafficThread.cpp(0):  // namespace NodeBase
  cb/BcAddress.cpp(0):  // namespace NodeBase
  cb/BcAddress.cpp(0):  // namespace SessionBase
  cb/BcCause.cpp(0):  // namespace NodeBase
  cb/BcCause.cpp(0):  // namespace SessionBase
  cb/BcEvents.cpp(0):  // namespace NodeBase
  cb/BcEvents.cpp(0):  // namespace SessionBase
  cb/BcFactory.cpp(0):  // namespace NodeBase
  cb/BcFactory.cpp(0):  // namespace SessionBase
  cb/BcHandlers.cpp(0):  // namespace NodeBase
  cb/BcHandlers.cpp(0):  // namespace SessionBase
  cb/BcProgress.cpp(0):  // namespace NodeBase
  cb/BcProgress.cpp(0):  // namespace SessionBase
  cb/BcProtocol.cpp(0):  // namespace MediaBase
  cb/BcProtocol.cpp(0):  // namespace NetworkBase
  cb/BcProtocol.cpp(0):  // namespace NodeBase
  cb/BcProtocol.cpp(0):  // namespace SessionBase
  cb/BcRouting.cpp(0):  // namespace SessionBase
  cb/BcService.cpp(0):  // namespace NodeBase
  cb/BcSsm.cpp(0):  // namespace MediaBase
  cb/BcSsm.cpp(0):  // namespace NodeBase
  cb/BcSsm.cpp(0):  // namespace SessionBase
  cb/BcStates.cpp(0):  // namespace NodeBase
  cb/BcStates.cpp(0):  // namespace SessionBase
  cb/BcTriggers.cpp(0):  // namespace NodeBase
  cb/CbModule.cpp(0):  // namespace NodeBase
  cb/DigitString.cpp(0):  // namespace NodeBase
  cb/ProxyBcSessions.cpp(0):  // namespace MediaBase
  cb/ProxyBcSessions.cpp(0):  // namespace NetworkBase
  cb/ProxyBcSessions.cpp(0):  // namespace NodeBase
  cb/ProxyBcSessions.cpp(0):  // namespace SessionBase
  cb/ServiceCodeRegistry.cpp(0):  // namespace NodeBase
  cb/ServiceCodeRegistry.cpp(0):  // namespace SessionBase
  cb/TestCallFactory.cpp(0):  // namespace NodeBase
  cb/TestCallFactory.cpp(0):  // namespace SessionBase
  cn/CnModule.cpp(0):  // namespace NodeBase
  dip/BotTrace.cpp(0):  // namespace NodeBase
  dip/WinterOrders.cpp(0):  // namespace NodeBase
  mb/Circuit.cpp(0):  // namespace NodeBase
  mb/MbModule.cpp(0):  // namespace NodeBase
  mb/MbPools.cpp(0):  // namespace NodeBase
  mb/MbPools.cpp(0):  // namespace SessionBase
  mb/MediaEndpt.cpp(0):  // namespace NodeBase
  mb/MediaEndpt.cpp(0):  // namespace SessionBase
  mb/MediaFailureEvent.cpp(0):  // namespace NodeBase
  mb/MediaFailureEvent.cpp(0):  // namespace SessionBase
  mb/MediaParameter.cpp(0):  // namespace NodeBase
  mb/MediaParameter.cpp(0):  // namespace SessionBase
  mb/MediaPsm.cpp(0):  // namespace NodeBase
  mb/MediaPsm.cpp(0):  // namespace SessionBase
  mb/MediaSsm.cpp(0):  // namespace NodeBase
  mb/MediaSsm.cpp(0):  // namespace SessionBase
  mb/Switch.cpp(0):  // namespace NodeBase
  mb/ToneRegistry.cpp(0):  // namespace NodeBase
  mb/Tones.cpp(0):  // namespace NodeBase
  nt/FunctionProfiler.cpp(0):  // namespace NodeBase
  nt/FunctionStats.cpp(0):  // namespace NodeBase
  nt/NtIncrement.cpp(0):  // namespace NodeBase
  nt/NtModule.cpp(0):  // namespace NodeBase
  nt/NtTestData.cpp(0):  // namespace NodeBase
  nt/RecoveryThread.cpp(0):  // namespace NodeBase
  nw/LocalAddrTest.cpp(0):  // namespace NodeBase
  on/OnModule.cpp(0):  // namespace NodeBase
  pb/PbModule.cpp(0):  // namespace NodeBase
  pb/PotsBicFeature.cpp(0):  // namespace NodeBase
  pb/PotsBocFeature.cpp(0):  // namespace NodeBase
  pb/PotsCfbFeature.cpp(0):  // namespace CallBase
  pb/PotsCfbFeature.cpp(0):  // namespace NodeBase
  pb/PotsCfnFeature.cpp(0):  // namespace CallBase
  pb/PotsCfnFeature.cpp(0):  // namespace NodeBase
  pb/PotsCfuFeature.cpp(0):  // namespace CallBase
  pb/PotsCfuFeature.cpp(0):  // namespace NodeBase
  pb/PotsCircuit.cpp(0):  // namespace CallBase
  pb/PotsCircuit.cpp(0):  // namespace MediaBase
  pb/PotsCircuit.cpp(0):  // namespace NodeBase
  pb/PotsCircuit.cpp(0):  // namespace SessionBase
  pb/PotsCliParms.cpp(0):  // namespace NodeBase
  pb/PotsCwtFeature.cpp(0):  // namespace NodeBase
  pb/PotsCxfFeature.cpp(0):  // namespace NodeBase
  pb/PotsFeature.cpp(0):  // namespace NodeBase
  pb/PotsFeatureProfile.cpp(0):  // namespace NodeBase
  pb/PotsFeatureRegistry.cpp(0):  // namespace NodeBase
  pb/PotsFeatures.cpp(0):  // namespace CallBase
  pb/PotsFeatures.cpp(0):  // namespace NodeBase
  pb/PotsHtlFeature.cpp(0):  // namespace CallBase
  pb/PotsHtlFeature.cpp(0):  // namespace NodeBase
  pb/PotsIncrement.cpp(0):  // namespace NodeBase
  pb/PotsMessages.cpp(0):  // namespace CallBase
  pb/PotsMessages.cpp(0):  // namespace MediaBase
  pb/PotsMessages.cpp(0):  // namespace NodeBase
  pb/PotsMessages.cpp(0):  // namespace SessionBase
  pb/PotsProfile.cpp(0):  // namespace NodeBase
  pb/PotsProfile.cpp(0):  // namespace SessionBase
  pb/PotsProfileRegistry.cpp(0):  // namespace CallBase
  pb/PotsProfileRegistry.cpp(0):  // namespace NodeBase
  pb/PotsProtocol.cpp(0):  // namespace CallBase
  pb/PotsProtocol.cpp(0):  // namespace MediaBase
  pb/PotsProtocol.cpp(0):  // namespace NodeBase
  pb/PotsProtocol.cpp(0):  // namespace SessionBase
  pb/PotsSusFeature.cpp(0):  // namespace NodeBase
  pb/PotsTwcFeature.cpp(0):  // namespace NodeBase
  pb/PotsWmlFeature.cpp(0):  // namespace CallBase
  pb/PotsWmlFeature.cpp(0):  // namespace NodeBase
  rn/RnModule.cpp(0):  // namespace NodeBase
  sn/PotsBcHandlers.cpp(0):  // namespace NodeBase
  sn/PotsBcHandlers.cpp(0):  // namespace SessionBase
  sn/PotsBcService.cpp(0):  // namespace CallBase
  sn/PotsBcService.cpp(0):  // namespace NodeBase
  sn/PotsBcService.cpp(0):  // namespace SessionBase
  sn/PotsBcSsm.cpp(0):  // namespace CallBase
  sn/PotsBcSsm.cpp(0):  // namespace MediaBase
  sn/PotsBcSsm.cpp(0):  // namespace NodeBase
  sn/PotsBcSsm.cpp(0):  // namespace SessionBase
  sn/PotsBcStates.cpp(0):  // namespace SessionBase
  sn/PotsBicService.cpp(0):  // namespace NodeBase
  sn/PotsBicService.cpp(0):  // namespace SessionBase
  sn/PotsBocService.cpp(0):  // namespace NodeBase
  sn/PotsBocService.cpp(0):  // namespace SessionBase
  sn/PotsCallFactory.cpp(0):  // namespace CallBase
  sn/PotsCallFactory.cpp(0):  // namespace MediaBase
  sn/PotsCallFactory.cpp(0):  // namespace NodeBase
  sn/PotsCallFactory.cpp(0):  // namespace SessionBase
  sn/PotsCallHandler.cpp(0):  // namespace MediaBase
  sn/PotsCallHandler.cpp(0):  // namespace NetworkBase
  sn/PotsCallHandler.cpp(0):  // namespace NodeBase
  sn/PotsCallHandler.cpp(0):  // namespace SessionBase
  sn/PotsCallIpService.cpp(0):  // namespace NetworkBase
  sn/PotsCallIpService.cpp(0):  // namespace NodeBase
  sn/PotsCallPsm.cpp(0):  // namespace CallBase
  sn/PotsCallPsm.cpp(0):  // namespace MediaBase
  sn/PotsCallPsm.cpp(0):  // namespace NodeBase
  sn/PotsCallPsm.cpp(0):  // namespace SessionBase
  sn/PotsCcwService.cpp(0):  // namespace NodeBase
  sn/PotsCcwService.cpp(0):  // namespace SessionBase
  sn/PotsCfbService.cpp(0):  // namespace NodeBase
  sn/PotsCfbService.cpp(0):  // namespace SessionBase
  sn/PotsCfnService.cpp(0):  // namespace NodeBase
  sn/PotsCfnService.cpp(0):  // namespace SessionBase
  sn/PotsCfuService.cpp(0):  // namespace NodeBase
  sn/PotsCfuService.cpp(0):  // namespace SessionBase
  sn/PotsCfxService.cpp(0):  // namespace CallBase
  sn/PotsCfxService.cpp(0):  // namespace NodeBase
  sn/PotsCfxService.cpp(0):  // namespace SessionBase
  sn/PotsCwmService.cpp(0):  // namespace CallBase
  sn/PotsCwmService.cpp(0):  // namespace MediaBase
  sn/PotsCwmService.cpp(0):  // namespace NodeBase
  sn/PotsCwmService.cpp(0):  // namespace SessionBase
  sn/PotsCwtService.cpp(0):  // namespace CallBase
  sn/PotsCwtService.cpp(0):  // namespace MediaBase
  sn/PotsCwtService.cpp(0):  // namespace NodeBase
  sn/PotsCwtService.cpp(0):  // namespace SessionBase
  sn/PotsDiscService.cpp(0):  // namespace CallBase
  sn/PotsDiscService.cpp(0):  // namespace NodeBase
  sn/PotsDiscService.cpp(0):  // namespace SessionBase
  sn/PotsHtlService.cpp(0):  // namespace NodeBase
  sn/PotsHtlService.cpp(0):  // namespace SessionBase
  sn/PotsMultiplexer.cpp(0):  // namespace CallBase
  sn/PotsMultiplexer.cpp(0):  // namespace MediaBase
  sn/PotsMultiplexer.cpp(0):  // namespace NodeBase
  sn/PotsMultiplexer.cpp(0):  // namespace SessionBase
  sn/PotsProxyHandlers.cpp(0):  // namespace NodeBase
  sn/PotsProxyHandlers.cpp(0):  // namespace SessionBase
  sn/PotsProxySessions.cpp(0):  // namespace CallBase
  sn/PotsProxySessions.cpp(0):  // namespace NodeBase
  sn/PotsStatistics.cpp(0):  // namespace CallBase::Cause
  sn/PotsStatistics.cpp(0):  // namespace NodeBase
  sn/PotsSusService.cpp(0):  // namespace NodeBase
  sn/PotsSusService.cpp(0):  // namespace SessionBase
  sn/PotsTreatmentRegistry.cpp(0):  // namespace CallBase::Cause
  sn/PotsTreatmentRegistry.cpp(0):  // namespace NodeBase
  sn/PotsTreatments.cpp(0):  // namespace CallBase
  sn/PotsTreatments.cpp(0):  // namespace MediaBase
  sn/PotsTreatments.cpp(0):  // namespace NodeBase
  sn/PotsTreatments.cpp(0):  // namespace SessionBase
  sn/PotsWmlService.cpp(0):  // namespace NodeBase
  sn/PotsWmlService.cpp(0):  // namespace SessionBase
  sn/SnIncrement.cpp(0):  // namespace NodeBase
  sn/SnModule.cpp(0):  // namespace NodeBase
  st/MscAddress.cpp(0):  // namespace NodeBase
  st/MscAddress.cpp(0):  // namespace SessionBase
  st/MscBuilder.cpp(0):  // namespace NodeBase
  st/MscBuilder.cpp(0):  // namespace SessionBase
  st/MscContext.cpp(0):  // namespace NodeBase
  st/MscContext.cpp(0):  // namespace SessionBase
  st/MscContextPair.cpp(0):  // namespace NodeBase
  st/StIncrement.cpp(0):  // namespace NodeBase
  st/StModule.cpp(0):  // namespace NodeBase
  st/StTestData.cpp(0):  // namespace NodeBase
  st/StTestData.cpp(0):  // namespace SessionBase
  st/TestSessions.cpp(0):  // namespace NodeBase
  st/TestSessions.cpp(0):  // namespace SessionBase
W023 Remove using statement
  sb/SbIpBuffer.cpp(38): using namespace NetworkBase;
W026 Unused argument
  ct/CodeFile.h(427/3):       const CxxNamed* item, const CxxScope* scope) const;
  ct/CxxArea.h(704/1):       (const std::string& name, StackArgVector* args, SymbolView* view) const;
  ct/CxxArea.h(704/2):       (const std::string& name, StackArgVector* args, SymbolView* view) const;
  ct/CxxArea.h(704/3):       (const std::string& name, StackArgVector* args, SymbolView* view) const;
  ct/CxxExecute.h(947/1):    static void Shutdown(NodeBase::RestartLevel level);
  ct/CxxExecute.h(951/1):    static void Startup(NodeBase::RestartLevel level) { }
  ct/CxxScope.h(84/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  ct/CxxScoped.h(1801/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  ct/Editor.h(171/1):    word ChangeCast(const CodeWarning& log);
  ct/Editor.h(172/1):    word ChangeClassToNamespace(const CodeWarning& log);
  ct/Editor.h(175/1):    word ChangeOperator(const CodeWarning& log);
  ct/Editor.h(177/1):    word DemoteFunction(const CodeWarning& log);
  ct/Editor.h(181/1):    word EraseCast(const CodeWarning& log);
  ct/Editor.h(182/1):    word EraseClass(const CodeWarning& log);
  ct/Editor.h(195/1):    word InsertCopyCtorCall(const CodeWarning& log);
  ct/Editor.h(196/1):    word InsertDataInit(const CodeWarning& log);
  ct/Editor.h(198/1):    word InsertDisplay(const CodeWarning& log);
  ct/Editor.h(199/1):    word InsertEnumName(const CodeWarning& log);
  ct/Editor.h(200/1):    word InsertFallthrough(const CodeWarning& log);
  ct/Editor.h(205/1):    word InsertMemberInit(const CodeWarning& log);
  ct/Editor.h(207/1):    word InsertPODCtor(const CodeWarning& log);
  ct/Editor.h(208/1):    word InsertPureVirtual(const CodeWarning& log);
  ct/Editor.h(210/1):    word MoveDefine(const CodeWarning& log);
  ct/Editor.h(211/1):    word MoveMemberInit(const CodeWarning& log);
  ct/Editor.h(215/1):    word ReplaceHeading(const CodeWarning& log);
  ct/Editor.h(216/1):    word ReplaceName(const CodeWarning& log);
  ct/Editor.h(421/1):    word FixInvokers(const CodeWarning& log);
  ct/Editor.h(430/1):    word ChangeFunctionToMember(const Function* func, word offset);
  ct/Editor.h(430/2):    word ChangeFunctionToMember(const Function* func, word offset);
  ct/Editor.h(431/1):    word ChangeInvokerToMember(const Function* func, word offset);
  ct/Editor.h(431/2):    word ChangeInvokerToMember(const Function* func, word offset);
  ct/Editor.h(432/1):    word EraseArgument(const Function* func, word offset);
  ct/Editor.h(432/2):    word EraseArgument(const Function* func, word offset);
  ct/Editor.h(433/1):    word EraseDefaultValue(const Function* func, word offset);
  ct/Editor.h(433/2):    word EraseDefaultValue(const Function* func, word offset);
  ct/Editor.h(434/1):    word EraseParameter(const Function* func, word offset);
  ct/Editor.h(434/2):    word EraseParameter(const Function* func, word offset);
  ct/Editor.h(436/1):    word InsertArgument(const Function* func, word offset);
  ct/Editor.h(436/2):    word InsertArgument(const Function* func, word offset);
  ct/Editor.h(437/1):    word SplitVirtualFunction(const Function* func);
  ct/LibrarySet.h(116/1):    virtual NodeBase::word LineTypes(NodeBase::CliThread& cli,
  mb/MediaEndpt.h(113/1):    virtual void ProcessIcMsg(Message& msg);
  nb/BuddyHeap.cpp(77/3):       const string& prefix, const Flags& options) const;
  nb/Debug.h(118/1):    static void noop(debug64_t info = 0);
  nb/Deferred.h(89/1):    virtual void EventHasOccurred(Event event) = 0;
  nb/SysMemory.h(45/2):    bool Free(void* addr, size_t size);
  nb/SysStackTrace.h(39/1):    void Startup(RestartLevel level);
  nb/Thread.h(339/2):       (BlockingReason why, fn_name_arg func) { return true; }
  nb/Thread.h(348/1):    virtual void ScheduledIn(fn_name_arg func) { }
  nb/TraceBuffer.h(152/1):    TraceRc StartTracing(const std::string& opts);
  nw/InputHandler.h(138/3):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  nw/InputHandler.h(143/1):    virtual void SocketFailed(SysSocket* socket) const { }
  pb/PotsFeature.h(95/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  pb/PotsFeatureProfile.h(63/1):    virtual bool Deactivate(PotsProfile& profile);
  pb/PotsFeatureProfile.h(87/1):    virtual bool Unsubscribe(PotsProfile& profile);
  sb/Factory.h(130/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  sb/Factory.h(150/1):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  sb/Factory.h(150/2):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  sb/ProtocolLayer.h(150/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  sb/ProtocolSM.h(290/1):    virtual void MsgHandled(Message& msg) { }
  sb/ProtocolSM.h(296/1):    virtual void RestoreIcMsg(Message& msg) { }
  sb/ProtocolSM.h(302/1):    virtual void RefreshMsg(Message& msg) { }
  sb/RootServiceSM.h(46/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  sb/ServiceSM.h(83/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  sb/ServiceSM.h(195/1):       (Event& currEvent, Event*& nextEvent);
  sb/ServiceSM.h(195/2):       (Event& currEvent, Event*& nextEvent);
  sb/SsmFactory.h(48/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  sn/PotsCwmService.cpp(455/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  sn/PotsMultiplexer.h(158/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  cb/ProxyBcSessions.h(192): class ProxyBcDisconnecting : public BcDisconnecting
  ct/LibraryItem.h(77): struct LibItemSort
  dip/DipModule.h(38): class DipModule : public Module
  mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  nb/PooledClass.h(39): class PooledClass : public Class
  sb/TextTlvMessage.h(37): class TextTlvMessage : public TlvMessage
W028 Unused data
  cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  cb/ProxyBcSessions.h(387):    constexpr TriggerId NextId = FirstId + 3;
  ct/Cxx.h(463):    constexpr char Unchecked = ' ';  // spacing not determined
  dip/DipProtocol.h(162): constexpr ProtocolError IM_TIMEOUT = 0x01;
  dip/DipProtocol.h(163): constexpr ProtocolError IM_EXPECTED = 0x02;
  dip/DipProtocol.h(164): constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
  dip/DipProtocol.h(165): constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
  dip/DipProtocol.h(166): constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
  dip/DipProtocol.h(167): constexpr ProtocolError IM_REPEATED = 0x06;
  dip/DipProtocol.h(168): constexpr ProtocolError IM_FROM_SERVER = 0x07;
  dip/DipProtocol.h(169): constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
  dip/DipProtocol.h(170): constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
  dip/DipProtocol.h(171): constexpr ProtocolError DM_BEFORE_RM = 0x0A;
  dip/DipProtocol.h(172): constexpr ProtocolError RM_EXPECTED = 0x0B;
  dip/DipProtocol.h(173): constexpr ProtocolError RM_REPEATED = 0x0C;
  dip/DipProtocol.h(174): constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
  dip/DipProtocol.h(175): constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
  dip/DipProtocol.h(197): constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  dip/Token.h(208): constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
  dip/Token.h(209): constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
  dip/Token.h(210): constexpr category_t CATEGORY_BRACKET = 0x40;
  dip/Token.h(213): constexpr category_t CATEGORY_ORDER = 0x43;
  dip/Token.h(215): constexpr category_t CATEGORY_RESULT = 0x45;
  dip/Token.h(218): constexpr category_t CATEGORY_COMMAND = 0x48;
  dip/Token.h(219): constexpr category_t CATEGORY_PARAMETER = 0x49;
  dip/Token.h(220): constexpr category_t CATEGORY_PRESS = 0x4A;
  nb/NbAppIds.h(72): constexpr FlagId FirstAppDebugFlag = 10;
  nb/NbIncrement.h(195):    static const id_t LastNbIndex = 3;
  nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  nt/NtIncrement.h(80):    static const id_t LastNtIndex = FuncTraceScope;
  nw/NwTypes.h(108): constexpr ipport_t FirstAppIpPort = 1024;
  nw/NwTypes.h(114): constexpr ipport_t LastAppIpPort = MaxIpPort;
  pb/PotsProtocol.h(105):    static const Id LastId    = NextId + 9;  // range constant
  pb/PotsProtocol.h(133):    static const Id LastId   = NextId + 7;  // range constant
  sb/SbIncrement.h(55):    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
  sb/SbIncrement.h(85):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
  sb/SbIncrement.h(115):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  sb/Message.h(72):    enum Location
W030 Unused enumerator
  ct/CxxScope.h(147):       Multiple   // two statements or more
  dip/BaseBot.h(61):       FIRST_BOT_SPECIFIC_ERROR
  nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  nb/SysTypes.h(195):    MemInaccessible = 0,      // ---
  nb/SysTypes.h(196):    MemExecuteOnly = 1,       // --x
  nb/SysTypes.h(198):    MemReadExecute = 5,       // r-x
  nb/SysTypes.h(200):    MemReadWriteExecute = 7,  // rwx
  nb/ToolTypes.h(66):    TraceFailed,        // operation failed for some other reason
  sb/Factory.h(84):       PortAllocFailed,      // failed to create PSM for context
  sb/Message.h(88):       IllegalSignal,   // illegal signal found              0000  sid
  sb/Message.h(89):       IllegalParm,     // illegal parameter found          index  pid
  sb/Message.h(90):       IncompleteParm,  // parameter too short              index  pid
  sb/Message.h(91):       MissingParm,     // mandatory parameter missing       0000  pid
  sb/Message.h(92):       Overflow,        // last parameter extends past end  index  pid
  sb/Message.h(93):       Trampled         // last parameter trampled fence    index  pid
  sb/Parameter.h(121):       StreamContainsIllegalParm,
  sb/ProtocolSM.h(95):       SignalUnknown,     // signal not recognized
  sb/ProtocolSM.h(97):       ParameterUnknown,  // parameter not recognized
  sb/ProtocolSM.h(98):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  cb/BcAddress.h(213):    Digit At(DigitCount i) const;
  cb/BcProtocol.h(182):    MediaInfo* AddMedia(const MediaInfo& media);
  cb/ProxyBcSessions.h(195):    explicit ProxyBcDisconnecting(ServiceId sid);
  ct/CxxExecute.h(160):    size_t Arrays() const;
  ct/CxxExecute.h(862):    static bool ParsingTemplate();
  ct/CxxScope.h(1216):    bool IsFinal() const { return GetDecl()->final_; }
  ct/CxxString.h(46):    size_t rfind_first_of
  ct/CxxString.h(114):    std::string& Prefix(std::string&& scope,
  ct/Editor.h(425):    word FixInvoker(const Function* func, const CodeWarning& log);
  ct/Lexer.h(457):    size_t LineFindFirstOf(size_t pos, const std::string& chars) const;
  dip/BotTrace.h(72):    DipHeader* Header() const;
  dip/TokenMessage.h(48):    explicit TokenMessage(const Token* stream);
  dip/TokenMessage.h(141):    void set_as_ascii(const std::string& text);
  dip/WinterOrders.h(52):    size_t get_number_of_results() const;
  mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  mb/MediaEndpt.h(78):    virtual void Deallocate();
  mb/MediaEndpt.h(96):    explicit MediaEndpt(MediaPsm& psm);
  mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  mb/MediaPsm.h(120):    MediaEndpt* Mep() const { return mep_; }
  mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  mb/Tones.h(73):    Id Tid() const { return Id(tid_.GetId()); }
  nb/Array.h(144):    const T& Back() const
  nb/Array.h(152):    T& Back()
  nb/Array.h(160):    const T& At(size_t index) const
  nb/Array.h(168):    T& At(size_t index)
  nb/Array.h(192):    const T* Data() const
  nb/CfgStrParm.h(61):    c_string NextValue() const { return next_.c_str(); }
  nb/Class.h(71):    virtual void Initialize();
  nb/Class.h(80):    virtual Object* Create();
  nb/Class.h(84):    virtual Object* GetQuasiSingleton();
  nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  nb/Class.h(143):    bool SetVptr(const Object& obj);
  nb/Class.h(150):    bool SetTemplate(Object& obj);
  nb/Class.h(158):    bool SetQuasiSingleton(Object& obj);
  nb/CliThread.h(142):    word Result() const { return result_; }
  nb/Deferred.h(63):    void SendToThread(Thread* thread);
  nb/Deferred.h(67):    void Restart(uint32_t secs);
  nb/DeferredRegistry.h(52):    void EraseAll(const Base* owner);
  nb/Duration.h(43): std::string to_string(const secs_t& secs);
  nb/Duration.h(45): std::string to_string(const usecs_t& usecs);
  nb/Duration.h(46): std::string to_string(const nsecs_t& nsecs);
  nb/ElementException.h(57):    RestartReason Reason() const { return reason_; }
  nb/ElementException.h(61):    debug64_t Errval() const { return errval_; }
  nb/FileSystem.h(67):    void DisableFileOutput(bool disabled);
  nb/Formatters.h(53):    bool strToSize(const std::string& str, size_t& size);
  nb/Formatters.h(70):    std::string strHex(uint32_t n, int width = -1, bool prefix = true);
  nb/FunctionTrace.cpp(169):    PerThreadInfo()
  nb/HeapCfg.h(55):    size_t GetMinSize(MemoryType type) const { return minSize_[type]; }
  nb/LogGroupRegistry.h(62):    Log* FindLog(const std::string& name, LogId id) const;
  nb/MainArgs.h(71):    static std::string Find(c_string tag);
  nb/Memory.h(50):    size_t Words(size_t size);
  nb/Memory.h(58):    void Set(void* dest, byte_t value, size_t size);
  nb/Memory.h(78):    void* Realloc(void* addr, size_t size, MemoryType type);
  nb/Object.h(100):    ClassId GetClassId() const;
  nb/Object.h(112):    ObjectId GetObjectId() const;
  nb/Object.h(118):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  nb/Object.h(139):    void MorphTo(const Class& target);
  nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  nb/PosixSignal.h(148): Flags PS_Delayed();
  nb/Q1Link.h(65):    bool IsQueued() const { return next != nullptr; }
  nb/Q2Way.h(298):    void Display(std::ostream& stream,
  nb/SysHeap.h(99):    SysHeap(MemoryType type, size_t size);
  nb/SysMemory.h(49):    bool Lock(void* addr, size_t size);
  nb/SysMemory.h(54):    bool Unlock(void* addr, size_t size);
  nb/Thread.h(139):    static std::atomic_uint32_t* Vector();
  nb/Thread.h(143):    static bool TestFlag(FlagId fid);
  nb/Thread.h(147):    static void ResetFlag(FlagId fid);
  nb/Thread.h(174):    bool ChangeFaction(Faction faction);
  nb/Thread.h(501):    Mutex* BlockingMutex() const;
  nb/Thread.h(509):    uint8_t MutexCount() const;
  nb/TraceBuffer.h(182):    const SystemTime::Point& StartTime() const { return startTime_; }
  nw/IpServiceRegistry.h(61):    std::vector<IpService*> GetServices(const std::string& name) const;
  nw/SysIpL2Addr.h(113):    static const SysIpL2Addr& NullIpAddr();
  nw/SysIpL2Addr.h(117):    const IPv6Addr& Addr() const { return addr_; }
  nw/SysSocket.h(50): uint64_t htonll(uint64_t hostllong);
  nw/SysSocket.h(53): uint64_t ntohll(uint64_t netllong);
  nw/SysTcpSocket.h(143):    bool LocAddr(SysIpL3Addr& locAddr);
  nw/SysTcpSocket.h(198):    IpBuffer* IcMsg() const { return icMsg_; }
  pb/PotsCircuit.h(93):    bool IsRinging() const { return ringing_; }
  pb/PotsCircuit.h(97):    bool CanFlash() const { return flash_; }
  pb/PotsCircuit.h(102):    Cause::Ind GetCause() const { return cause_; }
  pb/PotsProtocol.h(287):    MediaInfo* AddMedia(const MediaInfo& media);
  rsc/main.cpp(125): main_t main(int argc, char* argv[])
  sb/Context.cpp(75):    SbException(debug64_t errval, debug64_t offset);
  sb/Context.h(124):    static void Dump(NodeBase::fn_name_arg func,
  sb/Factory.h(230):    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  sb/GlobalAddress.h(47):    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
  sb/GlobalAddress.h(66):    GlobalAddress(GlobalAddress&& that) = default;
  sb/LocalAddress.h(55):    LocalAddress(LocalAddress&& that) = default;
  sb/Message.h(181):    Message* FindSignal(SignalId sid) const;
  sb/Parameter.h(89):    ProtocolId Prid() const { return prid_; }
  sb/ProtocolLayer.h(68):    bool IsLowermost() const { return lower_ == nullptr; }
  sb/ProtocolSM.h(135):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  sb/ProtocolSM.h(166):    bool DropPeer(const GlobalAddress& peerPrevRemAddr);
  sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  sb/SbEvents.h(131):    Message* SavedMsg() const { return savedMsg_; }
  sb/SbEvents.h(227):    StateId CurrState() const { return currState_; }
  sb/SbEvents.h(231):    StateId NextState() const { return nextState_; }
  sb/SbEvents.h(372):    bool IsInitiation() const { return initiation_; }
  sb/SbEvents.h(383):    Message* GetMessage() const { return message_; }
  sb/Service.h(122):    bool Disable();
  sb/Service.h(126):    bool Enable();
  sb/ServiceSM.h(136):    bool HasTriggered(TriggerId tid) const;
  sb/Signal.h(85):    ProtocolId Prid() const { return prid_; }
  sb/State.h(64):    ServiceId Sid() const { return sid_; }
  sb/TextTlvMessage.h(58):    explicit TextTlvMessage(SbIpBufferPtr& buff);
  sb/TextTlvMessage.h(62):    TextTlvMessage(ProtocolSM* psm, size_t size);
  sb/TextTlvMessage.h(68):    bool Receive();
  sb/TlvMessage.h(58):    TlvMessage(const TlvParm& parm, ProtocolSM* psm);
  sb/TlvMessage.h(67):    virtual TlvParm* Wrap(const TlvMessage& msg, ParameterId pid);
  sb/TlvMessage.h(176):    size_t AllParms(const TlvParm* ptab[], size_t size) const;
  sb/TlvMessage.h(182):    size_t FindParms(ParameterId pid, const TlvParm* ptab[], size_t size) const;
  sb/TlvMessage.h(196):    TlvParm* AddBytes(const NodeBase::byte_t* src, size_t size, ParameterId pid);
  sb/TlvMessage.h(202):    TlvParm* CopyParm(const TlvParm& src, ParameterId pid = NodeBase::NIL_ID);
  sb/TlvMessage.h(263):    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
  sb/TlvMessage.h(270):    virtual bool MatchParm
  sb/TlvMessage.h(286):    size_t ParmOffset(const ParmIterator& pit) const;
  sb/TlvParameter.h(68):    static Id ExtractPid(const TlvParm& parm);
  sn/PotsMultiplexer.h(77):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
W033 Unused typedef
  nb/NbTypes.h(226): using PersistentStr =
W037 Member hides inherited name
  cb/BcSessions.h(316):    static const Id NextId = FirstId + 50;
  cb/BcSessions.h(883):    static const Id NextId                 = FirstUn + 7;
  cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  cb/ProxyBcSessions.h(213):    static const Id FirstId = BcEvent::NextId;
  cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  mb/Tones.h(77):    static ptrdiff_t CellDiff();
  nb/Deferred.h(93):    static ptrdiff_t LinkDiff();
  nw/SysIpL3Addr.h(105):    void HostToNetwork(IPv4Addr& netaddr, ipport_t& netport) const;
  nw/SysIpL3Addr.h(110):    void HostToNetwork(uint16_t netaddr[8], ipport_t& netport) const;
  nw/SysIpL3Addr.h(115):    void NetworkToHost(IPv4Addr netaddr, ipport_t netport);
  nw/SysIpL3Addr.h(120):    void NetworkToHost(const uint16_t netaddr[8], ipport_t netport);
  nw/SysIpL3Addr.h(160):    std::string to_str(bool verbose) const;
  sb/Context.h(165):    static ptrdiff_t LinkDiff();
  sb/Timer.h(109):    static ptrdiff_t LinkDiff();
W038 Class could be namespace
  pb/PotsProtocol.h(213): class Facility
W042 Member could be private
  cb/BcAddress.h(175):    static bool IsValidDigit(Digit d)
  cb/BcAddress.h(182):    Rc AddDigit(Digit d);
  cb/BcAddress.h(201):    DigitCount Size() const;
  cb/BcProtocol.h(236):    void EnsureMediaMsg() override;
  cb/BcProtocol.h(245):    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  cb/BcProtocol.h(423):    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  cb/BcSessions.h(1145):    CipPsm* AllocNPsm();
  cb/ProxyBcSessions.h(488):    ProxyBcPsm* FirstBroadcast() const;
  cb/ServiceCodeRegistry.h(54):    void SetService(Address::SC sc, ServiceId sid);
  ct/CodeDirSet.h(54):    void to_str(stringVector& strings, bool verbose) const override;
  ct/CodeFile.h(131):    const CxxTokenList& Items() const { return items_; }
  ct/CodeFile.h(132):    const IncludePtrVector& Includes() const { return incls_; }
  ct/CodeFile.h(266):    void GetLineCounts() const;
  ct/CodeFile.h(296):    size_t FindFirstReference(const CxxTokenVector& refs) const;
  ct/CodeFile.h(301):    size_t FindLastUsage(const CxxNamedSet& usages) const;
  ct/CodeFileSet.h(114):    void to_str(stringVector& strings, bool verbose) const override;
  ct/CodeItemSet.h(64):    void to_str(stringVector& strings, bool verbose) const override;
  ct/Cxx.h(558):    Numeric(NumericType type, size_t width, bool sign) :
  ct/CxxArea.h(92):    Typedef* FindType(const std::string& name) const;
  ct/CxxArea.h(174):    Enum* FindEnum(const std::string& name) const;
  ct/CxxArea.h(178):    Enumerator* FindEnumerator(const std::string& name) const;
  ct/CxxArea.h(392):    void FindCtors(FunctionVector& ctors) const;
  ct/CxxArea.h(408):    FunctionDefinition GetFuncDefinition(FunctionRole role) const;
  ct/CxxArea.h(520):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  ct/CxxArea.h(998):    Namespace* FindNamespace(const std::string& name) const;
  ct/CxxDirective.h(279):    virtual CxxToken* GetValue() const = 0;
  ct/CxxDirective.h(328):    CxxToken* RootType() const override { return GetValue(); }
  ct/CxxExecute.h(164):    size_t Refs() const;
  ct/CxxExecute.h(759):    static Cxx::Access ScopeAccess() { return Frame_->ScopeAccess(); }
  ct/CxxExecute.h(890):    static bool OptionIsOn(char opt);
  ct/CxxExecute.h(898):    static void Trace(CxxTrace::Action act, const CodeFile& file);
  ct/CxxNamed.h(265):    virtual bool ResolveTemplate
  ct/CxxNamed.h(636):    TypeName* Last() const;
  ct/CxxNamed.h(803):    bool ResolveTemplate
  ct/CxxNamed.h(955):    bool IsUnboundedArray() const { return array_; }
  ct/CxxNamed.h(1216):    DataSpec(const DataSpec& that);
  ct/CxxScope.h(355):    const Data* GetDecl() const { return (defn_ ? mate_ : this); }
  ct/CxxScope.h(1156):    bool IsDefaulted() const { return GetDefn()->defaulted_; }
  ct/CxxScope.h(1210):    Function* GetBase() const { return GetDecl()->base_; }
  ct/CxxScope.h(1276):    size_t MaxArgs() const { return args_.size(); }
  ct/CxxScope.h(1341):    bool IsInvokedInBase() const;
  ct/CxxScope.h(1374):    void CheckAccessControl() const override;
  ct/CxxScope.h(1378):    void CheckIfHiding() const override;
  ct/CxxScoped.h(70):    bool IsClassMember() const;
  ct/CxxScoped.h(79):    bool IsSubscopeOf(const std::string& fqSuper) const;
  ct/CxxScoped.h(136):    bool Contains(const CxxToken* item) const;
  ct/CxxScoped.h(613):    void CheckAccessControl() const override;
  ct/CxxScoped.h(1135):    bool ResolveTemplate
  ct/CxxScoped.h(1876):    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
  ct/CxxStrLiteral.h(78):    static DataPtr CreateRef()
  ct/CxxToken.h(505):    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
  ct/Lexer.h(160):    bool Advance();
  ct/Lexer.h(373):    const LineInfo* GetLineInfo(size_t pos) const;
  ct/Lexer.h(423):    bool LineHasTrailingCommentAt(size_t n, size_t offset) const;
  ct/Lexer.h(461):    size_t LineRfindFirstOf(size_t pos, const std::string& chars) const;
  ct/Lexer.h(537):    NodeBase::word CheckDepth(size_t n) const;
  ct/LibraryVarSet.h(53):    void to_str(stringVector& strings, bool verbose) const override;
  dip/Token.h(95):    bool is_number() const;
  dip/TokenMessage.h(123):    size_t set_from(const Token* stream);
  dip/TokenMessage.h(128):    size_t set_from(const Token* stream, size_t length);
  mb/MediaEndpt.h(108):    virtual void EndOfTransaction();
  mb/MediaPsm.h(132):    Tone::Id GetOgTone() const { return ogTone_; }
  mb/MediaPsm.h(170):    void SetOgPort(Switch::PortId ogport);
  mb/MediaPsm.h(193):    void PrepareOgMsgq() override;
  mb/MediaPsm.h(197):    Event* ReceiveMsg(Message& msg) override;
  mb/Switch.h(74):    static bool IsValidPort(PortId pid)
  nb/Base.h(90):    virtual size_t Summarize(std::ostream& stream, uint32_t selector) const
  nb/CfgBitParm.h(52):    virtual bool CurrValue() const = 0;
  nb/CfgBitParm.h(56):    virtual bool NextValue() const = 0;
  nb/CfgBitParm.h(70):    bool SetNext(c_string input) override;
  nb/CfgBoolParm.h(68):    bool SetNextValue(bool value) override;
  nb/CfgFlagParm.h(48):    bool CurrValue() const override;
  nb/CfgFlagParm.h(69):    bool SetNextValue(bool value) override;
  nb/CfgIntParm.h(62):    virtual bool SetNextValue(word value);
  nb/CfgIntParm.h(84):    bool SetNext(c_string input) override;
  nb/CfgParm.h(68):    c_string Key() const;
  nb/CfgParm.h(100):    virtual std::string GetCurr() const = 0;
  nb/CfgParmRegistry.h(60):    CfgTuple* FindTuple(const std::string& key) const;
  nb/Class.h(75):    virtual MemoryType ObjType() const = 0;
  nb/Class.h(137):    virtual Object* New(size_t size);
  nb/CliBuffer.h(104):    bool ReadingFromFile() const;
  nb/CliCommand.h(46):    static const char CommandSeparator;
  nb/CliStack.h(68):    const CliCommand* FindCommand
  nb/CliText.h(61):    c_string HelpText() const;
  nb/Heap.h(109):    size_t MaxInUse() const { return maxInUse_; }
  nb/LogGroup.h(76):    id_t Gid() const { return gid_.GetId(); }
  nb/LogGroup.h(80):    bool Suppressed() const { return suppressed_; }
  nb/MainArgs.h(66):    static void PushBack(const std::string& arg);
  nb/MutexRegistry.h(56):    Mutex* Find(const std::string& name) const;
  nb/Object.h(106):    virtual InstanceId GetInstanceId() const;
  nb/ObjectPoolRegistry.h(61):    bool NullifyObjectData() const { return nullifyObjectDataCfg_->CurrValue(); }
  nb/Registry.h(493):    void Purge()
  nb/StatisticsGroup.h(54):    static const size_t ReportWidth;
  nb/StatisticsGroup.h(71):    id_t Gid() const { return gid_.GetId(); }
  nb/SysThread.h(92):    typedef void (*sighandler_t)(signal_t sig);
  nb/Thread.h(151):    static void ResetFlags();
  nb/Thread.h(166):    SysThreadId NativeThreadId() const;
  nb/Thread.h(170):    Faction GetFaction() const { return faction_; }
  nb/TraceRecord.h(54):    static const uint32_t InvalidSlot;
  nw/IoThread.h(87):    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  nw/IpPort.h(193):    virtual IoThread* CreateIoThread();
  nw/NwTracer.h(63):    bool PeersEmpty() const;
  nw/NwTracer.h(67):    bool PortsEmpty() const;
  nw/SysTcpSocket.h(90):    NodeBase::word Connect(const SysIpL3Addr& remAddr);
  nw/SysTcpSocket.h(138):    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
  nw/SysTcpSocket.h(160):    bool SetClose(bool graceful);
  nw/SysTcpSocket.h(189):    bool IsOpen() const;
  nw/SysUdpSocket.h(73):    NodeBase::word SendTo
  nw/TcpIoThread.h(75):    void Unblock() override;
  nw/TcpIpService.h(86):    IpPort* CreatePort(ipport_t pid) override;
  nw/UdpIoThread.h(58):    void Unblock() override;
  nw/UdpIpService.h(59):    IpPort* CreatePort(ipport_t pid) override;
  pb/PotsCircuit.h(134):    void ResetCircuit();
  pb/PotsFeature.h(72):    Id Fid() const { return Id(fid_.GetId()); }
  pb/PotsFeature.h(80):    c_string FullName() const { return name_; }
  pb/PotsFeature.h(84):    bool CanBeDeactivated() const { return deactivation_; }
  pb/PotsFeatureProfile.h(67):    PotsFeature::Id Fid() const { return fid_; }
  sb/Context.h(157):    bool StopTimer(const Base& owner, TimerId tid);
  sb/Context.h(191):    virtual void EndOfTransaction() { }
  sb/Event.h(129):    virtual bool Save();
  sb/Event.h(133):    virtual Event* Restore(EventHandler::Rc& rc);
  sb/Event.h(137):    virtual void Free();
  sb/Factory.h(150):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  sb/Factory.h(234):    virtual Context* AllocContext() const;
  sb/InvokerPool.h(76):    const NodeBase::Registry<InvokerThread>& Invokers() const
  sb/InvokerThread.h(57):    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
  sb/Message.h(333):    virtual void Handled(bool retain);
  sb/Message.h(337):    virtual bool SendFailure(NodeBase::debug64_t errval);
  sb/MsgPort.h(53):    MsgPort(const Message& msg, Context& ctx);
  sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  sb/ProtocolSM.h(143):    ProtocolId GetProtocol() const;
  sb/ProtocolSM.h(255):    bool SendMsg(Message& msg) override;
  sb/SbTrace.h(520):    const StateId stid_;
  sb/Service.h(80):    static bool IsValidPortId(PortId pid)
  sb/Service.h(112):    bool IsModifiable() const { return modifiable_; }
  sb/ServiceSM.h(99):    StateId NextState() const { return nextState_; }
  sb/TlvMessage.h(147):       ParmIterator() : mptr(nullptr), pptr(nullptr), pindex(0) { }
  sb/TlvMessage.h(150):       ParmIterator& operator=(const ParmIterator& that) = default;
  sb/TlvMessage.h(165):    TlvParm* FirstParm(ParmIterator& pit) const;
  sb/TlvMessage.h(170):    TlvParm* NextParm(ParmIterator& pit) const;
  sb/TlvMessage.h(191):    virtual TlvParm* AddParm(ParameterId pid, size_t plen);
  sb/TlvMessage.h(276):    virtual void AddFence();
  sb/TlvMessage.h(280):    TlvMsgLayout* TlvLayout() const
  sb/TlvMessage.h(291):    Fence* FencePtr() const;
  sb/TlvMessage.h(295):    void CheckFence() const;
  sb/Trigger.h(79):    static bool IsValidId(Id tid)
  sn/PotsCwtService.cpp(263):    void StartTimer(TimerId tid, uint32_t secs);
  sn/PotsMultiplexer.h(160):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  sn/PotsSessions.h(410):    ProtocolSM* TimerPsm(TimerId tid) const;
  sn/PotsTreatmentRegistry.h(58):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  sn/PotsTreatments.h(96):    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
  st/TestSessions.h(265):    void UpdateTestPsm();
  st/TestSessions.h(348):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  cb/BcAddress.h(124):    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  ct/CtIncrement.cpp(91):    static LibrarySet* Evaluate(CliThread& cli);
  ct/CxxArea.h(68):    const ClassPtrVector* Classes() const { return &classes_; }
  ct/CxxArea.h(70):    const EnumPtrVector* Enums() const { return &enums_; }
  ct/CxxArea.h(71):    const ForwardPtrVector* Forws() const { return &forws_; }
  ct/CxxArea.h(74):    const TypedefPtrVector* Types() const { return &types_; }
  ct/CxxArea.h(75):    const AsmPtrVector* Assembly() const { return &assembly_; }
  ct/CxxArea.h(76):    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
  ct/CxxDirective.h(874):    const std::string& GetText() const { return text_; }
  ct/CxxNamed.h(211):    void DisplayReferent(std::ostream& stream, bool fq) const;
  ct/CxxNamed.h(221):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  ct/CxxNamed.h(1052):    TypeSpecUser GetUserType() const { return user_; }
  ct/CxxScope.h(73):    void ReplaceTemplateParms(std::string& code,
  ct/CxxScope.h(335):    bool IsThreadLocal() const { return thread_local_; }
  ct/CxxScope.h(339):    bool IsConstexpr() const { return constexpr_; }
  ct/CxxScope.h(343):    bool WasInited() const { return GetDecl()->inited_; }
  ct/CxxScope.h(360):    const Data* GetDefn() const;
  ct/CxxScoped.h(106):    CxxScoped* FindInheritedName() const;
  ct/CxxScoped.h(125):    virtual bool IsUnused() const { return false; }
  ct/CxxScoped.h(141):    void DisplayFiles(std::ostream& stream) const;
  ct/CxxToken.h(479):    std::string strLocation() const;
  ct/Lexer.h(385):    size_t PrevBegin(size_t pos) const;
  ct/Lexer.h(397):    LineType PosToType(size_t pos) const;
  ct/Lexer.h(401):    bool IsBlankLine(size_t pos) const;
  ct/Lexer.h(405):    size_t LineSize(size_t pos) const;
  ct/Lexer.h(409):    bool OnSameLine(size_t pos1, size_t pos2) const;
  ct/Lexer.h(414):    int CompareCode(size_t pos, const std::string& str) const;
  ct/Lexer.h(418):    size_t FindComment(size_t pos) const;
  ct/Lexer.h(433):    size_t LineFindNext(size_t pos) const;
  ct/Lexer.h(437):    bool IsFirstNonBlank(size_t pos) const;
  ct/Lexer.h(441):    bool NoCodeFollows(size_t pos) const;
  ct/Lexer.h(447):    size_t LineFind(size_t pos, const std::string& str) const;
  ct/Lexer.h(451):    size_t LineRfind(size_t pos, const std::string& str) const;
  ct/Lexer.h(465):    size_t LineFindNonBlank(size_t pos) const;
  ct/Lexer.h(469):    size_t LineRfindNonBlank(size_t pos) const;
  ct/Lexer.h(481):    size_t FindNonBlank(size_t pos) const;
  nb/Base.h(83):    virtual void Display(std::ostream& stream,
  nb/Base.h(113):    void LogSubtended(std::ostream& stream,
  nb/CliCommand.h(51):    static fixed_string UnexpectedIndex;
  nb/CliCommandSet.h(44):    bool BindCommand(CliCommand& comm);
  nb/CliParm.h(131):    static fixed_string AnyStringParm;
  nb/CliParm.h(166):    bool GetBoolParm(bool& b, CliThread& cli) const;
  nb/CliParm.h(176):    bool GetCharParm(char& c, CliThread& cli) const;
  nb/CliParm.h(186):    bool GetPtrParm(void*& p, CliThread& cli) const;
  nb/CliParm.h(212):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  nb/CliParm.h(234):    bool GetFileName(std::string& s, CliThread& cli) const;
  nb/CliParm.h(246):    bool GetIdentifier(std::string& s, CliThread& cli,
  nb/CliParm.h(261):    bool IsOptional() const { return opt_; }
  nb/CliText.h(65):    const Registry<CliParm>& Parms() const { return parms_; }
  nb/FunctionTrace.h(44):    FunctionTrace();
  nb/MsgBuffer.h(47):    MsgBuffer(const MsgBuffer& that);
  nb/Object.h(67):    virtual void Patch(sel_t selector, void* arguments) { }
  nb/ObjectPool.h(122):    Pooled* NextUsed(PooledObjectId& bid) const;
  nb/SoftwareException.h(41):    SoftwareException(debug64_t errval, debug64_t offset);
  nb/SoftwareException.h(50):    SoftwareException(const SoftwareException& that) = default;
  nb/Statistics.h(68):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  nw/InputHandler.h(71):    IpPort* Port() const { return port_; }
  nw/SysIpL2Addr.h(57):    SysIpL2Addr(const SysIpL2Addr& that) = default;
  nw/SysSocket.h(107):    bool IsValid() const;
  nw/SysSocket.h(128):    virtual AllocRc SetService(const IpService* service, bool shared);
  nw/SysSocket.h(145):    void OutputLog(NodeBase::LogId id,
  pb/PotsProtocol.h(263):    explicit PotsMessage(SbIpBufferPtr& buff);
  sb/Event.h(95):    enum Location
  sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  sb/Message.h(241):    NodeBase::MsgDirection Dir() const;
  sb/ProtocolLayer.h(64):    bool IsUppermost() const { return upper_ == nullptr; }
  sb/ProtocolSM.h(75):    enum IncomingRc
  sb/ProtocolSM.h(84):    enum OutgoingRc
  sb/ProtocolSM.h(129):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  sb/Service.h(88):    virtual NodeBase::c_string PortName(PortId pid) const;
W044 Typedef of pointer type
  nb/SysDecls.h(46): typedef void* SysHeap_t;
  nb/SysStackTrace.win.cpp(53): typedef void* StackFrames[MaxFrames];
  nb/SysTypes.h(101): typedef char* ptr_t;
  nb/SysTypes.h(102): typedef const char* const_ptr_t;
  nb/SysTypes.h(119): typedef const char* c_string;
  nb/SysTypes.h(120): typedef const char* const fixed_string;
  nb/SysTypes.h(125): typedef const char* const fn_name;      // for defining a function name
  nb/SysTypes.h(126): typedef const char* const fn_name_arg;  // when fn_name is an argument
W047 Data is init-only
  nb/Gate.cpp(51):    std::unique_lock<std::mutex> lock(mutex_);
W048 Data is write-only
  dip/MapAndUnits.h(117):    bool game_started;                // set when the game has begun
  dip/MapAndUnits.h(143):    word our_number_of_disbands;    // disbands required (negative for builds)
  nb/Thread.cpp(917):    SteadyTime::Point readyTime_;
  nt/RecoveryThread.cpp(187):    int data_;
W050 Data is not private
  ct/CxxDirective.h(349):    size_t refs_ : 16;
  ct/CxxExecute.h(337):    CxxToken* item_;
  ct/CxxNamed.h(999):    bool ptrDet_: 1;
  ct/CxxNamed.h(1003):    bool refDet_: 1;
  ct/Lexer.h(573):    std::string code_;
  ct/Lexer.h(577):    CodeFile* file_;
  nb/CliThread.h(211):    std::unique_ptr<CliBuffer> ibuf;
  nb/CliThread.h(215):    ostringstreamPtr obuf;
  nb/Statistics.h(87):    std::atomic_size_t curr_;
  nb/Statistics.h(91):    std::atomic_size_t prev_;
  nb/Statistics.h(95):    std::atomic_uint64_t total_;
  nb/Statistics.h(99):    size_t divisor_;
  nb/TraceRecord.h(125):    Id rid_ : 8;
  nw/IoThread.h(91):    const ipport_t port_;
  nw/IoThread.h(96):    IpPort* ipPort_;
  nw/IoThread.h(100):    SysIpL2Addr self_;
  nw/IoThread.h(104):    size_t recvs_;
  nw/IoThread.h(108):    SysIpL3Addr txAddr_;
  nw/IoThread.h(113):    SysIpL3Addr rxAddr_;
  nw/IoThread.h(117):    NodeBase::SteadyTime::Point time_;
  nw/IoThread.h(121):    NodeBase::byte_t* buffer_;
  sb/SbTrace.h(482):    ServiceId owner_;
  sb/SbTrace.h(486):    const EventId eid_;
  sb/SbTrace.h(516):    const ServiceId sid_;
  sb/SbTrace.h(520):    const StateId stid_;
  sb/SbTrace.h(524):    const EventHandler::Rc rc_;
W053 Data could be const
  an/PotsTrafficThread.cpp(175):    Q1Link link_;
  cb/BcSessions.h(340):    Progress::Ind progress_;
  cb/BcSessions.h(356):    Cause::Ind cause_;
  ct/Library.h(241):    LibraryVarSet* varSet_;
  ct/LibraryTypes.h(64):    size_t level;    // the file's level in the build
  dip/BotThread.h(112):       BotEvent event;         // event
  dip/DipProtocol.h(144):    DipHeader header;  // no parameters (length = 0)
  dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  mb/Circuit.h(93):    RegCell port_;
  nb/Alarm.h(133):    RegCell aid_;
  nb/BuddyHeap.cpp(56):    Q2Link link;
  nb/CfgIntParm.h(96):    word min_;
  nb/CfgIntParm.h(100):    word max_;
  nb/CfgParm.h(158):    Q1Link link_;
  nb/CfgTuple.h(122):    Q1Link link_;
  nb/CliBuffer.cpp(61):    istreamPtr file_;
  nb/CliIncrement.h(110):    RegCell iid_;
  nb/CliIntParm.h(71):    word min_;
  nb/CliIntParm.h(75):    word max_;
  nb/CliIntParm.h(79):    bool hex_;
  nb/Deferred.h(101):    Q2Link link_;
  nb/Deferred.h(105):    Base* const owner_;
  nb/Log.h(188):    RegCell lid_;
  nb/LogGroup.h(137):    RegCell gid_;
  nb/Module.h(134):    RegCell mid_;
  nb/Mutex.h(149):    RegCell mid_;
  nb/PosixSignal.h(135):    RegCell sid_;
  nb/Singletons.cpp(41):    MemoryType type;    // the type of memory that the singleton uses
  nb/Statistics.h(115):    RegCell sid_;
  nb/StatisticsGroup.h(97):    RegCell gid_;
  nb/Symbol.h(112):    Q1Link link_;
  nt/FunctionStats.h(91):    Q2Link link_;
  nt/NtIncrement.cpp(1469):    Q1Link link_;
  nt/NtIncrement.cpp(1955):    Q2Link link_;
  nw/IpPort.h(211):    NodeBase::Q1Link link_;
  nw/IpService.h(160):    RegCell sid_;
  nw/IpServiceCfg.h(60):    IpService* const service_;
  nw/NwDaemons.h(98):    IoThreadRecreator* recreator_;
  nw/NwTypes.h(60):       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
  pb/PotsFeatureProfile.h(99):    Q1Link link_;
  pb/PotsHtlFeature.h(59):    Address::DN dn_;
  sb/Context.h(307):    NodeBase::Q2Link link_;
  sb/Context.h(331):    NodeBase::Faction faction_;
  sb/Initiator.h(141):    NodeBase::Q1Link link_;
  sb/InvokerThread.h(132):    NodeBase::RegCell iid_;
  sb/InvokerThread.h(158):    static NodeBase::word RtcYieldPercent_;
  sb/Timer.h(137):    TimerId tid_;
  sb/Timer.h(149):    NodeBase::Q2Link link_;
  sn/PotsCwmService.cpp(190):    Cause::Ind cause_;
  sn/PotsCwtService.cpp(154):    Facility::Ind ind_;
  sn/PotsTreatments.h(168):    PotsTreatmentQueue::QId qid_;
  sn/PotsTreatments.h(172):    Q1Link link_;
  sn/PotsTreatments.h(201):    Tone::Id tone_;
  sn/PotsTreatments.h(205):    uint32_t secs_;
W054 Data could be const pointer
  ct/LibraryTypes.h(63):    CodeFile* file;  // the file
W055 Data need not be mutable
  dip/BotThread.h(113):       mutable uint32_t secs;  // delay
W056 Implicit constructor invoked: POD members not initialized
i nb/SystemTime.cpp(101):    tm ymdhms;
  nw/ByteBuffer.h(63): class TinyBuffer : public ByteBuffer
  nw/ByteBuffer.h(74): class SmallBuffer : public ByteBuffer
  nw/ByteBuffer.h(85): class MediumBuffer : public ByteBuffer
  nw/ByteBuffer.h(96): class LargeBuffer : public ByteBuffer
  nw/ByteBuffer.h(107): class HugeBuffer : public ByteBuffer
i nw/SysIpL2Addr.win.cpp(50):       addrinfo hints;
i nw/SysIpL3Addr.win.cpp(51):    addrinfo hints;
i nw/SysIpL3Addr.win.cpp(132):    sockaddr_in ipv4addr;
i nw/SysIpL3Addr.win.cpp(133):    sockaddr_in6 ipv6addr;
i nw/SysSocket.win.cpp(127):    sockaddr_in ipv4addr;
i nw/SysSocket.win.cpp(128):    sockaddr_in6 ipv6addr;
i nw/SysSocket.win.cpp(322):    WSAData wsaData;
i nw/SysTcpSocket.win.cpp(47):    sockaddr_in ipv4peer;
i nw/SysTcpSocket.win.cpp(48):    sockaddr_in6 ipv6peer;
i nw/SysTcpSocket.win.cpp(98):    sockaddr_in ipv4peer;
i nw/SysTcpSocket.win.cpp(99):    sockaddr_in6 ipv6peer;
i nw/SysTcpSocket.win.cpp(191):    sockaddr_in ipv4self;
i nw/SysTcpSocket.win.cpp(192):    sockaddr_in6 ipv6self;
i nw/SysTcpSocket.win.cpp(329):    sockaddr_in ipv4peer;
i nw/SysTcpSocket.win.cpp(330):    sockaddr_in6 ipv6peer;
i nw/SysTcpSocket.win.cpp(404):    linger linger_opts;
i nw/SysUdpSocket.win.cpp(90):    sockaddr_in ipv4peer;
i nw/SysUdpSocket.win.cpp(91):    sockaddr_in6 ipv6peer;
i nw/SysUdpSocket.win.cpp(172):    sockaddr_in ipv4peer;
i nw/SysUdpSocket.win.cpp(173):    sockaddr_in6 ipv6peer;
W060 Base class constructor is public
  ct/CxxArea.h(259):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  ct/Lexer.h(79):    Lexer();
  nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, c_string expl);
  nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, c_string expl);
  nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  nb/CliIntParm.h(45):    CliIntParm(c_string help, word min, word max,
  nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  nb/CliTextParm.h(49):    explicit CliTextParm(c_string help, bool opt = false,
  nb/FunctionTrace.h(44):    FunctionTrace();
  nb/NbIncrement.h(41):    StatusCommand();
  nb/NbIncrement.h(56):    LogsAction();
  nb/NbIncrement.h(76):    explicit LogsCommand(bool bind = true);
  nb/NbIncrement.h(93):    SetWhatParm();
  nb/NbIncrement.h(107):    explicit SetCommand(bool bind = true);
  nb/NbIncrement.h(124):    IncludeWhatParm();
  nb/NbIncrement.h(138):    explicit IncludeCommand(bool bind = true);
  nb/NbIncrement.h(155):    ExcludeWhatParm();
  nb/NbIncrement.h(168):    explicit ExcludeCommand(bool bind = true);
  nb/NbIncrement.h(199):    explicit QueryCommand(bool bind = true);
  nb/NbIncrement.h(216):    SaveWhatParm();
  nb/NbIncrement.h(228):    explicit SaveCommand(bool bind = true);
  nb/NbIncrement.h(245):    ClearWhatParm();
  nb/NbIncrement.h(263):    explicit ClearCommand(bool bind = true);
  nb/SoftwareException.h(41):    SoftwareException(debug64_t errval, debug64_t offset);
  nb/SoftwareException.h(42):    SoftwareException(const std::string& errstr, debug64_t offset);
  nb/Statistics.h(131):    explicit Counter(const std::string& expl, size_t divisor = 1);
  nb/StreamRequest.h(54):    StreamRequest();
  nt/NtIncrement.h(44):    CorruptWhatParm();
  nt/NtIncrement.h(56):    explicit CorruptCommand(bool bind = true);
  nt/NtIncrement.h(98):    NtSaveWhatParm();
  nt/NtIncrement.h(110):    explicit NtSaveCommand(bool bind = true);
  nt/NtIncrement.h(123):    TestsAction();
  nt/NtIncrement.h(144):    explicit TestsCommand(bool bind = true);
  nw/IpBuffer.h(55):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  nw/NwCliParms.h(68):    IpAddrParm(NodeBase::c_string help, NodeBase::c_string text);
  nw/NwIncrement.h(39):    NwClearWhatParm();
  nw/NwIncrement.h(54):    explicit NwClearCommand(bool bind = true);
  nw/NwIncrement.h(69):    NwExcludeWhatParm();
  nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  nw/NwIncrement.h(97):    NwIncludeWhatParm();
  nw/NwIncrement.h(110):    explicit NwIncludeCommand(bool bind = true);
  nw/NwIncrement.h(127):    explicit NwQueryCommand(bool bind = true);
  nw/NwIncrement.h(142):    NwStatusCommand() = default;
  nw/SysIpL2Addr.h(42):    SysIpL2Addr();
  nw/SysIpL2Addr.h(49):    SysIpL2Addr(const std::string& text);
  nw/SysIpL3Addr.h(41):    SysIpL3Addr();
  nw/SysIpL3Addr.h(46):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  nw/SysIpL3Addr.h(53):    SysIpL3Addr(IPv4Addr netaddr, ipport_t netport,
  nw/SysIpL3Addr.h(60):    SysIpL3Addr(const uint16_t netaddr[8], ipport_t netport,
  nw/SysIpL3Addr.h(69):    explicit SysIpL3Addr(const std::string& text);
  nw/SysIpL3Addr.h(79):    SysIpL3Addr
  pb/PotsProtocol.h(263):    explicit PotsMessage(SbIpBufferPtr& buff);
  pb/PotsProtocol.h(267):    PotsMessage(ProtocolSM* psm, size_t size);
  sb/SbTrace.h(462):    EventTrace(Id rid, const Event& evt);
  sb/SbTrace.h(503):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  sb/TlvMessage.h(50):    TlvMessage(ProtocolSM* psm, size_t size);
  sb/TlvMessage.h(58):    TlvMessage(const TlvParm& parm, ProtocolSM* psm);
W065 Base class virtual destructor is not public
  ct/LibrarySet.h(202):    virtual ~LibrarySet();
  nb/CliAppData.h(82):    virtual ~CliAppData();
  nb/Exception.h(69):    virtual ~Exception();
  nb/Thread.h(280):    virtual ~Thread();
  nw/SysSocket.h(214):    virtual ~SysSocket();
  pb/PotsFeatureProfile.h(80):    virtual ~PotsFeatureProfile();
  sb/Context.h(187):    virtual ~Context();
  sb/Initiator.h(103):    virtual ~Initiator();
  sb/ProtocolLayer.h(126):    virtual ~ProtocolLayer();
  sb/ServiceSM.h(175):    virtual ~ServiceSM();
W075 Virtual function is public
  cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  cb/BcSessions.h(1076):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  cb/BcSessions.h(1208):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  cb/ProxyBcSessions.h(465):    virtual EventHandler::Rc RaiseReleaseUser
  cb/ProxyBcSessions.h(467):    virtual EventHandler::Rc RaiseProxyProgress
  cb/ProxyBcSessions.h(469):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  cb/ProxyBcSessions.h(470):    virtual EventHandler::Rc RaiseProxyRelease
  cb/ProxyBcSessions.h(510):    void SetUPsm(MediaPsm& psm) override;
  ct/CodeDirSet.h(54):    void to_str(stringVector& strings, bool verbose) const override;
  ct/CodeFileSet.h(114):    void to_str(stringVector& strings, bool verbose) const override;
  ct/CodeItemSet.h(64):    void to_str(stringVector& strings, bool verbose) const override;
  ct/CxxArea.h(102):    virtual Function* FindFunc(const std::string& name,
  ct/CxxArea.h(110):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  ct/CxxArea.h(114):    virtual CxxScoped* FindItem(const std::string& name) const;
  ct/CxxArea.h(284):    virtual ClassInst* EnsureInstance(const TypeName* type);
  ct/CxxArea.h(297):    virtual Class* BaseClass()
  ct/CxxArea.h(302):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  ct/CxxArea.h(341):    virtual Class* GetClassTemplate() const;
  ct/CxxArea.h(356):    virtual bool DerivesFrom(const Class* cls) const;
  ct/CxxArea.h(520):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  ct/CxxArea.h(622):    CxxTokenVector Items() const override;
  ct/CxxDirective.h(55):    virtual bool IsIncludeGuard() const { return false; }
  ct/CxxDirective.h(279):    virtual CxxToken* GetValue() const = 0;
  ct/CxxDirective.h(284):    virtual bool IsDefined() const { return true; }
  ct/CxxDirective.h(290):    virtual void SetExpr(ExprPtr& rhs);
  ct/CxxDirective.h(328):    CxxToken* RootType() const override { return GetValue(); }
  ct/CxxDirective.h(474):    virtual bool AddElif(Elif* e) { return false; }
  ct/CxxDirective.h(478):    virtual bool AddElse(const Else* e) { return false; }
  ct/CxxDirective.h(482):    virtual bool AddEndif(const Endif* e) { return false; }
  ct/CxxDirective.h(486):    virtual bool HasCompiledCode() const { return compile_; }
  ct/CxxExecute.cpp(126):    bool Display(ostream& stream, const string& opts) override;
  ct/CxxExecute.cpp(138):    bool Display(ostream& stream, const string& opts) override;
  ct/CxxExecute.cpp(154):    bool Display(ostream& stream, const string& opts) override;
  ct/CxxExecute.cpp(170):    bool Display(ostream& stream, const string& opts) override;
  ct/CxxExecute.cpp(198):    bool Display(ostream& stream, const string& opts) override;
  ct/CxxNamed.h(58):    virtual bool IsDeclaredInFunction() const { return false; }
  ct/CxxNamed.h(64):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  ct/CxxNamed.h(69):    virtual TemplateParms* GetTemplateParms() const { return nullptr; }
  ct/CxxNamed.h(79):    virtual std::string QualifiedName(bool scopes, bool templates)
  ct/CxxNamed.h(85):    virtual std::string ScopedName(bool templates) const;
  ct/CxxNamed.h(91):    virtual void GetScopedNames(stringVector& names, bool templates) const;
  ct/CxxNamed.h(96):    virtual Function* GetFunction() const { return nullptr; }
  ct/CxxNamed.h(103):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  ct/CxxNamed.h(108):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  ct/CxxNamed.h(131):    virtual CxxScoped* DirectType() const { return Referent(); }
  ct/CxxNamed.h(135):    virtual void FindReferent();
  ct/CxxNamed.h(141):    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
  ct/CxxNamed.h(145):    virtual void SetAsReferent(const CxxNamed* user) { }
  ct/CxxNamed.h(152):    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
  ct/CxxNamed.h(157):    virtual StackArg MemberToArg
  ct/CxxNamed.h(164):    virtual bool NamesReferToArgs(const NameVector& names,
  ct/CxxNamed.h(171):    virtual std::string ArgString(const TemplateParmToArgMap& tmap) const;
  ct/CxxNamed.h(177):    virtual void Instantiating(CxxScopedVector& locals) const;
  ct/CxxNamed.h(189):    virtual void GetDirectClasses(CxxUsageSets& symbols);
  ct/CxxNamed.h(196):    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
  ct/CxxNamed.h(201):    virtual bool ItemIsTemplateArg(const CxxNamed* item) const;
  ct/CxxNamed.h(206):    virtual std::string XrefName(bool templates) const;
  ct/CxxNamed.h(502):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  ct/CxxNamed.h(803):    bool ResolveTemplate
  ct/CxxNamed.h(808):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  ct/CxxNamed.h(1060):    virtual Function* GetFuncSpec() const { return nullptr; }
  ct/CxxNamed.h(1069):    virtual TypeTags* Tags() = 0;
  ct/CxxNamed.h(1070):    virtual const TypeTags* Tags() const = 0;
  ct/CxxNamed.h(1074):    virtual void AddArray(ArraySpecPtr& array) = 0;
  ct/CxxNamed.h(1080):    virtual TagCount Ptrs(bool arrays) const = 0;
  ct/CxxNamed.h(1086):    virtual TagCount Refs() const = 0;
  ct/CxxNamed.h(1091):    virtual TagCount Arrays() const = 0;
  ct/CxxNamed.h(1095):    virtual bool HasArrayDefn() const = 0;
  ct/CxxNamed.h(1099):    virtual void EnteringScope(const CxxScope* scope) = 0;
  ct/CxxNamed.h(1103):    virtual void EnterArrays() const = 0;
  ct/CxxNamed.h(1108):    virtual TypeTags GetAllTags() const = 0;
  ct/CxxNamed.h(1113):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  ct/CxxNamed.h(1118):    virtual void DisplayTags(std::ostream& stream) const = 0;
  ct/CxxNamed.h(1122):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  ct/CxxNamed.h(1128):    virtual void SetPtrs(TagCount count) = 0;
  ct/CxxNamed.h(1133):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  ct/CxxNamed.h(1137):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  ct/CxxNamed.h(1141):    virtual void SetUserType(TypeSpecUser user) const { user_ = user; }
  ct/CxxNamed.h(1152):    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  ct/CxxNamed.h(1159):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  ct/CxxNamed.h(1164):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  ct/CxxNamed.h(1168):    virtual void GetNames(stringVector& names) const = 0;
  ct/CxxScope.h(78):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  ct/CxxScope.h(83):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  ct/CxxScope.h(91):    virtual void AccessibilityOf
  ct/CxxScope.h(379):    virtual void Promote
  ct/CxxScope.h(384):    virtual bool IsUnionMember() const { return false; }
  ct/CxxScope.h(1374):    void CheckAccessControl() const override;
  ct/CxxScope.h(1378):    void CheckIfHiding() const override;
  ct/CxxScoped.h(59):    virtual bool NameRefersToItem(const std::string& name,
  ct/CxxScoped.h(88):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView& view) const;
  ct/CxxScoped.h(97):    virtual void RecordAccess(Cxx::Access access) const;
  ct/CxxScoped.h(110):    virtual void AddFiles(LibItemSet& imSet) const;
  ct/CxxScoped.h(115):    virtual void UpdateReference(CxxToken* item, bool insert) const;
  ct/CxxScoped.h(125):    virtual bool IsUnused() const { return false; }
  ct/CxxScoped.h(130):    virtual bool CheckIfUnused(Warning warning) const;
  ct/CxxScoped.h(613):    void CheckAccessControl() const override;
  ct/CxxScoped.h(1135):    bool ResolveTemplate
  ct/CxxScoped.h(1876):    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
  ct/CxxToken.h(71):    virtual void Delete();
  ct/CxxToken.h(75):    virtual void ItemDeleted(const CxxScoped* item) const { }
  ct/CxxToken.h(79):    virtual void SetLoc(CodeFile* file, size_t pos) const;
  ct/CxxToken.h(88):    virtual void SetContext(size_t pos);
  ct/CxxToken.h(98):    virtual void CopyContext(const CxxToken* that, bool internal);
  ct/CxxToken.h(104):    virtual CxxToken* Clone() const;
  ct/CxxToken.h(109):    virtual StackArg ResultType() const;
  ct/CxxToken.h(137):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  ct/CxxToken.h(141):    virtual void SetScope(CxxScope* scope) { }
  ct/CxxToken.h(146):    virtual CxxScope* GetScope() const { return nullptr; }
  ct/CxxToken.h(152):    virtual bool IsForward() const { return false; }
  ct/CxxToken.h(156):    virtual QualName* GetQualName() const { return nullptr; }
  ct/CxxToken.h(162):    virtual std::string TypeString(bool arg) const;
  ct/CxxToken.h(166):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  ct/CxxToken.h(172):    virtual Class* DirectClass() const;
  ct/CxxToken.h(176):    virtual bool IsConst() const { return false; }
  ct/CxxToken.h(180):    virtual bool IsVolatile() const { return false; }
  ct/CxxToken.h(184):    virtual bool IsConstPtr() const { return false; }
  ct/CxxToken.h(188):    virtual bool IsVolatilePtr() const { return false; }
  ct/CxxToken.h(192):    virtual bool IsConstPtr(size_t n) const { return false; }
  ct/CxxToken.h(196):    virtual bool IsVolatilePtr(size_t n) const { return false; }
  ct/CxxToken.h(204):    virtual bool IsStatic() const { return true; }
  ct/CxxToken.h(208):    virtual bool IsExtern() const { return false; }
  ct/CxxToken.h(212):    virtual void SetAccess(Cxx::Access access) { }
  ct/CxxToken.h(216):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  ct/CxxToken.h(221):    virtual bool IsAuto() const { return false; }
  ct/CxxToken.h(226):    virtual bool IsIndirect(bool arrays) const { return false; }
  ct/CxxToken.h(230):    virtual void Creating() { }
  ct/CxxToken.h(235):    virtual void Instantiate() { }
  ct/CxxToken.h(239):    virtual bool IsInitializing() const { return false; }
  ct/CxxToken.h(244):    virtual CxxToken* AutoType() const { return nullptr; }
  ct/CxxToken.h(249):    virtual Namespace* GetSpace() const { return nullptr; }
  ct/CxxToken.h(254):    virtual CxxArea* GetArea() const { return nullptr; }
  ct/CxxToken.h(259):    virtual Class* GetClass() const { return nullptr; }
  ct/CxxToken.h(264):    virtual CxxScope* GetMate() const { return nullptr; }
  ct/CxxToken.h(269):    virtual Class* Declarer() const { return GetClass(); }
  ct/CxxToken.h(273):    virtual CxxScope* GetTemplate() const { return nullptr; }
  ct/CxxToken.h(277):    virtual const TemplateArgPtrVector* Args() const { return nullptr; }
  ct/CxxToken.h(283):    virtual TypeName* GetTemplatedName() const;
  ct/CxxToken.h(287):    virtual CxxScope* GetTemplateInstance() const;
  ct/CxxToken.h(296):    virtual CxxScoped* FindTemplateAnalog(const CxxToken* item) const;
  ct/CxxToken.h(301):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  ct/CxxToken.h(306):    virtual void GetConvertibleTypes(StackArgVector& types, bool expl) { }
  ct/CxxToken.h(310):    virtual CxxScoped* Referent() const { return nullptr; }
  ct/CxxToken.h(315):    virtual bool VerifyReferents() const;
  ct/CxxToken.h(323):    virtual bool EnterScope() { return true; }
  ct/CxxToken.h(328):    virtual void EnterBlock();
  ct/CxxToken.h(333):    virtual void ExitBlock() const { }
  ct/CxxToken.h(339):    virtual bool AppendUnary() { return false; }
  ct/CxxToken.h(343):    virtual CxxToken* Back() { return this; }
  ct/CxxToken.h(348):    virtual bool WasRead() { return false; }
  ct/CxxToken.h(360):    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
  ct/CxxToken.h(365):    virtual bool SetNonConst() { return true; }
  ct/CxxToken.h(370):    virtual void WasMutated(const StackArg* arg) { }
  ct/CxxToken.h(376):    virtual void RecordUsage() { }
  ct/CxxToken.h(380):    virtual void UpdateXref(bool insert) { }
  ct/CxxToken.h(385):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) { }
  ct/CxxToken.h(402):    virtual CxxToken* PosToItem(size_t pos) const;
  ct/CxxToken.h(407):    virtual bool LocateItem(const CxxToken* item, size_t& n)
  ct/CxxToken.h(413):    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
  ct/CxxToken.h(418):    virtual void Check() const { }
  ct/CxxToken.h(422):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  ct/CxxToken.h(426):    virtual CxxTokenSet* Xref() const { return nullptr; }
  ct/CxxToken.h(430):    virtual bool InLine() const { return true; }
  ct/CxxToken.h(435):    virtual void Print
  ct/CxxToken.h(459):    virtual bool IsPOD() const { return GetNumeric().IsPOD(); }
  ct/CxxToken.h(474):    virtual void UpdatePos(EditorAction action,
  ct/CxxToken.h(701):    virtual void PushBack(uint32_t c) = 0;
  ct/LibraryItem.h(44):    virtual const std::string& Name() const;
  ct/LibraryItem.h(48):    virtual void Rename(const std::string& name);
  ct/LibraryItem.h(52):    virtual void GetDecls(CxxNamedSet& items) { }
  ct/LibrarySet.h(80):    virtual LibSetType GetType() const;
  ct/LibrarySet.h(86):    virtual NodeBase::word Check(NodeBase::CliThread& cli,
  ct/LibrarySet.h(93):    virtual NodeBase::word Count(std::string& result) const;
  ct/LibrarySet.h(99):    virtual NodeBase::word Countlines(std::string& result) const;
  ct/LibrarySet.h(105):    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
  ct/LibrarySet.h(111):    virtual NodeBase::word Format(std::string& expl) const;
  ct/LibrarySet.h(116):    virtual NodeBase::word LineTypes(NodeBase::CliThread& cli,
  ct/LibrarySet.h(125):    virtual NodeBase::word Parse
  ct/LibrarySet.h(132):    virtual NodeBase::word Scan(std::ostream& stream,
  ct/LibrarySet.h(139):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  ct/LibrarySet.h(143):    virtual BuildOrder SortInBuildOrder() const;
  ct/LibrarySet.h(148):    virtual LibrarySet* Assign(LibrarySet* that);
  ct/LibrarySet.h(149):    virtual LibrarySet* Intersection(const LibrarySet* that) const;
  ct/LibrarySet.h(150):    virtual LibrarySet* Difference(const LibrarySet* that) const;
  ct/LibrarySet.h(151):    virtual LibrarySet* Union(const LibrarySet* that) const;
  ct/LibrarySet.h(152):    virtual LibrarySet* Directories() const;
  ct/LibrarySet.h(153):    virtual LibrarySet* Files() const;
  ct/LibrarySet.h(154):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  ct/LibrarySet.h(155):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  ct/LibrarySet.h(156):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  ct/LibrarySet.h(157):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  ct/LibrarySet.h(158):    virtual LibrarySet* Implements() const;
  ct/LibrarySet.h(159):    virtual LibrarySet* UsedBy(bool self) const;
  ct/LibrarySet.h(160):    virtual LibrarySet* Users(bool self) const;
  ct/LibrarySet.h(161):    virtual LibrarySet* AffectedBy() const;
  ct/LibrarySet.h(162):    virtual LibrarySet* Affecters() const;
  ct/LibrarySet.h(163):    virtual LibrarySet* CommonAffecters() const;
  ct/LibrarySet.h(164):    virtual LibrarySet* NeededBy() const;
  ct/LibrarySet.h(165):    virtual LibrarySet* Needers() const;
  ct/LibrarySet.h(166):    virtual LibrarySet* DeclaredBy() const;
  ct/LibrarySet.h(167):    virtual LibrarySet* Declarers() const;
  ct/LibrarySet.h(168):    virtual LibrarySet* Definitions() const;
  ct/LibrarySet.h(169):    virtual LibrarySet* ReferencedBy() const;
  ct/LibrarySet.h(170):    virtual LibrarySet* Referencers() const;
  ct/LibraryVarSet.h(53):    void to_str(stringVector& strings, bool verbose) const override;
  dip/BaseBot.h(90):    virtual bool process_command_line_parameter(char token, std::string& value);
  dip/BaseBot.h(96):    virtual std::string report_command_line_parameters();
  mb/Circuit.h(72):    virtual std::string Name() const = 0;
  mb/Circuit.h(76):    virtual bool Supports(ProtocolId prid) const { return false; }
  mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  mb/MediaEndpt.h(78):    virtual void Deallocate();
  mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  nb/Base.h(83):    virtual void Display(std::ostream& stream,
  nb/Base.h(90):    virtual size_t Summarize(std::ostream& stream, uint32_t selector) const
  nb/Base.h(108):    virtual void GetSubtended(std::vector<Base*>& objects) const;
  nb/Base.h(119):    virtual void ClaimBlocks();
  nb/Base.h(137):    virtual void Cleanup() { }
  nb/Base.h(144):    virtual void Startup(RestartLevel level) { }
  nb/Base.h(152):    virtual void Shutdown(RestartLevel level) { }
  nb/Base.h(156):    virtual MemoryType MemType() const { return MemPermanent; }
  nb/CallbackRequest.h(44):    virtual void Callback() { }
  nb/CfgBoolParm.h(47):    bool CurrValue() const override { return curr_; }
  nb/CfgFlagParm.h(48):    bool CurrValue() const override;
  nb/CfgParm.h(72):    virtual void Explain(std::string& expl) const { expl = expl_; }
  nb/Class.h(71):    virtual void Initialize();
  nb/Class.h(75):    virtual MemoryType ObjType() const = 0;
  nb/Class.h(80):    virtual Object* Create();
  nb/Class.h(84):    virtual Object* GetQuasiSingleton();
  nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  nb/CliAppData.h(63):    virtual void EventOccurred(Event event);
  nb/CliCommand.h(60):    virtual word ExplainCommand(std::ostream& stream, bool verbose) const;
  nb/CliCommand.h(93):    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  nb/CliIncrement.h(75):    virtual void Enter();
  nb/CliIncrement.h(80):    virtual void Exit();
  nb/CliParm.h(143):    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
  nb/CliParm.h(151):    virtual void Explain(std::ostream& stream, col_t indent) const;
  nb/CliParm.h(161):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  nb/CliParm.h(171):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  nb/CliParm.h(181):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  nb/CliParm.h(191):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  nb/CliParm.h(219):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  nb/CliParm.h(229):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  nb/CliParm.h(239):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  nb/CliParm.h(252):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  nb/Exception.h(51):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  nb/Heap.h(55):    virtual size_t Size() const = 0;
  nb/Heap.h(59):    virtual MemoryType Type() const = 0;
  nb/Heap.h(63):    virtual void* Alloc(size_t size) = 0;
  nb/Heap.h(67):    virtual void Free(void* addr) = 0;
  nb/Heap.h(72):    virtual size_t BlockToSize(const void* addr) const = 0;
  nb/Heap.h(78):    virtual bool Validate(const void* addr) const = 0;
  nb/Heap.h(85):    virtual int SetPermissions(MemoryProtection attrs);
  nb/Heap.h(91):    virtual size_t CurrAvail() const = 0;
  nb/Heap.h(95):    virtual size_t Overhead() const = 0;
  nb/MsgBuffer.h(60):    virtual TraceStatus GetStatus() const;
  nb/Object.h(67):    virtual void Patch(sel_t selector, void* arguments) { }
  nb/Object.h(87):    virtual Class* GetClass() const;
  nb/Object.h(95):    virtual void PostInitialize() { }
  nb/Object.h(106):    virtual InstanceId GetInstanceId() const;
  nb/ObjectPool.h(103):    virtual Pooled* DeqBlock(size_t size);
  nb/ObjectPool.h(108):    virtual void EnqBlock(Pooled* obj, bool deleted);
  nb/ObjectPool.h(184):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  nb/Pooled.h(66):    virtual bool Passes(uint32_t selector) const { return assigned_; }
  nb/Statistics.h(64):    virtual uint64_t Overall() const;
  nb/Statistics.h(68):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  nb/StatisticsGroup.h(66):    virtual void DisplayStats
  nb/Thread.h(117):    virtual bool EnqMsg(MsgBuffer& msg);
  nb/Thread.h(191):    virtual TraceStatus CalcStatus(bool dynamic) const;
  nb/Thread.h(251):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  nb/Tool.h(60):    virtual c_string Name() const = 0;
  nb/Tool.h(64):    virtual c_string Expl() const = 0;
  nb/Tool.h(70):    virtual std::string Status() const;
  nb/TraceRecord.h(83):    virtual bool Display(std::ostream& stream, const std::string& opts);
  nw/ByteBuffer.h(44):    virtual NodeBase::byte_t* Bytes() = 0;
  nw/ByteBuffer.h(48):    virtual size_t Size() const = 0;
  nw/InputHandler.h(101):    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
  nw/InputHandler.h(109):    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
  nw/InputHandler.h(128):    virtual void ReceiveBuff
  nw/InputHandler.h(137):    virtual NodeBase::byte_t* HostToNetwork
  nw/InputHandler.h(143):    virtual void SocketFailed(SysSocket* socket) const { }
  nw/IpBuffer.h(64):    virtual IpBuffer* Clone() const;
  nw/IpBuffer.h(124):    virtual size_t PayloadSize() const;
  nw/IpBuffer.h(143):    virtual bool AddBytes
  nw/IpPort.h(106):    virtual SysTcpSocket* CreateAppSocket();
  nw/IpPort.h(155):    virtual void DisplayStats
  nw/IpService.h(63):    virtual c_string Name() const = 0;
  nw/IpService.h(67):    virtual ipport_t Port() const = 0;
  nw/IpService.h(71):    virtual IpProtocol Protocol() const = 0;
  nw/IpService.h(75):    virtual Faction GetFaction() const = 0;
  nw/IpService.h(80):    virtual bool Enabled() const = 0;
  nw/IpService.h(84):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  nw/IpService.h(88):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  nw/IpService.h(95):    virtual CliText* CreateText() const = 0;
  nw/IpService.h(101):    virtual bool HasSharedSocket() const = 0;
  nw/IpService.h(109):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  nw/SysIpL2Addr.h(73):    virtual void Nullify();
  nw/SysSocket.h(99):    virtual IpProtocol Protocol() const { return IpAny; }
  nw/SysSocket.h(128):    virtual AllocRc SetService(const IpService* service, bool shared);
  nw/SysSocket.h(134):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  nw/SysTcpSocket.h(181):    virtual void Acquire();
  nw/SysTcpSocket.h(185):    virtual void Release();
  nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  nw/TcpIpService.h(45):    virtual size_t MaxConns() const = 0;
  nw/TcpIpService.h(50):    virtual size_t MaxBacklog() const = 0;
  nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  pb/PotsFeature.h(94):    virtual PotsFeatureProfile* Subscribe
  pb/PotsFeatureProfile.h(58):    virtual bool Activate(const PotsProfile& profile, CliThread& cli);  //d
  pb/PotsFeatureProfile.h(63):    virtual bool Deactivate(PotsProfile& profile);
  sb/Context.h(98):    virtual ContextType Type() const = 0;
  sb/Context.h(102):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  sb/Context.h(106):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  sb/Context.h(110):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  sb/EventHandler.h(122):    virtual Rc ProcessEvent
  sb/Factory.h(124):    virtual NodeBase::CliText* CreateText() const;
  sb/Factory.h(130):    virtual Message* AllocOgMsg(SignalId sid) const;
  sb/Factory.h(137):    virtual bool InjectMsg(Message& msg) const;
  sb/Factory.h(143):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  sb/Factory.h(150):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  sb/Factory.h(160):    virtual bool ScreenIcMsgs(NodeBase::Q1Way<Message>& msgq);
  sb/Factory.h(182):    virtual void DisplayStats
  sb/InvokerPool.h(95):    virtual void DisplayStats
  sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  sb/Message.h(152):    virtual void Save();
  sb/Message.h(157):    virtual void Unsave();
  sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  sb/Message.h(176):    virtual bool SendToSelf();
  sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  sb/Message.h(262):    virtual bool Send(Route route);
  sb/Message.h(266):    virtual bool Restore();
  sb/Parameter.h(99):    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
  sb/Parameter.h(108):    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
  sb/Parameter.h(137):    virtual TestRc InjectMsg
  sb/Parameter.h(150):    virtual TestRc VerifyMsg
  sb/Protocol.h(77):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  sb/Protocol.h(83):    virtual void DisplayMsg(std::ostream& stream,
  sb/ProtocolLayer.h(52):    virtual MsgPort* Port() const = 0;
  sb/ProtocolLayer.h(56):    virtual ProtocolSM* UppermostPsm() const = 0;
  sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  sb/ProtocolLayer.h(93):    virtual Message::Route Route() const = 0;
  sb/ProtocolLayer.h(102):    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
  sb/RootServiceSM.h(46):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  sb/Service.h(88):    virtual NodeBase::c_string PortName(PortId pid) const;
  sb/Service.h(108):    virtual ServiceSM* AllocModifier() const;
  sb/ServiceSM.h(63):    virtual SsmContext* GetContext() const;
  sb/ServiceSM.h(71):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  sb/ServiceSM.h(77):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  sb/ServiceSM.h(83):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  sb/ServiceSM.h(104):    virtual void SetNextState(StateId stid);
  sb/ServiceSM.h(111):    virtual void PsmDeleted(const ProtocolSM& exPsm);
  sb/ServiceSM.h(125):    virtual void SetNextSap(TriggerId sap);
  sb/ServiceSM.h(131):    virtual void SetNextSnp(TriggerId snp);
  sb/ServiceSM.h(143):    virtual void MorphToService(ServiceId sid);
  sb/Signal.h(92):    virtual NodeBase::CliText* CreateText() const;
  sb/SsmFactory.h(42):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  sb/SsmFactory.h(48):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  sb/TlvMessage.h(67):    virtual TlvParm* Wrap(const TlvMessage& msg, ParameterId pid);
  sb/TlvMessage.h(191):    virtual TlvParm* AddParm(ParameterId pid, size_t plen);
  sb/TlvMessage.h(206):    virtual void DeleteParm(TlvParm& parm);
  sn/PotsCwtService.cpp(268):    void Cancel() override;
  sn/PotsTreatments.h(149):    virtual EventHandler::Rc ApplyTreatment
W077 Virtual function has no overrides
  mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  mb/MediaEndpt.h(78):    virtual void Deallocate();
  mb/MediaEndpt.h(108):    virtual void EndOfTransaction();
  mb/MediaEndpt.h(113):    virtual void ProcessIcMsg(Message& msg);
  mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  nb/CfgIntParm.h(62):    virtual bool SetNextValue(word value);
  nb/CfgParm.h(114):    virtual std::string GetInput() const;
  nb/Class.h(71):    virtual void Initialize();
  nb/Class.h(75):    virtual MemoryType ObjType() const = 0;
  nb/Class.h(80):    virtual Object* Create();
  nb/Class.h(84):    virtual Object* GetQuasiSingleton();
  nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  nb/CliIncrement.h(80):    virtual void Exit();
  nb/Daemon.h(152):    virtual void Recover() { }
  nb/Object.h(87):    virtual Class* GetClass() const;
  nb/Object.h(95):    virtual void PostInitialize() { }
  nb/Object.h(106):    virtual InstanceId GetInstanceId() const;
  nb/ObjectPool.h(103):    virtual Pooled* DeqBlock(size_t size);
  nb/ObjectPool.h(108):    virtual void EnqBlock(Pooled* obj, bool deleted);
  nb/Thread.h(117):    virtual bool EnqMsg(MsgBuffer& msg);
  nb/Thread.h(251):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  nb/Thread.h(293):    virtual MsgBuffer* DeqMsg(const msecs_t& timeout);
  nw/IpPort.h(155):    virtual void DisplayStats
  nw/IpService.h(84):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  nw/IpService.h(88):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  nw/SysTcpSocket.h(181):    virtual void Acquire();
  nw/SysTcpSocket.h(185):    virtual void Release();
  pb/PotsFeatureProfile.h(87):    virtual bool Unsubscribe(PotsProfile& profile);
  sb/Factory.h(182):    virtual void DisplayStats
  sb/InvokerPool.h(95):    virtual void DisplayStats
  sb/Message.h(152):    virtual void Save();
  sb/Message.h(157):    virtual void Unsave();
  sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  sb/Message.h(176):    virtual bool SendToSelf();
  sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  sb/Message.h(266):    virtual bool Restore();
  sb/Message.h(320):    virtual void Refresh();
  sb/Message.h(333):    virtual void Handled(bool retain);
  sb/Message.h(337):    virtual bool SendFailure(NodeBase::debug64_t errval);
  sb/Message.h(345):    virtual void ClearContext() const;
  sb/ProtocolSM.h(241):    virtual void SetState(StateId stid);
  sb/ProtocolSM.h(285):    virtual Priority GetPriority() const { return NormalPriority; }
  sb/ProtocolSM.h(290):    virtual void MsgHandled(Message& msg) { }
  sb/ProtocolSM.h(296):    virtual void RestoreIcMsg(Message& msg) { }
  sb/ProtocolSM.h(302):    virtual void RefreshMsg(Message& msg) { }
  sb/ServiceSM.h(143):    virtual void MorphToService(ServiceId sid);
  sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  sb/TlvMessage.h(67):    virtual TlvParm* Wrap(const TlvMessage& msg, ParameterId pid);
  sb/TlvMessage.h(191):    virtual TlvParm* AddParm(ParameterId pid, size_t plen);
  sb/TlvMessage.h(206):    virtual void DeleteParm(TlvParm& parm);
  sb/TlvMessage.h(270):    virtual bool MatchParm
  sb/TlvMessage.h(276):    virtual void AddFence();
W082 Adjacent arguments have the same type
  cb/BcSessions.h(1212):    BcFactory(Id fid, ProtocolId prid, c_string name);
  ct/CodeFile.h(543):    void UpdatePos(EditorAction action,
  ct/CodeWarning.h(62):    WarningAttrs(bool fixable, bool disabled, NodeBase::c_string expl);
  ct/CodeWarning.h(139):    void UpdatePos(EditorAction action,
  ct/Cxx.h(634):    SymbolView(Accessibility a, TypeMatch m, Cxx::Access c,
  ct/CxxExecute.h(96):    StackArg(CxxToken* t, TagCount p, bool lvalue, bool ctor);
  ct/CxxExecute.h(291):    TypeMatch CalcMatchWith(const StackArg& that,
  ct/CxxExecute.h(346):    TypeMatch MatchWith(const StackArg& that,
  ct/CxxLocation.h(76):    void UpdatePos(EditorAction action, size_t begin, size_t count, size_t from);
  ct/CxxNamed.h(378):    TypeMatch MatchTemplate(const TypeName* that,
  ct/CxxNamed.h(693):    TypeMatch MatchTemplate(const QualName* that,
  ct/CxxNamed.h(912):    bool SetPointer(size_t n, bool readonly, bool unstable);
  ct/CxxNamed.h(1152):    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  ct/CxxNamed.h(1587):    TypeMatch MatchTemplate(const TemplateArg* that, stringVector& tmpltParms,
  ct/CxxScope.cpp(206): static TypeMatch MatchTemplate(const string& thisType,
  ct/CxxScope.h(379):    virtual void Promote
  ct/CxxScoped.h(235):    bool GetBracedSpan(size_t& begin, size_t& left, size_t& end) const;
  ct/CxxScoped.h(1791):    Using(QualNamePtr& name, bool space, bool added = false);
  ct/CxxStatement.h(59):    bool GetSeqSpan(size_t begin, size_t& left, size_t& end) const;
  ct/CxxStatement.h(64):    bool GetParSpan(size_t& begin, size_t& left, size_t& end) const;
  ct/CxxString.cpp(40): static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  ct/CxxString.h(53):    size_t rfind_first_not_of(const std::string& str,
  ct/CxxString.h(139):    size_t CompareScopes
  ct/CxxString.h(182):    size_t Replace(std::string& code, const std::string& s1,
  ct/CxxToken.cpp(47): static bool GetSpanFailure(size_t& begin, size_t& left, size_t& end)
  ct/CxxToken.h(129):    bool GetSpan3(size_t& begin, size_t& left, size_t& end) const;
  ct/CxxToken.h(360):    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
  ct/CxxToken.h(474):    virtual void UpdatePos(EditorAction action,
  ct/CxxToken.h(505):    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
  ct/CxxToken.h(874):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  ct/Editor.cpp(575): static void DebugFtNames(const Function* func, string& flit, string& fvar)
  ct/Editor.cpp(864): static bool ItemIsUsedBetween(const CxxToken* item, size_t begin, size_t end)
  ct/Editor.cpp(976): static void Rename(string& code, const string& oldName, const string& newName)
  ct/Editor.h(106):    void Rename(size_t pos, const string& oldName, const string& newName);
  ct/Editor.h(264):    bool AdjustHorizontally(size_t pos, size_t len, const string& spacing);
  ct/Editor.h(300):    word InsertForward(size_t pos, const string& nspace, const string& forward);
  ct/Editor.h(305):    word InsertNamespaceForward(size_t pos,
  ct/Editor.h(322):    static void ChangeForwards
  ct/Editor.h(370):    void FindFreeItemPos(const Namespace* space, const string& name,
  ct/Editor.h(380):    CxxItemVector FindDeclRange
  ct/Editor.h(509):    void UpdateItemDefnAttrs(const CxxToken* prev,
  ct/Editor.h(515):    word UpdateItemDefnLoc(const CxxToken* prev,
  ct/Editor.h(570):    bool GetSpan(const CxxToken* item, size_t& begin, size_t& end);
  ct/Editor.h(598):    size_t Replace(size_t pos, size_t count, const string& code);
  ct/Editor.h(645):    void UpdatePos(EditorAction action,
  ct/Lexer.h(257):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  ct/Lexer.h(587):    LineType CalcLineType(size_t n, bool& cont, bool& c_comment);
  ct/Lexer.h(665):    void SetDepth(int8_t depth1, int8_t depth2, bool merge = true);
  ct/Library.h(74):    NodeBase::word Import
  ct/Library.h(108):    NodeBase::word Assign(CliThread& cli, const std::string& name,
  ct/Library.h(141):    static NodeBase::word Rename(CliThread& cli, const std::string& oldName,
  ct/Parser.cpp(71): static bool SetCompoundType
  ct/Parser.h(486):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  ct/SetOperations.h(33):    void SetDifference
  ct/SetOperations.h(42):    void SetIntersection
  ct/SetOperations.h(51):    void SetUnion
  dip/BaseBot.h(143):    void send_press_to_server(const TokenMessage& press_to,
  dip/BaseBot.h(272):    virtual void process_not_ccd_message(const TokenMessage& message,
  dip/BaseBot.h(501):    virtual void report_failed_press
  dip/MapAndUnits.h(183):    bool set_support_to_move_order
  dip/MapAndUnits.h(185):    bool set_convoy_order(ProvinceId unit, ProvinceId client, ProvinceId dest);
  dip/MapAndUnits.h(186):    bool set_move_by_convoy_order(ProvinceId unit,
  dip/MapAndUnits.h(188):    bool set_move_by_single_step_convoy_order
  dip/MapAndUnits.h(267):    Location find_result_unit_initial_location(ProvinceId province,
  dip/MapAndUnits.h(402):    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  nb/Alarm.h(64):    Alarm(c_string name, c_string expl, uint32_t delay);
  nb/Algorithms.h(51):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  nb/Algorithms.h(55):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  nb/Algorithms.h(63):    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
  nb/CfgBitParm.h(48):    CfgBitParm(c_string key, c_string def, c_string expl);
  nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, c_string expl);
  nb/CfgFlagParm.h(39):    CfgFlagParm(c_string key, c_string def,
  nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  nb/CfgParm.h(94):    CfgParm(c_string key, c_string def, c_string expl);
  nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, c_string expl);
  nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  nb/CliCommand.h(103):    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  nb/CliCommandSet.h(59):    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
  nb/CliIncrement.h(102):    CliIncrement(c_string name, c_string help, uint32_t size = 32);
  nb/CliIntParm.h(45):    CliIntParm(c_string help, word min, word max,
  nb/CliParm.h(246):    bool GetIdentifier(std::string& s, CliThread& cli,
  nb/CliParm.h(252):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  nb/CliThread.h(99):    char CharPrompt(const std::string& prompt,
  nb/CliThread.h(106):    word IntPrompt(const std::string& prompt, word min, word max);
  nb/CliThread.h(251):    void Report1
  nb/FileThread.h(63):    static void Spool(const std::string& name,
  nb/Formatters.h(99):    int strCompare
  nb/Formatters.h(111):    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
  nb/NbCliParms.h(137): bool ValidateOptions
  nb/ObjectPool.h(249):    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
  nb/ObjectPool.h(254):    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  nb/PosixSignal.h(105):    PosixSignal(signal_t value, c_string name,
  nb/SymbolRegistry.h(59):    bool BindSymbol
  nb/SysStackTrace.win.cpp(99):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  nb/SysThread.h(105):    static bool ReportError(fn_name function, fixed_string expl, int error);
  nb/Thread.h(657):    void DisplaySummary(std::ostream& stream,
  nt/FunctionProfiler.cpp(60): static void CheckHigh(FunctionStats*& high,
  nt/NtIncrement.cpp(193):    static word Sort(const string& input, const string& output, string& expl);
  nw/IpBuffer.h(55):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  nw/IpServiceCfg.h(43):    IpServiceCfg(c_string key, c_string def, c_string expl, IpService* service);
  nw/SysIpL3Addr.h(79):    SysIpL3Addr
  pb/PotsFeature.h(107):    PotsFeature(Id fid, bool deactivation, c_string abbr, c_string name);
  sb/Context.h(131):    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  sb/Factory.h(167):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  sb/GlobalAddress.h(51):    GlobalAddress
  sb/Initiator.h(98):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  sb/SbTrace.cpp(69): static void DisplayEvent(ostream& stream, ServiceId sid, EventId eid)
  sb/SbTrace.h(174):    static BuffTrace* NextIcMsg
  sb/SbTracer.h(136):    NodeBase::TraceRc SelectSignal
  sb/SbTracer.h(190):       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  sb/Service.h(184):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  sb/SsmFactory.h(56):    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
  sb/TlvMessage.h(104):    template<class T> T* CopyType
  st/StTestData.h(78):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  st/TestSessions.h(354):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  ct/Editor.h(510/4):       const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const;
  nb/Object.h(67/2):    virtual void Patch(sel_t selector, void* arguments) { }
  nb/Q1Way.h(90/1):    bool Enq(T& elem)
  nb/Q1Way.h(114/1):    bool Henq(T& elem)
  nb/Q1Way.h(136/1):    bool Insert(T* prev, T& elem)
  nb/Q1Way.h(171/1):    bool Exq(T& elem)
  nb/Q1Way.h(328/1):    void Corrupt(T* elem)
  nb/Q2Way.h(150/1):    bool Exq(T& elem)
  nb/Registry.h(277/1):    bool Erase(T& item)
  nw/InputHandler.h(138/1):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  sb/Context.h(286/1):    bool ProcessMsg(NodeBase::Q1Way<Message>& msgq, const InvokerThread* inv);
  sb/Factory.h(160/1):    virtual bool ScreenIcMsgs(NodeBase::Q1Way<Message>& msgq);
  sb/Initiator.h(112/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  sb/Message.h(132/1):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  sb/TlvMessage.h(206/1):    virtual void DeleteParm(TlvParm& parm);
W090 Function could be const
  cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  cb/BcSessions.h(1167):    CipMessage* BuildCipRel(Cause::Ind cause);
  ct/CxxSymbols.h(152):    void InsertClass(Class* cls);
  ct/CxxSymbols.h(153):    void InsertData(Data* data);
  ct/CxxSymbols.h(154):    void InsertEtor(Enumerator* etor);
  ct/CxxSymbols.h(155):    void InsertEnum(Enum* item);
  ct/CxxSymbols.h(156):    void InsertForw(Forward* forw);
  ct/CxxSymbols.h(157):    void InsertFriend(Friend* frnd);
  ct/CxxSymbols.h(158):    void InsertFunc(Function* func);
  ct/CxxSymbols.h(159):    void InsertMacro(Macro* macro);
  ct/CxxSymbols.h(160):    void InsertSpace(Namespace* space);
  ct/CxxSymbols.h(161):    void InsertTerm(Terminal* term);
  ct/CxxSymbols.h(162):    void InsertType(Typedef* type);
  ct/CxxSymbols.h(166):    void EraseClass(const Class* cls);
  ct/CxxSymbols.h(167):    void EraseData(const Data* data);
  ct/CxxSymbols.h(168):    void EraseEtor(const Enumerator* etor);
  ct/CxxSymbols.h(169):    void EraseEnum(const Enum* item);
  ct/CxxSymbols.h(170):    void EraseForw(const Forward* forw);
  ct/CxxSymbols.h(171):    void EraseFriend(const Friend* frnd);
  ct/CxxSymbols.h(172):    void EraseFunc(const Function* func);
  ct/CxxSymbols.h(173):    void EraseMacro(const Macro* macro);
  ct/CxxSymbols.h(174):    void EraseSpace(const Namespace* space);
  ct/CxxSymbols.h(175):    void EraseTerm(const Terminal* term);
  ct/CxxSymbols.h(176):    void EraseType(const Typedef* type);
  ct/Library.h(80):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  ct/Library.h(108):    NodeBase::word Assign(CliThread& cli, const std::string& name,
  ct/Library.h(129):    NodeBase::word Purge(const std::string& name, std::string& expl);
  dip/BaseBot.h(205):    virtual void process_ccd_message
  dip/BaseBot.h(211):    virtual void process_drw_message(const TokenMessage& message);
  dip/BaseBot.h(242):    virtual void process_out_message(const TokenMessage& message);
  dip/BaseBot.h(250):    virtual void process_smr_message(const TokenMessage& message);
  dip/BaseBot.h(267):    virtual void process_adm_message(const TokenMessage& message);
  dip/BaseBot.h(272):    virtual void process_not_ccd_message(const TokenMessage& message,
  dip/BaseBot.h(466):    virtual void process_hlo_message(const TokenMessage& message);
  dip/BaseBot.h(471):    virtual void process_map_message(const TokenMessage& message);
  dip/BaseBot.h(475):    virtual void process_mdf_message(const TokenMessage& message);
  dip/BaseBot.h(483):    virtual void process_sco_message(const TokenMessage& message);
  dip/BaseBot.h(487):    virtual void process_now_message(const TokenMessage& message);
  dip/BaseBot.h(491):    virtual void process_slo_message(const TokenMessage& message);
  nb/Alarm.h(117):    void SetStatus(AlarmStatus status);
  nb/CallbackRequest.h(44):    virtual void Callback() { }
  nb/Class.h(71):    virtual void Initialize();
  nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  nb/Class.h(137):    virtual Object* New(size_t size);
  nb/Class.h(150):    bool SetTemplate(Object& obj);
  nb/Class.h(158):    bool SetQuasiSingleton(Object& obj);
  nb/Deferred.h(89):    virtual void EventHasOccurred(Event event) = 0;
  nb/Log.h(122):    void SetInterval(uint8_t interval);
  nb/Object.h(67):    virtual void Patch(sel_t selector, void* arguments) { }
  nb/ObjectPool.h(196):    bool Corrupt(size_t n);
  nb/ObjectPool.h(262):    void UpdateAlarm();
  nb/Q2Way.h(150):    bool Exq(T& elem)
  nb/StatisticsRegistry.h(77):    void StartInterval(bool first);
  nb/Thread.h(135):    bool Interrupt(FlagId reason);
  nb/Thread.h(178):    void SetStatus(TraceStatus status);
  nb/Thread.h(287):    void SetInitialized();
  nb/Thread.h(431):    void Reset(FlagId fid);
  nb/Thread.h(435):    void Ready();
  nb/Thread.h(439):    void Preempt();
  nb/Thread.h(458):    void Proceed();
  nb/Thread.h(497):    void UpdateMutex(Mutex* mutex);
  nb/Thread.h(505):    void UpdateMutexCount(bool acquired);
  nb/Thread.h(557):    bool LogTrap(const Exception* ex,
  nb/Thread.h(605):    void SetTrap(bool on);
  nb/Thread.h(613):    void StackCheck();
  nb/Thread.h(617):    void SetSignal(signal_t sig);
  nb/TraceRecord.h(105):    virtual void ClaimBlocks() { }
  nt/FunctionProfiler.h(84):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  nt/NtTestData.h(81):    void Reset();
  nw/IpPort.h(193):    virtual IoThread* CreateIoThread();
  nw/IpService.h(156):    virtual IpPort* CreatePort(ipport_t pid) = 0;
  nw/UdpIoThread.h(62):    void ReleaseResources();
  pb/PotsFeatureRegistry.h(66):    void Audit();
  pb/PotsProfile.h(108):    void SetState(const ProtocolSM* psm, State state);
  pb/PotsProfile.h(118):    bool SetObjAddr(const MsgPort& port);
  sb/Context.h(157):    bool StopTimer(const Base& owner, TimerId tid);
  sb/Context.h(191):    virtual void EndOfTransaction() { }
  sb/Factory.h(160):    virtual bool ScreenIcMsgs(NodeBase::Q1Way<Message>& msgq);
  sb/Factory.h(256):    virtual Rc ReceiveMsg
  sb/InvokerPool.h(154):    void KickThread();
  sb/InvokerPool.h(158):    Context* FindWork();
  sb/InvokerPool.h(177):    void Requeue(Context& ctx);
  sb/InvokerPool.h(185):    void ScheduledOut();
  sb/Message.h(110):    void SetSignal(SignalId sid);
  sb/Message.h(114):    void SetJoin(bool join);
  sb/Message.h(225):    void SetProtocol(ProtocolId prid);
  sb/Message.h(229):    void SetPriority(MsgPriority prio);
  sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  sb/Message.h(362):    void SetRxAddr(const LocalAddress& rxaddr);
  sb/ProtocolLayer.h(167):    virtual Message* UnwrapMsg(Message& msg);
  sb/ProtocolLayer.h(174):    virtual Message* WrapMsg(Message& msg);
  sb/ProtocolSM.h(116):    void StopTimer(const Base& owner, TimerId tid);
  sb/ServiceSM.h(194):    virtual EventHandler::Rc ProcessInitNack
  sb/ServiceSM.h(243):    EventHandler::Rc ProcessSsmqSap
  sb/ServiceSM.h(254):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  st/TestSessions.h(265):    void UpdateTestPsm();
W091 Function could be static
  dip/MapAndUnits.h(255):    std::string display_retreat_result(const UnitOrder& unit) const;
W092 Function could be free
  ct/CxxArea.h(703):    Function* InstantiateFunction // CxxArea.cpp
  ct/CxxExecute.h(862):    static bool ParsingTemplate(); // CxxExecute.cpp
  ct/CxxExecute.h(897):    static void Trace(CxxTrace::Action act, const StackArg& arg); // CxxExecute.cpp
  ct/Editor.h(171):    word ChangeCast(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(172):    word ChangeClassToNamespace(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(175):    word ChangeOperator(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(177):    word DemoteFunction(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(181):    word EraseCast(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(182):    word EraseClass(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(195):    word InsertCopyCtorCall(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(196):    word InsertDataInit(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(198):    word InsertDisplay(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(199):    word InsertEnumName(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(200):    word InsertFallthrough(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(205):    word InsertMemberInit(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(207):    word InsertPODCtor(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(208):    word InsertPureVirtual(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(210):    word MoveDefine(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(211):    word MoveMemberInit(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(215):    word ReplaceHeading(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(216):    word ReplaceName(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(356):    void QualifyClassItems(CxxScope* decl, string& code) const; // Editor.cpp
  ct/Editor.h(421):    word FixInvokers(const CodeWarning& log); // Editor.cpp
  ct/Editor.h(430):    word ChangeFunctionToMember(const Function* func, word offset); // Editor.cpp
  ct/Editor.h(431):    word ChangeInvokerToMember(const Function* func, word offset); // Editor.cpp
  ct/Editor.h(432):    word EraseArgument(const Function* func, word offset); // Editor.cpp
  ct/Editor.h(433):    word EraseDefaultValue(const Function* func, word offset); // Editor.cpp
  ct/Editor.h(434):    word EraseParameter(const Function* func, word offset); // Editor.cpp
  ct/Editor.h(436):    word InsertArgument(const Function* func, word offset); // Editor.cpp
  ct/Editor.h(437):    word SplitVirtualFunction(const Function* func); // Editor.cpp
  ct/Parser.h(606):    static bool Backup(size_t cause); // Parser.cpp
  dip/BaseBot.h(178):    void cancel_event(BotEvent event); // BaseBot.cpp
  dip/BaseBot.h(523):    static void report_ccd(const Token& power, bool disorder); // BaseBot.cpp
  dip/BaseBot.h(543):    static void report_out(const Token& power); // BaseBot.cpp
  dip/BaseBot.h(555):    void report_exit(c_string reason); // BaseBot.cpp
  dip/BaseBot.h(715):    static bool send_buff(DipIpBuffer& buff); // BaseBot.cpp
  dip/MapAndUnits.h(162):    static void delete_clone(MapAndUnits*& clone); // MapAndUnits.cpp
  nb/MainArgs.h(66):    static void PushBack(const std::string& arg); // MainArgs.cpp
  nb/Object.h(118):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid); // Object.cpp
  nw/SysIpL2Addr.h(113):    static const SysIpL2Addr& NullIpAddr(); // SysIpL2Addr.cpp
  sb/TlvParameter.h(68):    static Id ExtractPid(const TlvParm& parm); // TlvParameter.cpp
  st/TestSessions.h(113):    static TestPsm* Find(const MsgPort& port); // TestSessions.cpp
W099 Line contains adjacent spaces
  cb/BcHandlers.cpp(65):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(66):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(67):    auto          sid = msg->GetSignal();
  cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(70):    CauseInfo*    cci;
  cb/BcHandlers.cpp(120):    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(121):    auto       msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(122):    auto       sid = msg->GetSignal();
  cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(161):    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(162):    auto       msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(163):    auto       sid = msg->GetSignal();
  cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(191):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/BcHandlers.cpp(192):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  cb/BcHandlers.cpp(193):    auto          sid = msg->GetSignal();
  cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast<BcSsm&>(ssm);
  cb/BcHandlers.cpp(196):    CauseInfo*    cci;
  cb/BcProtocol.cpp(462):    id_t        idx;
  cb/BcProtocol.cpp(463):    word        fid, rid;
  cb/BcProtocol.cpp(465):    auto&       tlvmsg = static_cast<TlvMessage&>(msg);
  cb/BcProtocol.cpp(492):    TestRc       rc;
  cb/BcProtocol.cpp(493):    const auto&  tlvmsg = static_cast<const TlvMessage&>(msg);
  cb/BcProtocol.cpp(495):    id_t         idx;
  cb/BcProtocol.cpp(496):    word         fid, rid;
  cb/BcProtocol.cpp(789):    auto          state = GetState();
  cb/BcProtocol.cpp(790):    auto&         tmsg = static_cast<TlvMessage&>(msg);
  cb/BcProtocol.cpp(791):    auto          sig = tmsg.GetSignal();
  cb/BcProtocol.cpp(792):    TimeoutInfo*  toi = nullptr;
  cb/BcProtocol.cpp(794):    auto          err = true;
  cb/BcProtocol.cpp(795):    debug64_t     error;
  cb/BcProtocol.cpp(919):    auto          state = GetState();
  cb/BcProtocol.cpp(920):    auto&         tmsg = static_cast<TlvMessage&>(msg);
  cb/BcProtocol.cpp(921):    auto          sig = msg.GetSignal();
  cb/BcProtocol.cpp(923):    auto          err = true;
  cb/BcProtocol.cpp(924):    debug64_t     error;
  cb/ProxyBcSessions.cpp(360):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  cb/ProxyBcSessions.cpp(361):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  cb/ProxyBcSessions.cpp(362):    auto          sid = msg->GetSignal();
  cb/ProxyBcSessions.cpp(363):    auto&         pssm = static_cast<ProxyBcSsm&>(ssm);
  cb/ProxyBcSessions.cpp(365):    CauseInfo*    cci;
  ct/Cxx.cpp(478):    CxxWord("D",   "D",    "D",   F),  // ALIGNAS
  ct/Cxx.cpp(479):    CxxWord("@",   "@",    "@",   T),  // ASM
  ct/Cxx.cpp(480):    CxxWord("-",   "-",    "D",   F),  // AUTO
  ct/Cxx.cpp(481):    CxxWord("-",   "-",    "b",   T),  // BREAK
  ct/Cxx.cpp(482):    CxxWord("-",   "-",    "c",   T),  // CASE
  ct/Cxx.cpp(483):    CxxWord("DPC", "DPC",  "DP",  F),  // CLASS
  ct/Cxx.cpp(484):    CxxWord("DP",  "DP",   "D",   F),  // CONST
  ct/Cxx.cpp(485):    CxxWord("DP",  "DP",   "D",   F),  // CONSTEXPR
  ct/Cxx.cpp(486):    CxxWord("-",   "-",    "n",   T),  // CONTINUE
  ct/Cxx.cpp(487):    CxxWord("-",   "-",    "o",   T),  // DEFAULT
  ct/Cxx.cpp(488):    CxxWord("-",   "-",    "d",   T),  // DO
  ct/Cxx.cpp(489):    CxxWord("DPE", "DPE",  "DPE", F),  // ENUM
  ct/Cxx.cpp(490):    CxxWord("-",   "P",    "-",   F),  // EXPLICIT
  ct/Cxx.cpp(491):    CxxWord("DP",  "-",    "-",   F),  // EXTERN
  ct/Cxx.cpp(492):    CxxWord("-",   "-",    "-",   F),  // FINAL
  ct/Cxx.cpp(493):    CxxWord("-",   "-",    "f",   T),  // FOR
  ct/Cxx.cpp(494):    CxxWord("-",   "F",    "-",   T),  // FRIEND
  ct/Cxx.cpp(495):    CxxWord("-",   "-",    "g",   T),  // GOTO
  ct/Cxx.cpp(496):    CxxWord("H",   "H",    "H",   F),  // HASH
  ct/Cxx.cpp(497):    CxxWord("-",   "-",    "i",   T),  // IF
  ct/Cxx.cpp(498):    CxxWord("P",   "P",    "-",   F),  // INLINE
  ct/Cxx.cpp(499):    CxxWord("-",   "D",    "-",   F),  // MUTABLE
  ct/Cxx.cpp(500):    CxxWord("N",   "-",    "-",   T),  // NAMESPACE
  ct/Cxx.cpp(501):    CxxWord("-",   "P",    "-",   F),  // OPERATOR
  ct/Cxx.cpp(502):    CxxWord("-",   "-",    "-",   F),  // OVERRIDE
  ct/Cxx.cpp(503):    CxxWord("-",   "A",    "-",   T),  // PRIVATE
  ct/Cxx.cpp(504):    CxxWord("-",   "A",    "-",   T),  // PROTECTED
  ct/Cxx.cpp(505):    CxxWord("-",   "A",    "-",   T),  // PUBLIC
  ct/Cxx.cpp(506):    CxxWord("-",   "-",    "r",   T),  // RETURN
  ct/Cxx.cpp(507):    CxxWord("DP",  "DP",   "D",   F),  // STATIC
  ct/Cxx.cpp(508):    CxxWord("$",   "$",    "$",   T),  // STATIC_ASSERT
  ct/Cxx.cpp(509):    CxxWord("DPC", "DPC",  "DP",  F),  // STRUCT
  ct/Cxx.cpp(510):    CxxWord("-",   "-",    "s",   T),  // SWITCH
  ct/Cxx.cpp(511):    CxxWord("DCP", "DCFP", "-",   F),  // TEMPLATE
  ct/Cxx.cpp(512):    CxxWord("D",   "D",    "D",   F),  // THREAD_LOCAL
  ct/Cxx.cpp(513):    CxxWord("-",   "-",    "t",   T),  // TRY
  ct/Cxx.cpp(514):    CxxWord("T",   "T",    "T",   T),  // TYPEDEF
  ct/Cxx.cpp(515):    CxxWord("DPC", "DPC",  "DP",  F),  // UNION
  ct/Cxx.cpp(516):    CxxWord("U",   "U",    "U",   T),  // USING
  ct/Cxx.cpp(517):    CxxWord("-",   "P",    "-",   F),  // VIRTUAL
  ct/Cxx.cpp(518):    CxxWord("DP",  "DP",   "D",   F),  // VOLATILE
  ct/Cxx.cpp(519):    CxxWord("-",   "-",    "w",   T),  // WHILE
  ct/Cxx.cpp(520):    CxxWord("-",   "P",    "-",   F),  // NVDTOR
  ct/Cxx.cpp(521):    CxxWord("DP",  "DP",   "xD",  F)   // NIL_KEYWORD
  ct/Cxx.cpp(549):    CxxOp(           SCOPE_STR, 2, 18, F, F, F, XN),  // SCOPE_RESOLUTION
  ct/Cxx.cpp(550):    CxxOp(                 ".", 2, 17, F, F, F, NN),  // REFERENCE_SELECT
  ct/Cxx.cpp(551):    CxxOp(                "->", 2, 17, T, F, F, NN),  // POINTER_SELECT
  ct/Cxx.cpp(552):    CxxOp(                 "[", 2, 17, T, F, F, NN),  // ARRAY_SUBSCRIPT
  ct/Cxx.cpp(553):    CxxOp(                 "(", 0, 17, F, F, F, NN),  // FUNCTION_CALL
  ct/Cxx.cpp(554):    CxxOp(                "++", 1, 17, T, F, F, NX),  // POSTFIX_INCREMENT
  ct/Cxx.cpp(555):    CxxOp(                "--", 1, 17, T, F, F, NX),  // POSTFIX_DECREMENT
  ct/Cxx.cpp(556):    CxxOp(         DEFINED_STR, 1, 17, F, F, F, XN),  // DEFINED
  ct/Cxx.cpp(557):    CxxOp(          TYPEID_STR, 1, 17, F, F, F, XN),  // TYPE_NAME
  ct/Cxx.cpp(558):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F, XN),  // CONST_CAST
  ct/Cxx.cpp(559):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F, XN),  // DYNAMIC_CAST
  ct/Cxx.cpp(561):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F, XN),  // STATIC_CAST
  ct/Cxx.cpp(562):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F, XN),  // SIZEOF_TYPE
  ct/Cxx.cpp(563):    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F, XN),  // ALIGNOF_TYPE
  ct/Cxx.cpp(564):    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F, XN),  // NOEXCEPT
  ct/Cxx.cpp(565):    CxxOp(                "++", 1, 16, T, T, F, XN),  // PREFIX_INCREMENT
  ct/Cxx.cpp(566):    CxxOp(                "--", 1, 16, T, T, F, XN),  // PREFIX_DECREMENT
  ct/Cxx.cpp(567):    CxxOp(                 "~", 1, 16, T, T, F, XN),  // ONES_COMPLEMENT
  ct/Cxx.cpp(568):    CxxOp(                 "!", 1, 16, T, T, F, XN),  // LOGICAL_NOT
  ct/Cxx.cpp(569):    CxxOp(                 "+", 1, 16, T, T, F, XN),  // UNARY_PLUS
  ct/Cxx.cpp(570):    CxxOp(                 "-", 1, 16, T, T, F, XN),  // UNARY_MINUS
  ct/Cxx.cpp(571):    CxxOp(                 "&", 1, 16, T, T, F, XN),  // ADDRESS_OF
  ct/Cxx.cpp(572):    CxxOp(                 "*", 1, 16, T, T, F, XN),  // INDIRECTION
  ct/Cxx.cpp(573):    CxxOp(             NEW_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE
  ct/Cxx.cpp(574):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE_ARRAY
  ct/Cxx.cpp(575):    CxxOp(          DELETE_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE
  ct/Cxx.cpp(576):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE_ARRAY
  ct/Cxx.cpp(577):    CxxOp(                 "(", 2, 16, T, T, F, SN),  // CAST
  ct/Cxx.cpp(578):    CxxOp(                ".*", 2, 15, F, F, F, NN),  // REFERENCE_SELECT_MEMBER
  ct/Cxx.cpp(579):    CxxOp(               "->*", 2, 15, T, F, F, NN),  // POINTER_SELECT_MEMBER
  ct/Cxx.cpp(580):    CxxOp(                 "*", 2, 14, T, F, T, SS),  // MULTIPLY
  ct/Cxx.cpp(581):    CxxOp(                 "/", 2, 14, T, F, F, SS),  // DIVIDE
  ct/Cxx.cpp(582):    CxxOp(                 "%", 2, 14, T, F, F, SS),  // MODULO
  ct/Cxx.cpp(583):    CxxOp(                 "+", 2, 13, T, F, T, SS),  // ADD
  ct/Cxx.cpp(584):    CxxOp(                 "-", 2, 13, T, F, F, SS),  // SUBTRACT
  ct/Cxx.cpp(585):    CxxOp(                "<<", 2, 12, T, F, F, SS),  // LEFT_SHIFT
  ct/Cxx.cpp(586):    CxxOp(                ">>", 2, 12, T, F, F, SS),  // RIGHT_SHIFT
  ct/Cxx.cpp(587):    CxxOp(                 "<", 2, 11, T, F, T, SS),  // LESS
  ct/Cxx.cpp(588):    CxxOp(                "<=", 2, 11, T, F, T, SS),  // LESS_OR_EQUAL
  ct/Cxx.cpp(589):    CxxOp(                 ">", 2, 11, T, F, T, SS),  // GREATER
  ct/Cxx.cpp(590):    CxxOp(                ">=", 2, 11, T, F, T, SS),  // GREATER_OR_EQUAL
  ct/Cxx.cpp(591):    CxxOp(                "==", 2, 10, T, F, T, SS),  // EQUALITY
  ct/Cxx.cpp(592):    CxxOp(                "!=", 2, 10, T, F, T, SS),  // INEQUALITY
  ct/Cxx.cpp(593):    CxxOp(                 "&", 2,  9, T, F, T, SS),  // BITWISE_AND
  ct/Cxx.cpp(594):    CxxOp(                 "^", 2,  8, T, F, T, SS),  // BITWISE_XOR
  ct/Cxx.cpp(595):    CxxOp(                 "|", 2,  7, T, F, T, SS),  // BITWISE_OR
  ct/Cxx.cpp(596):    CxxOp(                "&&", 2,  6, T, F, T, SS),  // LOGICAL_AND
  ct/Cxx.cpp(597):    CxxOp(                "||", 2,  5, T, F, T, SS),  // LOGICAL_OR
  ct/Cxx.cpp(598):    CxxOp(                 "?", 3,  4, F, F, F, SS),  // CONDITIONAL
  ct/Cxx.cpp(599):    CxxOp(                 "=", 2,  3, T, T, F, SS),  // ASSIGN
  ct/Cxx.cpp(600):    CxxOp(                "*=", 2,  3, T, T, F, SS),  // MULTIPLY_ASSIGN
  ct/Cxx.cpp(601):    CxxOp(                "/=", 2,  3, T, T, F, SS),  // DIVIDE_ASSIGN
  ct/Cxx.cpp(602):    CxxOp(                "%=", 2,  3, T, T, F, SS),  // MODULO_ASSIGN
  ct/Cxx.cpp(603):    CxxOp(                "+=", 2,  3, T, T, F, SS),  // ADD_ASSIGN
  ct/Cxx.cpp(604):    CxxOp(                "-=", 2,  3, T, T, F, SS),  // SUBTRACT_ASSIGN
  ct/Cxx.cpp(605):    CxxOp(               "<<=", 2,  3, T, T, F, SS),  // LEFT_SHIFT_ASSIGN
  ct/Cxx.cpp(606):    CxxOp(               ">>=", 2,  3, T, T, F, SS),  // RIGHT_SHIFT_ASSIGN
  ct/Cxx.cpp(607):    CxxOp(                "&=", 2,  3, T, T, F, SS),  // BITWISE_AND_ASSIGN
  ct/Cxx.cpp(608):    CxxOp(                "^=", 2,  3, T, T, F, SS),  // BITWISE_XOR_ASSIGN
  ct/Cxx.cpp(609):    CxxOp(                "|=", 2,  3, T, T, F, SS),  // BITWISE_OR_ASSIGN
  ct/Cxx.cpp(610):    CxxOp(           THROW_STR, 0,  2, F, T, F, SS),  // THROW
  ct/Cxx.cpp(611):    CxxOp(                 ",", 2,  1, F, F, F, NS),  // STATEMENT_SEPARATOR
  ct/Cxx.cpp(612):    CxxOp(                 "$", 0,  0, F, F, F, XX),  // START_OF_EXPRESSION
  ct/Cxx.cpp(613):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // FALSE
  ct/Cxx.cpp(614):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // TRUE
  ct/Cxx.cpp(615):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // NULLPTR
  ct/Cxx.cpp(616):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX)   // NIL_OPERATOR
  ct/Interpreter.cpp(90):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  ct/Interpreter.cpp(91):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  ct/Interpreter.cpp(92):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  ct/Interpreter.cpp(93):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  ct/Interpreter.cpp(94):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  ct/Interpreter.cpp(95):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  ct/Interpreter.cpp(96):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  ct/Interpreter.cpp(97):    OperatorInfo("d",  1, DIR_SET,  ANY_SET,  ERR_SET),   // OpDirectories
  ct/Interpreter.cpp(98):    OperatorInfo("f",  1, FILE_SET, ANY_SET,  ERR_SET),   // OpFiles
  ct/Interpreter.cpp(111):    OperatorInfo("db", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpDeclaredBy
  ct/Interpreter.cpp(114):    OperatorInfo("rb", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpReferencedBy
  nb/Array.h(208):    inline static fn_name Array_ctor()    { return "Array.ctor"; }
  nb/Array.h(209):    inline static fn_name Array_dtor()    { return "Array.dtor"; }
  nb/Array.h(210):    inline static fn_name Array_Init()    { return "Array.Init"; }
  nb/BuddyHeap.cpp(665):                case Split:     c = 'S'; break;
  nb/BuddyHeap.cpp(666):                case Merged:    c = 'm'; break;
  nb/ObjectPool.cpp(169):    CounterPtr      allocCount_;
  nb/ObjectPool.cpp(170):    CounterPtr      freeCount_;
  nb/ObjectPool.cpp(171):    CounterPtr      failCount_;
  nb/ObjectPool.cpp(172):    CounterPtr      auditCount_;
  nb/ObjectPool.cpp(173):    CounterPtr      expansions_;
  nb/Q1Way.h(389):    inline static fn_name Q1Way_dtor()    { return "Q1Way.dtor"; }
  nb/Q1Way.h(390):    inline static fn_name Q1Way_Init()    { return "Q1Way.Init"; }
  nb/Q1Way.h(391):    inline static fn_name Q1Way_Enq()     { return "Q1Way.Enq"; }
  nb/Q1Way.h(392):    inline static fn_name Q1Way_Henq()    { return "Q1Way.Henq"; }
  nb/Q1Way.h(393):    inline static fn_name Q1Way_Insert()  { return "Q1Way.Insert"; }
  nb/Q1Way.h(394):    inline static fn_name Q1Way_Deq()     { return "Q1Way.Deq"; }
  nb/Q1Way.h(395):    inline static fn_name Q1Way_Exq()     { return "Q1Way.Exq"; }
  nb/Q1Way.h(396):    inline static fn_name Q1Way_Next()    { return "Q1Way.Next"; }
  nb/Q1Way.h(397):    inline static fn_name Q1Way_Size()    { return "Q1Way.Size"; }
  nb/Q1Way.h(398):    inline static fn_name Q1Way_Purge()   { return "Q1Way.Purge"; }
  nb/Q1Way.h(400):    inline static fn_name Q1Way_Item()    { return "Q1Way.Item"; }
  nb/Q2Way.h(366):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  nb/Q2Way.h(367):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  nb/Q2Way.h(368):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  nb/Q2Way.h(369):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  nb/Q2Way.h(370):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  nb/Q2Way.h(371):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  nb/Q2Way.h(372):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  nb/Q2Way.h(373):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  nb/Q2Way.h(374):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  nb/Q2Way.h(376):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  nb/Registry.h(626):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  nb/Registry.h(627):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  nb/Registry.h(628):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  nb/Registry.h(630):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  nb/Registry.h(631):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  nb/Registry.h(632):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  nb/Registry.h(633):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  nb/Registry.h(634):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  nb/Registry.h(635):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  nb/Registry.h(636):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  nb/Singleton.h(129):    inline static fn_name Singleton_Destroy()  { return "Singleton.Destroy"; }
  nb/Thread.cpp(271):    CounterPtr       traps_;
  nb/Thread.cpp(272):    CounterPtr       exceeds_;
  nb/Thread.cpp(273):    CounterPtr       yields_;
  nb/Thread.cpp(274):    CounterPtr       interrupts_;
  nb/Thread.cpp(278):    AccumulatorPtr   totTime_;
  nb/ThreadAdmin.h(182):    CfgIntParmPtr  initTimeoutMsecs_;
  nb/ThreadAdmin.h(183):    CfgIntParmPtr  schedTimeoutMsecs_;
  nb/ThreadAdmin.h(185):    CfgIntParmPtr  rtcTimeoutMsecs_;
  nb/ThreadAdmin.h(187):    CfgIntParmPtr  rtcLimit_;
  nb/ThreadAdmin.h(188):    CfgIntParmPtr  rtcInterval_;
  nb/ThreadAdmin.h(190):    CfgIntParmPtr  trapLimit_;
  nb/ThreadAdmin.h(191):    CfgIntParmPtr  trapInterval_;
  nb/ThreadAdmin.h(193):    CfgIntParmPtr  stackUsageLimit_;
  nb/ThreadAdmin.h(194):    CfgIntParmPtr  stackCheckInterval_;
  nw/IpPort.cpp(60):    CounterPtr       recvs_;
  nw/IpPort.cpp(61):    AccumulatorPtr   bytesRcvd_;
  nw/IpPort.cpp(64):    CounterPtr       discards_;
  nw/IpPort.cpp(65):    CounterPtr       rejects_;
  nw/IpPort.cpp(66):    CounterPtr       sends_;
  nw/IpPort.cpp(67):    AccumulatorPtr   bytesSent_;
  nw/IpPort.cpp(69):    CounterPtr       overflows_;
  nw/NwTypes.h(60):       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
  pb/PotsProtocol.cpp(464):    id_t             index;
  pb/PotsProtocol.cpp(465):    word             sid, ind;
  pb/PotsProtocol.cpp(467):    auto&            pmsg = static_cast<PotsMessage&>(msg);
  pb/PotsProtocol.cpp(523):    TestRc            rc;
  pb/PotsProtocol.cpp(524):    const auto&       pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(526):    id_t              index;
  pb/PotsProtocol.cpp(527):    word              sid, ind;
  pb/PotsProtocol.cpp(646):    word           port;
  pb/PotsProtocol.cpp(648):    auto&          pmsg = static_cast<PotsMessage&>(msg);
  pb/PotsProtocol.cpp(671):    TestRc          rc;
  pb/PotsProtocol.cpp(672):    const auto&     pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(673):    word            port;
  pb/PotsProtocol.cpp(759):    TestRc        rc;
  pb/PotsProtocol.cpp(760):    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(762):    bool          ring = false;
  pb/PotsProtocol.cpp(763):    auto          exists = false;
  pb/PotsProtocol.cpp(841):    TestRc        rc;
  pb/PotsProtocol.cpp(842):    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
  pb/PotsProtocol.cpp(844):    string        scan;
  pb/PotsProtocol.cpp(845):    auto          digits = false;
  pb/PotsProtocol.cpp(846):    auto          flash = false;
  pb/PotsProtocol.cpp(847):    auto          exists = false;
  sb/Factory.cpp(54):    CounterPtr       icMsgsIntra_;
  sb/Factory.cpp(55):    CounterPtr       icMsgsInter_;
  sb/Factory.cpp(57):    CounterPtr       ogMsgsIntra_;
  sb/Factory.cpp(58):    CounterPtr       ogMsgsInter_;
  sb/Factory.cpp(60):    CounterPtr       contexts_;
  sb/Factory.cpp(61):    CounterPtr       msgsDeleted_;
  sb/Factory.cpp(62):    CounterPtr       ctxsDeleted_;
  sb/InvokerPool.cpp(120):    CounterPtr       requeues_;
  sb/InvokerPool.cpp(121):    CounterPtr       trojans_;
  sb/InvokerPool.cpp(122):    CounterPtr       lockouts_;
  sb/MsgHeader.h(42):    LocalAddress   txAddr;         // source address
  sb/MsgHeader.h(43):    LocalAddress   rxAddr;         // destination address
  sb/MsgHeader.h(44):    MsgPriority    priority : 2;   // message's priority
  sb/MsgHeader.h(45):    bool           initial  : 1;   // true for initial message
  sb/MsgHeader.h(46):    bool           final    : 1;   // true for final message
  sb/MsgHeader.h(47):    bool           join     : 1;   // true to create PSM and join root SSM
  sb/MsgHeader.h(48):    bool           self     : 1;   // true for message to self
  sb/MsgHeader.h(49):    bool           injected : 1;   // true if sent by InjectCommand
  sb/MsgHeader.h(50):    bool           kill     : 1;   // true to kill context on arrival
  sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  sb/MsgHeader.h(52):    Message::Route route    : 2;   // the route that the message took
  sb/MsgHeader.h(53):    ProtocolId     protocol : 16;  // message's protocol
  sb/MsgHeader.h(54):    SignalId       signal   : 16;  // message's signal
  sb/MsgHeader.h(55):    uint16_t       length   : 16;  // total bytes in all parameters
  sn/PotsProxyHandlers.cpp(132):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(133):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(134):    auto          sid = msg->GetSignal();
  sn/PotsProxyHandlers.cpp(135):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(137):    CauseInfo*    cci;
  sn/PotsProxyHandlers.cpp(236):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(237):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(238):    auto          sid = msg->GetSignal();
  sn/PotsProxyHandlers.cpp(239):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(241):    CauseInfo*    cci;
  sn/PotsProxyHandlers.cpp(300):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(301):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(302):    auto          sid = msg->GetSignal();
  sn/PotsProxyHandlers.cpp(303):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(305):    CauseInfo*    cci;
  sn/PotsProxyHandlers.cpp(346):    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
  sn/PotsProxyHandlers.cpp(347):    auto          msg = static_cast<CipMessage*>(ame.Msg());
  sn/PotsProxyHandlers.cpp(348):    auto          sid = msg->GetSignal();
  sn/PotsProxyHandlers.cpp(349):    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
  sn/PotsProxyHandlers.cpp(351):    CauseInfo*    cci;
W100 Insertion of blank line recommended
  nb/StatisticsGroup.cpp(47): //  --------------member name-----------------
W102 Line length exceeds the standard maximum
  cb/BcSsm.cpp(286):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
  nb/ModuleRegistry.cpp(86):    "https://github.com/GregUtas/robust-services-core/blob/master/docs/Installing.md";
  nb/NbIncrement.cpp(3284): "Alloc  Min kB     kB       Bytes                            Memory        Prot\n"
  nb/NbIncrement.cpp(3285): "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
W106 Function does not invoke Debug::ft
  an/PotsTrafficThread.cpp(1351): void PotsTrafficThread::RecordHoldingTime(const nsecs_t& time)
  cb/BcProtocol.cpp(226): bool CipUdpService::Enabled() const
  cb/BcProtocol.cpp(302): bool CipTcpService::Enabled() const
  cb/DigitString.cpp(146): Digit DigitString::At(DigitCount i) const
  ct/CodeFile.cpp(1189): void CodeFile::EraseClass(const Class* cls)
  ct/CodeFile.cpp(1197): void CodeFile::EraseData(const Data* data)
  ct/CodeFile.cpp(1205): void CodeFile::EraseEnum(const Enum* item)
  ct/CodeFile.cpp(1213): void CodeFile::EraseForw(const Forward* forw)
  ct/CodeFile.cpp(1221): void CodeFile::EraseFunc(const Function* func)
  ct/CodeFile.cpp(1244): void CodeFile::EraseItem(const CxxToken* item)
  ct/CodeFile.cpp(1258): void CodeFile::EraseSpace(const SpaceDefn* space)
  ct/CodeFile.cpp(1266): void CodeFile::EraseType(const Typedef* type)
  ct/CodeFile.cpp(1274): void CodeFile::EraseUsing(const Using* use)
  ct/CodeFile.cpp(1639): void CodeFile::GetLineCounts() const
  ct/CodeFile.cpp(1849): void CodeFile::InsertAsm(Asm* code)
  ct/CodeFile.cpp(1857): void CodeFile::InsertClass(Class* cls)
  ct/CodeFile.cpp(1865): void CodeFile::InsertData(Data* data)
  ct/CodeFile.cpp(1873): bool CodeFile::InsertDirective(DirectivePtr& dir)
  ct/CodeFile.cpp(1882): void CodeFile::InsertEnum(Enum* item)
  ct/CodeFile.cpp(1890): void CodeFile::InsertForw(Forward* forw)
  ct/CodeFile.cpp(1898): void CodeFile::InsertFunc(Function* func)
  ct/CodeFile.cpp(1906): void CodeFile::InsertInclude(IncludePtr& incl)
  ct/CodeFile.cpp(1949): void CodeFile::InsertItem(CxxToken* item)
  ct/CodeFile.cpp(1974): void CodeFile::InsertMacro(Macro* macro)
  ct/CodeFile.cpp(1982): void CodeFile::InsertSpace(SpaceDefn* space)
  ct/CodeFile.cpp(1990): void CodeFile::InsertStaticAssert(StaticAssert* assert)
  ct/CodeFile.cpp(1998): void CodeFile::InsertType(Typedef* type)
  ct/CodeFile.cpp(2006): void CodeFile::InsertUsing(Using* use)
  ct/CodeFileSet.cpp(93): static bool IsSortedByFileLevel(const FileLevel& item1, const FileLevel& item2)
  ct/CodeItemSet.cpp(55): void CodeItemSet::CopyItems(const CxxNamedSet& items)
  ct/CodeItemSet.cpp(67): void CodeItemSet::CopyUsages(const CxxUsageSets& usages)
  ct/CodeTypes.cpp(406): size_t IndentSize()
  ct/CodeTypes.cpp(413): bool IsAccessControl(const std::string& s)
  ct/CodeTypes.cpp(426): size_t LineLengthMax()
  ct/CodeWarning.cpp(337): bool CodeWarning::HasCodeToDisplay() const
  ct/CodeWarning.cpp(344): bool CodeWarning::HasInfoToDisplay() const
  ct/CodeWarning.cpp(821): bool CodeWarning::IsInformational() const
  ct/CodeWarning.cpp(828): bool CodeWarning::IsSortedByFile
  ct/CodeWarning.cpp(847): bool CodeWarning::IsSortedByType
  ct/CodeWarning.cpp(866): bool CodeWarning::IsSortedToFix
  ct/CodeWarning.cpp(885): void CodeWarning::ItemDeleted(const CxxToken* item) const
  ct/CodeWarning.cpp(895): size_t CodeWarning::Line() const
  ct/CodeWarning.cpp(963): bool CodeWarning::Preserve() const
  ct/CodeWarning.cpp(990): bool CodeWarning::Revoke() const
  ct/CodeWarning.cpp(1005): bool CodeWarning::Suppress() const
  ct/CodeWarning.cpp(1272): bool CodeWarning::WasResolved() const
  ct/Cxx.cpp(114): Cxx::Access FindAccessControl(const std::string& s)
  ct/Cxx.cpp(888): static void EraseTemplateArgs
  ct/Cxx.cpp(920): static void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
  ct/Cxx.cpp(930): void CxxUsageSets::AddBase(CxxNamed* item)
  ct/Cxx.cpp(938): void CxxUsageSets::AddDirect(CxxNamed* item)
  ct/Cxx.cpp(946): void CxxUsageSets::AddForward(CxxNamed* item)
  ct/Cxx.cpp(957): void CxxUsageSets::AddIndirect(CxxNamed* item)
  ct/Cxx.cpp(965): void CxxUsageSets::AddInherit(CxxNamed* item)
  ct/Cxx.cpp(973): void CxxUsageSets::AddUser(CxxNamed* item)
  ct/CxxArea.cpp(69): static TypeMatch FindMin(const std::vector<TypeMatch>& matches)
  ct/CxxArea.cpp(1565): Class* Class::GetClassTemplate() const
  ct/CxxArea.cpp(1601): Cxx::Access Class::GetCurrAccess() const
  ct/CxxArea.cpp(1618): void Class::GetDecls(CxxNamedSet& items)
  ct/CxxArea.cpp(1729): CxxScope* Class::GetTemplate() const
  ct/CxxArea.cpp(2213): Class* Class::OuterClass() const
  ct/CxxArea.cpp(3354): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  ct/CxxArea.cpp(3370): void CxxArea::GetDecls(CxxNamedSet& items)
  ct/CxxArea.cpp(3410): void CxxArea::InsertFunc(Function* func)
  ct/CxxDirective.cpp(46): static void AlignLeft(ostream& stream, const string& prefix)
  ct/CxxDirective.cpp(58): bool IncludesAreSorted(const IncludePtr& incl1, const IncludePtr& incl2)
  ct/CxxDirective.cpp(193): CxxToken* Define::AutoType() const
  ct/CxxDirective.cpp(943): bool Macro::WasRead()
  ct/CxxDirective.cpp(981): CxxScope* MacroName::GetScope() const
  ct/CxxDirective.cpp(997): void MacroName::ItemDeleted(const CxxScoped* item) const
  ct/CxxExecute.cpp(59): static bool CompilingTemplateFunction()
  ct/CxxExecute.cpp(335): TypeName* Context::FindXrefItem(const string& name)
  ct/CxxExecute.cpp(347): const Parser* Context::GetParser()
  ct/CxxExecute.cpp(355): XrefUpdater Context::GetXrefUpdater()
  ct/CxxExecute.cpp(374): bool Context::IsCompiling()
  ct/CxxExecute.cpp(391): void Context::OnLine(size_t line, Phase phase)
  ct/CxxExecute.cpp(426): bool Context::OptionIsOn(char opt)
  ct/CxxExecute.cpp(454): bool Context::ParsingSourceCode()
  ct/CxxExecute.cpp(462): bool Context::ParsingTemplate()
  ct/CxxExecute.cpp(475): bool Context::ParsingTemplateInstance()
  ct/CxxExecute.cpp(500): void Context::PopXrefFrame()
  ct/CxxExecute.cpp(518): void Context::PushScope(CxxScope* scope, bool hidden)
  ct/CxxExecute.cpp(527): void Context::PushXrefFrame(XrefUpdater updater)
  ct/CxxExecute.cpp(534): void Context::PushXrefItem(TypeName* item)
  ct/CxxExecute.cpp(556): CxxScope* Context::Scope()
  ct/CxxExecute.cpp(607): void Context::SetOptions(const std::string& opts)
  ct/CxxExecute.cpp(650): void Context::SetPos(size_t pos)
  ct/CxxExecute.cpp(665): void Context::SetPos(const CxxLocation& loc)
  ct/CxxExecute.cpp(1086): OptionalCode* ParseFrame::Optional() const
  ct/CxxExecute.cpp(1277): CxxScope* ParseFrame::Scope() const
  ct/CxxExecute.cpp(1284): Cxx::Access ParseFrame::ScopeAccess() const
  ct/CxxExecute.cpp(1291): Cxx::Access ParseFrame::SetAccess(Cxx::Access access)
  ct/CxxExecute.cpp(1700): bool StackArg::IsBool() const
  ct/CxxExecute.cpp(2439): TypeName* XrefFrame::FindItem(const string& name) const
  ct/CxxExecute.cpp(2451): void XrefFrame::PushItem(TypeName* item)
  ct/CxxLocation.cpp(41): void CxxLocation::SetLoc(CodeFile* file, size_t pos)
  ct/CxxLocation.cpp(49): void CxxLocation::SetLoc(CodeFile* file, size_t pos, bool internal)
  ct/CxxNamed.cpp(204): CxxArea* CxxNamed::GetArea() const
  ct/CxxNamed.cpp(213): Class* CxxNamed::GetClass() const
  ct/CxxNamed.cpp(244): CodeFile* CxxNamed::GetDistinctDeclFile() const
  ct/CxxNamed.cpp(259): CodeFile* CxxNamed::GetImplFile() const
  ct/CxxNamed.cpp(268): void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
  ct/CxxNamed.cpp(275): Namespace* CxxNamed::GetSpace() const
  ct/CxxNamed.cpp(284): void CxxNamed::Instantiating(CxxScopedVector& locals) const
  ct/CxxNamed.cpp(633): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  ct/CxxNamed.cpp(766): const TemplateArgPtrVector* DataSpec::Args() const
  ct/CxxNamed.cpp(1020): TypeTags DataSpec::GetAllTags() const
  ct/CxxNamed.cpp(1088): TypeSpec* DataSpec::GetTypeSpec() const
  ct/CxxNamed.cpp(1225): bool DataSpec::IsAutoDecl() const
  ct/CxxNamed.cpp(1292): bool DataSpec::IsPOD() const
  ct/CxxNamed.cpp(1651): CxxScoped* DataSpec::Referent() const
  ct/CxxNamed.cpp(2008): bool DataSpec::VerifyReferents() const
  ct/CxxNamed.cpp(2087): const TemplateArgPtrVector* QualName::Args() const
  ct/CxxNamed.cpp(2139): TypeName* QualName::At(size_t n) const
  ct/CxxNamed.cpp(2350): CxxScope* QualName::GetScope() const
  ct/CxxNamed.cpp(2381): TypeName* QualName::GetTemplatedName() const
  ct/CxxNamed.cpp(2469): TypeName* QualName::Last() const
  ct/CxxNamed.cpp(2707): size_t QualName::Size() const
  ct/CxxNamed.cpp(2769): bool QualName::VerifyReferents() const
  ct/CxxNamed.cpp(3001): CxxScoped* TemplateArg::GetReferent() const
  ct/CxxNamed.cpp(3321): bool TemplateArg::VerifyReferents() const
  ct/CxxNamed.cpp(3407): const TemplateArgPtrVector* TypeName::Args() const
  ct/CxxNamed.cpp(3464): CxxScoped* TypeName::DirectType() const
  ct/CxxNamed.cpp(3561): TypeName* TypeName::GetTemplatedName() const
  ct/CxxNamed.cpp(3643): void TypeName::ItemDeleted(const CxxScoped* item) const
  ct/CxxNamed.cpp(3811): void TypeName::PushBack(TypeNamePtr& type)
  ct/CxxNamed.cpp(4131): bool TypeName::VerifyReferents() const
  ct/CxxNamed.cpp(4411): int TypeTags::IsConstPtr() const
  ct/CxxNamed.cpp(4420): bool TypeTags::IsConstPtr(size_t n) const
  ct/CxxNamed.cpp(4429): bool TypeTags::IsLvalue() const
  ct/CxxNamed.cpp(4439): int TypeTags::IsVolatilePtr() const
  ct/CxxNamed.cpp(4448): bool TypeTags::IsVolatilePtr(size_t n) const
  ct/CxxNamed.cpp(4488): TagCount TypeTags::PtrCount(bool arrays) const
  ct/CxxScope.cpp(135): bool FuncDefnsAreSorted(const Function* func1, const Function* func2)
  ct/CxxScope.cpp(167): FunctionVector FuncsInArea(const FunctionVector& defns, const CxxArea* area)
  ct/CxxScope.cpp(307): bool Block::CrlfOver(Form form) const
  ct/CxxScope.cpp(448): CxxToken* Block::FirstStatement() const
  ct/CxxScope.cpp(456): Function* Block::GetFunction() const
  ct/CxxScope.cpp(928): void ClassData::GetDecls(CxxNamedSet& items)
  ct/CxxScope.cpp(1037): void ClassData::SetMemInit(const MemberInit* init)
  ct/CxxScope.cpp(1573): CodeFile* Data::GetDeclFile() const
  ct/CxxScope.cpp(1580): const Data* Data::GetDefn() const
  ct/CxxScope.cpp(1589): CodeFile* Data::GetDefnFile() const
  ct/CxxScope.cpp(1632): TypeName* Data::GetTemplatedName() const
  ct/CxxScope.cpp(1781): bool Data::IsConst() const
  ct/CxxScope.cpp(1938): bool Data::WasRead()
  ct/CxxScope.cpp(2300): const TemplateArgPtrVector* FuncSpec::Args() const
  ct/CxxScope.cpp(2325): TypeSpec* FuncSpec::Clone() const
  ct/CxxScope.cpp(2347): void FuncSpec::EnterArrays() const
  ct/CxxScope.cpp(2364): void FuncSpec::FindReferent()
  ct/CxxScope.cpp(2372): TypeTags FuncSpec::GetAllTags() const
  ct/CxxScope.cpp(2379): void FuncSpec::GetNames(stringVector& names) const
  ct/CxxScope.cpp(2387): TypeName* FuncSpec::GetTemplatedName() const
  ct/CxxScope.cpp(2394): TypeSpec* FuncSpec::GetTypeSpec() const
  ct/CxxScope.cpp(2401): bool FuncSpec::HasArrayDefn() const
  ct/CxxScope.cpp(2408): void FuncSpec::Instantiating(CxxScopedVector& locals) const
  ct/CxxScope.cpp(2416): bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
  ct/CxxScope.cpp(2424): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  ct/CxxScope.cpp(2432): TypeMatch FuncSpec::MatchTemplate(const TypeSpec* that,
  ct/CxxScope.cpp(2442): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  ct/CxxScope.cpp(2450): bool FuncSpec::NamesReferToArgs(const NameVector& names,
  ct/CxxScope.cpp(2476): TagCount FuncSpec::Ptrs(bool arrays) const
  ct/CxxScope.cpp(2483): TagCount FuncSpec::Refs() const
  ct/CxxScope.cpp(2517): void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
  ct/CxxScope.cpp(2525): const TypeTags* FuncSpec::Tags() const
  ct/CxxScope.cpp(2532): TypeTags* FuncSpec::Tags()
  ct/CxxScope.cpp(2935): uint32_t Function::CalcHash() const
  ct/CxxScope.cpp(4568): FunctionRole Function::FuncRole() const
  ct/CxxScope.cpp(4605): FunctionType Function::FuncType() const
  ct/CxxScope.cpp(4616): Cxx::Access Function::GetAccess() const
  ct/CxxScope.cpp(4624): CodeFile* Function::GetDeclFile() const
  ct/CxxScope.cpp(4631): void Function::GetDecls(CxxNamedSet& items)
  ct/CxxScope.cpp(4638): const Function* Function::GetDefn() const
  ct/CxxScope.cpp(4647): Function* Function::GetDefn()
  ct/CxxScope.cpp(4656): CodeFile* Function::GetDefnFile() const
  ct/CxxScope.cpp(4665): CxxScope* Function::GetScope() const
  ct/CxxScope.cpp(4693): CxxScope* Function::GetTemplate() const
  ct/CxxScope.cpp(4704): CxxScope* Function::GetTemplateInstance() const
  ct/CxxScope.cpp(4712): TemplateType Function::GetTemplateType() const
  ct/CxxScope.cpp(5223): bool Function::IsImplemented() const
  ct/CxxScope.cpp(5446): size_t Function::LogOffsetToArgIndex(word offset) const
  ct/CxxScope.cpp(6153): bool Function::WasRead()
  ct/CxxScope.cpp(6365): void SpaceData::GetDecls(CxxNamedSet& items)
  ct/CxxScope.cpp(6450): void SpaceDefn::GetDecls(CxxNamedSet& items)
  ct/CxxScoped.cpp(453): Class* BaseDecl::GetClass() const
  ct/CxxScoped.cpp(582): void CxxScoped::AddFiles(LibItemSet& imSet) const
  ct/CxxScoped.cpp(810): bool CxxScoped::IsAuto() const
  ct/CxxScoped.cpp(819): bool CxxScoped::IsClassMember() const
  ct/CxxScoped.cpp(833): bool CxxScoped::IsConst() const
  ct/CxxScoped.cpp(842): bool CxxScoped::IsConstPtr() const
  ct/CxxScoped.cpp(851): bool CxxScoped::IsConstPtr(size_t n) const
  ct/CxxScoped.cpp(860): bool CxxScoped::IsDeclaredInFunction() const
  ct/CxxScoped.cpp(868): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  ct/CxxScoped.cpp(881): bool CxxScoped::IsIndirect(bool arrays) const
  ct/CxxScoped.cpp(1145): void CxxScoped::UpdateReference(CxxToken* item, bool insert) const
  ct/CxxScoped.cpp(1202): CxxTokenVector CxxScoped::XrefItems() const
  ct/CxxScoped.cpp(1436): void Enum::GetDecls(CxxNamedSet& items)
  ct/CxxScoped.cpp(1457): TypeSpec* Enum::GetTypeSpec() const
  ct/CxxScoped.cpp(1695): void Enumerator::GetDecls(CxxNamedSet& items)
  ct/CxxScoped.cpp(1873): CxxToken* Forward::AutoType() const
  ct/CxxScoped.cpp(1954): void Forward::GetDecls(CxxNamedSet& items)
  ct/CxxScoped.cpp(2102): CxxToken* Friend::AutoType() const
  ct/CxxScoped.cpp(2374): void Friend::GetDecls(CxxNamedSet& items)
  ct/CxxScoped.cpp(2391): Function* Friend::GetFunction() const
  ct/CxxScoped.cpp(2400): QualName* Friend::GetQualName() const
  ct/CxxScoped.cpp(2409): CxxScoped* Friend::GetReferent() const
  ct/CxxScoped.cpp(2825): void MemberInit::ItemDeleted(const CxxScoped* item) const
  ct/CxxScoped.cpp(2853): CxxScoped* MemberInit::Referent() const
  ct/CxxScoped.cpp(2911): CxxToken* TemplateParm::AutoType() const
  ct/CxxScoped.cpp(3005): CxxScoped* TemplateParm::Referent() const
  ct/CxxScoped.cpp(3018): CxxToken* TemplateParm::RootType() const
  ct/CxxScoped.cpp(3311): const TemplateArgPtrVector* Typedef::Args() const
  ct/CxxScoped.cpp(3468): void Typedef::GetDecls(CxxNamedSet& items)
  ct/CxxScoped.cpp(3484): TypeName* Typedef::GetTemplatedName() const
  ct/CxxScoped.cpp(3499): void Typedef::Instantiating(CxxScopedVector& locals) const
  ct/CxxScoped.cpp(3617): bool Typedef::VerifyReferents() const
  ct/CxxStatement.cpp(376): void CxxStatement::EnterBlock()
  ct/CxxSymbols.cpp(290): template<typename T> void GetSymbols
  ct/CxxSymbols.cpp(302): static bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
  ct/CxxSymbols.cpp(315): static bool IsSortedForXref(const CxxScoped* item1, const CxxScoped* item2)
  ct/CxxSymbols.cpp(454): void CxxSymbols::EraseClass(const Class* cls)
  ct/CxxSymbols.cpp(461): void CxxSymbols::EraseData(const Data* data)
  ct/CxxSymbols.cpp(468): void CxxSymbols::EraseEnum(const Enum* item)
  ct/CxxSymbols.cpp(475): void CxxSymbols::EraseEtor(const Enumerator* etor)
  ct/CxxSymbols.cpp(482): void CxxSymbols::EraseForw(const Forward* forw)
  ct/CxxSymbols.cpp(489): void CxxSymbols::EraseFriend(const Friend* frnd)
  ct/CxxSymbols.cpp(496): void CxxSymbols::EraseFunc(const Function* func)
  ct/CxxSymbols.cpp(503): void CxxSymbols::EraseMacro(const Macro* macro)
  ct/CxxSymbols.cpp(510): void CxxSymbols::EraseSpace(const Namespace* space)
  ct/CxxSymbols.cpp(517): void CxxSymbols::EraseTerm(const Terminal* term)
  ct/CxxSymbols.cpp(524): void CxxSymbols::EraseType(const Typedef* type)
  ct/CxxSymbols.cpp(861): void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
  ct/CxxSymbols.cpp(868): void CxxSymbols::InsertClass(Class* cls)
  ct/CxxSymbols.cpp(875): void CxxSymbols::InsertData(Data* data)
  ct/CxxSymbols.cpp(882): void CxxSymbols::InsertEnum(Enum* item)
  ct/CxxSymbols.cpp(889): void CxxSymbols::InsertEtor(Enumerator* etor)
  ct/CxxSymbols.cpp(896): void CxxSymbols::InsertForw(Forward* forw)
  ct/CxxSymbols.cpp(903): void CxxSymbols::InsertFriend(Friend* frnd)
  ct/CxxSymbols.cpp(910): void CxxSymbols::InsertFunc(Function* func)
  ct/CxxSymbols.cpp(917): void CxxSymbols::InsertMacro(Macro* macro)
  ct/CxxSymbols.cpp(924): void CxxSymbols::InsertSpace(Namespace* space)
  ct/CxxSymbols.cpp(931): void CxxSymbols::InsertTerm(Terminal* term)
  ct/CxxSymbols.cpp(938): void CxxSymbols::InsertType(Typedef* type)
  ct/CxxSymbols.h(258): template<typename T> void EraseSymbol(const CxxScoped* item,
  ct/CxxSymbols.h(278): template<typename T> void ListSymbols(const std::string& name,
  ct/CxxToken.cpp(59): bool IsSortedByFilePos(const CxxToken* item1, const CxxToken* item2)
  ct/CxxToken.cpp(90): bool IsSortedByPos(const CxxToken* item1, const CxxToken* item2)
  ct/CxxToken.cpp(700): CxxScope* CxxToken::GetTemplateInstance() const
  ct/CxxToken.cpp(709): bool CxxToken::IsInTemplateInstance() const
  ct/CxxToken.cpp(716): bool CxxToken::IsPointer(bool arrays) const
  ct/CxxToken.cpp(908): bool CxxToken::VerifyReferents() const
  ct/CxxToken.cpp(1381): Numeric FloatLiteral::GetNumeric() const
  ct/CxxToken.cpp(1440): Numeric IntLiteral::BaseNumeric() const
  ct/CxxToken.cpp(1586): CxxToken* Literal::AutoType() const
  ct/CxxToken.cpp(1618): CxxToken* Literal::RootType() const
  ct/CxxToken.cpp(1634): Cxx::ItemType Literal::Type() const
  ct/CxxVector.h(47): template<typename T> size_t IndexOf(const std::vector<T>& vec, const T& item)
  ct/CxxVector.h(61): template<class T> void SortAndDisplayItems
  ct/CxxVector.h(90): template<class T> void SortAndDisplayItemPtrs
  ct/CxxVector.h(124): template<class T> void EraseItem(std::vector<T*>& vec, const T* item)
  ct/CxxVector.h(148): template<class T> void DeleteItemPtr
  ct/Editor.cpp(1972): size_t Editor::CommitCount() { return Commits_; }
  ct/Editor.cpp(4935): static FunctionRole WarningToRole(Warning log)
  ct/Interpreter.cpp(133): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  ct/Interpreter.cpp(141): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  ct/Lexer.cpp(87): static IndentRule ClassifyIndent(string& id)
  ct/Lexer.cpp(810): word Lexer::CheckDepth(size_t n) const
  ct/Lexer.cpp(860): int Lexer::CheckLineMerge(size_t n) const
  ct/Lexer.cpp(1304): size_t Lexer::CurrBegin(size_t pos) const
  ct/Lexer.cpp(1330): size_t Lexer::CurrEnd(size_t pos) const
  ct/Lexer.cpp(2156): const LineInfo* Lexer::GetLineInfo(size_t pos) const
  ct/Lexer.cpp(2165): LineInfo* Lexer::GetLineInfo(size_t pos)
  ct/Lexer.cpp(2174): size_t Lexer::GetLineNum(size_t pos) const
  ct/Lexer.cpp(2198): size_t Lexer::GetLineStart(size_t line) const
  ct/Lexer.cpp(2275): bool Lexer::GetNthLine(size_t n, string& s) const
  ct/Lexer.cpp(2788): bool Lexer::LineHasTrailingCommentAt(size_t n, size_t offset) const
  ct/Lexer.cpp(2870): size_t Lexer::LineSize(size_t pos) const
  ct/Lexer.cpp(2913): size_t Lexer::NextBegin(size_t pos) const
  ct/Lexer.cpp(3028): size_t Lexer::NextPos(size_t pos) const
  ct/Lexer.cpp(3270): size_t Lexer::PrevBegin(size_t pos) const
  ct/Lexer.cpp(3346): void Lexer::SetDepth(int8_t depth1, int8_t depth2, bool merge)
  ct/LibraryItem.cpp(34): bool IsSortedByName(const LibraryItem* item1, const LibraryItem* item2)
  ct/LibraryItem.cpp(78): bool LibItemSort::operator()
  ct/LibrarySet.cpp(97): LibrarySet* LibrarySet::AffectedBy() const
  ct/LibrarySet.cpp(104): LibrarySet* LibrarySet::Affecters() const
  ct/LibrarySet.cpp(111): LibrarySet* LibrarySet::Assign(LibrarySet* that)
  ct/LibrarySet.cpp(128): LibrarySet* LibrarySet::CommonAffecters() const
  ct/LibrarySet.cpp(169): LibrarySet* LibrarySet::Create
  ct/LibrarySet.cpp(177): LibrarySet* LibrarySet::DeclaredBy() const
  ct/LibrarySet.cpp(184): LibrarySet* LibrarySet::Declarers() const
  ct/LibrarySet.cpp(191): LibrarySet* LibrarySet::Definitions() const
  ct/LibrarySet.cpp(198): LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
  ct/LibrarySet.cpp(205): LibrarySet* LibrarySet::Directories() const
  ct/LibrarySet.cpp(230): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  ct/LibrarySet.cpp(237): LibrarySet* LibrarySet::Files() const
  ct/LibrarySet.cpp(244): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  ct/LibrarySet.cpp(269): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  ct/LibrarySet.cpp(288): LibrarySet* LibrarySet::Implements() const
  ct/LibrarySet.cpp(295): LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
  ct/LibrarySet.cpp(302): bool LibrarySet::IsReadOnly() const
  ct/LibrarySet.cpp(309): bool LibrarySet::IsTemporary() const
  ct/LibrarySet.cpp(350): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  ct/LibrarySet.cpp(357): LibrarySet* LibrarySet::NeededBy() const
  ct/LibrarySet.cpp(364): LibrarySet* LibrarySet::Needers() const
  ct/LibrarySet.cpp(381): word LibrarySet::NotImplemented(string& expl) const
  ct/LibrarySet.cpp(393): LibrarySet* LibrarySet::OpError(c_string op) const
  ct/LibrarySet.cpp(421): LibrarySet* LibrarySet::ReferencedBy() const
  ct/LibrarySet.cpp(428): LibrarySet* LibrarySet::Referencers() const
  ct/LibrarySet.cpp(525): LibrarySet* LibrarySet::Union(const LibrarySet* that) const
  ct/LibrarySet.cpp(532): LibrarySet* LibrarySet::UsedBy(bool self) const
  ct/LibrarySet.cpp(539): LibrarySet* LibrarySet::Users(bool self) const
  ct/Parser.cpp(301): size_t Parser::CurrPos() const
  dip/BaseBot.cpp(431): BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
  dip/BaseBot.cpp(438): BaseBot* BaseBot::instance()
  dip/ConvoySubversion.cpp(29): void ConvoySubversion::clear()  // <b>
  dip/ConvoySubversion.cpp(37): void ConvoySubversion::decrement()
  dip/MapAndUnits.cpp(281): bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
  dip/MapAndUnits.cpp(299): bool MapAndUnits::can_move_to_province
  dip/MapAndUnits.cpp(561): TokenMessage MapAndUnits::encode_location(const Location& location) const
  dip/MapAndUnits.cpp(838): TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
  dip/MapAndUnits.cpp(1145): const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
  dip/MapAndUnits.cpp(1384): MapAndUnits* MapAndUnits::instance()
  dip/MapAndUnits.cpp(2451): Token MapAndUnits::province_token(ProvinceId province) const
  dip/MapAndUnits.cpp(2570): bool MapAndUnits::set_move_by_single_step_convoy_order
  dip/Token.cpp(32): Token::Token(const category_t cat, const subtoken_t sub)
  dip/Token.cpp(40): Token& Token::operator=(const Token& that)
  dip/Token.cpp(48): int Token::get_number() const
  dip/Token.cpp(57): bool Token::is_number() const
  dip/Token.cpp(64): bool Token::is_power() const
  dip/Token.cpp(71): bool Token::is_province() const
  dip/Token.cpp(118): Token::SeasonType Token::order_season() const
  dip/Token.cpp(129): PowerId Token::power_id() const
  dip/Token.cpp(137): ProvinceId Token::province_id() const
  dip/Token.cpp(260): Token power_token(PowerId power)
  dip/Token.cpp(273): Token province_token(ProvinceId province)
  dip/TokenMessage.cpp(36): static void copy_tokens(Token* dest, const Token* source, int num)
  dip/TokenMessage.cpp(161): Token TokenMessage::at(size_t index) const
  dip/TokenMessage.cpp(168): void TokenMessage::clear()
  dip/TokenMessage.cpp(295): Token TokenMessage::front() const
  dip/TokenMessage.cpp(354): Token TokenMessage::operator[](size_t index) const
  dip/TokenTextMap.cpp(328): TokenTextMap* TokenTextMap::instance()
  dip/WinterOrders.cpp(37): size_t WinterOrders::get_number_of_results() const
  mb/MediaEndpt.cpp(131): bool MediaEndpt::Passes(uint32_t selector) const
  mb/MediaPsm.cpp(234): MediaPsm* MediaPsm::GetOgPsm() const
  mb/Switch.cpp(85): Circuit* Switch::GetCircuit(PortId pid) const
  mb/ToneRegistry.cpp(77): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  nb/Alarm.cpp(203): AlarmStatus Alarm::Status() const
  nb/Base.cpp(90): void Base::Nullify(size_t n)
  nb/Base.cpp(154): Base::vptr_t Base::Vptr() const
  nb/BuddyHeap.cpp(128): static BuddyHeap::index_t IndexToChild(BuddyHeap::index_t index)
  nb/BuddyHeap.cpp(137): static BuddyHeap::index_t IndexToParent(BuddyHeap::index_t index)
  nb/BuddyHeap.cpp(146): static BuddyHeap::index_t IndexToSibling(BuddyHeap::index_t index)
  nb/BuddyHeap.cpp(157): static size_t Log2Size(BuddyHeap::level_t level)
  nb/BuddyHeap.cpp(166): static size_t LevelToSize(BuddyHeap::level_t level)
  nb/BuddyHeap.cpp(175): static BuddyHeap::level_t SizeToLevel(size_t size)
  nb/BuddyHeap.cpp(272): bool BuddyHeap::AddrIsValid(const void* addr, bool header) const
  nb/BuddyHeap.cpp(314): HeapBlock* BuddyHeap::AllocBlock(level_t level, size_t size)
  nb/BuddyHeap.cpp(346): BuddyHeap::index_t BuddyHeap::BlockToIndex
  nb/BuddyHeap.cpp(411): BuddyHeap::BlockState BuddyHeap::Corrupt(int reason, bool restart) const
  nb/BuddyHeap.cpp(592): HeapBlock* BuddyHeap::Dequeue(level_t level) const
  nb/BuddyHeap.cpp(697): void BuddyHeap::EnqBlock(HeapBlock* block, index_t index, level_t level) const
  nb/BuddyHeap.cpp(706): HeapBlock* BuddyHeap::Enqueue(HeapBlock* block, level_t level) const
  nb/BuddyHeap.cpp(757): void BuddyHeap::FreeBlock(HeapBlock* block, level_t level)
  nb/BuddyHeap.cpp(776): BuddyHeap::BlockState BuddyHeap::GetState(index_t index) const
  nb/BuddyHeap.cpp(792): HeapBlock* BuddyHeap::IndexToBlock(index_t index, level_t level) const
  nb/BuddyHeap.cpp(805): size_t BuddyHeap::Overhead() const
  nb/BuddyHeap.cpp(819): void BuddyHeap::ReleaseBlock(HeapBlock* block, level_t level) const
  nb/BuddyHeap.cpp(835): void BuddyHeap::ReserveBlock(const HeapBlock* block) const
  nb/BuddyHeap.cpp(861): void BuddyHeap::SetState(index_t index, BlockState state) const
  nb/BuddyHeap.cpp(877): void BuddyHeap::SplitAncestors(index_t block) const
  nb/BuddyHeap.cpp(925): BuddyHeap::BlockState BuddyHeap::ValidateBlock
  nb/CfgBitParm.cpp(88): void CfgBitParm::Explain(string& expl) const
  nb/CfgFlagParm.cpp(55): bool CfgFlagParm::CurrValue() const
  nb/CfgFlagParm.cpp(74): bool CfgFlagParm::NextValue() const
  nb/CfgIntParm.cpp(68): void CfgIntParm::Explain(string& expl) const
  nb/CfgParmRegistry.cpp(327): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  nb/CfgStrParm.cpp(60): void CfgStrParm::Explain(string& expl) const
  nb/CinThread.cpp(66): void CinThread::ClearClient(const Thread* client)
  nb/ClassRegistry.cpp(89): Class* ClassRegistry::Lookup(ClassId cid) const
  nb/CliBuffer.cpp(618): bool CliBuffer::ReadingFromFile() const
  nb/CliCookie.cpp(118): uint32_t CliCookie::Index(uint32_t depth) const
  nb/Debug.cpp(67): void Debug::Assert(bool condition, debug64_t errval)
  nb/Debug.cpp(96): void Debug::ft(fn_name_arg func) NO_FT
  nb/Debug.cpp(104): void Debug::ftnt(fn_name_arg func) NO_FT
  nb/Element.cpp(199): bool Element::RunningInLab()
  nb/FileSystem.cpp(83): size_t FileSystem::FindExt(const string& name, const string& ext)
  nb/FileSystem.cpp(97): void FileSystem::GetLine(std::istream& stream, std::string& str)
  nb/FunctionTrace.cpp(191): CtorChain::CtorChain(FunctionTrace* inner) :
  nb/FunctionTrace.cpp(208): bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
  nb/FunctionTrace.cpp(261): CtorChain::Action CtorChain::CalcAction
  nb/FunctionTrace.cpp(329): TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
  nb/FunctionTrace.cpp(348): bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
  nb/FunctionTrace.cpp(391): bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
  nb/FunctionTrace.cpp(409): TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
  nb/FunctionTrace.cpp(458): void CtorChain::HandleFunction(FunctionTrace* func)
  nb/FunctionTrace.cpp(485): void CtorChain::MoveOuterAboveInit()
  nb/FunctionTrace.cpp(499): void CtorChain::MoveOuterAboveInner() const
  nb/FunctionTrace.cpp(512): void CtorChain::SetOuter(FunctionTrace* outer)
  nb/Heap.cpp(143): void Heap::Freeing(void* addr, size_t size)
  nb/Heap.cpp(208): void Heap::Requested(size_t size, void* addr)
  nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  nb/InitFlags.cpp(48): bool InitFlags::SuspendRoot()
  nb/InitFlags.cpp(55): bool InitFlags::TraceInit()
  nb/InitThread.cpp(366): uint64_t InitThread::RunningTicks()
  nb/Log.cpp(210): size_t Log::Count()
  nb/Log.cpp(483): main_t Log::TrapInMain(const Exception* ex,
  nb/LogBuffer.cpp(500): void LogBuffer::UpdateMax()
  nb/LogGroup.cpp(182): void LogGroup::SetSuppressed(bool suppressed)
  nb/LogGroupRegistry.cpp(190): LogGroup* LogGroupRegistry::Group(id_t gid) const
  nb/MainArgs.cpp(164): size_t MainArgs::Size()
  nb/Memory.cpp(199): static Heap* EnsureHeap(MemoryType type)
  nb/Memory.cpp(219): static std::vector<const Heap*> ListHeaps()
  nb/Memory.cpp(233): Heap* Memory::AccessHeap(MemoryType type)
  nb/Memory.cpp(257): size_t Memory::Align(size_t size, size_t log2align)
  nb/Memory.cpp(351): size_t Memory::CountHeaps()
  nb/Memory.cpp(429): bool Memory::Protect(MemoryType type)
  nb/Memory.cpp(556): bool Memory::Unprotect(MemoryType type)
  nb/Memory.cpp(586): size_t Memory::Words(size_t size)
  nb/ModuleRegistry.cpp(68): static const FactionFlags& AllFactions()
  nb/ModuleRegistry.cpp(110): static const FactionFlags& ShutdownFactions()
  nb/ModuleRegistry.cpp(262): RestartLevel ModuleRegistry::GetLevel()
  nb/MsgBuffer.cpp(63): TraceStatus MsgBuffer::GetStatus() const
  nb/Mutex.cpp(164): Thread* Mutex::Owner() const
  nb/NbCliParms.cpp(132): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  nb/NbTracer.cpp(188): TraceStatus NbTracer::FactionStatus(Faction faction) const
  nb/NbTypes.cpp(75): char BlockingReasonChar(BlockingReason reason)
  nb/NbTypes.cpp(98): char FactionChar(Faction faction)
  nb/Object.cpp(59): Object::ClassId Object::GetClassId() const
  nb/Object.cpp(70): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  nb/Object.cpp(95): Object::ObjectId Object::GetObjectId() const
  nb/ObjectPool.cpp(84): static ObjectBlock* ObjToBlock(const Pooled* obj)
  nb/ObjectPool.cpp(351): size_t ObjectPool::AllocCount() const
  nb/ObjectPool.cpp(518): size_t ObjectPool::AvailCount() const
  nb/ObjectPool.cpp(525): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  nb/ObjectPool.cpp(740): void ObjectPool::EnqBlock(Pooled* obj, bool deleted)
  nb/ObjectPool.cpp(835): size_t ObjectPool::Expansions() const
  nb/ObjectPool.cpp(842): size_t ObjectPool::FailCount() const
  nb/ObjectPool.cpp(883): size_t ObjectPool::FreeCount() const
  nb/ObjectPool.cpp(916): bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
  nb/ObjectPool.cpp(928): size_t ObjectPool::InUseCount() const
  nb/ObjectPool.cpp(935): size_t ObjectPool::LowAvailCount() const
  nb/ObjectPool.cpp(942): ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
  nb/ObjectPool.cpp(961): Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
  nb/ObjectPool.cpp(1033): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  nb/ObjectPool.cpp(1042): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  nb/PermanentHeap.cpp(43): PermanentHeap* PermanentHeap::Instance()
  nb/PosixSignal.cpp(124): Flags PS_Break()
  nb/PosixSignal.cpp(129): Flags PS_Delayed()
  nb/PosixSignal.cpp(134): Flags PS_Final()
  nb/PosixSignal.cpp(139): Flags PS_Interrupt()
  nb/PosixSignal.cpp(144): Flags PS_Native()
  nb/PosixSignal.cpp(149): Flags PS_NoError()
  nb/PosixSignal.cpp(154): Flags PS_NoLog()
  nb/PosixSignalRegistry.cpp(92): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  nb/PosixSignalRegistry.cpp(104): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  nb/PosixSignalRegistry.cpp(175): signal_t PosixSignalRegistry::Value(const string& name) const
  nb/Q2Link.cpp(40): Q2Link::~Q2Link()
  nb/RegCell.cpp(38): RegCell::~RegCell()
  nb/RegCell.cpp(50): void RegCell::SetId(id_t cid)
  nb/Restart.cpp(38): bool Restart::ClearsMemory(MemoryType type)
  nb/Restart.cpp(79): RestartLevel Restart::LevelToClear(MemoryType type)
  nb/RootThread.cpp(61): static Gate& ExitGate()
  nb/Singletons.cpp(126): Singletons* Singletons::Instance()
  nb/SlabHeap.cpp(412): size_t SlabPriv::CurrAvail() const
  nb/SlabHeap.cpp(596): size_t SlabPriv::Overhead() const
  nb/SlabHeap.cpp(659): size_t SlabPriv::Size() const
  nb/SlabHeap.cpp(827): size_t SlabHeap::CurrAvail() const
  nb/SlabHeap.cpp(872): size_t SlabHeap::Overhead() const
  nb/SlabHeap.cpp(906): size_t SlabHeap::Size() const
  nb/SlabHeap.cpp(913): MemoryType SlabHeap::Type() const
  nb/Statistics.cpp(117): uint64_t Statistic::Overall() const
  nb/Statistics.cpp(248): uint64_t HighWatermark::Overall() const
  nb/Statistics.cpp(320): uint64_t LowWatermark::Overall() const
  nb/StatisticsRegistry.cpp(128): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  nb/SysConsole.cpp(33): std::istream& SysConsole::In()
  nb/SysConsole.cpp(40): ostream& SysConsole::Out()
  nb/SysHeap.win.cpp(185): size_t SysHeap::Overhead() const { return 0; }
  nb/SysMemory.win.cpp(50): static DWORD GetMemoryProtection(MemoryProtection attrs)
  nb/SysStackTrace.win.cpp(129): fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
  nb/SysStackTrace.win.cpp(145): void StackInfo::Shutdown()
  nb/SysStackTrace.win.cpp(154): DWORD StackInfo::Startup()
  nb/SysStackTrace.win.cpp(189): void SysStackTrace::Demangle(std::string& name)
  nb/SysStackTrace.win.cpp(279): fn_depth SysStackTrace::FuncDepth()
  nb/SysStackTrace.win.cpp(324): bool SysStackTrace::TrapIsOk() NO_FT
  nb/SysThread.cpp(149): bool SysThread::ReportError(fn_name function, fixed_string expl, int error)
  nb/SysThread.win.cpp(51): static signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
  nb/SysThread.win.cpp(232): bool SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  nb/SysThread.win.cpp(240): SysThreadId SysThread::RunningThreadId() NO_FT
  nb/SysThread.win.cpp(266): bool SysThread::SetPriorityAllowed()
  nb/SysTypes.cpp(37): static uintptr_t BadPointer()
  nb/ThisThread.cpp(32): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  nb/ThisThread.cpp(39): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  nb/ThisThread.cpp(46): void ThisThread::IncludeInTrace()
  nb/ThisThread.cpp(53): DelayRc ThisThread::Pause(const msecs_t& timeout)
  nb/ThisThread.cpp(60): void ThisThread::PauseOver(word limit)
  nb/ThisThread.cpp(67): word ThisThread::RtcPercentUsed()
  nb/ThisThread.cpp(74): ThreadId ThisThread::RunningThreadId()
  nb/ThisThread.cpp(81): TraceRc ThisThread::StartTracing(const string& opts)
  nb/ThisThread.cpp(88): void ThisThread::StopTracing()
  nb/Thread.cpp(88): static std::map<SysThreadId, std::atomic_flag>& AccessFtLocks() NO_FT
  nb/Thread.cpp(99): static std::atomic_flag& AccessFtLock() NO_FT
  nb/Thread.cpp(121): static void EraseFtLock() NO_FT
  nb/Thread.cpp(451): ContextSwitch* ContextSwitches::AddSwitch()
  nb/Thread.cpp(1087): static bool ClearActiveThread(Thread* active)
  nb/Thread.cpp(1213): Thread* Thread::ActiveThread() NO_FT
  nb/Thread.cpp(1223): Mutex* Thread::BlockingMutex() const
  nb/Thread.cpp(1230): TraceStatus Thread::CalcStatus(bool dynamic) const
  nb/Thread.cpp(1248): bool Thread::CanBeScheduled() const
  nb/Thread.cpp(1662): void Thread::ExitIfSafe(debug64_t offset) NO_FT
  nb/Thread.cpp(1750): Thread* Thread::FindRunningThread() NO_FT
  nb/Thread.cpp(1774): void Thread::FunctionInvoked(fn_name_arg func) NO_FT
  nb/Thread.cpp(1818): void Thread::FunctionInvoked(fn_name_arg func, const std::nothrow_t&) NO_FT
  nb/Thread.cpp(1836): BlockingReason Thread::GetBlockingReason() const
  nb/Thread.cpp(1843): signal_t Thread::GetSignal() const
  nb/Thread.cpp(1850): TraceStatus Thread::GetStatus() const
  nb/Thread.cpp(2010): bool Thread::IsLocked() const
  nb/Thread.cpp(2017): bool Thread::IsScheduled() const
  nb/Thread.cpp(2024): bool Thread::IsTraceable() const
  nb/Thread.cpp(2080): Thread* Thread::LockedThread()
  nb/Thread.cpp(2142): TraceRc Thread::LogContextSwitches(bool on)
  nb/Thread.cpp(2320): uint8_t Thread::MutexCount() const
  nb/Thread.cpp(2327): SysThreadId Thread::NativeThreadId() const NO_FT
  nb/Thread.cpp(2344): DelayRc Thread::Pause(msecs_t time)
  nb/Thread.cpp(2390): double Thread::PercentIdle()
  nb/Thread.cpp(2685): void Thread::ResetDebugFlags()
  nb/Thread.cpp(2779): Thread* Thread::RunningThread() NO_FT
  nb/Thread.cpp(2805): Thread* Thread::RunningThread(const std::nothrow_t&) NO_FT
  nb/Thread.cpp(2859): void Thread::SetStatus(TraceStatus status)
  nb/Thread.cpp(2957): void Thread::StackCheck() NO_FT
  nb/Thread.cpp(3268): TraceRc Thread::StartTracing(const string& opts)
  nb/Thread.cpp(3300): void Thread::StopTracing()
  nb/Thread.cpp(3469): bool Thread::TraceRunningThread(Thread*& thr)
  nb/Thread.cpp(3497): bool Thread::TraceRunningThread(Thread*& thr, const std::nothrow_t&)
  nb/Thread.cpp(3524): void Thread::TrapCheck() NO_FT
  nb/Thread.cpp(3725): void Thread::UpdateMutex(Mutex* mutex)
  nb/Thread.cpp(3732): void Thread::UpdateMutexCount(bool acquired)
  nb/ThreadAdmin.cpp(207): static ThreadAdmin* AccessAdminData()
  nb/ThreadAdmin.cpp(293): bool ThreadAdmin::BreakEnabled()
  nb/ThreadAdmin.cpp(369): void ThreadAdmin::Incr(Register r)
  nb/ThreadAdmin.cpp(457): bool ThreadAdmin::ReinitOnSchedTimeout()
  nb/ThreadAdmin.cpp(465): word ThreadAdmin::RtcInterval()
  nb/ThreadAdmin.cpp(473): word ThreadAdmin::RtcLimit()
  nb/ThreadAdmin.cpp(481): msecs_t ThreadAdmin::RtcTimeout()
  nb/ThreadAdmin.cpp(490): msecs_t ThreadAdmin::SchedTimeout()
  nb/ThreadAdmin.cpp(510): word ThreadAdmin::StackCheckInterval()
  nb/ThreadAdmin.cpp(518): word ThreadAdmin::StackUsageLimit()
  nb/ThreadAdmin.cpp(550): word ThreadAdmin::TrapCount()
  nb/ThreadAdmin.cpp(562): word ThreadAdmin::TrapInterval()
  nb/ThreadAdmin.cpp(570): word ThreadAdmin::TrapLimit()
  nb/ThreadAdmin.cpp(578): bool ThreadAdmin::TrapOnRtcTimeout()
  nb/ThreadRegistry.cpp(51): static bool IsSortedByThreadId(const Thread* thr1, const Thread* thr2)
  nb/ThreadRegistry.cpp(335): Thread* ThreadRegistry::FindThread(SysThreadId nid) const NO_FT
  nb/ThreadRegistry.cpp(344): ThreadId ThreadRegistry::FindTid(SysThreadId nid) const NO_FT
  nb/ThreadRegistry.cpp(399): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  nb/ThreadRegistry.cpp(414): std::vector<Thread*> ThreadRegistry::GetThreads() const
  nb/ThreadRegistry.cpp(456): bool ThreadRegistry::IsDeleted() const
  nb/ThreadRegistry.cpp(480): size_t ThreadRegistry::PreemptableCount() const
  nb/ThreadRegistry.cpp(642): size_t ThreadRegistry::Size()
  nb/ToolRegistry.cpp(120): Tool* ToolRegistry::GetTool(FlagId id) const
  nb/TraceBuffer.cpp(112): TraceBuffer::TraceBuffer() :
  nb/TraceBuffer.cpp(148): TraceBuffer::~TraceBuffer()
  nb/TraceBuffer.cpp(168): void* TraceBuffer::AddFunction()
  nb/TraceBuffer.cpp(236): uint32_t TraceBuffer::AllocSlot()
  nb/TraceBuffer.cpp(386): bool TraceBuffer::Empty() const
  nb/TraceBuffer.cpp(404): bool TraceBuffer::Insert(TraceRecord* record)
  nb/TraceBuffer.cpp(436): fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
  nb/TraceBuffer.cpp(468): const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
  nb/TraceBuffer.cpp(488): void TraceBuffer::Lock()
  nb/TraceBuffer.cpp(495): void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
  nb/TraceBuffer.cpp(515): void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
  nb/TraceBuffer.cpp(626): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  nb/TraceBuffer.cpp(791): void TraceBuffer::Unlock()
  nt/FunctionProfiler.cpp(60): static void CheckHigh(FunctionStats*& high,
  nt/FunctionStats.cpp(49): int FunctionStats::Compare(const FunctionStats& that) const
  nt/FunctionStats.cpp(67): void FunctionStats::IncrCalls(const usecs_t& net)
  nt/NtIncrement.cpp(1025): static Heap* AccessHeap()
  nt/NtIncrement.cpp(1035): static Heap* EnsureHeap()
  nt/NtIncrement.cpp(1045): static word CheckHeap(bool shouldExist, const CliThread& cli, Heap*& heap)
  nt/NtIncrement.cpp(1582): Q1WayItem::~Q1WayItem()
  nt/NtIncrement.cpp(1613): Q1WayPool::Q1WayPool()
  nt/NtIncrement.cpp(1642): void Q1WayPool::Reallocate()
  nt/NtIncrement.cpp(2076): Q2WayItem::~Q2WayItem()
  nt/NtIncrement.cpp(2107): Q2WayPool::Q2WayPool()
  nt/NtIncrement.cpp(2136): void Q2WayPool::Reallocate()
  nt/NtIncrement.cpp(2598): RegistryItem::~RegistryItem()
  nt/NtIncrement.cpp(2626): RegistryPool::RegistryPool()
  nt/TestDatabase.cpp(148): TestDatabase::State TestDatabase::GetState(const string& testname)
  nw/IpBuffer.cpp(194): TraceStatus IpBuffer::GetStatus() const
  nw/IpPort.cpp(221): size_t IpPort::Discards() const
  nw/IpPortRegistry.cpp(290): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  nw/IpPortRegistry.cpp(548): bool IpPortRegistry::UseIPv6()
  nw/IpServiceRegistry.cpp(80): std::vector<IpService*> IpServiceRegistry::GetServices(const string& name) const
  nw/LocalAddrTest.cpp(122): bool SendLocalIpService::Enabled() const
  nw/NwLogs.cpp(152): static void UpdateAlarm
  nw/SysIpL2Addr.cpp(358): const SysIpL2Addr& SysIpL2Addr::NullIpAddr()
  nw/SysIpL2Addr.win.cpp(127): bool SysIpL2Addr::SupportsIPv6()
  nw/SysSocket.cpp(155): bool SysSocket::SetTracing(bool tracing)
  nw/SysSocket.cpp(185): bool SysSocket::TraceEnabled()
  nw/SysSocket.win.cpp(43): uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
  nw/SysSocket.win.cpp(45): uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
  nw/SysSocket.win.cpp(47): uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
  nw/SysSocket.win.cpp(49): uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
  nw/SysSocket.win.cpp(51): uint64_t ntohll(uint64_t netllong) { return ::ntohll(netllong); }
  nw/SysSocket.win.cpp(53): uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
  nw/SysSocket.win.cpp(228): bool SysSocket::IsValid() const
  nw/TcpIoThread.cpp(492): SysTcpSocket* TcpIoThread::Listener() const
  pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  pb/PotsFeatures.cpp(105): void DnRouteFeatureProfile::SetActive(bool on)
  pb/PotsFeatures.cpp(113): void DnRouteFeatureProfile::SetDN(Address::DN dn)
  pb/PotsProfileRegistry.cpp(107): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  sb/AnalyzeSapEvent.cpp(86): void AnalyzeSapEvent::Capture
  sb/AnalyzeSnpEvent.cpp(82): void AnalyzeSnpEvent::Capture
  sb/Context.cpp(338): void Context::Dump() const
  sb/Context.cpp(925): bool Context::TraceOn()
  sb/Context.cpp(935): bool Context::TraceOn(TransTrace*& trans)
  sb/Event.cpp(137): void Event::Capture
  sb/Factory.cpp(217): size_t Factory::DiscardedContextCount() const
  sb/Factory.cpp(224): size_t Factory::DiscardedMessageCount() const
  sb/InitiationReqEvent.cpp(84): void InitiationReqEvent::Capture
  sb/InvokerPool.cpp(737): void InvokerPool::RecordDelay(MsgPriority prio, const nsecs_t& delay) const
  sb/InvokerPool.cpp(789): size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
  sb/InvokerPool.cpp(797): nsecs_t InvokerPool::WorkQMaxDelay(MsgPriority prio) const
  sb/InvokerPool.cpp(805): size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  sb/InvokerPoolRegistry.cpp(171): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  sb/InvokerThread.cpp(119): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  sb/Message.cpp(237): MsgDirection Message::Dir() const
  sb/Message.cpp(324): ProtocolId Message::GetProtocol() const
  sb/Message.cpp(355): SignalId Message::GetSignal() const
  sb/Message.cpp(410): MsgHeader* Message::Header() const
  sb/Message.cpp(479): bool Message::Passes(uint32_t selector) const
  sb/MsgPort.cpp(324): bool MsgPort::Passes(uint32_t selector) const
  sb/Parameter.cpp(199): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  sb/Protocol.cpp(131): Parameter* Protocol::FirstParm() const
  sb/Protocol.cpp(144): Signal* Protocol::FirstSignal() const
  sb/Protocol.cpp(157): Parameter* Protocol::GetParameter(ParameterId pid) const
  sb/Protocol.cpp(169): Signal* Protocol::GetSignal(SignalId sid) const
  sb/Protocol.cpp(181): void Protocol::NextParm(Parameter*& parm) const
  sb/Protocol.cpp(194): void Protocol::NextSignal(Signal*& sig) const
  sb/ProtocolSM.cpp(445): bool ProtocolSM::Passes(uint32_t selector) const
  sb/SbPools.cpp(605): void TimerPool::IncrTimeouts() const
  sb/Service.cpp(366): size_t Service::EventCount() const
  sb/Service.cpp(389): Trigger* Service::GetTrigger(TriggerId tid) const
  sb/ServiceSM.cpp(313): SsmContext* ServiceSM::GetContext() const
  sb/ServiceSM.cpp(327): Service* ServiceSM::GetService() const
  sb/ServiceSM.cpp(397): bool ServiceSM::Passes(uint32_t selector) const
  sb/State.cpp(127): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  sb/State.cpp(162): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  sb/State.cpp(246): EventHandlerId State::GetHandler(EventId eid) const
  sb/State.cpp(254): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  sb/Timer.cpp(203): bool Timer::Passes(uint32_t selector) const
  sb/TimerThread.cpp(62): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  sn/PotsBcSsm.cpp(378): PotsProfile* PotsBcSsm::Profile() const
  sn/PotsTreatmentRegistry.cpp(118): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  sn/PotsTreatmentRegistry.cpp(199): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  st/MscAddress.cpp(73): bool MscAddress::ExternalFid(FactoryId& fid) const
  st/MscContext.cpp(81): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  st/MscContextPair.cpp(53): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  ct/CodeFile.cpp(525):    Debug::ft("CodeFile.Affecters");
  ct/CxxExecute.cpp(2377):    Debug::ft("Tracepoint.OnLine");
  nb/CinThread.cpp(104):       Debug::ft(CinThread_Enter);
  nb/Exception.cpp(42):    Debug::ft("Exception.ctor");  //@
  nb/Mutex.cpp(46):    Debug::ft("MutexGuard.ctor");
  nb/Mutex.cpp(66):       Debug::ftnt("MutexGuard.Release");
  nb/Q1Link.cpp(49):    Debug::ftnt(Q1Link_dtor);
  nb/SysThread.win.cpp(75):    Debug::ft("NodeBase.SE_Handler");
  nb/Thread.cpp(1601):    Debug::ft("Thread.Exit");
  nb/Thread.cpp(2598):    Debug::ft("Thread.Ready");
  nb/Thread.cpp(2929):    Debug::ft("Thread.SignalHandler");
  nb/Thread.cpp(2999):             Debug::ft("Thread.Start(initializing)");
  nb/Thread.cpp(3541):       Debug::ft(Thread_TrapHandler);  //@
  nt/RecoveryThread.cpp(295):       Debug::ft(RecoveryThread_Enter);
  nw/NwLogs.cpp(102):    Debug::ft("NetworkBase.NetworkIsUp");
  sb/Context.cpp(683):    Debug::ft(Context_ProcessWork);
W110 Override of Base.Display not found
  an/PotsTrafficThread.cpp(227): class TrafficCallPool : public Dynamic
  cb/BcProtocol.h(298): class CipUdpService : public UdpIpService
  cb/BcProtocol.h(343): class CipTcpService : public TcpIpService
  ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  ct/CxxSymbols.h(97): class CxxSymbols: public NodeBase::Base
  ct/Interpreter.h(48): class Interpreter : public NodeBase::Base
  nb/Alarm.cpp(44): struct AlarmDynamic : public Permanent
  nb/Class.cpp(48): struct ClassDynamic : public Permanent
  nb/HeapCfg.h(41): class HeapCfg : public Immutable
  nb/Log.cpp(124): struct LogDynamic : public Permanent
  nb/NbTracer.h(63): class NbTracer : public Permanent
  nb/ObjectPool.cpp(96): class ObjectPoolSizeCfg : public CfgIntParm
  nb/ObjectPool.cpp(162): class ObjectPoolStats : public Dynamic
  nb/ObjectPool.cpp(204): struct ObjectPoolDynamic : public Persistent
  nb/Thread.cpp(265): class ThreadStats : public Dynamic
  nb/Thread.cpp(352): class ContextSwitches : public Permanent
  nb/ThreadAdmin.cpp(56): class ThreadsStats : public Dynamic
  nb/TraceBuffer.h(64): class TraceBuffer : public Permanent
  nt/FunctionProfiler.h(48): class FunctionProfiler : public Temporary
  nt/NtIncrement.cpp(1348): class LbcPool : public Temporary
  nt/RecoveryThread.cpp(181): class ReadOnlyData : public Protected
  nt/TestDatabase.h(41): class TestDatabase : public NodeBase::Temporary
  nw/ByteBuffer.h(63): class TinyBuffer : public ByteBuffer
  nw/ByteBuffer.h(74): class SmallBuffer : public ByteBuffer
  nw/ByteBuffer.h(85): class MediumBuffer : public ByteBuffer
  nw/ByteBuffer.h(96): class LargeBuffer : public ByteBuffer
  nw/ByteBuffer.h(107): class HugeBuffer : public ByteBuffer
  nw/IpPort.cpp(54): class IpPortStats : public Dynamic
  nw/IpPortRegistry.cpp(60): class LocalAddrCfg : public CfgStrParm
  nw/IpServiceCfg.h(38): class IpServiceCfg : public CfgBoolParm
  nw/LocalAddrTest.h(110): class SendLocalIpService : public UdpIpService
  nw/NwTracer.h(40): class NwTracer : public NodeBase::Permanent
  pb/PotsProfile.h(81):    struct PotsProfileDynamic : public Persistent
  sb/Factory.cpp(46): class FactoryStats : public Dynamic
  sb/InvokerPool.cpp(111): class InvokerPoolStats : public Dynamic
  sb/InvokerPool.cpp(152): class InvokerWork : public Dynamic
  sb/SbPools.h(183): class TimerPool : public NodeBase::ObjectPool
  sb/SbTracer.h(113): class SbTracer : public NodeBase::Permanent
W111 Override of Object.Patch not found
  nb/ModuleRegistry.cpp(150): class StopInitTracing : public Deferred
  nb/Thread.cpp(352): class ContextSwitches : public Permanent
  nb/Thread.cpp(780): class ThreadPriv : public Permanent
  nw/ByteBuffer.h(35): class ByteBuffer : public NodeBase::Pooled
  nw/ByteBuffer.h(63): class TinyBuffer : public ByteBuffer
  nw/ByteBuffer.h(74): class SmallBuffer : public ByteBuffer
  nw/ByteBuffer.h(85): class MediumBuffer : public ByteBuffer
  nw/ByteBuffer.h(96): class LargeBuffer : public ByteBuffer
  nw/ByteBuffer.h(107): class HugeBuffer : public ByteBuffer
  sb/EventHandler.h(47): class EventHandler : public NodeBase::Immutable
  sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
W117 Line can merge with the next line and be under the length limit
  cb/BcCause.cpp(102):    return (use == Mandatory ?
  cb/ProxyBcSessions.cpp(239):    BindEventHandler
  ct/CxxArea.cpp(686):       attrs.test(HasPublicMemberFunction) ||
  ct/CxxArea.cpp(717):       attrs.test(HasPublicStaticData) ||
  ct/CxxArea.cpp(724):          attrs.test(HasInstantiations) ||
  ct/CxxToken.cpp(2803):    auto sName = (del ?
  ct/CxxToken.cpp(2813):          auto vName = (del ?
  dip/BaseBot.cpp(1707):          (press->message == contents))
  nb/CliStack.h(68):    const CliCommand* FindCommand
  nb/LogBuffer.cpp(189):       stream << fileName_ << SPACE
  nb/NbIncrement.cpp(1156):    BindText(*new CliText
  nb/NbIncrement.cpp(1158):    BindText(*new CliText
  nb/NbIncrement.cpp(2694):    BindText(*new CliText
  nb/TraceBuffer.cpp(559):          (curr->slot_ != TraceRecord::InvalidSlot) &&
  sb/ServiceSM.cpp(791):                   ->CurrInitiator() != nullptr)
  sb/ServiceSM.cpp(794):                   ->CurrSsm() != nullptr)
  sn/PotsCwmService.cpp(611):    BindEventHandler
  sn/PotsCwmService.cpp(625):    BindEventHandler
  sn/PotsCwmService.cpp(629):    BindEventHandler
  sn/PotsCwmService.cpp(631):    BindEventHandler
  sn/PotsCwmService.cpp(633):    BindEventHandler
  sn/PotsCwmService.cpp(637):    BindEventHandler
  sn/PotsCwmService.cpp(645):    BindEventHandler
  sn/PotsCwmService.cpp(647):    BindEventHandler
  sn/PotsCwtService.cpp(426):    BindEventHandler
  sn/PotsCwtService.cpp(459):    BindEventHandler
  sn/PotsCwtService.cpp(461):    BindEventHandler
  sn/PotsCwtService.cpp(473):    BindEventHandler
  sn/PotsMultiplexer.cpp(612):    BindEventHandler
  sn/PotsMultiplexer.cpp(626):    BindEventHandler
  sn/PotsTreatments.h(186):    PotsToneTreatment
  st/TestSessions.cpp(706):    BindMsgAnalyzer
  st/TestSessions.cpp(710):    BindEventHandler
  st/TestSessions.cpp(712):    BindEventHandler
  st/TestSessions.cpp(722):    BindMsgAnalyzer
  st/TestSessions.cpp(726):    BindEventHandler
  st/TestSessions.cpp(728):    BindEventHandler
W119 Argument passed by value is modified
  cb/DigitString.cpp(50/1): DigitString::DigitString(Address::DN dn) :
  ct/CxxArea.cpp(132/3):    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
  ct/CxxArea.cpp(2799/2):    const CxxScope* scope, CodeFile* file, SymbolView& view) const
  ct/CxxNamed.cpp(2139/1): TypeName* QualName::At(size_t n) const
  ct/CxxScope.cpp(5504/2):    const CxxScope* scope, CodeFile* file, SymbolView& view) const
  ct/CxxScope.cpp(5744/1): void Function::SetOperator(Cxx::Operator oper)
  ct/CxxScoped.cpp(3825/1): void Using::SetScope(CxxScope* scope)
  ct/CxxString.cpp(216/2): static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
  ct/CxxString.cpp(238/2): static size_t FindTemplateEnd(const string& name, size_t pos)
  ct/CxxString.cpp(761/5):    const string& s2, size_t begin, size_t end, char c)
  ct/CxxString.cpp(797/3): size_t rfind_first_not_of(const string& str, const string& chars, size_t off)
  ct/CxxString.cpp(811/2): size_t rfind_first_of(const string& str, size_t off, const string& chars)
  ct/CxxToken.cpp(729/2):    const CxxToken* item, word offset, const string& info) const
  ct/Editor.cpp(1915/1): bool Editor::CodeFollowsImmediately(size_t pos) const
  ct/Editor.cpp(1930/1): bool Editor::CommentFollows(size_t pos) const
  ct/Editor.cpp(2780/4):    size_t pos, size_t min, size_t max, ItemDefnAttrs& attrs) const
  ct/Editor.cpp(4454/1): word Editor::InsertForward(size_t pos,
  ct/Editor.cpp(4622/1):    (size_t pos, const string& nspace, const string& forward)
  ct/Editor.cpp(5248/2): CxxToken* Editor::ParseFileItem(size_t pos, Namespace* ns) const
  ct/Editor.cpp(5430/1): void Editor::Rename(size_t pos, const string& oldName, const string& newName)
  ct/Editor.cpp(6662/3):    const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const
  ct/Interpreter.cpp(488/1): LibExprErr Interpreter::ApplyOperator(bool operand)
  ct/Interpreter.cpp(599/1): LibrarySet* Interpreter::Error(LibExprErr err) const
  ct/Lexer.cpp(1304/1): size_t Lexer::CurrBegin(size_t pos) const
  ct/Lexer.cpp(1385/1): size_t Lexer::Find(size_t pos, const string& str) const
  ct/Lexer.cpp(1402/3): size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
  ct/Lexer.cpp(1514/2): size_t Lexer::FindFirstOf(const string& targs, size_t pos) const
  ct/Lexer.cpp(1633/1): size_t Lexer::FindLineEnd(size_t pos) const
  ct/Lexer.cpp(1674/1): size_t Lexer::FindNonBlank(size_t pos) const
  ct/Lexer.cpp(1691/1): size_t Lexer::FindWord(size_t pos, const string& id) const
  ct/Lexer.cpp(2057/2): size_t Lexer::GetHexNum(int64_t& num, size_t max)
  ct/Lexer.cpp(2080/1): bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
  ct/Lexer.cpp(2705/1): size_t Lexer::LineFind(size_t pos, const string& str) const
  ct/Lexer.cpp(2737/1): size_t Lexer::LineFindFirstOf(size_t pos, const std::string& chars) const
  ct/Lexer.cpp(2768/1): size_t Lexer::LineFindNonBlank(size_t pos) const
  ct/Lexer.cpp(2945/1): string Lexer::NextIdentifier(size_t pos) const
  ct/Lexer.cpp(2991/1): size_t Lexer::NextLineIndentation(size_t pos) const
  ct/Lexer.cpp(3006/1): string Lexer::NextOperator(size_t pos) const
  ct/Lexer.cpp(3028/1): size_t Lexer::NextPos(size_t pos) const
  ct/Lexer.cpp(3164/1): bool Lexer::NoCodeFollows(size_t pos) const
  ct/Lexer.cpp(3270/1): size_t Lexer::PrevBegin(size_t pos) const
  ct/Lexer.cpp(3301/1): size_t Lexer::Rfind(size_t pos, const std::string& str) const
  ct/Lexer.cpp(3316/1): size_t Lexer::RfindFirstOf(size_t pos, const std::string& chars) const
  ct/Lexer.cpp(3331/1): size_t Lexer::RfindNonBlank(size_t pos) const
  ct/Lexer.cpp(3402/1): size_t Lexer::SkipCharLiteral(size_t pos) const
  ct/Lexer.cpp(3445/1): size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
  ct/Lexer.cpp(3478/1): size_t Lexer::SkipTemplateSpec(size_t pos) const
  ct/Parser.cpp(1108/2): bool Parser::GetCompoundType(const QualName* name, Cxx::Type type)
  ct/Parser.cpp(2389/1): size_t Parser::GetLineNum(size_t pos) const
  ct/Parser.cpp(4253/2): void Parser::Log(Warning warning, size_t pos) const
  dip/Token.cpp(147/1): bool Token::set_number(int number)
  nb/Algorithms.cpp(30/1): size_t find_first_one(uword n)
  nb/Algorithms.cpp(55/1): size_t log2(size_t n, bool up)
  nb/Algorithms.cpp(122/1): size_t round_to_2_exp_n(size_t n, size_t e, bool up)
  nb/Base.cpp(90/1): void Base::Nullify(size_t n)
  nb/BuddyHeap.cpp(294/1): void* BuddyHeap::Alloc(size_t size)
  nb/BuddyHeap.cpp(444/1): bool BuddyHeap::Create(size_t size)
  nb/BuddyHeap.cpp(757/1): void BuddyHeap::FreeBlock(HeapBlock* block, level_t level)
  nb/BuddyHeap.cpp(877/1): void BuddyHeap::SplitAncestors(index_t block) const
  nb/CliBuffer.cpp(214/3):    (const CliThread& cli, const string& expl, std::streamsize p)
  nb/CliText.cpp(39/2): CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
  nb/CliTextParm.cpp(142/2): void CliTextParm::Explain(ostream& stream, col_t indent) const
  nb/CliThread.cpp(757/2):    (const string& expl, size_t begin, size_t end, col_t indent) const
  nb/Formatters.cpp(76/4):    const string& prefix, const byte_t* bytes, size_t count)
  nb/Formatters.cpp(312/2): size_t strSkipSpaces(const std::string& str, size_t index)
  nb/LogBuffer.cpp(97/1): LogBuffer::LogBuffer(size_t size) :
  nb/ObjectPool.cpp(525/1): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  nb/ObjectPool.cpp(539/1): Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
  nb/ObjectPool.cpp(563/1): bool ObjectPool::Corrupt(size_t n)
  nb/SlabHeap.cpp(638/1): void SlabPriv::SetSlabSize(size_t size)
  nb/SysMemory.win.cpp(72/1): void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
  nb/Thread.cpp(1087/1): static bool ClearActiveThread(Thread* active)
  nb/Thread.cpp(1857/1): bool Thread::HandleSignal(signal_t sig, uint32_t code)
  nb/Thread.cpp(2344/1): DelayRc Thread::Pause(msecs_t time)
  nb/Thread.cpp(3452/1): void Thread::Trace(Thread* thr,
  nb/TraceBuffer.cpp(188/1): bool TraceBuffer::AllocBuffers(size_t n)
  nb/TraceBuffer.cpp(367/1): TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
  nw/IoThread.cpp(141/2):    (const IpPort& port, const byte_t* source, size_t size) const
  nw/IoThread.cpp(141/3):    (const IpPort& port, const byte_t* source, size_t size) const
  nw/NwLogs.cpp(115/1): void OutputNwLog(LogId id, c_string func, nwerr_t errval, c_string extra)
  nw/SysTcpSocket.cpp(246/1): SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
  nw/SysTcpSocket.win.cpp(165/1): word SysTcpSocket::Listen(size_t backlog)
  sb/Context.cpp(388/3): void Context::Enqueue(Q2Way<Context>& whichq, MsgPriority prio, bool henq)
  sb/Context.cpp(677/1): void Context::ProcessWork(InvokerThread* inv)
  sb/Message.cpp(603/1): bool Message::Retrieve(ProtocolSM* psm)
  sb/Message.cpp(670/1): bool Message::Send(Route route)
  sb/SbTrace.cpp(387/1):    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
  sb/ServiceSM.cpp(418/1): EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
  sb/ServiceSM.cpp(858/2):    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
  sb/ServiceSM.cpp(926/2):    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
  sb/TimerRegistry.cpp(76/1): Timer::QId TimerRegistry::CalcQId(uint32_t secs) const
  sb/TlvMessage.cpp(223/2): TlvParm* TlvMessage::CopyParm(const TlvParm& src, ParameterId pid)
  sb/TlvMessage.h(105/3):       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
  st/MscBuilder.cpp(1025/1):    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
W120 Function returns non-const reference or pointer to member data
  cb/BcSessions.h(1000):    DigitString& DialedDigits() { return dialed_; }
  ct/CodeFile.h(305):    Editor& GetEditor() { return editor_; }
  ct/LibrarySet.h(76):    LibItemSet& Items() { return items_; }
  nb/CliText.h(82):    Registry<CliParm>& Parms() { return parms_; }
  nb/CliThread.h(190):    CliCookie& Cookie() { return cookie_; }
W121 Static member function has indirect argument for its class
  nb/Thread.h(600/1):    static void Trace(Thread* thr, fn_name_arg func,
  sb/SbTrace.h(175/1):       (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip);
W125 Non-const cast is not a downcast
  sb/Message.cpp(968):          auto bt = dynamic_cast<const BuffTrace*>(bt_);
W127 Data could be free
  nw/IpBuffer.h(50):    static const size_t MaxBuffSize; // IpBuffer.cpp
W130 Redundant scope
  nb/Debug.cpp(79):    Debug::ft("Debug.Exiting");
  nb/Debug.cpp(114):    Debug::ft("Debug.GetSwFlags");
  nb/Debug.cpp(124):    Debug::ft("Debug.noop");
  nb/Debug.cpp(131):    Debug::ft("Debug.Progress");
  nb/Debug.cpp(141):    Debug::ft("Debug.ResetSwFlags");
  nb/Debug.cpp(150):    Debug::ftnt("Debug.SetSwFlag");
  nb/Debug.cpp(169):    Debug::ftnt("Debug.SwFlagOn");
  nb/Debug.cpp(186):    Debug::ftnt(Debug_SwLog);
  nb/Debug.cpp(192):    Debug::ftnt(Debug_SwLog);
W131 C-style preprocessor directive
  nb/SystemTime.cpp(74): #ifdef OS_WIN
  nb/SystemTime.cpp(79): #ifdef OS_LINUX
W141 Function could move to a subclass
  nb/CfgBitParm.h(56):    virtual bool NextValue() const = 0; // CfgBoolParm
  sb/Context.h(191):    virtual void EndOfTransaction() { } // MsgContext
  sb/Factory.h(234):    virtual Context* AllocContext() const; // PsmFactory
W143 Auto variable copies an object returned by reference
  ct/CxxExecute.cpp(1120):    auto arg = args_.back();
  ct/CxxScoped.cpp(1715):    auto name = names.front();
W144 Auto variable copies an object returned by const reference
  st/MscBuilder.cpp(1280):    auto tools = buff->GetTools();
W145 Auto variable copies an object
  an/PotsTrafficThread.cpp(1170):    auto sleep = timeout_;
  ct/CxxSymbols.cpp(975):    for(auto i = range.first; i != range.second; ++i)
  ct/CxxSymbols.h(264):    for(auto i = range.first; i != range.second; ++i)
  ct/CxxSymbols.h(285):    for(auto i = range.first; i != range.second; ++i)
  ct/Editor.cpp(739):    auto expl = Expl_;
  nb/ObjectPoolAudit.cpp(112):    auto prev = interval_;
  nb/SlabHeap.cpp(732):       for(auto free = avail.first; free != avail.second; ++free)
W147 Trailing comment not aligned with one above
  ct/CodeTypes.cpp(440):    "comment not in one of the categories above (e.g. //  <text>)",
  ct/CodeTypes.h(488):    DefinitionRenamesArgument, // names in declaration and definition differ
  ct/CodeTypes.h(489):    OverrideRenamesArgument,  // names in override and root base class differ
  st/MscBuilder.cpp(52): constexpr size_t MinMsgLine = 5;  // minimum length of horizontal line
====================================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE (i = informational)
an/AnIncrement.cpp
* W022 Add using statement
    0:  // namespace NodeBase
an/AnIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
an/AnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
an/AnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
an/PotsShelf.h
* W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace SessionBase;
    33: using namespace NetworkBase;
an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    124:    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
    137:    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
    157:    auto& pmsg = static_cast<Pots_NU_Message&>(msg);
    167:    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    68:    auto pptr = reinterpret_cast<TlvParm*>(sbuff->PayloadPtr());
    69:    auto phi = reinterpret_cast<PotsHeaderInfo*>(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    66:    auto sbuff = static_cast<SbIpBuffer*>(buff.get());
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
an/PotsShelfIpService.cpp
* W022 Add using statement
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
an/PotsTrafficThread.cpp
  W004 C-style cast
    493:    Singleton<TrafficCallPool>::Extant()->Enq((TrafficCall*) addr);
    1053:    timewheel_ = (Q1Way<TrafficCall>*) Memory::Alloc(size, MemDynamic);
  W006 reinterpret_cast
    483:    auto fake = reinterpret_cast<const TrafficCall*>(&local);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W053 Data could be const
    175:    Q1Link link_;
* W106 Function does not invoke Debug::ft
    1351: void PotsTrafficThread::RecordHoldingTime(const nsecs_t& time)
  W110 Override of Base.Display not found
    227: class TrafficCallPool : public Dynamic
* W145 Auto variable copies an object
    1170:    auto sleep = timeout_;
an/PotsTrafficThread.h
* W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
cb/BcAddress.cpp
  W006 reinterpret_cast
    90:    reinterpret_cast<const DigitString*>(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    107:    auto& tlvmsg = static_cast<TlvMessage&>(msg);
    155:    const auto& tlvmsg = static_cast<const TlvMessage&>(msg);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cb/BcAddress.h
* W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
* W032 Unused function
    213:    Digit At(DigitCount i) const;
* W042 Member could be private
    175:    static bool IsValidDigit(Digit d)
    182:    Rc AddDigit(Digit d);
    201:    DigitCount Size() const;
* W043 Member could be protected
    124:    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
cb/BcCause.cpp
  W006 reinterpret_cast
    112:    reinterpret_cast<const CauseInfo*>(bytes)->Display(stream, prefix);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W117 Line can merge with the next line and be under the length limit
    102:    return (use == Mandatory ?
cb/BcCause.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
cb/BcEvents.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cb/BcFactory.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    41:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    43:    auto& bcssm = static_cast<BcSsm&>(ssm);
    65:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    66:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    68:    auto&         bcssm = static_cast<BcSsm&>(ssm);
    120:    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    121:    auto       msg = static_cast<CipMessage*>(ame.Msg());
    123:    auto&      bcssm = static_cast<BcSsm&>(ssm);
    161:    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    162:    auto       msg = static_cast<CipMessage*>(ame.Msg());
    164:    auto&      bcssm = static_cast<BcSsm&>(ssm);
    191:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    192:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    194:    auto&         bcssm = static_cast<BcSsm&>(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    65:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    66:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    67:    auto          sid = msg->GetSignal();
    68:    auto&         bcssm = static_cast<BcSsm&>(ssm);
    70:    CauseInfo*    cci;
    120:    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    121:    auto       msg = static_cast<CipMessage*>(ame.Msg());
    122:    auto       sid = msg->GetSignal();
    123:    auto&      bcssm = static_cast<BcSsm&>(ssm);
    161:    auto&      ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    162:    auto       msg = static_cast<CipMessage*>(ame.Msg());
    163:    auto       sid = msg->GetSignal();
    164:    auto&      bcssm = static_cast<BcSsm&>(ssm);
    191:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    192:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    193:    auto          sid = msg->GetSignal();
    194:    auto&         bcssm = static_cast<BcSsm&>(ssm);
    196:    CauseInfo*    cci;
cb/BcProgress.cpp
  W006 reinterpret_cast
    98:    reinterpret_cast<const ProgressInfo*>(bytes)->Display(stream, prefix);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cb/BcProgress.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
cb/BcProtocol.cpp
  W005 Functional cast
    509:    if(route->identifier != RouteResult::Id(rid)) return ParmValueMismatch;
  W006 reinterpret_cast
    452:    reinterpret_cast<const RouteResult*>(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    465:    auto&       tlvmsg = static_cast<TlvMessage&>(msg);
    493:    const auto&  tlvmsg = static_cast<const TlvMessage&>(msg);
    760:       if(m->GetSignal() == sid) return static_cast<CipMessage*>(m);
    790:    auto&         tmsg = static_cast<TlvMessage&>(msg);
    920:    auto&         tmsg = static_cast<TlvMessage&>(msg);
    1258:    const auto& tmsg = static_cast<const CipMessage&>(msg);
    1263:    auto fac = static_cast<SsmFactory*>(reg->Factories().At(rte->selector));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    462:    id_t        idx;
    463:    word        fid, rid;
    465:    auto&       tlvmsg = static_cast<TlvMessage&>(msg);
    492:    TestRc       rc;
    493:    const auto&  tlvmsg = static_cast<const TlvMessage&>(msg);
    495:    id_t         idx;
    496:    word         fid, rid;
    789:    auto          state = GetState();
    790:    auto&         tmsg = static_cast<TlvMessage&>(msg);
    791:    auto          sig = tmsg.GetSignal();
    792:    TimeoutInfo*  toi = nullptr;
    794:    auto          err = true;
    795:    debug64_t     error;
    919:    auto          state = GetState();
    920:    auto&         tmsg = static_cast<TlvMessage&>(msg);
    921:    auto          sig = msg.GetSignal();
    923:    auto          err = true;
    924:    debug64_t     error;
* W106 Function does not invoke Debug::ft
    226: bool CipUdpService::Enabled() const
    302: bool CipTcpService::Enabled() const
cb/BcProtocol.h
* W020 Using statement in header
    50: using namespace NodeBase;
    51: using namespace NetworkBase;
    52: using namespace SessionBase;
    53: using namespace MediaBase;
* W032 Unused function
    182:    MediaInfo* AddMedia(const MediaInfo& media);
* W042 Member could be private
    236:    void EnsureMediaMsg() override;
    245:    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    423:    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W110 Override of Base.Display not found
    298: class CipUdpService : public UdpIpService
    343: class CipTcpService : public TcpIpService
cb/BcRouting.cpp
* W022 Add using statement
    0:  // namespace SessionBase
cb/BcRouting.h
* W020 Using statement in header
    31: using namespace SessionBase;
cb/BcService.cpp
* W022 Add using statement
    0:  // namespace NodeBase
cb/BcSessions.h
* W020 Using statement in header
    53: using namespace MediaBase;
    54: using namespace NodeBase;
    55: using namespace SessionBase;
  W037 Member hides inherited name
    316:    static const Id NextId = FirstId + 50;
    883:    static const Id NextId                 = FirstUn + 7;
* W042 Member could be private
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1145:    CipPsm* AllocNPsm();
* W043 Member could be protected
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
* W053 Data could be const
    340:    Progress::Ind progress_;
    356:    Cause::Ind cause_;
  W075 Virtual function is public
    1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1020:    virtual EventHandler::Rc RaiseRemoteProgress
    1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1030:    virtual EventHandler::Rc RaiseLocalProgress
    1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1045:    virtual EventHandler::Rc RaiseLocalRelease
    1047:    virtual EventHandler::Rc RaiseRemoteRelease
    1049:    virtual EventHandler::Rc RaiseReleaseCall
    1051:    virtual EventHandler::Rc RaiseApplyTreatment
    1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1076:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1083:    virtual EventHandler::Rc HandleLocalAlerting();
    1088:    virtual EventHandler::Rc HandleLocalAnswer();
    1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1105:    virtual CipMessage* BuildCipIam();
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1208:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W082 Adjacent arguments have the same type
    1212:    BcFactory(Id fid, ProtocolId prid, c_string name);
* W090 Function could be const
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1167:    CipMessage* BuildCipRel(Cause::Ind cause);
  W120 Function returns non-const reference or pointer to member data
    1000:    DigitString& DialedDigits() { return dialed_; }
cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    385:    auto& rre = static_cast<BcRemoteReleaseEvent&>(currEvent);
    826:       auto fac = static_cast<BcFactory*>(reg->Factories().At(route_.selector));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
  W102 Line length exceeds the standard maximum
    286:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
cb/BcStates.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cb/BcTriggers.cpp
* W022 Add using statement
    0:  // namespace NodeBase
cb/CbModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
cb/CbModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
cb/DigitString.cpp
  W005 Functional cast
    137:       auto rc = AddDigit(Digit(ds.digits_[i]));
    148:    if(i < Size()) return Digit(digits_[i]);
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    146: Digit DigitString::At(DigitCount i) const
  W119 Argument passed by value is modified
    50/1: DigitString::DigitString(Address::DN dn) :
cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    360:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    361:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    363:    auto&         pssm = static_cast<ProxyBcSsm&>(ssm);
    392:    auto& ppe = static_cast<ProxyBcProgressEvent&>(currEvent);
    401:       auto& pssm = static_cast<ProxyBcSsm&>(ssm);
    427:    auto& pssm = static_cast<ProxyBcSsm&>(ssm);
    428:    auto ppsm = static_cast<ProxyBcPsm*>(Context::ContextPsm());
    532:    auto pssm = static_cast<ProxyBcSsm*>(RootSsm());
    673:          return static_cast<ProxyBcPsm*>(p);
    705:          ppsm = static_cast<ProxyBcPsm*>(psm);
    910:    const auto& tmsg = static_cast<const CipMessage&>(msg);
    915:    auto fac = static_cast<SsmFactory*>(reg->Factories().At(rte->selector));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    360:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    361:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    362:    auto          sid = msg->GetSignal();
    363:    auto&         pssm = static_cast<ProxyBcSsm&>(ssm);
    365:    CauseInfo*    cci;
* W117 Line can merge with the next line and be under the length limit
    239:    BindEventHandler
cb/ProxyBcSessions.h
* W020 Using statement in header
    33: using namespace MediaBase;
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W027 Unused class
    192: class ProxyBcDisconnecting : public BcDisconnecting
* W028 Unused data
    63:    static const ServicePortId NextPortId = FirstPortId + 1;
    219:    static const Id NextId        = FirstId + 4;
    303:    static const Id NextId              = FirstId + 7;
    387:    constexpr TriggerId NextId = FirstId + 3;
* W032 Unused function
    195:    explicit ProxyBcDisconnecting(ServiceId sid);
  W037 Member hides inherited name
    63:    static const ServicePortId NextPortId = FirstPortId + 1;
    213:    static const Id FirstId = BcEvent::NextId;
    219:    static const Id NextId        = FirstId + 4;
    303:    static const Id NextId              = FirstId + 7;
* W042 Member could be private
    488:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    465:    virtual EventHandler::Rc RaiseReleaseUser
    467:    virtual EventHandler::Rc RaiseProxyProgress
    469:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    470:    virtual EventHandler::Rc RaiseProxyRelease
    510:    void SetUPsm(MediaPsm& psm) override;
cb/ServiceCodeRegistry.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cb/ServiceCodeRegistry.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
* W042 Member could be private
    54:    void SetService(Address::SC sc, ServiceId sid);
cb/TestCallFactory.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
cn/CnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
cn/CnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
ct/CodeCoverage.h
  W110 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
ct/CodeDir.cpp
  W007 Cast down the inheritance hierarchy
    69:       auto file = static_cast<CodeFile*>(*f);
    126:       auto file = static_cast<CodeFile*>(*f);
    143:       auto file = static_cast<CodeFile*>(*f);
ct/CodeDirSet.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto file = static_cast<CodeFile*>(*f);
    121:       auto dir = static_cast<CodeDir*>(*d);
    130:       auto dir = static_cast<CodeDir*>(*d);
ct/CodeDirSet.h
* W042 Member could be private
    54:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    54:    void to_str(stringVector& strings, bool verbose) const override;
ct/CodeFile.cpp
  W005 Functional cast
    1183:          << spaces(3) << LineType(t) << CRLF;
  W007 Cast down the inheritance hierarchy
    87:          auto base = static_cast<const Class*>(*b);
    243:       auto base = static_cast<const Class*>(*b);
    305:                auto type = static_cast<const Typedef*>(*item2);
    328:          auto type = static_cast<const Typedef*>(*item1);
    1088:       auto f = static_cast<const CodeFile*>(*i);
    1096:       auto f = static_cast<const CodeFile*>(*u);
    1173:       static_cast<const CodeFile*>(*f)->GetLineCounts();
    1509:       auto file = static_cast<const CodeFile*>(*f);
    1711:          auto file = static_cast<const CodeFile*>(*d);
    2130:       auto file = static_cast<const CodeFile*>(*f);
    2294:       const auto& name = static_cast<const CodeFile*>(*f)->Name();
    2452:                auto incl = static_cast<const CodeFile*>(*a);
    2560:          auto file = static_cast<const CodeFile*>(*d);
    2589:       auto file = static_cast<CodeFile*>(*f);
    2620:       auto base = static_cast<const Class*>(*b);
* W106 Function does not invoke Debug::ft
    1189: void CodeFile::EraseClass(const Class* cls)
    1197: void CodeFile::EraseData(const Data* data)
    1205: void CodeFile::EraseEnum(const Enum* item)
    1213: void CodeFile::EraseForw(const Forward* forw)
    1221: void CodeFile::EraseFunc(const Function* func)
    1244: void CodeFile::EraseItem(const CxxToken* item)
    1258: void CodeFile::EraseSpace(const SpaceDefn* space)
    1266: void CodeFile::EraseType(const Typedef* type)
    1274: void CodeFile::EraseUsing(const Using* use)
    1639: void CodeFile::GetLineCounts() const
    1849: void CodeFile::InsertAsm(Asm* code)
    1857: void CodeFile::InsertClass(Class* cls)
    1865: void CodeFile::InsertData(Data* data)
    1873: bool CodeFile::InsertDirective(DirectivePtr& dir)
    1882: void CodeFile::InsertEnum(Enum* item)
    1890: void CodeFile::InsertForw(Forward* forw)
    1898: void CodeFile::InsertFunc(Function* func)
    1906: void CodeFile::InsertInclude(IncludePtr& incl)
    1949: void CodeFile::InsertItem(CxxToken* item)
    1974: void CodeFile::InsertMacro(Macro* macro)
    1982: void CodeFile::InsertSpace(SpaceDefn* space)
    1990: void CodeFile::InsertStaticAssert(StaticAssert* assert)
    1998: void CodeFile::InsertType(Typedef* type)
    2006: void CodeFile::InsertUsing(Using* use)
  W107 Function does not invoke Debug::ft as first statement
    525:    Debug::ft("CodeFile.Affecters");
ct/CodeFile.h
  W026 Unused argument
    427/3:       const CxxNamed* item, const CxxScope* scope) const;
* W042 Member could be private
    131:    const CxxTokenList& Items() const { return items_; }
    132:    const IncludePtrVector& Includes() const { return incls_; }
    266:    void GetLineCounts() const;
    296:    size_t FindFirstReference(const CxxTokenVector& refs) const;
    301:    size_t FindLastUsage(const CxxNamedSet& usages) const;
  W082 Adjacent arguments have the same type
    543:    void UpdatePos(EditorAction action,
  W120 Function returns non-const reference or pointer to member data
    305:    Editor& GetEditor() { return editor_; }
ct/CodeFileSet.cpp
  W004 C-style cast
    641:    LibrarySet* nbSet = (LibrarySet*) this;
    669:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    80:       auto file = static_cast<CodeFile*>(*f);
    193:       auto file = static_cast<CodeFile*>(*f);
    252:       auto file = static_cast<CodeFile*>(*f);
    277:       auto file = static_cast<CodeFile*>(*f);
    308:       auto file = static_cast<CodeFile*>(*f);
    334:       auto file = static_cast<CodeFile*>(*f);
    362:       auto file = static_cast<CodeFile*>(*f);
    405:       auto file = static_cast<CodeFile*>(*f);
    459:       auto file = static_cast<CodeFile*>(*f);
    485:       auto file = static_cast<CodeFile*>(*f);
    511:    const auto& dirSet = static_cast<const CodeDirSet*>(that)->Items();
    518:       auto file = static_cast<CodeFile*>(*f);
    558:       auto file = static_cast<CodeFile*>(*f);
    583:       auto file = static_cast<CodeFile*>(*f);
    620:       auto file = static_cast<CodeFile*>(*f);
    774:       auto file = static_cast<CodeFile*>(*f);
    802:       auto file = static_cast<CodeFile*>(*f);
    911:       files.push_back(static_cast<CodeFile*>(*f));
    938:       auto file = static_cast<CodeFile*>(*f);
    1018:       auto file = static_cast<CodeFile*>(*f);
    1045:       auto file = static_cast<CodeFile*>(*f);
    1075:       auto file = static_cast<CodeFile*>(*f);
  W008 Cast removes const qualification
    641:    LibrarySet* nbSet = (LibrarySet*) this;
    669:    LibrarySet* nsSet = (LibrarySet*) this;
* W106 Function does not invoke Debug::ft
    93: static bool IsSortedByFileLevel(const FileLevel& item1, const FileLevel& item2)
ct/CodeFileSet.h
* W042 Member could be private
    114:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    114:    void to_str(stringVector& strings, bool verbose) const override;
ct/CodeItemSet.cpp
  W007 Cast down the inheritance hierarchy
    122:       auto item = static_cast<CxxNamed*>(*i);
    148:       auto item = static_cast<CxxNamed*>(*i);
    176:       auto item = static_cast<CxxNamed*>(*i);
    198:       auto item = static_cast<CxxNamed*>(*i);
    217:       auto item = static_cast<CxxScoped*>(*i);
    238:       auto item = static_cast<CxxScoped*>(*i);
    260:       auto item = static_cast<CxxNamed*>(*i);
* W106 Function does not invoke Debug::ft
    55: void CodeItemSet::CopyItems(const CxxNamedSet& items)
    67: void CodeItemSet::CopyUsages(const CxxUsageSets& usages)
ct/CodeItemSet.h
* W042 Member could be private
    64:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    64:    void to_str(stringVector& strings, bool verbose) const override;
ct/CodeTypes.cpp
* W106 Function does not invoke Debug::ft
    406: size_t IndentSize()
    413: bool IsAccessControl(const std::string& s)
    426: size_t LineLengthMax()
  W147 Trailing comment not aligned with one above
    440:    "comment not in one of the categories above (e.g. //  <text>)",
ct/CodeTypes.h
  W147 Trailing comment not aligned with one above
    488:    DefinitionRenamesArgument, // names in declaration and definition differ
    489:    OverrideRenamesArgument,  // names in override and root base class differ
ct/CodeWarning.cpp
  W005 Functional cast
    230:          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
    231:          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
    232:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
    291:          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
  W007 Cast down the inheritance hierarchy
    203:       auto file = static_cast<CodeFile*>(*f);
    996:       if(static_cast<const Data*>(item_)->CannotBeConst()) return true;
    1029:       auto name = static_cast<const Friend*>(item_)->ScopedName(true);
    1051:       auto data = static_cast<const Data*>(item_);
    1093:       auto func = static_cast<Function*>(item_);
    1174:       auto cls = static_cast<const Class*>(item_);
    1198:       auto cls = static_cast<const Class*>(item_);
    1233:          auto func = static_cast<const Function*>(item_);
  W008 Cast removes const qualification
    94:    item_(const_cast<CxxToken*>(item)),
* W106 Function does not invoke Debug::ft
    337: bool CodeWarning::HasCodeToDisplay() const
    344: bool CodeWarning::HasInfoToDisplay() const
    821: bool CodeWarning::IsInformational() const
    828: bool CodeWarning::IsSortedByFile
    847: bool CodeWarning::IsSortedByType
    866: bool CodeWarning::IsSortedToFix
    885: void CodeWarning::ItemDeleted(const CxxToken* item) const
    895: size_t CodeWarning::Line() const
    963: bool CodeWarning::Preserve() const
    990: bool CodeWarning::Revoke() const
    1005: bool CodeWarning::Suppress() const
    1272: bool CodeWarning::WasResolved() const
ct/CodeWarning.h
* W020 Using statement in header
    38: using NodeBase::word;
  W082 Adjacent arguments have the same type
    62:    WarningAttrs(bool fixable, bool disabled, NodeBase::c_string expl);
    139:    void UpdatePos(EditorAction action,
ct/CtIncrement.cpp
  W005 Functional cast
    1375:       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
    1390:    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  W007 Cast down the inheritance hierarchy
    1137:          auto dir = static_cast<CodeDir*>(*d);
    1160:          auto file = static_cast<CodeFile*>(*f);
* W043 Member could be protected
    91:    static LibrarySet* Evaluate(CliThread& cli);
ct/Cxx.cpp
  W005 Functional cast
    653:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    701:          oper = Cxx::Operator(i);
    750:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    756:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    761:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
* W099 Line contains adjacent spaces
    478:    CxxWord("D",   "D",    "D",   F),  // ALIGNAS
    479:    CxxWord("@",   "@",    "@",   T),  // ASM
    480:    CxxWord("-",   "-",    "D",   F),  // AUTO
    481:    CxxWord("-",   "-",    "b",   T),  // BREAK
    482:    CxxWord("-",   "-",    "c",   T),  // CASE
    483:    CxxWord("DPC", "DPC",  "DP",  F),  // CLASS
    484:    CxxWord("DP",  "DP",   "D",   F),  // CONST
    485:    CxxWord("DP",  "DP",   "D",   F),  // CONSTEXPR
    486:    CxxWord("-",   "-",    "n",   T),  // CONTINUE
    487:    CxxWord("-",   "-",    "o",   T),  // DEFAULT
    488:    CxxWord("-",   "-",    "d",   T),  // DO
    489:    CxxWord("DPE", "DPE",  "DPE", F),  // ENUM
    490:    CxxWord("-",   "P",    "-",   F),  // EXPLICIT
    491:    CxxWord("DP",  "-",    "-",   F),  // EXTERN
    492:    CxxWord("-",   "-",    "-",   F),  // FINAL
    493:    CxxWord("-",   "-",    "f",   T),  // FOR
    494:    CxxWord("-",   "F",    "-",   T),  // FRIEND
    495:    CxxWord("-",   "-",    "g",   T),  // GOTO
    496:    CxxWord("H",   "H",    "H",   F),  // HASH
    497:    CxxWord("-",   "-",    "i",   T),  // IF
    498:    CxxWord("P",   "P",    "-",   F),  // INLINE
    499:    CxxWord("-",   "D",    "-",   F),  // MUTABLE
    500:    CxxWord("N",   "-",    "-",   T),  // NAMESPACE
    501:    CxxWord("-",   "P",    "-",   F),  // OPERATOR
    502:    CxxWord("-",   "-",    "-",   F),  // OVERRIDE
    503:    CxxWord("-",   "A",    "-",   T),  // PRIVATE
    504:    CxxWord("-",   "A",    "-",   T),  // PROTECTED
    505:    CxxWord("-",   "A",    "-",   T),  // PUBLIC
    506:    CxxWord("-",   "-",    "r",   T),  // RETURN
    507:    CxxWord("DP",  "DP",   "D",   F),  // STATIC
    508:    CxxWord("$",   "$",    "$",   T),  // STATIC_ASSERT
    509:    CxxWord("DPC", "DPC",  "DP",  F),  // STRUCT
    510:    CxxWord("-",   "-",    "s",   T),  // SWITCH
    511:    CxxWord("DCP", "DCFP", "-",   F),  // TEMPLATE
    512:    CxxWord("D",   "D",    "D",   F),  // THREAD_LOCAL
    513:    CxxWord("-",   "-",    "t",   T),  // TRY
    514:    CxxWord("T",   "T",    "T",   T),  // TYPEDEF
    515:    CxxWord("DPC", "DPC",  "DP",  F),  // UNION
    516:    CxxWord("U",   "U",    "U",   T),  // USING
    517:    CxxWord("-",   "P",    "-",   F),  // VIRTUAL
    518:    CxxWord("DP",  "DP",   "D",   F),  // VOLATILE
    519:    CxxWord("-",   "-",    "w",   T),  // WHILE
    520:    CxxWord("-",   "P",    "-",   F),  // NVDTOR
    521:    CxxWord("DP",  "DP",   "xD",  F)   // NIL_KEYWORD
    549:    CxxOp(           SCOPE_STR, 2, 18, F, F, F, XN),  // SCOPE_RESOLUTION
    550:    CxxOp(                 ".", 2, 17, F, F, F, NN),  // REFERENCE_SELECT
    551:    CxxOp(                "->", 2, 17, T, F, F, NN),  // POINTER_SELECT
    552:    CxxOp(                 "[", 2, 17, T, F, F, NN),  // ARRAY_SUBSCRIPT
    553:    CxxOp(                 "(", 0, 17, F, F, F, NN),  // FUNCTION_CALL
    554:    CxxOp(                "++", 1, 17, T, F, F, NX),  // POSTFIX_INCREMENT
    555:    CxxOp(                "--", 1, 17, T, F, F, NX),  // POSTFIX_DECREMENT
    556:    CxxOp(         DEFINED_STR, 1, 17, F, F, F, XN),  // DEFINED
    557:    CxxOp(          TYPEID_STR, 1, 17, F, F, F, XN),  // TYPE_NAME
    558:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F, XN),  // CONST_CAST
    559:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F, XN),  // DYNAMIC_CAST
    561:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F, XN),  // STATIC_CAST
    562:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F, XN),  // SIZEOF_TYPE
    563:    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F, XN),  // ALIGNOF_TYPE
    564:    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F, XN),  // NOEXCEPT
    565:    CxxOp(                "++", 1, 16, T, T, F, XN),  // PREFIX_INCREMENT
    566:    CxxOp(                "--", 1, 16, T, T, F, XN),  // PREFIX_DECREMENT
    567:    CxxOp(                 "~", 1, 16, T, T, F, XN),  // ONES_COMPLEMENT
    568:    CxxOp(                 "!", 1, 16, T, T, F, XN),  // LOGICAL_NOT
    569:    CxxOp(                 "+", 1, 16, T, T, F, XN),  // UNARY_PLUS
    570:    CxxOp(                 "-", 1, 16, T, T, F, XN),  // UNARY_MINUS
    571:    CxxOp(                 "&", 1, 16, T, T, F, XN),  // ADDRESS_OF
    572:    CxxOp(                 "*", 1, 16, T, T, F, XN),  // INDIRECTION
    573:    CxxOp(             NEW_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE
    574:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE_ARRAY
    575:    CxxOp(          DELETE_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE
    576:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE_ARRAY
    577:    CxxOp(                 "(", 2, 16, T, T, F, SN),  // CAST
    578:    CxxOp(                ".*", 2, 15, F, F, F, NN),  // REFERENCE_SELECT_MEMBER
    579:    CxxOp(               "->*", 2, 15, T, F, F, NN),  // POINTER_SELECT_MEMBER
    580:    CxxOp(                 "*", 2, 14, T, F, T, SS),  // MULTIPLY
    581:    CxxOp(                 "/", 2, 14, T, F, F, SS),  // DIVIDE
    582:    CxxOp(                 "%", 2, 14, T, F, F, SS),  // MODULO
    583:    CxxOp(                 "+", 2, 13, T, F, T, SS),  // ADD
    584:    CxxOp(                 "-", 2, 13, T, F, F, SS),  // SUBTRACT
    585:    CxxOp(                "<<", 2, 12, T, F, F, SS),  // LEFT_SHIFT
    586:    CxxOp(                ">>", 2, 12, T, F, F, SS),  // RIGHT_SHIFT
    587:    CxxOp(                 "<", 2, 11, T, F, T, SS),  // LESS
    588:    CxxOp(                "<=", 2, 11, T, F, T, SS),  // LESS_OR_EQUAL
    589:    CxxOp(                 ">", 2, 11, T, F, T, SS),  // GREATER
    590:    CxxOp(                ">=", 2, 11, T, F, T, SS),  // GREATER_OR_EQUAL
    591:    CxxOp(                "==", 2, 10, T, F, T, SS),  // EQUALITY
    592:    CxxOp(                "!=", 2, 10, T, F, T, SS),  // INEQUALITY
    593:    CxxOp(                 "&", 2,  9, T, F, T, SS),  // BITWISE_AND
    594:    CxxOp(                 "^", 2,  8, T, F, T, SS),  // BITWISE_XOR
    595:    CxxOp(                 "|", 2,  7, T, F, T, SS),  // BITWISE_OR
    596:    CxxOp(                "&&", 2,  6, T, F, T, SS),  // LOGICAL_AND
    597:    CxxOp(                "||", 2,  5, T, F, T, SS),  // LOGICAL_OR
    598:    CxxOp(                 "?", 3,  4, F, F, F, SS),  // CONDITIONAL
    599:    CxxOp(                 "=", 2,  3, T, T, F, SS),  // ASSIGN
    600:    CxxOp(                "*=", 2,  3, T, T, F, SS),  // MULTIPLY_ASSIGN
    601:    CxxOp(                "/=", 2,  3, T, T, F, SS),  // DIVIDE_ASSIGN
    602:    CxxOp(                "%=", 2,  3, T, T, F, SS),  // MODULO_ASSIGN
    603:    CxxOp(                "+=", 2,  3, T, T, F, SS),  // ADD_ASSIGN
    604:    CxxOp(                "-=", 2,  3, T, T, F, SS),  // SUBTRACT_ASSIGN
    605:    CxxOp(               "<<=", 2,  3, T, T, F, SS),  // LEFT_SHIFT_ASSIGN
    606:    CxxOp(               ">>=", 2,  3, T, T, F, SS),  // RIGHT_SHIFT_ASSIGN
    607:    CxxOp(                "&=", 2,  3, T, T, F, SS),  // BITWISE_AND_ASSIGN
    608:    CxxOp(                "^=", 2,  3, T, T, F, SS),  // BITWISE_XOR_ASSIGN
    609:    CxxOp(                "|=", 2,  3, T, T, F, SS),  // BITWISE_OR_ASSIGN
    610:    CxxOp(           THROW_STR, 0,  2, F, T, F, SS),  // THROW
    611:    CxxOp(                 ",", 2,  1, F, F, F, NS),  // STATEMENT_SEPARATOR
    612:    CxxOp(                 "$", 0,  0, F, F, F, XX),  // START_OF_EXPRESSION
    613:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // FALSE
    614:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // TRUE
    615:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // NULLPTR
    616:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX)   // NIL_OPERATOR
* W106 Function does not invoke Debug::ft
    114: Cxx::Access FindAccessControl(const std::string& s)
    888: static void EraseTemplateArgs
    920: static void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
    930: void CxxUsageSets::AddBase(CxxNamed* item)
    938: void CxxUsageSets::AddDirect(CxxNamed* item)
    946: void CxxUsageSets::AddForward(CxxNamed* item)
    957: void CxxUsageSets::AddIndirect(CxxNamed* item)
    965: void CxxUsageSets::AddInherit(CxxNamed* item)
    973: void CxxUsageSets::AddUser(CxxNamed* item)
ct/Cxx.h
* W028 Unused data
    463:    constexpr char Unchecked = ' ';  // spacing not determined
* W042 Member could be private
    558:    Numeric(NumericType type, size_t width, bool sign) :
  W082 Adjacent arguments have the same type
    634:    SymbolView(Accessibility a, TypeMatch m, Cxx::Access c,
ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    108:       auto cls = static_cast<Class*>(call->Via()->Root());
    281:          static_cast<const Function*>(item)->IsInline())
    1249:       return static_cast<ClassInst*>(list.front());
    1259:    auto area = static_cast<CxxArea*>(GetScope());
    1270:          auto c = static_cast<Class*>(*s);
    2688:       auto func = static_cast<const Function*>(item);
    2731:       auto func = static_cast<const Function*>(item);
    2740:       return tmplt_->FindFriend(static_cast<const CxxScope*>(ref));
  W008 Cast removes const qualification
    1362:       auto self = const_cast<Class*>(this);
    1568:    return const_cast<Class*>(this);
    1732:    return const_cast<Class*>(this);
    2684:       return const_cast<ClassInst*>(this);
* W106 Function does not invoke Debug::ft
    69: static TypeMatch FindMin(const std::vector<TypeMatch>& matches)
    1565: Class* Class::GetClassTemplate() const
    1601: Cxx::Access Class::GetCurrAccess() const
    1618: void Class::GetDecls(CxxNamedSet& items)
    1729: CxxScope* Class::GetTemplate() const
    2213: Class* Class::OuterClass() const
    3354: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
    3370: void CxxArea::GetDecls(CxxNamedSet& items)
    3410: void CxxArea::InsertFunc(Function* func)
* W117 Line can merge with the next line and be under the length limit
    686:       attrs.test(HasPublicMemberFunction) ||
    717:       attrs.test(HasPublicStaticData) ||
    724:          attrs.test(HasInstantiations) ||
  W119 Argument passed by value is modified
    132/3:    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
    2799/2:    const CxxScope* scope, CodeFile* file, SymbolView& view) const
ct/CxxArea.h
  W004 C-style cast
    529:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    901:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  W007 Cast down the inheritance hierarchy
    993:    Namespace* OuterSpace() const { return static_cast<Namespace*>(GetScope()); }
  W008 Cast removes const qualification
    137:    CxxArea* GetArea() const override { return const_cast<CxxArea*>(this); }
    529:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    574:    Class* GetClass() const override { return const_cast<Class*>(this); }
    901:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
    1036:    Namespace* GetSpace() const override { return const_cast<Namespace*>(this); }
  W026 Unused argument
    704/1:       (const std::string& name, StackArgVector* args, SymbolView* view) const;
    704/2:       (const std::string& name, StackArgVector* args, SymbolView* view) const;
    704/3:       (const std::string& name, StackArgVector* args, SymbolView* view) const;
* W042 Member could be private
    92:    Typedef* FindType(const std::string& name) const;
    174:    Enum* FindEnum(const std::string& name) const;
    178:    Enumerator* FindEnumerator(const std::string& name) const;
    392:    void FindCtors(FunctionVector& ctors) const;
    408:    FunctionDefinition GetFuncDefinition(FunctionRole role) const;
    520:    bool AddAnonymousUnion(const ClassPtr& cls) override;
    998:    Namespace* FindNamespace(const std::string& name) const;
* W043 Member could be protected
    68:    const ClassPtrVector* Classes() const { return &classes_; }
    70:    const EnumPtrVector* Enums() const { return &enums_; }
    71:    const ForwardPtrVector* Forws() const { return &forws_; }
    74:    const TypedefPtrVector* Types() const { return &types_; }
    75:    const AsmPtrVector* Assembly() const { return &assembly_; }
    76:    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
* W060 Base class constructor is public
    259:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W075 Virtual function is public
    102:    virtual Function* FindFunc(const std::string& name,
    110:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    114:    virtual CxxScoped* FindItem(const std::string& name) const;
    284:    virtual ClassInst* EnsureInstance(const TypeName* type);
    297:    virtual Class* BaseClass()
    302:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    341:    virtual Class* GetClassTemplate() const;
    356:    virtual bool DerivesFrom(const Class* cls) const;
    520:    bool AddAnonymousUnion(const ClassPtr& cls) override;
    622:    CxxTokenVector Items() const override;
* W092 Function could be free
    703:    Function* InstantiateFunction // CxxArea.cpp
ct/CxxCharLiteral.h
* W020 Using statement in header
    35: using namespace NodeBase;
ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    1035:       auto macro = static_cast<Macro*>(ref_);
    1048:       auto macro = static_cast<Macro*>(ref_);
* W106 Function does not invoke Debug::ft
    46: static void AlignLeft(ostream& stream, const string& prefix)
    58: bool IncludesAreSorted(const IncludePtr& incl1, const IncludePtr& incl2)
    193: CxxToken* Define::AutoType() const
    943: bool Macro::WasRead()
    981: CxxScope* MacroName::GetScope() const
    997: void MacroName::ItemDeleted(const CxxScoped* item) const
ct/CxxDirective.h
* W042 Member could be private
    279:    virtual CxxToken* GetValue() const = 0;
    328:    CxxToken* RootType() const override { return GetValue(); }
* W043 Member could be protected
    874:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    349:    size_t refs_ : 16;
  W075 Virtual function is public
    55:    virtual bool IsIncludeGuard() const { return false; }
    279:    virtual CxxToken* GetValue() const = 0;
    284:    virtual bool IsDefined() const { return true; }
    290:    virtual void SetExpr(ExprPtr& rhs);
    328:    CxxToken* RootType() const override { return GetValue(); }
    474:    virtual bool AddElif(Elif* e) { return false; }
    478:    virtual bool AddElse(const Else* e) { return false; }
    482:    virtual bool AddEndif(const Endif* e) { return false; }
    486:    virtual bool HasCompiledCode() const { return compile_; }
ct/CxxExecute.cpp
  W005 Functional cast
    1781:             return TypeMatch(match - 1);
    2244:    if(item_->GetTypeSpec()->Tags()->PtrCount(false) >= TagCount(ptrs))
  W007 Cast down the inheritance hierarchy
    1735:          auto derived = static_cast<const Class*>(root);
    1846:       auto thisClass = static_cast<Class*>(thisRoot);
    1854:             auto thatClass = static_cast<Class*>(thatRoot);
    2015:    if(AutoType_.SetAutoTypeOn(*static_cast<FuncData*>(item_)))
    2069:       auto type = static_cast<TypeSpec*>(item_);
    2079:       spec->SetReferent(static_cast<CxxScoped*>(item_), nullptr);
    2294:          static_cast<Class*>(root)->BlockCopied(this);
  W075 Virtual function is public
    126:    bool Display(ostream& stream, const string& opts) override;
    138:    bool Display(ostream& stream, const string& opts) override;
    154:    bool Display(ostream& stream, const string& opts) override;
    170:    bool Display(ostream& stream, const string& opts) override;
    198:    bool Display(ostream& stream, const string& opts) override;
* W106 Function does not invoke Debug::ft
    59: static bool CompilingTemplateFunction()
    335: TypeName* Context::FindXrefItem(const string& name)
    347: const Parser* Context::GetParser()
    355: XrefUpdater Context::GetXrefUpdater()
    374: bool Context::IsCompiling()
    391: void Context::OnLine(size_t line, Phase phase)
    426: bool Context::OptionIsOn(char opt)
    454: bool Context::ParsingSourceCode()
    462: bool Context::ParsingTemplate()
    475: bool Context::ParsingTemplateInstance()
    500: void Context::PopXrefFrame()
    518: void Context::PushScope(CxxScope* scope, bool hidden)
    527: void Context::PushXrefFrame(XrefUpdater updater)
    534: void Context::PushXrefItem(TypeName* item)
    556: CxxScope* Context::Scope()
    607: void Context::SetOptions(const std::string& opts)
    650: void Context::SetPos(size_t pos)
    665: void Context::SetPos(const CxxLocation& loc)
    1086: OptionalCode* ParseFrame::Optional() const
    1277: CxxScope* ParseFrame::Scope() const
    1284: Cxx::Access ParseFrame::ScopeAccess() const
    1291: Cxx::Access ParseFrame::SetAccess(Cxx::Access access)
    1700: bool StackArg::IsBool() const
    2439: TypeName* XrefFrame::FindItem(const string& name) const
    2451: void XrefFrame::PushItem(TypeName* item)
  W107 Function does not invoke Debug::ft as first statement
    2377:    Debug::ft("Tracepoint.OnLine");
* W143 Auto variable copies an object returned by reference
    1120:    auto arg = args_.back();
ct/CxxExecute.h
  W026 Unused argument
    947/1:    static void Shutdown(NodeBase::RestartLevel level);
    951/1:    static void Startup(NodeBase::RestartLevel level) { }
* W032 Unused function
    160:    size_t Arrays() const;
    862:    static bool ParsingTemplate();
* W042 Member could be private
    164:    size_t Refs() const;
    759:    static Cxx::Access ScopeAccess() { return Frame_->ScopeAccess(); }
    890:    static bool OptionIsOn(char opt);
    898:    static void Trace(CxxTrace::Action act, const CodeFile& file);
  W050 Data is not private
    337:    CxxToken* item_;
  W082 Adjacent arguments have the same type
    96:    StackArg(CxxToken* t, TagCount p, bool lvalue, bool ctor);
    291:    TypeMatch CalcMatchWith(const StackArg& that,
    346:    TypeMatch MatchWith(const StackArg& that,
* W092 Function could be free
    862:    static bool ParsingTemplate(); // CxxExecute.cpp
    897:    static void Trace(CxxTrace::Action act, const StackArg& arg); // CxxExecute.cpp
ct/CxxLocation.cpp
* W106 Function does not invoke Debug::ft
    41: void CxxLocation::SetLoc(CodeFile* file, size_t pos)
    49: void CxxLocation::SetLoc(CodeFile* file, size_t pos, bool internal)
ct/CxxLocation.h
  W082 Adjacent arguments have the same type
    76:    void UpdatePos(EditorAction action, size_t begin, size_t count, size_t from);
ct/CxxNamed.cpp
  W005 Functional cast
    4422:    if(TagCount(n) >= ptrs_) return false;
    4450:    if(TagCount(n) >= ptrs_) return false;
    4521:       if(TagCount(n) >= ptrs_) ptrs_ = n + 1;
  W007 Cast down the inheritance hierarchy
    100:             static_cast<Function*>(tfunc)->SetTemplateParm();
    474:          space = static_cast<Namespace*>(item);
    498:          cls = static_cast<Class*>(item);
    552:          item = static_cast<Enum*>(item)->FindEnumerator(name);
    563:          auto tdef = static_cast<Typedef*>(item);
    568:          item = static_cast<CxxScoped*>(root);
    855:    return static_cast<Class*>(root);
    1301:    return (static_cast<Class*>(root)->FindCtor(nullptr) == nullptr);
    2195:    auto cls = (type == Cxx::Class ? static_cast<Class*>(inner) : nullptr);
    2431:       auto func = static_cast<Function*>(ref);
    2876:       TypeSpecPtr spec(static_cast<TypeSpec*>(spec_->Clone()));
    2881:       ExprPtr expr(static_cast<Expression*>(expr_->Clone()));
    3378:          TemplateArgPtr arg(static_cast<TemplateArg*>((*a)->Clone()));
    3696:          auto e = static_cast<const Enum*>(item);
  W008 Cast removes const qualification
    1090:    return const_cast<DataSpec*>(this);
    1656:    const_cast<DataSpec*>(this)->FindReferent();
    3570:    return const_cast<TypeName*>(this);
* W106 Function does not invoke Debug::ft
    204: CxxArea* CxxNamed::GetArea() const
    213: Class* CxxNamed::GetClass() const
    244: CodeFile* CxxNamed::GetDistinctDeclFile() const
    259: CodeFile* CxxNamed::GetImplFile() const
    268: void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
    275: Namespace* CxxNamed::GetSpace() const
    284: void CxxNamed::Instantiating(CxxScopedVector& locals) const
    633: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    766: const TemplateArgPtrVector* DataSpec::Args() const
    1020: TypeTags DataSpec::GetAllTags() const
    1088: TypeSpec* DataSpec::GetTypeSpec() const
    1225: bool DataSpec::IsAutoDecl() const
    1292: bool DataSpec::IsPOD() const
    1651: CxxScoped* DataSpec::Referent() const
    2008: bool DataSpec::VerifyReferents() const
    2087: const TemplateArgPtrVector* QualName::Args() const
    2139: TypeName* QualName::At(size_t n) const
    2350: CxxScope* QualName::GetScope() const
    2381: TypeName* QualName::GetTemplatedName() const
    2469: TypeName* QualName::Last() const
    2707: size_t QualName::Size() const
    2769: bool QualName::VerifyReferents() const
    3001: CxxScoped* TemplateArg::GetReferent() const
    3321: bool TemplateArg::VerifyReferents() const
    3407: const TemplateArgPtrVector* TypeName::Args() const
    3464: CxxScoped* TypeName::DirectType() const
    3561: TypeName* TypeName::GetTemplatedName() const
    3643: void TypeName::ItemDeleted(const CxxScoped* item) const
    3811: void TypeName::PushBack(TypeNamePtr& type)
    4131: bool TypeName::VerifyReferents() const
    4411: int TypeTags::IsConstPtr() const
    4420: bool TypeTags::IsConstPtr(size_t n) const
    4429: bool TypeTags::IsLvalue() const
    4439: int TypeTags::IsVolatilePtr() const
    4448: bool TypeTags::IsVolatilePtr(size_t n) const
    4488: TagCount TypeTags::PtrCount(bool arrays) const
  W119 Argument passed by value is modified
    2139/1: TypeName* QualName::At(size_t n) const
ct/CxxNamed.h
  W004 C-style cast
    1266:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1474:    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  W008 Cast removes const qualification
    749:       { return const_cast<QualName*>(this); }
    1266:    CxxToken* AutoType() const override { return (CxxToken*) this; }
* W042 Member could be private
    265:    virtual bool ResolveTemplate
    636:    TypeName* Last() const;
    803:    bool ResolveTemplate
    955:    bool IsUnboundedArray() const { return array_; }
    1216:    DataSpec(const DataSpec& that);
* W043 Member could be protected
    211:    void DisplayReferent(std::ostream& stream, bool fq) const;
    221:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    1052:    TypeSpecUser GetUserType() const { return user_; }
  W050 Data is not private
    999:    bool ptrDet_: 1;
    1003:    bool refDet_: 1;
  W075 Virtual function is public
    58:    virtual bool IsDeclaredInFunction() const { return false; }
    64:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    69:    virtual TemplateParms* GetTemplateParms() const { return nullptr; }
    79:    virtual std::string QualifiedName(bool scopes, bool templates)
    85:    virtual std::string ScopedName(bool templates) const;
    91:    virtual void GetScopedNames(stringVector& names, bool templates) const;
    96:    virtual Function* GetFunction() const { return nullptr; }
    103:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    108:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    131:    virtual CxxScoped* DirectType() const { return Referent(); }
    135:    virtual void FindReferent();
    141:    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
    145:    virtual void SetAsReferent(const CxxNamed* user) { }
    152:    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
    157:    virtual StackArg MemberToArg
    164:    virtual bool NamesReferToArgs(const NameVector& names,
    171:    virtual std::string ArgString(const TemplateParmToArgMap& tmap) const;
    177:    virtual void Instantiating(CxxScopedVector& locals) const;
    189:    virtual void GetDirectClasses(CxxUsageSets& symbols);
    196:    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
    201:    virtual bool ItemIsTemplateArg(const CxxNamed* item) const;
    206:    virtual std::string XrefName(bool templates) const;
    502:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    803:    bool ResolveTemplate
    808:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    1060:    virtual Function* GetFuncSpec() const { return nullptr; }
    1069:    virtual TypeTags* Tags() = 0;
    1070:    virtual const TypeTags* Tags() const = 0;
    1074:    virtual void AddArray(ArraySpecPtr& array) = 0;
    1080:    virtual TagCount Ptrs(bool arrays) const = 0;
    1086:    virtual TagCount Refs() const = 0;
    1091:    virtual TagCount Arrays() const = 0;
    1095:    virtual bool HasArrayDefn() const = 0;
    1099:    virtual void EnteringScope(const CxxScope* scope) = 0;
    1103:    virtual void EnterArrays() const = 0;
    1108:    virtual TypeTags GetAllTags() const = 0;
    1113:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1118:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1122:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1128:    virtual void SetPtrs(TagCount count) = 0;
    1133:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1137:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1141:    virtual void SetUserType(TypeSpecUser user) const { user_ = user; }
    1152:    virtual TypeMatch MatchTemplate(const TypeSpec* that,
    1159:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1164:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1168:    virtual void GetNames(stringVector& names) const = 0;
  W082 Adjacent arguments have the same type
    378:    TypeMatch MatchTemplate(const TypeName* that,
    693:    TypeMatch MatchTemplate(const QualName* that,
    912:    bool SetPointer(size_t n, bool readonly, bool unstable);
    1152:    virtual TypeMatch MatchTemplate(const TypeSpec* that,
    1587:    TypeMatch MatchTemplate(const TemplateArg* that, stringVector& tmpltParms,
ct/CxxScope.cpp
  W004 C-style cast
    4706:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W007 Cast down the inheritance hierarchy
    110:             auto farg = static_cast<Function*>(a->item_);
    956:       auto cls = static_cast<const Class*>(scope);
    1746:          auto op = static_cast<Operation*>(expr);
    1887:    auto item = static_cast<Data*>(FindTemplateAnalog(this));
    1901:    auto item = static_cast<Data*>(FindTemplateAnalog(this));
    1942:    auto item = static_cast<Data*>(FindTemplateAnalog(this));
    1957:    auto item = static_cast<Data*>(FindTemplateAnalog(this));
    2041:          static_cast<Block*>(GetScope())->DeleteItem(this);
    2058:          static_cast<Block*>(GetScope())->ReplaceItem(this, next_.release());
    3725:    else if(!static_cast<Function*>(item)->virtual_)
    4503:       func = static_cast<Function*>(inst->FindTemplateAnalog(this));
    4516:       auto i = FindArg(static_cast<const Argument*>(item), false);
    4563:    return static_cast<Function*>((*cti)->FindInstanceAnalog(this));
    5271:    auto that = static_cast<const Argument*>(FindTemplateAnalog(arg));
    5726:    auto func = static_cast<Function*>(FindTemplateAnalog(this));
    5738:    auto func = static_cast<Function*>(FindTemplateAnalog(this));
    5957:                auto item = static_cast<CxxNamed*>(args.front().item_);
    6146:       auto func = static_cast<Function*>(cls->FindTemplateAnalog(this));
  W008 Cast removes const qualification
    761:       if(NarrowestAccessUsed(const_cast<ClassData*>(this)) >= Cxx::Public)
    3089:    return FoundFunc(const_cast<Function*>(this), args);
    3860:          if(NarrowestAccessUsed(const_cast<Function*>(this)) >= Cxx::Public)
    4472:    auto prev = const_cast<Function*>(this);
    4696:    if(IsTemplate()) return const_cast<Function*>(this);
    4706:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W082 Adjacent arguments have the same type
    206: static TypeMatch MatchTemplate(const string& thisType,
* W106 Function does not invoke Debug::ft
    135: bool FuncDefnsAreSorted(const Function* func1, const Function* func2)
    167: FunctionVector FuncsInArea(const FunctionVector& defns, const CxxArea* area)
    307: bool Block::CrlfOver(Form form) const
    448: CxxToken* Block::FirstStatement() const
    456: Function* Block::GetFunction() const
    928: void ClassData::GetDecls(CxxNamedSet& items)
    1037: void ClassData::SetMemInit(const MemberInit* init)
    1573: CodeFile* Data::GetDeclFile() const
    1580: const Data* Data::GetDefn() const
    1589: CodeFile* Data::GetDefnFile() const
    1632: TypeName* Data::GetTemplatedName() const
    1781: bool Data::IsConst() const
    1938: bool Data::WasRead()
    2300: const TemplateArgPtrVector* FuncSpec::Args() const
    2325: TypeSpec* FuncSpec::Clone() const
    2347: void FuncSpec::EnterArrays() const
    2364: void FuncSpec::FindReferent()
    2372: TypeTags FuncSpec::GetAllTags() const
    2379: void FuncSpec::GetNames(stringVector& names) const
    2387: TypeName* FuncSpec::GetTemplatedName() const
    2394: TypeSpec* FuncSpec::GetTypeSpec() const
    2401: bool FuncSpec::HasArrayDefn() const
    2408: void FuncSpec::Instantiating(CxxScopedVector& locals) const
    2416: bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
    2424: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    2432: TypeMatch FuncSpec::MatchTemplate(const TypeSpec* that,
    2442: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    2450: bool FuncSpec::NamesReferToArgs(const NameVector& names,
    2476: TagCount FuncSpec::Ptrs(bool arrays) const
    2483: TagCount FuncSpec::Refs() const
    2517: void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
    2525: const TypeTags* FuncSpec::Tags() const
    2532: TypeTags* FuncSpec::Tags()
    2935: uint32_t Function::CalcHash() const
    4568: FunctionRole Function::FuncRole() const
    4605: FunctionType Function::FuncType() const
    4616: Cxx::Access Function::GetAccess() const
    4624: CodeFile* Function::GetDeclFile() const
    4631: void Function::GetDecls(CxxNamedSet& items)
    4638: const Function* Function::GetDefn() const
    4647: Function* Function::GetDefn()
    4656: CodeFile* Function::GetDefnFile() const
    4665: CxxScope* Function::GetScope() const
    4693: CxxScope* Function::GetTemplate() const
    4704: CxxScope* Function::GetTemplateInstance() const
    4712: TemplateType Function::GetTemplateType() const
    5223: bool Function::IsImplemented() const
    5446: size_t Function::LogOffsetToArgIndex(word offset) const
    6153: bool Function::WasRead()
    6365: void SpaceData::GetDecls(CxxNamedSet& items)
    6450: void SpaceDefn::GetDecls(CxxNamedSet& items)
  W119 Argument passed by value is modified
    5504/2:    const CxxScope* scope, CodeFile* file, SymbolView& view) const
    5744/1: void Function::SetOperator(Cxx::Operator oper)
ct/CxxScope.h
  W004 C-style cast
    396:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1366:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    396:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1366:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1426:       { return const_cast<Function*>(this); }
  W026 Unused argument
    84/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
* W030 Unused enumerator
    147:       Multiple   // two statements or more
* W032 Unused function
    1216:    bool IsFinal() const { return GetDecl()->final_; }
* W042 Member could be private
    355:    const Data* GetDecl() const { return (defn_ ? mate_ : this); }
    1156:    bool IsDefaulted() const { return GetDefn()->defaulted_; }
    1210:    Function* GetBase() const { return GetDecl()->base_; }
    1276:    size_t MaxArgs() const { return args_.size(); }
    1341:    bool IsInvokedInBase() const;
    1374:    void CheckAccessControl() const override;
    1378:    void CheckIfHiding() const override;
* W043 Member could be protected
    73:    void ReplaceTemplateParms(std::string& code,
    335:    bool IsThreadLocal() const { return thread_local_; }
    339:    bool IsConstexpr() const { return constexpr_; }
    343:    bool WasInited() const { return GetDecl()->inited_; }
    360:    const Data* GetDefn() const;
  W075 Virtual function is public
    78:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    83:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    91:    virtual void AccessibilityOf
    379:    virtual void Promote
    384:    virtual bool IsUnionMember() const { return false; }
    1374:    void CheckAccessControl() const override;
    1378:    void CheckIfHiding() const override;
  W082 Adjacent arguments have the same type
    379:    virtual void Promote
ct/CxxScoped.cpp
  W004 C-style cast
    1877:    return (CxxToken*) this;
    2106:    return (CxxToken*) this;
    2919:    return (CxxToken*) this;
    3013:    return (CxxScoped*) this;
    3026:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    93:          auto func = static_cast<Function*>(GetScope());
    200:       const auto& fname = static_cast<Function*>(GetScope())->Name();
    216:    auto cls = static_cast<Class*>(ref);
    240:    auto func = static_cast<Function*>(GetScope());
    304:       auto item = static_cast<Argument*>(FindTemplateAnalog(this));
    343:    auto item = static_cast<Argument*>(FindTemplateAnalog(this));
    355:    auto item = static_cast<Argument*>(FindTemplateAnalog(this));
    391:    GetClass()->EraseSubclass(static_cast<Class*>(GetScope()));
    421:    GetClass()->AddSubclass(static_cast<Class*>(Context::Scope()));
    455:    return static_cast<Class*>(name_->GetReferent());
    1181:          ref = static_cast<const Function*>(ref)->FindRootFunc();
    1532:    auto item = static_cast<Enum*>(FindTemplateAnalog(this));
    1801:    auto item = static_cast<Enumerator*>(FindTemplateAnalog(this));
    1837:    auto item = static_cast<Enumerator*>(FindTemplateAnalog(this));
    2031:    auto item = static_cast<Forward*>(FindTemplateAnalog(this));
    2153:    static_cast<Class*>(grantor_)->DeleteFriend(this);
    2251:          space = static_cast<Namespace*>(item);
    2264:          cls = static_cast<Class*>(item);
    2303:          auto tdef = static_cast<Typedef*>(item);
    2308:          item = static_cast<CxxScoped*>(root);
    2497:    auto item = static_cast<Friend*>(grantor_->FindTemplateAnalog(this));
    2642:       static_cast<CxxArea*>(scope)->AddFunc(func);
    2765:    auto func = static_cast<Function*>(GetScope());
    2858:    ref_ = static_cast<ClassData*>(cls->FindData(name_));
    3587:    auto item = static_cast<Typedef*>(FindTemplateAnalog(this));
    3777:          auto item = static_cast<Using*>(FindTemplateAnalog(this));
  W008 Cast removes const qualification
    732:    if(n == 0) return const_cast<CxxScoped*>(this);
    1877:    return (CxxToken*) this;
    2106:    return (CxxToken*) this;
    2543:    const_cast<Friend*>(this)->FindReferent();
    2569:    const_cast<Friend*>(this)->SetScope(decl->GetSpace());
    2580:    const_cast<Friend*>(this)->SetScope(scope);
    2919:    return (CxxToken*) this;
    3013:    return (CxxScoped*) this;
    3026:    return (CxxToken*) this;
* W106 Function does not invoke Debug::ft
    453: Class* BaseDecl::GetClass() const
    582: void CxxScoped::AddFiles(LibItemSet& imSet) const
    810: bool CxxScoped::IsAuto() const
    819: bool CxxScoped::IsClassMember() const
    833: bool CxxScoped::IsConst() const
    842: bool CxxScoped::IsConstPtr() const
    851: bool CxxScoped::IsConstPtr(size_t n) const
    860: bool CxxScoped::IsDeclaredInFunction() const
    868: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    881: bool CxxScoped::IsIndirect(bool arrays) const
    1145: void CxxScoped::UpdateReference(CxxToken* item, bool insert) const
    1202: CxxTokenVector CxxScoped::XrefItems() const
    1436: void Enum::GetDecls(CxxNamedSet& items)
    1457: TypeSpec* Enum::GetTypeSpec() const
    1695: void Enumerator::GetDecls(CxxNamedSet& items)
    1873: CxxToken* Forward::AutoType() const
    1954: void Forward::GetDecls(CxxNamedSet& items)
    2102: CxxToken* Friend::AutoType() const
    2374: void Friend::GetDecls(CxxNamedSet& items)
    2391: Function* Friend::GetFunction() const
    2400: QualName* Friend::GetQualName() const
    2409: CxxScoped* Friend::GetReferent() const
    2825: void MemberInit::ItemDeleted(const CxxScoped* item) const
    2853: CxxScoped* MemberInit::Referent() const
    2911: CxxToken* TemplateParm::AutoType() const
    3005: CxxScoped* TemplateParm::Referent() const
    3018: CxxToken* TemplateParm::RootType() const
    3311: const TemplateArgPtrVector* Typedef::Args() const
    3468: void Typedef::GetDecls(CxxNamedSet& items)
    3484: TypeName* Typedef::GetTemplatedName() const
    3499: void Typedef::Instantiating(CxxScopedVector& locals) const
    3617: bool Typedef::VerifyReferents() const
  W119 Argument passed by value is modified
    3825/1: void Using::SetScope(CxxScope* scope)
* W143 Auto variable copies an object returned by reference
    1715:    auto name = names.front();
ct/CxxScoped.h
  W004 C-style cast
    205:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    604:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1535:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1632:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    205:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    604:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1535:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1632:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1801/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
* W042 Member could be private
    70:    bool IsClassMember() const;
    79:    bool IsSubscopeOf(const std::string& fqSuper) const;
    136:    bool Contains(const CxxToken* item) const;
    613:    void CheckAccessControl() const override;
    1135:    bool ResolveTemplate
    1876:    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
* W043 Member could be protected
    106:    CxxScoped* FindInheritedName() const;
    125:    virtual bool IsUnused() const { return false; }
    141:    void DisplayFiles(std::ostream& stream) const;
  W075 Virtual function is public
    59:    virtual bool NameRefersToItem(const std::string& name,
    88:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView& view) const;
    97:    virtual void RecordAccess(Cxx::Access access) const;
    110:    virtual void AddFiles(LibItemSet& imSet) const;
    115:    virtual void UpdateReference(CxxToken* item, bool insert) const;
    125:    virtual bool IsUnused() const { return false; }
    130:    virtual bool CheckIfUnused(Warning warning) const;
    613:    void CheckAccessControl() const override;
    1135:    bool ResolveTemplate
    1876:    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
  W082 Adjacent arguments have the same type
    235:    bool GetBracedSpan(size_t& begin, size_t& left, size_t& end) const;
    1791:    Using(QualNamePtr& name, bool space, bool added = false);
ct/CxxStatement.cpp
  W007 Cast down the inheritance hierarchy
    371:    static_cast<Block*>(GetScope())->DeleteItem(this);
    1156:             static_cast<Class*>(result.item_)->InvokeCopyCtor();
* W106 Function does not invoke Debug::ft
    376: void CxxStatement::EnterBlock()
ct/CxxStatement.h
  W082 Adjacent arguments have the same type
    59:    bool GetSeqSpan(size_t begin, size_t& left, size_t& end) const;
    64:    bool GetParSpan(size_t& begin, size_t& left, size_t& end) const;
ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    40: static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  W119 Argument passed by value is modified
    216/2: static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
    238/2: static size_t FindTemplateEnd(const string& name, size_t pos)
    761/5:    const string& s2, size_t begin, size_t end, char c)
    797/3: size_t rfind_first_not_of(const string& str, const string& chars, size_t off)
    811/2: size_t rfind_first_of(const string& str, size_t off, const string& chars)
ct/CxxString.h
* W032 Unused function
    46:    size_t rfind_first_of
    114:    std::string& Prefix(std::string&& scope,
  W082 Adjacent arguments have the same type
    53:    size_t rfind_first_not_of(const std::string& str,
    139:    size_t CompareScopes
    182:    size_t Replace(std::string& code, const std::string& s1,
ct/CxxStrLiteral.h
* W020 Using statement in header
    41: using namespace NodeBase;
* W042 Member could be private
    78:    static DataPtr CreateRef()
ct/CxxSymbols.cpp
  W004 C-style cast
    414:    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  W007 Cast down the inheritance hierarchy
    273:                if(static_cast<const Function*>(list[idx])->IsStatic())
    582:    return static_cast<Macro*>(macros.front());
    619:       if((*s)->ScopedName(false) == name) return static_cast<CxxScope*>(*s);
    627:       if((*c)->ScopedName(false) == name) return static_cast<CxxScope*>(*c);
    635:       if(pos != string::npos) return static_cast<CxxScope*>(*s);
    641:       if(pos != string::npos) return static_cast<CxxScope*>(*c);
* W106 Function does not invoke Debug::ft
    290: template<typename T> void GetSymbols
    302: static bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
    315: static bool IsSortedForXref(const CxxScoped* item1, const CxxScoped* item2)
    454: void CxxSymbols::EraseClass(const Class* cls)
    461: void CxxSymbols::EraseData(const Data* data)
    468: void CxxSymbols::EraseEnum(const Enum* item)
    475: void CxxSymbols::EraseEtor(const Enumerator* etor)
    482: void CxxSymbols::EraseForw(const Forward* forw)
    489: void CxxSymbols::EraseFriend(const Friend* frnd)
    496: void CxxSymbols::EraseFunc(const Function* func)
    503: void CxxSymbols::EraseMacro(const Macro* macro)
    510: void CxxSymbols::EraseSpace(const Namespace* space)
    517: void CxxSymbols::EraseTerm(const Terminal* term)
    524: void CxxSymbols::EraseType(const Typedef* type)
    861: void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
    868: void CxxSymbols::InsertClass(Class* cls)
    875: void CxxSymbols::InsertData(Data* data)
    882: void CxxSymbols::InsertEnum(Enum* item)
    889: void CxxSymbols::InsertEtor(Enumerator* etor)
    896: void CxxSymbols::InsertForw(Forward* forw)
    903: void CxxSymbols::InsertFriend(Friend* frnd)
    910: void CxxSymbols::InsertFunc(Function* func)
    917: void CxxSymbols::InsertMacro(Macro* macro)
    924: void CxxSymbols::InsertSpace(Namespace* space)
    931: void CxxSymbols::InsertTerm(Terminal* term)
    938: void CxxSymbols::InsertType(Typedef* type)
* W145 Auto variable copies an object
    975:    for(auto i = range.first; i != range.second; ++i)
ct/CxxSymbols.h
* W090 Function could be const
    152:    void InsertClass(Class* cls);
    153:    void InsertData(Data* data);
    154:    void InsertEtor(Enumerator* etor);
    155:    void InsertEnum(Enum* item);
    156:    void InsertForw(Forward* forw);
    157:    void InsertFriend(Friend* frnd);
    158:    void InsertFunc(Function* func);
    159:    void InsertMacro(Macro* macro);
    160:    void InsertSpace(Namespace* space);
    161:    void InsertTerm(Terminal* term);
    162:    void InsertType(Typedef* type);
    166:    void EraseClass(const Class* cls);
    167:    void EraseData(const Data* data);
    168:    void EraseEtor(const Enumerator* etor);
    169:    void EraseEnum(const Enum* item);
    170:    void EraseForw(const Forward* forw);
    171:    void EraseFriend(const Friend* frnd);
    172:    void EraseFunc(const Function* func);
    173:    void EraseMacro(const Macro* macro);
    174:    void EraseSpace(const Namespace* space);
    175:    void EraseTerm(const Terminal* term);
    176:    void EraseType(const Typedef* type);
* W106 Function does not invoke Debug::ft
    258: template<typename T> void EraseSymbol(const CxxScoped* item,
    278: template<typename T> void ListSymbols(const std::string& name,
  W110 Override of Base.Display not found
    97: class CxxSymbols: public NodeBase::Base
* W145 Auto variable copies an object
    264:    for(auto i = range.first; i != range.second; ++i)
    285:    for(auto i = range.first; i != range.second; ++i)
ct/CxxToken.cpp
  W007 Cast down the inheritance hierarchy
    948:    auto oper = static_cast<Operation*>(item.get());
    974:          auto ante = static_cast<Operation*>(prev.get());
    1033:       auto oper = static_cast<Operation*>(item.get());
    1066:    auto oper = static_cast<Operation*>(prev.get());
    1093:    auto oper = static_cast<Operation*>(item.get());
    1151:    auto oper = static_cast<Operation*>(item.get());
    1174:       auto ante = static_cast<Operation*>(prev.get());
    1335:    Context::PushOp(static_cast<Operation*>(StartOfExpr.get()));
    1883:       inClass = static_cast<Class*>(inRoot);
    1888:       outClass = static_cast<Class*>(outRoot);
    1944:    auto call = static_cast<Operation*>(args_.front().get());
    2343:       func = static_cast<Function*>(proc.item_);
    2358:       auto cls = static_cast<Class*>(proc.item_);
    2401:       auto data = static_cast<Data*>(proc.item_);
    2405:          func = static_cast<Function*>(root);
    2479:    auto cls = static_cast<Class*>(arg.item_->Root());
    2517:       auto newCall = static_cast<Operation*>(args_.front().get());
    2538:    auto cls = static_cast<Class*>(spec.item_->Root());
    2559:       auto ctorCall = static_cast<Operation*>(args_[2].get());
    2583:       cls = static_cast<Class*>(root);
    2782:       area = static_cast<Class*>(targ);
    3153:    auto cls = static_cast<Class*>(root);
    3220:          mem = static_cast<Function*>(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    778:       const_cast<CxxToken*>(this) : nullptr);
    823:    CxxToken* prev = const_cast<CxxToken*>(this);
  W082 Adjacent arguments have the same type
    47: static bool GetSpanFailure(size_t& begin, size_t& left, size_t& end)
* W106 Function does not invoke Debug::ft
    59: bool IsSortedByFilePos(const CxxToken* item1, const CxxToken* item2)
    90: bool IsSortedByPos(const CxxToken* item1, const CxxToken* item2)
    700: CxxScope* CxxToken::GetTemplateInstance() const
    709: bool CxxToken::IsInTemplateInstance() const
    716: bool CxxToken::IsPointer(bool arrays) const
    908: bool CxxToken::VerifyReferents() const
    1381: Numeric FloatLiteral::GetNumeric() const
    1440: Numeric IntLiteral::BaseNumeric() const
    1586: CxxToken* Literal::AutoType() const
    1618: CxxToken* Literal::RootType() const
    1634: Cxx::ItemType Literal::Type() const
* W117 Line can merge with the next line and be under the length limit
    2803:    auto sName = (del ?
    2813:          auto vName = (del ?
  W119 Argument passed by value is modified
    729/2:    const CxxToken* item, word offset, const string& info) const
ct/CxxToken.h
  W008 Cast removes const qualification
    518:    virtual CxxToken* RootType() const { return const_cast<CxxToken*>(this); }
* W042 Member could be private
    505:    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
* W043 Member could be protected
    479:    std::string strLocation() const;
  W075 Virtual function is public
    71:    virtual void Delete();
    75:    virtual void ItemDeleted(const CxxScoped* item) const { }
    79:    virtual void SetLoc(CodeFile* file, size_t pos) const;
    88:    virtual void SetContext(size_t pos);
    98:    virtual void CopyContext(const CxxToken* that, bool internal);
    104:    virtual CxxToken* Clone() const;
    109:    virtual StackArg ResultType() const;
    137:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    141:    virtual void SetScope(CxxScope* scope) { }
    146:    virtual CxxScope* GetScope() const { return nullptr; }
    152:    virtual bool IsForward() const { return false; }
    156:    virtual QualName* GetQualName() const { return nullptr; }
    162:    virtual std::string TypeString(bool arg) const;
    166:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    172:    virtual Class* DirectClass() const;
    176:    virtual bool IsConst() const { return false; }
    180:    virtual bool IsVolatile() const { return false; }
    184:    virtual bool IsConstPtr() const { return false; }
    188:    virtual bool IsVolatilePtr() const { return false; }
    192:    virtual bool IsConstPtr(size_t n) const { return false; }
    196:    virtual bool IsVolatilePtr(size_t n) const { return false; }
    204:    virtual bool IsStatic() const { return true; }
    208:    virtual bool IsExtern() const { return false; }
    212:    virtual void SetAccess(Cxx::Access access) { }
    216:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    221:    virtual bool IsAuto() const { return false; }
    226:    virtual bool IsIndirect(bool arrays) const { return false; }
    230:    virtual void Creating() { }
    235:    virtual void Instantiate() { }
    239:    virtual bool IsInitializing() const { return false; }
    244:    virtual CxxToken* AutoType() const { return nullptr; }
    249:    virtual Namespace* GetSpace() const { return nullptr; }
    254:    virtual CxxArea* GetArea() const { return nullptr; }
    259:    virtual Class* GetClass() const { return nullptr; }
    264:    virtual CxxScope* GetMate() const { return nullptr; }
    269:    virtual Class* Declarer() const { return GetClass(); }
    273:    virtual CxxScope* GetTemplate() const { return nullptr; }
    277:    virtual const TemplateArgPtrVector* Args() const { return nullptr; }
    283:    virtual TypeName* GetTemplatedName() const;
    287:    virtual CxxScope* GetTemplateInstance() const;
    296:    virtual CxxScoped* FindTemplateAnalog(const CxxToken* item) const;
    301:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    306:    virtual void GetConvertibleTypes(StackArgVector& types, bool expl) { }
    310:    virtual CxxScoped* Referent() const { return nullptr; }
    315:    virtual bool VerifyReferents() const;
    323:    virtual bool EnterScope() { return true; }
    328:    virtual void EnterBlock();
    333:    virtual void ExitBlock() const { }
    339:    virtual bool AppendUnary() { return false; }
    343:    virtual CxxToken* Back() { return this; }
    348:    virtual bool WasRead() { return false; }
    360:    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
    365:    virtual bool SetNonConst() { return true; }
    370:    virtual void WasMutated(const StackArg* arg) { }
    376:    virtual void RecordUsage() { }
    380:    virtual void UpdateXref(bool insert) { }
    385:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) { }
    402:    virtual CxxToken* PosToItem(size_t pos) const;
    407:    virtual bool LocateItem(const CxxToken* item, size_t& n)
    413:    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
    418:    virtual void Check() const { }
    422:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    426:    virtual CxxTokenSet* Xref() const { return nullptr; }
    430:    virtual bool InLine() const { return true; }
    435:    virtual void Print
    459:    virtual bool IsPOD() const { return GetNumeric().IsPOD(); }
    474:    virtual void UpdatePos(EditorAction action,
    701:    virtual void PushBack(uint32_t c) = 0;
  W082 Adjacent arguments have the same type
    129:    bool GetSpan3(size_t& begin, size_t& left, size_t& end) const;
    360:    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
    474:    virtual void UpdatePos(EditorAction action,
    505:    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
    874:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
ct/CxxVector.h
* W106 Function does not invoke Debug::ft
    47: template<typename T> size_t IndexOf(const std::vector<T>& vec, const T& item)
    61: template<class T> void SortAndDisplayItems
    90: template<class T> void SortAndDisplayItemPtrs
    124: template<class T> void EraseItem(std::vector<T*>& vec, const T* item)
    148: template<class T> void DeleteItemPtr
ct/Editor.cpp
  W005 Functional cast
    1077:       if(int(begin) < info->depth) begin = info->depth;
    2143:    *Cli_->obuf << ": " << Warning(log.warning_);
  W007 Cast down the inheritance hierarchy
    246:       auto func = static_cast<const Function*>(item);
    686:    return static_cast<Namespace*>(scope);
    728:    auto defn = static_cast<Data*>(data->GetMate());
    815:    auto defn = static_cast<Function*>(func->GetMate());
    843:    auto func = static_cast<const Function*>(item);
    1136:    auto oper = static_cast<const Operation*>(log.item_);
    1450:    static_cast<Class*>(log.item_)->SetClassTag(Cxx::StructType);
    1499:          static_cast<Forward*>(*f)->SetClassTag(to);
    1541:    auto decl = static_cast<CxxScope*>(log.item_);
    1677:    auto item = static_cast<CxxScope*>(ParseFileItem(pos, space));
    1692:          auto tname = static_cast<const TypeName*>(*r);
    1709:       UpdateDebugFt(static_cast<Function*>(item));
    1745:    auto func = static_cast<const Function*>(log.item_);
    1815:    static_cast<Class*>(log.item_)->SetClassTag(Cxx::ClassType);
    2074:    auto decl = static_cast<Function*>(log.item_);
    2479:    static_cast<Function*>(log.item_)->SetExplicit(false);
    2575:    static_cast<ClassData*>(log.item_)->SetMutable(false);
    2611:    static_cast<Function*>(log.item_)->SetOverride(false);
    2632:    auto qname = static_cast<const QualName*>(log.item_);
    2696:    static_cast<Function*>(log.item_)->SetVirtual(false);
    2766:       usages.directs.erase(static_cast<CxxNamed*>(*i));
    2767:       usages.indirects.erase(static_cast<CxxNamed*>(*i));
    2855:          auto data = static_cast<const Data*>(*i);
    2869:             auto func = static_cast<const Function*>(*i);
    2883:             auto data = static_cast<const Data*>(*i);
    3033:    return FindSigEnd(static_cast<const Function*>(log.item_));
    3354:    auto data = static_cast<Data*>(log.item_);
    3421:    auto func = static_cast<Function*>(log.item_);
    3523:    auto data = static_cast<Data*>(log.item_);
    4145:    auto data = static_cast<Data*>(aref);
    4152:    ReplaceImpl(static_cast<Function*>(log.item_));
    4303:    auto func = static_cast<Function*>(log.item_);
    4654:    auto cls = static_cast<Class*>(log.item_);
    4955:    auto cls = static_cast<Class*>(item);
    5385:       ns = static_cast<Namespace*>(ref)->OuterSpace();
    5461:    auto func = static_cast<const Function*>(log.item_);
    5542:    auto func = static_cast<const Function*>(log.item_);
    5552:       auto slit = static_cast<StrLiteral*>(arg);
    5566:    auto data = static_cast<SpaceData*>(arg->Referent());
    5573:    auto slit = static_cast<StrLiteral*>(file_->PosToItem(lpos));
    5600:    static_cast<Ifndef*>(log.item_)->ChangeName(guard);
    5665:    auto type = static_cast<TypeName*>(log.item_);
    6232:    static_cast<Function*>(log.item_)->SetExplicit(true);
    6280:    static_cast<Function*>(log.item_)->SetOverride(true);
    6384:    static_cast<Function*>(log.item_)->SetVirtual(true);
    6672:       auto items = GetItemsForDefn(static_cast<const CxxScope*>(next));
  W082 Adjacent arguments have the same type
    575: static void DebugFtNames(const Function* func, string& flit, string& fvar)
    864: static bool ItemIsUsedBetween(const CxxToken* item, size_t begin, size_t end)
    976: static void Rename(string& code, const string& oldName, const string& newName)
* W106 Function does not invoke Debug::ft
    1972: size_t Editor::CommitCount() { return Commits_; }
    4935: static FunctionRole WarningToRole(Warning log)
  W119 Argument passed by value is modified
    1915/1: bool Editor::CodeFollowsImmediately(size_t pos) const
    1930/1: bool Editor::CommentFollows(size_t pos) const
    2780/4:    size_t pos, size_t min, size_t max, ItemDefnAttrs& attrs) const
    4454/1: word Editor::InsertForward(size_t pos,
    4622/1:    (size_t pos, const string& nspace, const string& forward)
    5248/2: CxxToken* Editor::ParseFileItem(size_t pos, Namespace* ns) const
    5430/1: void Editor::Rename(size_t pos, const string& oldName, const string& newName)
    6662/3:    const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const
* W145 Auto variable copies an object
    739:    auto expl = Expl_;
ct/Editor.h
* W020 Using statement in header
    47: using namespace NodeBase;
    48: using std::string;
  W026 Unused argument
    171/1:    word ChangeCast(const CodeWarning& log);
    172/1:    word ChangeClassToNamespace(const CodeWarning& log);
    175/1:    word ChangeOperator(const CodeWarning& log);
    177/1:    word DemoteFunction(const CodeWarning& log);
    181/1:    word EraseCast(const CodeWarning& log);
    182/1:    word EraseClass(const CodeWarning& log);
    195/1:    word InsertCopyCtorCall(const CodeWarning& log);
    196/1:    word InsertDataInit(const CodeWarning& log);
    198/1:    word InsertDisplay(const CodeWarning& log);
    199/1:    word InsertEnumName(const CodeWarning& log);
    200/1:    word InsertFallthrough(const CodeWarning& log);
    205/1:    word InsertMemberInit(const CodeWarning& log);
    207/1:    word InsertPODCtor(const CodeWarning& log);
    208/1:    word InsertPureVirtual(const CodeWarning& log);
    210/1:    word MoveDefine(const CodeWarning& log);
    211/1:    word MoveMemberInit(const CodeWarning& log);
    215/1:    word ReplaceHeading(const CodeWarning& log);
    216/1:    word ReplaceName(const CodeWarning& log);
    421/1:    word FixInvokers(const CodeWarning& log);
    430/1:    word ChangeFunctionToMember(const Function* func, word offset);
    430/2:    word ChangeFunctionToMember(const Function* func, word offset);
    431/1:    word ChangeInvokerToMember(const Function* func, word offset);
    431/2:    word ChangeInvokerToMember(const Function* func, word offset);
    432/1:    word EraseArgument(const Function* func, word offset);
    432/2:    word EraseArgument(const Function* func, word offset);
    433/1:    word EraseDefaultValue(const Function* func, word offset);
    433/2:    word EraseDefaultValue(const Function* func, word offset);
    434/1:    word EraseParameter(const Function* func, word offset);
    434/2:    word EraseParameter(const Function* func, word offset);
    436/1:    word InsertArgument(const Function* func, word offset);
    436/2:    word InsertArgument(const Function* func, word offset);
    437/1:    word SplitVirtualFunction(const Function* func);
* W032 Unused function
    425:    word FixInvoker(const Function* func, const CodeWarning& log);
  W082 Adjacent arguments have the same type
    106:    void Rename(size_t pos, const string& oldName, const string& newName);
    264:    bool AdjustHorizontally(size_t pos, size_t len, const string& spacing);
    300:    word InsertForward(size_t pos, const string& nspace, const string& forward);
    305:    word InsertNamespaceForward(size_t pos,
    322:    static void ChangeForwards
    370:    void FindFreeItemPos(const Namespace* space, const string& name,
    380:    CxxItemVector FindDeclRange
    509:    void UpdateItemDefnAttrs(const CxxToken* prev,
    515:    word UpdateItemDefnLoc(const CxxToken* prev,
    570:    bool GetSpan(const CxxToken* item, size_t& begin, size_t& end);
    598:    size_t Replace(size_t pos, size_t count, const string& code);
    645:    void UpdatePos(EditorAction action,
* W088 Argument could be const
    510/4:       const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const;
* W092 Function could be free
    171:    word ChangeCast(const CodeWarning& log); // Editor.cpp
    172:    word ChangeClassToNamespace(const CodeWarning& log); // Editor.cpp
    175:    word ChangeOperator(const CodeWarning& log); // Editor.cpp
    177:    word DemoteFunction(const CodeWarning& log); // Editor.cpp
    181:    word EraseCast(const CodeWarning& log); // Editor.cpp
    182:    word EraseClass(const CodeWarning& log); // Editor.cpp
    195:    word InsertCopyCtorCall(const CodeWarning& log); // Editor.cpp
    196:    word InsertDataInit(const CodeWarning& log); // Editor.cpp
    198:    word InsertDisplay(const CodeWarning& log); // Editor.cpp
    199:    word InsertEnumName(const CodeWarning& log); // Editor.cpp
    200:    word InsertFallthrough(const CodeWarning& log); // Editor.cpp
    205:    word InsertMemberInit(const CodeWarning& log); // Editor.cpp
    207:    word InsertPODCtor(const CodeWarning& log); // Editor.cpp
    208:    word InsertPureVirtual(const CodeWarning& log); // Editor.cpp
    210:    word MoveDefine(const CodeWarning& log); // Editor.cpp
    211:    word MoveMemberInit(const CodeWarning& log); // Editor.cpp
    215:    word ReplaceHeading(const CodeWarning& log); // Editor.cpp
    216:    word ReplaceName(const CodeWarning& log); // Editor.cpp
    356:    void QualifyClassItems(CxxScope* decl, string& code) const; // Editor.cpp
    421:    word FixInvokers(const CodeWarning& log); // Editor.cpp
    430:    word ChangeFunctionToMember(const Function* func, word offset); // Editor.cpp
    431:    word ChangeInvokerToMember(const Function* func, word offset); // Editor.cpp
    432:    word EraseArgument(const Function* func, word offset); // Editor.cpp
    433:    word EraseDefaultValue(const Function* func, word offset); // Editor.cpp
    434:    word EraseParameter(const Function* func, word offset); // Editor.cpp
    436:    word InsertArgument(const Function* func, word offset); // Editor.cpp
    437:    word SplitVirtualFunction(const Function* func); // Editor.cpp
ct/Interpreter.cpp
  W005 Functional cast
    147:          type = LibTokenType(i);
* W099 Line contains adjacent spaces
    90:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    91:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    92:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    93:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    94:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    95:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    96:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    97:    OperatorInfo("d",  1, DIR_SET,  ANY_SET,  ERR_SET),   // OpDirectories
    98:    OperatorInfo("f",  1, FILE_SET, ANY_SET,  ERR_SET),   // OpFiles
    111:    OperatorInfo("db", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpDeclaredBy
    114:    OperatorInfo("rb", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpReferencedBy
* W106 Function does not invoke Debug::ft
    133: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    141: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  W119 Argument passed by value is modified
    488/1: LibExprErr Interpreter::ApplyOperator(bool operand)
    599/1: LibrarySet* Interpreter::Error(LibExprErr err) const
ct/Interpreter.h
  W110 Override of Base.Display not found
    48: class Interpreter : public NodeBase::Base
ct/Lexer.cpp
  W005 Functional cast
    2366:          fp *= std::pow(10.0, int(num));
    2473:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    3255:          auto def = static_cast<Define*>(item);
* W106 Function does not invoke Debug::ft
    87: static IndentRule ClassifyIndent(string& id)
    810: word Lexer::CheckDepth(size_t n) const
    860: int Lexer::CheckLineMerge(size_t n) const
    1304: size_t Lexer::CurrBegin(size_t pos) const
    1330: size_t Lexer::CurrEnd(size_t pos) const
    2156: const LineInfo* Lexer::GetLineInfo(size_t pos) const
    2165: LineInfo* Lexer::GetLineInfo(size_t pos)
    2174: size_t Lexer::GetLineNum(size_t pos) const
    2198: size_t Lexer::GetLineStart(size_t line) const
    2275: bool Lexer::GetNthLine(size_t n, string& s) const
    2788: bool Lexer::LineHasTrailingCommentAt(size_t n, size_t offset) const
    2870: size_t Lexer::LineSize(size_t pos) const
    2913: size_t Lexer::NextBegin(size_t pos) const
    3028: size_t Lexer::NextPos(size_t pos) const
    3270: size_t Lexer::PrevBegin(size_t pos) const
    3346: void Lexer::SetDepth(int8_t depth1, int8_t depth2, bool merge)
  W119 Argument passed by value is modified
    1304/1: size_t Lexer::CurrBegin(size_t pos) const
    1385/1: size_t Lexer::Find(size_t pos, const string& str) const
    1402/3: size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
    1514/2: size_t Lexer::FindFirstOf(const string& targs, size_t pos) const
    1633/1: size_t Lexer::FindLineEnd(size_t pos) const
    1674/1: size_t Lexer::FindNonBlank(size_t pos) const
    1691/1: size_t Lexer::FindWord(size_t pos, const string& id) const
    2057/2: size_t Lexer::GetHexNum(int64_t& num, size_t max)
    2080/1: bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
    2705/1: size_t Lexer::LineFind(size_t pos, const string& str) const
    2737/1: size_t Lexer::LineFindFirstOf(size_t pos, const std::string& chars) const
    2768/1: size_t Lexer::LineFindNonBlank(size_t pos) const
    2945/1: string Lexer::NextIdentifier(size_t pos) const
    2991/1: size_t Lexer::NextLineIndentation(size_t pos) const
    3006/1: string Lexer::NextOperator(size_t pos) const
    3028/1: size_t Lexer::NextPos(size_t pos) const
    3164/1: bool Lexer::NoCodeFollows(size_t pos) const
    3270/1: size_t Lexer::PrevBegin(size_t pos) const
    3301/1: size_t Lexer::Rfind(size_t pos, const std::string& str) const
    3316/1: size_t Lexer::RfindFirstOf(size_t pos, const std::string& chars) const
    3331/1: size_t Lexer::RfindNonBlank(size_t pos) const
    3402/1: size_t Lexer::SkipCharLiteral(size_t pos) const
    3445/1: size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
    3478/1: size_t Lexer::SkipTemplateSpec(size_t pos) const
ct/Lexer.h
* W032 Unused function
    457:    size_t LineFindFirstOf(size_t pos, const std::string& chars) const;
* W042 Member could be private
    160:    bool Advance();
    373:    const LineInfo* GetLineInfo(size_t pos) const;
    423:    bool LineHasTrailingCommentAt(size_t n, size_t offset) const;
    461:    size_t LineRfindFirstOf(size_t pos, const std::string& chars) const;
    537:    NodeBase::word CheckDepth(size_t n) const;
* W043 Member could be protected
    385:    size_t PrevBegin(size_t pos) const;
    397:    LineType PosToType(size_t pos) const;
    401:    bool IsBlankLine(size_t pos) const;
    405:    size_t LineSize(size_t pos) const;
    409:    bool OnSameLine(size_t pos1, size_t pos2) const;
    414:    int CompareCode(size_t pos, const std::string& str) const;
    418:    size_t FindComment(size_t pos) const;
    433:    size_t LineFindNext(size_t pos) const;
    437:    bool IsFirstNonBlank(size_t pos) const;
    441:    bool NoCodeFollows(size_t pos) const;
    447:    size_t LineFind(size_t pos, const std::string& str) const;
    451:    size_t LineRfind(size_t pos, const std::string& str) const;
    465:    size_t LineFindNonBlank(size_t pos) const;
    469:    size_t LineRfindNonBlank(size_t pos) const;
    481:    size_t FindNonBlank(size_t pos) const;
  W050 Data is not private
    573:    std::string code_;
    577:    CodeFile* file_;
* W060 Base class constructor is public
    79:    Lexer();
  W082 Adjacent arguments have the same type
    257:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
    587:    LineType CalcLineType(size_t n, bool& cont, bool& c_comment);
    665:    void SetDepth(int8_t depth1, int8_t depth2, bool merge = true);
ct/Library.cpp
  W007 Cast down the inheritance hierarchy
    679:             auto f = static_cast<const Function*>(elem);
ct/Library.h
* W020 Using statement in header
    46: using namespace NodeBase;
* W053 Data could be const
    241:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    74:    NodeBase::word Import
    108:    NodeBase::word Assign(CliThread& cli, const std::string& name,
    141:    static NodeBase::word Rename(CliThread& cli, const std::string& oldName,
* W090 Function could be const
    80:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    108:    NodeBase::word Assign(CliThread& cli, const std::string& name,
    129:    NodeBase::word Purge(const std::string& name, std::string& expl);
ct/LibraryItem.cpp
* W106 Function does not invoke Debug::ft
    34: bool IsSortedByName(const LibraryItem* item1, const LibraryItem* item2)
    78: bool LibItemSort::operator()
ct/LibraryItem.h
  W027 Unused class
    77: struct LibItemSort
  W075 Virtual function is public
    44:    virtual const std::string& Name() const;
    48:    virtual void Rename(const std::string& name);
    52:    virtual void GetDecls(CxxNamedSet& items) { }
ct/LibrarySet.cpp
* W106 Function does not invoke Debug::ft
    97: LibrarySet* LibrarySet::AffectedBy() const
    104: LibrarySet* LibrarySet::Affecters() const
    111: LibrarySet* LibrarySet::Assign(LibrarySet* that)
    128: LibrarySet* LibrarySet::CommonAffecters() const
    169: LibrarySet* LibrarySet::Create
    177: LibrarySet* LibrarySet::DeclaredBy() const
    184: LibrarySet* LibrarySet::Declarers() const
    191: LibrarySet* LibrarySet::Definitions() const
    198: LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
    205: LibrarySet* LibrarySet::Directories() const
    230: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    237: LibrarySet* LibrarySet::Files() const
    244: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    269: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    288: LibrarySet* LibrarySet::Implements() const
    295: LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
    302: bool LibrarySet::IsReadOnly() const
    309: bool LibrarySet::IsTemporary() const
    350: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    357: LibrarySet* LibrarySet::NeededBy() const
    364: LibrarySet* LibrarySet::Needers() const
    381: word LibrarySet::NotImplemented(string& expl) const
    393: LibrarySet* LibrarySet::OpError(c_string op) const
    421: LibrarySet* LibrarySet::ReferencedBy() const
    428: LibrarySet* LibrarySet::Referencers() const
    525: LibrarySet* LibrarySet::Union(const LibrarySet* that) const
    532: LibrarySet* LibrarySet::UsedBy(bool self) const
    539: LibrarySet* LibrarySet::Users(bool self) const
ct/LibrarySet.h
  W026 Unused argument
    116/1:    virtual NodeBase::word LineTypes(NodeBase::CliThread& cli,
* W065 Base class virtual destructor is not public
    202:    virtual ~LibrarySet();
  W075 Virtual function is public
    80:    virtual LibSetType GetType() const;
    86:    virtual NodeBase::word Check(NodeBase::CliThread& cli,
    93:    virtual NodeBase::word Count(std::string& result) const;
    99:    virtual NodeBase::word Countlines(std::string& result) const;
    105:    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
    111:    virtual NodeBase::word Format(std::string& expl) const;
    116:    virtual NodeBase::word LineTypes(NodeBase::CliThread& cli,
    125:    virtual NodeBase::word Parse
    132:    virtual NodeBase::word Scan(std::ostream& stream,
    139:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    143:    virtual BuildOrder SortInBuildOrder() const;
    148:    virtual LibrarySet* Assign(LibrarySet* that);
    149:    virtual LibrarySet* Intersection(const LibrarySet* that) const;
    150:    virtual LibrarySet* Difference(const LibrarySet* that) const;
    151:    virtual LibrarySet* Union(const LibrarySet* that) const;
    152:    virtual LibrarySet* Directories() const;
    153:    virtual LibrarySet* Files() const;
    154:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    155:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    156:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    157:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    158:    virtual LibrarySet* Implements() const;
    159:    virtual LibrarySet* UsedBy(bool self) const;
    160:    virtual LibrarySet* Users(bool self) const;
    161:    virtual LibrarySet* AffectedBy() const;
    162:    virtual LibrarySet* Affecters() const;
    163:    virtual LibrarySet* CommonAffecters() const;
    164:    virtual LibrarySet* NeededBy() const;
    165:    virtual LibrarySet* Needers() const;
    166:    virtual LibrarySet* DeclaredBy() const;
    167:    virtual LibrarySet* Declarers() const;
    168:    virtual LibrarySet* Definitions() const;
    169:    virtual LibrarySet* ReferencedBy() const;
    170:    virtual LibrarySet* Referencers() const;
  W120 Function returns non-const reference or pointer to member data
    76:    LibItemSet& Items() { return items_; }
ct/LibraryTypes.h
* W053 Data could be const
    64:    size_t level;    // the file's level in the build
* W054 Data could be const pointer
    63:    CodeFile* file;  // the file
ct/LibraryVarSet.h
* W042 Member could be private
    53:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    53:    void to_str(stringVector& strings, bool verbose) const override;
ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    455:    auto op = static_cast<Operation*>(token.get());
    491:    auto op = static_cast<Operation*>(call.get());
    796:    auto brace = static_cast<BraceInit*>(token.get());
    863:    auto cast = static_cast<Operation*>(token.get());
    900:    auto c = static_cast<Catch*>(statement.get());
    1029:    static_cast<ClassData*>(data.get())->SetMutable(mute);
    1030:    static_cast<ClassData*>(data.get())->SetWidth(width);
    1193:    auto cond = static_cast<Operation*>(token.get());
    1466:    auto cast = static_cast<Operation*>(token.get());
    1627:    auto op = static_cast<Operation*>(token.get());
    1651:    auto delOp = static_cast<Operation*>(token.get());
    1677:    auto d = static_cast<Do*>(statement.get());
    1875:    auto f = static_cast<For*>(statement.get());
    1977:       static_cast<FuncData*>(data.get())->SetExpression(expr);
    1996:          typeSpec.reset(static_cast<TypeSpec*>(prev->GetTypeSpec()->Clone()));
    2029:          curr = static_cast<FuncData*>(data.get());
    2306:             static_cast<If*>(first)->SetElseIf();
    2312:    auto i = static_cast<If*>(statement.get());
    2474:    auto inner = static_cast<Namespace*>(outer)->EnsureNamespace(name);
    2516:    auto newOp = static_cast<Operation*>(token.get());
    2535:    static_cast<Operation*>(token.get())->SetNew();
    2587:    auto op = static_cast<Operation*>(token.get());
    3001:    static_cast<Return*>(statement.get())->AddExpr(expr);
    3046:    auto op = static_cast<Operation*>(token.get());
    3321:    auto op = static_cast<Operation*>(token.get());
    3345:    auto s = static_cast<Switch*>(statement.get());
    3459:    auto op = static_cast<Operation*>(token.get());
    3491:    auto t = static_cast<Try*>(statement.get());
    3549:    auto op = static_cast<Operation*>(token.get());
    3841:    auto w = static_cast<While*>(statement.get());
    4200:          auto op = static_cast<Operation*>(token)->Op();
  W008 Cast removes const qualification
    4461:       func->SetTemplate(const_cast<Function*>(tmplt));
  W082 Adjacent arguments have the same type
    71: static bool SetCompoundType
* W106 Function does not invoke Debug::ft
    301: size_t Parser::CurrPos() const
  W119 Argument passed by value is modified
    1108/2: bool Parser::GetCompoundType(const QualName* name, Cxx::Type type)
    2389/1: size_t Parser::GetLineNum(size_t pos) const
    4253/2: void Parser::Log(Warning warning, size_t pos) const
ct/Parser.h
  W082 Adjacent arguments have the same type
    486:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
* W092 Function could be free
    606:    static bool Backup(size_t cause); // Parser.cpp
ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion
dip/BaseBot.cpp
  W006 reinterpret_cast
    214:    auto em = reinterpret_cast<EM_Message*>(buff->PayloadPtr());
    513:    const auto& dm = reinterpret_cast<const DM_Message&>(message);
    514:    auto tokens = reinterpret_cast<const Token*>(&dm.tokens);
    640:    const auto& em = reinterpret_cast<const EM_Message&>(message);
    1293:       const auto& rm = reinterpret_cast<const RM_Message&>(message);
    2082:    auto bm = reinterpret_cast<DipMessage*>(buff->PayloadPtr());
    2154:    auto im = reinterpret_cast<IM_Message*>(buff->PayloadPtr());
    2295:    auto dm = reinterpret_cast<DM_Message*>(buff->PayloadPtr());
    2299:    message.get_tokens(reinterpret_cast<Token*>(&dm->tokens), count);
* W106 Function does not invoke Debug::ft
    431: BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
    438: BaseBot* BaseBot::instance()
* W117 Line can merge with the next line and be under the length limit
    1707:          (press->message == contents))
dip/BaseBot.h
* W020 Using statement in header
    39: using namespace NodeBase;
* W030 Unused enumerator
    61:       FIRST_BOT_SPECIFIC_ERROR
  W075 Virtual function is public
    90:    virtual bool process_command_line_parameter(char token, std::string& value);
    96:    virtual std::string report_command_line_parameters();
  W082 Adjacent arguments have the same type
    143:    void send_press_to_server(const TokenMessage& press_to,
    272:    virtual void process_not_ccd_message(const TokenMessage& message,
    501:    virtual void report_failed_press
* W090 Function could be const
    205:    virtual void process_ccd_message
    211:    virtual void process_drw_message(const TokenMessage& message);
    242:    virtual void process_out_message(const TokenMessage& message);
    250:    virtual void process_smr_message(const TokenMessage& message);
    267:    virtual void process_adm_message(const TokenMessage& message);
    272:    virtual void process_not_ccd_message(const TokenMessage& message,
    466:    virtual void process_hlo_message(const TokenMessage& message);
    471:    virtual void process_map_message(const TokenMessage& message);
    475:    virtual void process_mdf_message(const TokenMessage& message);
    483:    virtual void process_sco_message(const TokenMessage& message);
    487:    virtual void process_now_message(const TokenMessage& message);
    491:    virtual void process_slo_message(const TokenMessage& message);
* W092 Function could be free
    178:    void cancel_event(BotEvent event); // BaseBot.cpp
    523:    static void report_ccd(const Token& power, bool disorder); // BaseBot.cpp
    543:    static void report_out(const Token& power); // BaseBot.cpp
    555:    void report_exit(c_string reason); // BaseBot.cpp
    715:    static bool send_buff(DipIpBuffer& buff); // BaseBot.cpp
dip/BotThread.cpp
  W006 reinterpret_cast
    187:    auto msg = reinterpret_cast<BM_Message*>(buff->PayloadPtr());
    216:    auto message = reinterpret_cast<const DipMessage*>(ipb->HeaderPtr());
  W007 Cast down the inheritance hierarchy
    203:    DipIpBufferPtr ipb(static_cast<DipIpBuffer*>(msg));
dip/BotThread.h
* W020 Using statement in header
    38: using namespace NodeBase;
* W053 Data could be const
    112:       BotEvent event;         // event
* W055 Data need not be mutable
    113:       mutable uint32_t secs;  // delay
dip/BotTrace.cpp
  W006 reinterpret_cast
    100:       auto message = reinterpret_cast<const DipMessage*>(buff_->HeaderPtr());
    129:    return reinterpret_cast<DipHeader*>(buff_->HeaderPtr());
* W022 Add using statement
    0:  // namespace NodeBase
dip/BotTrace.h
* W020 Using statement in header
    35: using namespace NodeBase;
* W032 Unused function
    72:    DipHeader* Header() const;
dip/BotTracer.h
* W020 Using statement in header
    30: using namespace NodeBase;
dip/ConvoySubversion.cpp
* W106 Function does not invoke Debug::ft
    29: void ConvoySubversion::clear()  // <b>
    37: void ConvoySubversion::decrement()
dip/DipModule.h
* W020 Using statement in header
    30: using namespace NodeBase;
  W027 Unused class
    38: class DipModule : public Module
dip/DipProtocol.cpp
  W006 reinterpret_cast
    62:       reinterpret_cast<const IM_Message*>(this)->Display(stream);
    65:       reinterpret_cast<const RM_Message*>(this)->Display(stream);
    68:       reinterpret_cast<const DM_Message*>(this)->Display(stream);
    71:       reinterpret_cast<const FM_Message*>(this)->Display(stream);
    74:       reinterpret_cast<const EM_Message*>(this)->Display(stream);
    77:       reinterpret_cast<const BM_Message*>(this)->Display(stream);
    198:       auto header = reinterpret_cast<const DipHeader*>(source);
    208:       auto header = reinterpret_cast<const DipHeader*>(payload);
    227:    auto msg = reinterpret_cast<DipHeader*>(buff.PayloadPtr());
    233:       auto im = reinterpret_cast<IM_Message*>(src);
    241:       auto dm = reinterpret_cast<DM_Message*>(src);
    252:       auto em = reinterpret_cast<EM_Message*>(src);
    279:    auto msg = reinterpret_cast<DipHeader*>(buff.PayloadPtr());
    288:       auto rm = reinterpret_cast<RM_Message*>(msg);
    299:       auto dm = reinterpret_cast<DM_Message*>(msg);
    310:       auto em = reinterpret_cast<EM_Message*>(msg);
    331:    auto header = reinterpret_cast<const DipHeader*>(payload);
    356:    auto msg = reinterpret_cast<BM_Message*>(buff->PayloadPtr());
  W007 Cast down the inheritance hierarchy
    274:    auto dipbuff = static_cast<DipIpBuffer*>(&buff);
    327:    DipIpBufferPtr dipbuff(static_cast<DipIpBuffer*>(buff.release()));
  W009 Pointer arithmetic
    211:       dest = payload + received;
dip/DipProtocol.h
* W020 Using statement in header
    39: using namespace NodeBase;
    40: using namespace NetworkBase;
* W028 Unused data
    162: constexpr ProtocolError IM_TIMEOUT = 0x01;
    163: constexpr ProtocolError IM_EXPECTED = 0x02;
    164: constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
    165: constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
    166: constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
    167: constexpr ProtocolError IM_REPEATED = 0x06;
    168: constexpr ProtocolError IM_FROM_SERVER = 0x07;
    169: constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
    170: constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
    171: constexpr ProtocolError DM_BEFORE_RM = 0x0A;
    172: constexpr ProtocolError RM_EXPECTED = 0x0B;
    173: constexpr ProtocolError RM_REPEATED = 0x0C;
    174: constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
    175: constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
    197: constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
* W053 Data could be const
    144:    DipHeader header;  // no parameters (length = 0)
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
dip/DipTypes.h
* W020 Using statement in header
    26: using namespace NetworkBase;
    27: using namespace NodeBase;
dip/MapAndUnits.cpp
* W106 Function does not invoke Debug::ft
    281: bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
    299: bool MapAndUnits::can_move_to_province
    561: TokenMessage MapAndUnits::encode_location(const Location& location) const
    838: TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
    1145: const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
    1384: MapAndUnits* MapAndUnits::instance()
    2451: Token MapAndUnits::province_token(ProvinceId province) const
    2570: bool MapAndUnits::set_move_by_single_step_convoy_order
dip/MapAndUnits.h
* W020 Using statement in header
    31: using namespace NodeBase;
* W048 Data is write-only
    117:    bool game_started;                // set when the game has begun
    143:    word our_number_of_disbands;    // disbands required (negative for builds)
  W082 Adjacent arguments have the same type
    183:    bool set_support_to_move_order
    185:    bool set_convoy_order(ProvinceId unit, ProvinceId client, ProvinceId dest);
    186:    bool set_move_by_convoy_order(ProvinceId unit,
    188:    bool set_move_by_single_step_convoy_order
    267:    Location find_result_unit_initial_location(ProvinceId province,
    402:    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
* W091 Function could be static
    255:    std::string display_retreat_result(const UnitOrder& unit) const;
* W092 Function could be free
    162:    static void delete_clone(MapAndUnits*& clone); // MapAndUnits.cpp
dip/StartupParameters.h
* W020 Using statement in header
    21: using namespace NetworkBase;
dip/Token.cpp
* W106 Function does not invoke Debug::ft
    32: Token::Token(const category_t cat, const subtoken_t sub)
    40: Token& Token::operator=(const Token& that)
    48: int Token::get_number() const
    57: bool Token::is_number() const
    64: bool Token::is_power() const
    71: bool Token::is_province() const
    118: Token::SeasonType Token::order_season() const
    129: PowerId Token::power_id() const
    137: ProvinceId Token::province_id() const
    260: Token power_token(PowerId power)
    273: Token province_token(ProvinceId province)
  W119 Argument passed by value is modified
    147/1: bool Token::set_number(int number)
dip/Token.h
* W020 Using statement in header
    27: using namespace NodeBase;
* W028 Unused data
    208: constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
    209: constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
    210: constexpr category_t CATEGORY_BRACKET = 0x40;
    213: constexpr category_t CATEGORY_ORDER = 0x43;
    215: constexpr category_t CATEGORY_RESULT = 0x45;
    218: constexpr category_t CATEGORY_COMMAND = 0x48;
    219: constexpr category_t CATEGORY_PARAMETER = 0x49;
    220: constexpr category_t CATEGORY_PRESS = 0x4A;
* W042 Member could be private
    95:    bool is_number() const;
dip/TokenMessage.cpp
* W106 Function does not invoke Debug::ft
    36: static void copy_tokens(Token* dest, const Token* source, int num)
    161: Token TokenMessage::at(size_t index) const
    168: void TokenMessage::clear()
    295: Token TokenMessage::front() const
    354: Token TokenMessage::operator[](size_t index) const
dip/TokenMessage.h
* W032 Unused function
    48:    explicit TokenMessage(const Token* stream);
    141:    void set_as_ascii(const std::string& text);
* W042 Member could be private
    123:    size_t set_from(const Token* stream);
    128:    size_t set_from(const Token* stream, size_t length);
dip/TokenTextMap.cpp
* W106 Function does not invoke Debug::ft
    328: TokenTextMap* TokenTextMap::instance()
dip/WinterOrders.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    37: size_t WinterOrders::get_number_of_results() const
dip/WinterOrders.h
* W032 Unused function
    52:    size_t get_number_of_results() const;
mb/Circuit.cpp
  W006 reinterpret_cast
    58:    auto fake = reinterpret_cast<const Circuit*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
mb/Circuit.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
* W053 Data could be const
    93:    RegCell port_;
  W075 Virtual function is public
    72:    virtual std::string Name() const = 0;
    76:    virtual bool Supports(ProtocolId prid) const { return false; }
mb/MbModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
mb/MbModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
mb/MbPools.cpp
  W007 Cast down the inheritance hierarchy
    77:          auto mep = static_cast<const MediaEndpt*>(*obj);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
mb/MbPools.h
* W020 Using statement in header
    28: using namespace NodeBase;
mb/MediaEndpt.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    131: bool MediaEndpt::Passes(uint32_t selector) const
mb/MediaEndpt.h
* W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    113/1:    virtual void ProcessIcMsg(Message& msg);
* W032 Unused function
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    96:    explicit MediaEndpt(MediaPsm& psm);
* W042 Member could be private
    108:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
* W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    108:    virtual void EndOfTransaction();
    113:    virtual void ProcessIcMsg(Message& msg);
mb/MediaFailureEvent.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
mb/MediaFailureEvent.h
* W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W027 Unused class
    42: class MediaFailureEvent : public Event
* W032 Unused function
    48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    56:    MediaEndpt* Mep() const { return mep_; }
mb/MediaParameter.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast<const MediaInfo*>(bytes)->Display(stream, prefix);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
mb/MediaParameter.h
* W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace SessionBase;
mb/MediaPsm.cpp
  W006 reinterpret_cast
    529:       auto cxi = reinterpret_cast<MediaInfo*>(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    228:    if(root->Sid() != TestServiceId) return static_cast<MediaSsm*>(root);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    234: MediaPsm* MediaPsm::GetOgPsm() const
mb/MediaPsm.h
* W020 Using statement in header
    37: using namespace NodeBase;
    38: using namespace SessionBase;
* W032 Unused function
    120:    MediaEndpt* Mep() const { return mep_; }
* W042 Member could be private
    132:    Tone::Id GetOgTone() const { return ogTone_; }
    170:    void SetOgPort(Switch::PortId ogport);
    193:    void PrepareOgMsgq() override;
    197:    Event* ReceiveMsg(Message& msg) override;
  W075 Virtual function is public
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
* W077 Virtual function has no overrides
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    86:       auto mpsm = static_cast<MediaPsm*>(psm);
    108:       auto mpsm = static_cast<MediaPsm*>(psm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
mb/MediaSsm.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
* W032 Unused function
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
* W077 Virtual function has no overrides
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
mb/Switch.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    85: Circuit* Switch::GetCircuit(PortId pid) const
mb/Switch.h
* W020 Using statement in header
    37: using namespace NodeBase;
* W042 Member could be private
    74:    static bool IsValidPort(PortId pid)
mb/ToneRegistry.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    77: Tone* ToneRegistry::GetTone(Tone::Id tid) const
mb/ToneRegistry.h
* W020 Using statement in header
    31: using namespace NodeBase;
mb/Tones.cpp
  W006 reinterpret_cast
    61:    auto fake = reinterpret_cast<const Tone*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
mb/Tones.h
  W005 Functional cast
    73:    Id Tid() const { return Id(tid_.GetId()); }
* W020 Using statement in header
    31: using namespace NodeBase;
* W032 Unused function
    73:    Id Tid() const { return Id(tid_.GetId()); }
  W037 Member hides inherited name
    77:    static ptrdiff_t CellDiff();
nb/Alarm.cpp
  W006 reinterpret_cast
    118:    auto fake = reinterpret_cast<const Alarm*>(&local);
* W106 Function does not invoke Debug::ft
    203: AlarmStatus Alarm::Status() const
  W110 Override of Base.Display not found
    44: struct AlarmDynamic : public Permanent
nb/Alarm.h
* W053 Data could be const
    133:    RegCell aid_;
  W082 Adjacent arguments have the same type
    64:    Alarm(c_string name, c_string expl, uint32_t delay);
* W090 Function could be const
    117:    void SetStatus(AlarmStatus status);
nb/Algorithms.cpp
  W004 C-style cast
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    108:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
    108:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W119 Argument passed by value is modified
    30/1: size_t find_first_one(uword n)
    55/1: size_t log2(size_t n, bool up)
    122/1: size_t round_to_2_exp_n(size_t n, size_t e, bool up)
nb/Algorithms.h
  W082 Adjacent arguments have the same type
    51:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    55:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
    63:    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
nb/Array.h
* W032 Unused function
    144:    const T& Back() const
    152:    T& Back()
    160:    const T& At(size_t index) const
    168:    T& At(size_t index)
    192:    const T* Data() const
* W099 Line contains adjacent spaces
    208:    inline static fn_name Array_ctor()    { return "Array.ctor"; }
    209:    inline static fn_name Array_dtor()    { return "Array.dtor"; }
    210:    inline static fn_name Array_Init()    { return "Array.Init"; }
nb/Base.cpp
  W006 reinterpret_cast
    95:    auto obj = reinterpret_cast<ObjectStruct*>(this);
    158:    auto obj = reinterpret_cast<const ObjectStruct*>(this);
  W008 Cast removes const qualification
    67:    objects.push_back(const_cast<Base*>(this));
* W106 Function does not invoke Debug::ft
    90: void Base::Nullify(size_t n)
    154: Base::vptr_t Base::Vptr() const
  W119 Argument passed by value is modified
    90/1: void Base::Nullify(size_t n)
nb/Base.h
* W042 Member could be private
    90:    virtual size_t Summarize(std::ostream& stream, uint32_t selector) const
* W043 Member could be protected
    83:    virtual void Display(std::ostream& stream,
    113:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    83:    virtual void Display(std::ostream& stream,
    90:    virtual size_t Summarize(std::ostream& stream, uint32_t selector) const
    108:    virtual void GetSubtended(std::vector<Base*>& objects) const;
    119:    virtual void ClaimBlocks();
    137:    virtual void Cleanup() { }
    144:    virtual void Startup(RestartLevel level) { }
    152:    virtual void Shutdown(RestartLevel level) { }
    156:    virtual MemoryType MemType() const { return MemPermanent; }
nb/BuddyHeap.cpp
  W004 C-style cast
    332:       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
    377:    auto block = (const HeapBlock*) addr;
    482:    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
    522:    heap_->state = (uint8_t*) (heapAddr + infoSize);
    554:          ReleaseBlock((HeapBlock*) addr, level);
    565:       ReserveBlock((HeapBlock*) addr);
    673:                   if(block < (HeapBlock*) heap_)
    675:                   else if(block < (HeapBlock*) heap_->minAddr)
    752:    FreeBlock((HeapBlock*) addr, level);
    800:    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
    900:       auto size = BlockToSize((const HeapBlock*) addr);
    903:       auto index = BlockToIndex((const HeapBlock*) addr, level);
    955:       if((HeapBlock*) block->link.prev->next != block)
    957:       if((HeapBlock*) block->link.next->prev != block)
  W005 Functional cast
    787:    return BlockState(state);
  W026 Unused argument
    77/3:       const string& prefix, const Flags& options) const;
* W053 Data could be const
    56:    Q2Link link;
* W099 Line contains adjacent spaces
    665:                case Split:     c = 'S'; break;
    666:                case Merged:    c = 'm'; break;
* W106 Function does not invoke Debug::ft
    128: static BuddyHeap::index_t IndexToChild(BuddyHeap::index_t index)
    137: static BuddyHeap::index_t IndexToParent(BuddyHeap::index_t index)
    146: static BuddyHeap::index_t IndexToSibling(BuddyHeap::index_t index)
    157: static size_t Log2Size(BuddyHeap::level_t level)
    166: static size_t LevelToSize(BuddyHeap::level_t level)
    175: static BuddyHeap::level_t SizeToLevel(size_t size)
    272: bool BuddyHeap::AddrIsValid(const void* addr, bool header) const
    314: HeapBlock* BuddyHeap::AllocBlock(level_t level, size_t size)
    346: BuddyHeap::index_t BuddyHeap::BlockToIndex
    411: BuddyHeap::BlockState BuddyHeap::Corrupt(int reason, bool restart) const
    592: HeapBlock* BuddyHeap::Dequeue(level_t level) const
    697: void BuddyHeap::EnqBlock(HeapBlock* block, index_t index, level_t level) const
    706: HeapBlock* BuddyHeap::Enqueue(HeapBlock* block, level_t level) const
    757: void BuddyHeap::FreeBlock(HeapBlock* block, level_t level)
    776: BuddyHeap::BlockState BuddyHeap::GetState(index_t index) const
    792: HeapBlock* BuddyHeap::IndexToBlock(index_t index, level_t level) const
    805: size_t BuddyHeap::Overhead() const
    819: void BuddyHeap::ReleaseBlock(HeapBlock* block, level_t level) const
    835: void BuddyHeap::ReserveBlock(const HeapBlock* block) const
    861: void BuddyHeap::SetState(index_t index, BlockState state) const
    877: void BuddyHeap::SplitAncestors(index_t block) const
    925: BuddyHeap::BlockState BuddyHeap::ValidateBlock
  W119 Argument passed by value is modified
    294/1: void* BuddyHeap::Alloc(size_t size)
    444/1: bool BuddyHeap::Create(size_t size)
    757/1: void BuddyHeap::FreeBlock(HeapBlock* block, level_t level)
    877/1: void BuddyHeap::SplitAncestors(index_t block) const
nb/CallbackRequest.h
  W075 Virtual function is public
    44:    virtual void Callback() { }
* W090 Function could be const
    44:    virtual void Callback() { }
nb/CfgBitParm.cpp
* W106 Function does not invoke Debug::ft
    88: void CfgBitParm::Explain(string& expl) const
nb/CfgBitParm.h
* W042 Member could be private
    52:    virtual bool CurrValue() const = 0;
    56:    virtual bool NextValue() const = 0;
    70:    bool SetNext(c_string input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(c_string key, c_string def, c_string expl);
  W141 Function could move to a subclass
    56:    virtual bool NextValue() const = 0; // CfgBoolParm
nb/CfgBoolParm.h
* W042 Member could be private
    68:    bool SetNextValue(bool value) override;
* W060 Base class constructor is public
    39:    CfgBoolParm(c_string key, c_string def, c_string expl);
  W075 Virtual function is public
    47:    bool CurrValue() const override { return curr_; }
  W082 Adjacent arguments have the same type
    39:    CfgBoolParm(c_string key, c_string def, c_string expl);
nb/CfgFlagParm.cpp
* W106 Function does not invoke Debug::ft
    55: bool CfgFlagParm::CurrValue() const
    74: bool CfgFlagParm::NextValue() const
nb/CfgFlagParm.h
* W042 Member could be private
    48:    bool CurrValue() const override;
    69:    bool SetNextValue(bool value) override;
  W075 Virtual function is public
    48:    bool CurrValue() const override;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(c_string key, c_string def,
nb/CfgIntParm.cpp
* W106 Function does not invoke Debug::ft
    68: void CfgIntParm::Explain(string& expl) const
nb/CfgIntParm.h
* W042 Member could be private
    62:    virtual bool SetNextValue(word value);
    84:    bool SetNext(c_string input) override;
* W053 Data could be const
    96:    word min_;
    100:    word max_;
* W060 Base class constructor is public
    39:    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
* W077 Virtual function has no overrides
    62:    virtual bool SetNextValue(word value);
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
nb/CfgParm.cpp
  W006 reinterpret_cast
    135:    auto fake = reinterpret_cast<const CfgParm*>(&local);
nb/CfgParm.h
* W042 Member could be private
    68:    c_string Key() const;
    100:    virtual std::string GetCurr() const = 0;
* W053 Data could be const
    158:    Q1Link link_;
  W075 Virtual function is public
    72:    virtual void Explain(std::string& expl) const { expl = expl_; }
* W077 Virtual function has no overrides
    114:    virtual std::string GetInput() const;
  W082 Adjacent arguments have the same type
    94:    CfgParm(c_string key, c_string def, c_string expl);
nb/CfgParmRegistry.cpp
* W106 Function does not invoke Debug::ft
    327: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
nb/CfgParmRegistry.h
* W042 Member could be private
    60:    CfgTuple* FindTuple(const std::string& key) const;
nb/CfgStrParm.cpp
* W106 Function does not invoke Debug::ft
    60: void CfgStrParm::Explain(string& expl) const
nb/CfgStrParm.h
* W032 Unused function
    61:    c_string NextValue() const { return next_.c_str(); }
* W060 Base class constructor is public
    40:    CfgStrParm(c_string key, c_string def, c_string expl);
  W082 Adjacent arguments have the same type
    40:    CfgStrParm(c_string key, c_string def, c_string expl);
nb/CfgTuple.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast<const CfgTuple*>(&local);
nb/CfgTuple.h
* W053 Data could be const
    122:    Q1Link link_;
nb/CinThread.cpp
* W106 Function does not invoke Debug::ft
    66: void CinThread::ClearClient(const Thread* client)
  W107 Function does not invoke Debug::ft as first statement
    104:       Debug::ft(CinThread_Enter);
nb/Class.cpp
  W004 C-style cast
    227:    return (Object*) addr;
  W006 reinterpret_cast
    93:    auto fake = reinterpret_cast<const Class*>(&local);
  W110 Override of Base.Display not found
    48: struct ClassDynamic : public Permanent
nb/Class.h
* W032 Unused function
    71:    virtual void Initialize();
    80:    virtual Object* Create();
    84:    virtual Object* GetQuasiSingleton();
    88:    virtual void FreeQuasiSingleton(Object* obj);
    143:    bool SetVptr(const Object& obj);
    150:    bool SetTemplate(Object& obj);
    158:    bool SetQuasiSingleton(Object& obj);
* W042 Member could be private
    75:    virtual MemoryType ObjType() const = 0;
    137:    virtual Object* New(size_t size);
  W075 Virtual function is public
    71:    virtual void Initialize();
    75:    virtual MemoryType ObjType() const = 0;
    80:    virtual Object* Create();
    84:    virtual Object* GetQuasiSingleton();
    88:    virtual void FreeQuasiSingleton(Object* obj);
* W077 Virtual function has no overrides
    71:    virtual void Initialize();
    75:    virtual MemoryType ObjType() const = 0;
    80:    virtual Object* Create();
    84:    virtual Object* GetQuasiSingleton();
    88:    virtual void FreeQuasiSingleton(Object* obj);
* W090 Function could be const
    71:    virtual void Initialize();
    88:    virtual void FreeQuasiSingleton(Object* obj);
    137:    virtual Object* New(size_t size);
    150:    bool SetTemplate(Object& obj);
    158:    bool SetQuasiSingleton(Object& obj);
nb/ClassRegistry.cpp
* W106 Function does not invoke Debug::ft
    89: Class* ClassRegistry::Lookup(ClassId cid) const
nb/CliAppData.h
* W065 Base class virtual destructor is not public
    82:    virtual ~CliAppData();
  W075 Virtual function is public
    63:    virtual void EventOccurred(Event event);
nb/CliBuffer.cpp
* W053 Data could be const
    61:    istreamPtr file_;
* W106 Function does not invoke Debug::ft
    618: bool CliBuffer::ReadingFromFile() const
  W119 Argument passed by value is modified
    214/3:    (const CliThread& cli, const string& expl, std::streamsize p)
nb/CliBuffer.h
* W042 Member could be private
    104:    bool ReadingFromFile() const;
nb/CliCharParm.h
* W060 Base class constructor is public
    40:    CliCharParm(c_string help, c_string chars,
  W082 Adjacent arguments have the same type
    40:    CliCharParm(c_string help, c_string chars,
nb/CliCommand.h
* W042 Member could be private
    46:    static const char CommandSeparator;
* W043 Member could be protected
    51:    static fixed_string UnexpectedIndex;
  W075 Virtual function is public
    60:    virtual word ExplainCommand(std::ostream& stream, bool verbose) const;
    93:    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  W082 Adjacent arguments have the same type
    103:    CliCommand(c_string comm, c_string help, uint32_t size = 32);
nb/CliCommandSet.cpp
  W006 reinterpret_cast
    73:    auto& commands = reinterpret_cast<Registry<CliCommand>& >(Parms());
    174:       reinterpret_cast<const Registry<CliCommand>& >(Parms());
  W007 Cast down the inheritance hierarchy
    73:    auto& commands = reinterpret_cast<Registry<CliCommand>& >(Parms());
    174:       reinterpret_cast<const Registry<CliCommand>& >(Parms());
nb/CliCommandSet.h
* W043 Member could be protected
    44:    bool BindCommand(CliCommand& comm);
  W082 Adjacent arguments have the same type
    59:    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
nb/CliCookie.cpp
* W106 Function does not invoke Debug::ft
    118: uint32_t CliCookie::Index(uint32_t depth) const
nb/CliIncrement.cpp
  W006 reinterpret_cast
    102:    auto fake = reinterpret_cast<const CliIncrement*>(&local);
nb/CliIncrement.h
* W053 Data could be const
    110:    RegCell iid_;
  W075 Virtual function is public
    75:    virtual void Enter();
    80:    virtual void Exit();
* W077 Virtual function has no overrides
    80:    virtual void Exit();
  W082 Adjacent arguments have the same type
    102:    CliIncrement(c_string name, c_string help, uint32_t size = 32);
nb/CliIntParm.h
* W053 Data could be const
    71:    word min_;
    75:    word max_;
    79:    bool hex_;
* W060 Base class constructor is public
    45:    CliIntParm(c_string help, word min, word max,
  W082 Adjacent arguments have the same type
    45:    CliIntParm(c_string help, word min, word max,
nb/CliParm.cpp
  W006 reinterpret_cast
    113:    auto fake = reinterpret_cast<const CliParm*>(&local);
nb/CliParm.h
* W043 Member could be protected
    131:    static fixed_string AnyStringParm;
    166:    bool GetBoolParm(bool& b, CliThread& cli) const;
    176:    bool GetCharParm(char& c, CliThread& cli) const;
    186:    bool GetPtrParm(void*& p, CliThread& cli) const;
    212:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    234:    bool GetFileName(std::string& s, CliThread& cli) const;
    246:    bool GetIdentifier(std::string& s, CliThread& cli,
    261:    bool IsOptional() const { return opt_; }
  W075 Virtual function is public
    143:    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
    151:    virtual void Explain(std::ostream& stream, col_t indent) const;
    161:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    171:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    181:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    191:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    219:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    229:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    239:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    252:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    246:    bool GetIdentifier(std::string& s, CliThread& cli,
    252:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
nb/CliPtrParm.cpp
  W004 C-style cast
    89:          p = (void*) n;
nb/CliStack.h
* W042 Member could be private
    68:    const CliCommand* FindCommand
* W117 Line can merge with the next line and be under the length limit
    68:    const CliCommand* FindCommand
nb/CliText.cpp
  W119 Argument passed by value is modified
    39/2: CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
nb/CliText.h
* W042 Member could be private
    61:    c_string HelpText() const;
* W043 Member could be protected
    65:    const Registry<CliParm>& Parms() const { return parms_; }
* W060 Base class constructor is public
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W120 Function returns non-const reference or pointer to member data
    82:    Registry<CliParm>& Parms() { return parms_; }
nb/CliTextParm.cpp
  W119 Argument passed by value is modified
    142/2: void CliTextParm::Explain(ostream& stream, col_t indent) const
nb/CliTextParm.h
* W060 Base class constructor is public
    49:    explicit CliTextParm(c_string help, bool opt = false,
nb/CliThread.cpp
  W119 Argument passed by value is modified
    757/2:    (const string& expl, size_t begin, size_t end, col_t indent) const
nb/CliThread.h
* W032 Unused function
    142:    word Result() const { return result_; }
  W050 Data is not private
    211:    std::unique_ptr<CliBuffer> ibuf;
    215:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    99:    char CharPrompt(const std::string& prompt,
    106:    word IntPrompt(const std::string& prompt, word min, word max);
    251:    void Report1
  W120 Function returns non-const reference or pointer to member data
    190:    CliCookie& Cookie() { return cookie_; }
nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    86:       auto req = static_cast<StreamRequest*>(msg);
nb/Daemon.cpp
  W006 reinterpret_cast
    75:    auto fake = reinterpret_cast<const Daemon*>(&local);
nb/Daemon.h
* W077 Virtual function has no overrides
    152:    virtual void Recover() { }
nb/Debug.cpp
* W106 Function does not invoke Debug::ft
    67: void Debug::Assert(bool condition, debug64_t errval)
    96: void Debug::ft(fn_name_arg func) NO_FT
    104: void Debug::ftnt(fn_name_arg func) NO_FT
* W130 Redundant scope
    79:    Debug::ft("Debug.Exiting");
    114:    Debug::ft("Debug.GetSwFlags");
    124:    Debug::ft("Debug.noop");
    131:    Debug::ft("Debug.Progress");
    141:    Debug::ft("Debug.ResetSwFlags");
    150:    Debug::ftnt("Debug.SetSwFlag");
    169:    Debug::ftnt("Debug.SwFlagOn");
    186:    Debug::ftnt(Debug_SwLog);
    192:    Debug::ftnt(Debug_SwLog);
nb/Debug.h
  W026 Unused argument
    118/1:    static void noop(debug64_t info = 0);
nb/Deferred.cpp
  W006 reinterpret_cast
    99:    auto fake = reinterpret_cast<const Deferred*>(&local);
nb/Deferred.h
  W026 Unused argument
    89/1:    virtual void EventHasOccurred(Event event) = 0;
* W032 Unused function
    63:    void SendToThread(Thread* thread);
    67:    void Restart(uint32_t secs);
  W037 Member hides inherited name
    93:    static ptrdiff_t LinkDiff();
* W053 Data could be const
    101:    Q2Link link_;
    105:    Base* const owner_;
* W090 Function could be const
    89:    virtual void EventHasOccurred(Event event) = 0;
nb/DeferredRegistry.h
* W032 Unused function
    52:    void EraseAll(const Base* owner);
nb/Duration.h
* W032 Unused function
    43: std::string to_string(const secs_t& secs);
    45: std::string to_string(const usecs_t& usecs);
    46: std::string to_string(const nsecs_t& nsecs);
nb/Element.cpp
* W106 Function does not invoke Debug::ft
    199: bool Element::RunningInLab()
nb/ElementException.h
* W032 Unused function
    57:    RestartReason Reason() const { return reason_; }
    61:    debug64_t Errval() const { return errval_; }
nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    42:    Debug::ft("Exception.ctor");  //@
nb/Exception.h
* W065 Base class virtual destructor is not public
    69:    virtual ~Exception();
  W075 Virtual function is public
    51:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
nb/FileSystem.cpp
* W106 Function does not invoke Debug::ft
    83: size_t FileSystem::FindExt(const string& name, const string& ext)
    97: void FileSystem::GetLine(std::istream& stream, std::string& str)
nb/FileSystem.h
* W032 Unused function
    67:    void DisableFileOutput(bool disabled);
nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    211:       auto req = static_cast<FileRequest*>(msg);
nb/FileThread.h
  W082 Adjacent arguments have the same type
    63:    static void Spool(const std::string& name,
nb/Formatters.cpp
  W004 C-style cast
    162:       auto base = (const Base*) obj;
  W119 Argument passed by value is modified
    76/4:    const string& prefix, const byte_t* bytes, size_t count)
    312/2: size_t strSkipSpaces(const std::string& str, size_t index)
nb/Formatters.h
* W032 Unused function
    53:    bool strToSize(const std::string& str, size_t& size);
    70:    std::string strHex(uint32_t n, int width = -1, bool prefix = true);
  W082 Adjacent arguments have the same type
    99:    int strCompare
    111:    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
nb/FunctionTrace.cpp
  W007 Cast down the inheritance hierarchy
    572:       auto curr = static_cast<FunctionTrace*>(rec);
    586:       auto curr = static_cast<FunctionTrace*>(rec);
    604:       auto curr = static_cast<FunctionTrace*>(rec);
    629:       auto curr = static_cast<FunctionTrace*>(rec);
    675:       auto curr = static_cast<FunctionTrace*>(rec);
    793:       auto curr = static_cast<FunctionTrace*>(rec);
    815:       auto curr = static_cast<FunctionTrace*>(rec);
    832:       auto curr = static_cast<FunctionTrace*>(rec);
    904:       auto curr = static_cast<FunctionTrace*>(rec);
* W032 Unused function
    169:    PerThreadInfo()
* W106 Function does not invoke Debug::ft
    191: CtorChain::CtorChain(FunctionTrace* inner) :
    208: bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
    261: CtorChain::Action CtorChain::CalcAction
    329: TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
    348: bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
    391: bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
    409: TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
    458: void CtorChain::HandleFunction(FunctionTrace* func)
    485: void CtorChain::MoveOuterAboveInit()
    499: void CtorChain::MoveOuterAboveInner() const
    512: void CtorChain::SetOuter(FunctionTrace* outer)
nb/FunctionTrace.h
* W043 Member could be protected
    44:    FunctionTrace();
* W060 Base class constructor is public
    44:    FunctionTrace();
nb/Gate.cpp
* W047 Data is init-only
    51:    std::unique_lock<std::mutex> lock(mutex_);
nb/Heap.cpp
* W106 Function does not invoke Debug::ft
    143: void Heap::Freeing(void* addr, size_t size)
    208: void Heap::Requested(size_t size, void* addr)
nb/Heap.h
* W042 Member could be private
    109:    size_t MaxInUse() const { return maxInUse_; }
  W075 Virtual function is public
    55:    virtual size_t Size() const = 0;
    59:    virtual MemoryType Type() const = 0;
    63:    virtual void* Alloc(size_t size) = 0;
    67:    virtual void Free(void* addr) = 0;
    72:    virtual size_t BlockToSize(const void* addr) const = 0;
    78:    virtual bool Validate(const void* addr) const = 0;
    85:    virtual int SetPermissions(MemoryProtection attrs);
    91:    virtual size_t CurrAvail() const = 0;
    95:    virtual size_t Overhead() const = 0;
nb/HeapCfg.h
* W032 Unused function
    55:    size_t GetMinSize(MemoryType type) const { return minSize_[type]; }
  W110 Override of Base.Display not found
    41: class HeapCfg : public Immutable
nb/InitFlags.cpp
* W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::SuspendRoot()
    55: bool InitFlags::TraceInit()
nb/InitThread.cpp
* W106 Function does not invoke Debug::ft
    366: uint64_t InitThread::RunningTicks()
nb/Log.cpp
  W006 reinterpret_cast
    204:    auto fake = reinterpret_cast<const Log*>(&local);
* W106 Function does not invoke Debug::ft
    210: size_t Log::Count()
    483: main_t Log::TrapInMain(const Exception* ex,
  W110 Override of Base.Display not found
    124: struct LogDynamic : public Permanent
nb/Log.h
* W053 Data could be const
    188:    RegCell lid_;
* W090 Function could be const
    122:    void SetInterval(uint8_t interval);
nb/LogBuffer.cpp
  W004 C-style cast
    313:    auto after = (ptr_t) next_ + size;
    326:       if(wrap && (after > (const_ptr_t) first)) return nullptr;
    333:       if(wrap || (after > (const_ptr_t) first)) return nullptr;
    507:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    507:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    509:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
    509:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  W006 reinterpret_cast
    122:    SetNext(reinterpret_cast<Entry*>(buff_));
    340:       where = reinterpret_cast<Entry*>(buff_);
    348:    SetNext(reinterpret_cast<Entry*>(after));
    385:          SetNext(reinterpret_cast<Entry*>(buff_));
  W009 Pointer arithmetic
    313:    auto after = (ptr_t) next_ + size;
    314:    auto wrap = after >= (buff_ + size_);
    341:       after = buff_ + size;
* W106 Function does not invoke Debug::ft
    500: void LogBuffer::UpdateMax()
* W117 Line can merge with the next line and be under the length limit
    189:       stream << fileName_ << SPACE
  W119 Argument passed by value is modified
    97/1: LogBuffer::LogBuffer(size_t size) :
nb/LogGroup.cpp
  W006 reinterpret_cast
    123:    auto fake = reinterpret_cast<const LogGroup*>(&local);
* W106 Function does not invoke Debug::ft
    182: void LogGroup::SetSuppressed(bool suppressed)
nb/LogGroup.h
* W042 Member could be private
    76:    id_t Gid() const { return gid_.GetId(); }
    80:    bool Suppressed() const { return suppressed_; }
* W053 Data could be const
    137:    RegCell gid_;
nb/LogGroupRegistry.cpp
* W106 Function does not invoke Debug::ft
    190: LogGroup* LogGroupRegistry::Group(id_t gid) const
nb/LogGroupRegistry.h
* W032 Unused function
    62:    Log* FindLog(const std::string& name, LogId id) const;
nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    85:       (static_cast<CfgIntParm*>(reg->FindParm("NoSpoolingMessageCount")));
nb/MainArgs.cpp
* W106 Function does not invoke Debug::ft
    164: size_t MainArgs::Size()
nb/MainArgs.h
* W032 Unused function
    71:    static std::string Find(c_string tag);
* W042 Member could be private
    66:    static void PushBack(const std::string& arg);
* W092 Function could be free
    66:    static void PushBack(const std::string& arg); // MainArgs.cpp
nb/Memory.cpp
  W005 Functional cast
    225:       heaps.push_back(Memory::AccessHeap(MemoryType(m)));
* W106 Function does not invoke Debug::ft
    199: static Heap* EnsureHeap(MemoryType type)
    219: static std::vector<const Heap*> ListHeaps()
    233: Heap* Memory::AccessHeap(MemoryType type)
    257: size_t Memory::Align(size_t size, size_t log2align)
    351: size_t Memory::CountHeaps()
    429: bool Memory::Protect(MemoryType type)
    556: bool Memory::Unprotect(MemoryType type)
    586: size_t Memory::Words(size_t size)
nb/Memory.h
* W032 Unused function
    50:    size_t Words(size_t size);
    58:    void Set(void* dest, byte_t value, size_t size);
    78:    void* Realloc(void* addr, size_t size, MemoryType type);
nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    89:       auto curr = static_cast<MemoryTrace*>(rec);
nb/Module.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast<const Module*>(&local);
nb/Module.h
* W053 Data could be const
    134:    RegCell mid_;
nb/ModuleRegistry.cpp
  W102 Line length exceeds the standard maximum
    86:    "https://github.com/GregUtas/robust-services-core/blob/master/docs/Installing.md";
* W106 Function does not invoke Debug::ft
    68: static const FactionFlags& AllFactions()
    110: static const FactionFlags& ShutdownFactions()
    262: RestartLevel ModuleRegistry::GetLevel()
* W111 Override of Object.Patch not found
    150: class StopInitTracing : public Deferred
nb/MsgBuffer.cpp
* W106 Function does not invoke Debug::ft
    63: TraceStatus MsgBuffer::GetStatus() const
nb/MsgBuffer.h
* W043 Member could be protected
    47:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    60:    virtual TraceStatus GetStatus() const;
nb/Mutex.cpp
  W006 reinterpret_cast
    143:    auto fake = reinterpret_cast<const Mutex*>(&local);
* W106 Function does not invoke Debug::ft
    164: Thread* Mutex::Owner() const
  W107 Function does not invoke Debug::ft as first statement
    46:    Debug::ft("MutexGuard.ctor");
    66:       Debug::ftnt("MutexGuard.Release");
nb/Mutex.h
* W053 Data could be const
    149:    RegCell mid_;
nb/MutexRegistry.h
* W042 Member could be private
    56:    Mutex* Find(const std::string& name) const;
nb/NbAppIds.h
* W028 Unused data
    72: constexpr FlagId FirstAppDebugFlag = 10;
nb/NbCliParms.cpp
* W106 Function does not invoke Debug::ft
    132: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
nb/NbCliParms.h
  W082 Adjacent arguments have the same type
    137: bool ValidateOptions
nb/NbIncrement.cpp
  W005 Functional cast
    644:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    1045:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1234:          auto type = MemoryType(id);
    1251:       auto type = MemoryType(memtype);
    1283:          auto type = MemoryType(m);
    1294:          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
    1304:          auto type = MemoryType(memtype);
    1670:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    3305:       auto heap = Memory::AccessHeap(MemoryType(m));
  W102 Line length exceeds the standard maximum
    3284: "Alloc  Min kB     kB       Bytes                            Memory        Prot\n"
    3285: "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
* W117 Line can merge with the next line and be under the length limit
    1156:    BindText(*new CliText
    1158:    BindText(*new CliText
    2694:    BindText(*new CliText
nb/NbIncrement.h
* W028 Unused data
    195:    static const id_t LastNbIndex = 3;
* W060 Base class constructor is public
    41:    StatusCommand();
    56:    LogsAction();
    76:    explicit LogsCommand(bool bind = true);
    93:    SetWhatParm();
    107:    explicit SetCommand(bool bind = true);
    124:    IncludeWhatParm();
    138:    explicit IncludeCommand(bool bind = true);
    155:    ExcludeWhatParm();
    168:    explicit ExcludeCommand(bool bind = true);
    199:    explicit QueryCommand(bool bind = true);
    216:    SaveWhatParm();
    228:    explicit SaveCommand(bool bind = true);
    245:    ClearWhatParm();
    263:    explicit ClearCommand(bool bind = true);
nb/NbPools.cpp
  W007 Cast down the inheritance hierarchy
    108:          auto buff = static_cast<const MsgBuffer*>(*obj);
nb/NbTracer.cpp
  W005 Functional cast
    228:             stream << Faction(f) << CRLF;
* W106 Function does not invoke Debug::ft
    188: TraceStatus NbTracer::FactionStatus(Faction faction) const
nb/NbTracer.h
  W110 Override of Base.Display not found
    63: class NbTracer : public Permanent
nb/NbTypes.cpp
* W106 Function does not invoke Debug::ft
    75: char BlockingReasonChar(BlockingReason reason)
    98: char FactionChar(Faction faction)
nb/NbTypes.h
* W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
* W033 Unused typedef
    226: using PersistentStr =
nb/Object.cpp
  W006 reinterpret_cast
    114:    auto obj = reinterpret_cast<ObjectStruct*>(this);
* W106 Function does not invoke Debug::ft
    59: Object::ClassId Object::GetClassId() const
    70: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    95: Object::ObjectId Object::GetObjectId() const
nb/Object.h
* W032 Unused function
    100:    ClassId GetClassId() const;
    112:    ObjectId GetObjectId() const;
    118:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    139:    void MorphTo(const Class& target);
* W042 Member could be private
    106:    virtual InstanceId GetInstanceId() const;
* W043 Member could be protected
    67:    virtual void Patch(sel_t selector, void* arguments) { }
  W075 Virtual function is public
    67:    virtual void Patch(sel_t selector, void* arguments) { }
    87:    virtual Class* GetClass() const;
    95:    virtual void PostInitialize() { }
    106:    virtual InstanceId GetInstanceId() const;
* W077 Virtual function has no overrides
    87:    virtual Class* GetClass() const;
    95:    virtual void PostInitialize() { }
    106:    virtual InstanceId GetInstanceId() const;
* W088 Argument could be const
    67/2:    virtual void Patch(sel_t selector, void* arguments) { }
* W090 Function could be const
    67:    virtual void Patch(sel_t selector, void* arguments) { }
* W092 Function could be free
    118:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid); // Object.cpp
nb/ObjectPool.cpp
  W004 C-style cast
    87:    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
    311:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, std::nothrow);
    335:          auto b = (ObjectBlock*) &seg[j];
    385:             auto b = (ObjectBlock*) &seg[j];
    421:             auto curr = (Pooled*) getptr1(item, diff);
    856:       return (ObjectBlock*) &blocks_[0][0];
    902:          auto b = (ObjectBlock*) &seg[j];
    950:       return (ObjectBlock*) &blocks_[i][j];
    975:             auto b = (ObjectBlock*) &seg[j];
    1006:    auto block = (const_ptr_t) ObjToBlock(obj);
    1007:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    1011:       auto b0 = (const_ptr_t) &blocks_[i][0];
    1074:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    557:    auto fake = reinterpret_cast<const ObjectPool*>(&local);
* W099 Line contains adjacent spaces
    169:    CounterPtr      allocCount_;
    170:    CounterPtr      freeCount_;
    171:    CounterPtr      failCount_;
    172:    CounterPtr      auditCount_;
    173:    CounterPtr      expansions_;
* W106 Function does not invoke Debug::ft
    84: static ObjectBlock* ObjToBlock(const Pooled* obj)
    351: size_t ObjectPool::AllocCount() const
    518: size_t ObjectPool::AvailCount() const
    525: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    740: void ObjectPool::EnqBlock(Pooled* obj, bool deleted)
    835: size_t ObjectPool::Expansions() const
    842: size_t ObjectPool::FailCount() const
    883: size_t ObjectPool::FreeCount() const
    916: bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
    928: size_t ObjectPool::InUseCount() const
    935: size_t ObjectPool::LowAvailCount() const
    942: ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
    961: Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
    1033: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    1042: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  W110 Override of Base.Display not found
    96: class ObjectPoolSizeCfg : public CfgIntParm
    162: class ObjectPoolStats : public Dynamic
    204: struct ObjectPoolDynamic : public Persistent
  W119 Argument passed by value is modified
    525/1: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    539/1: Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
    563/1: bool ObjectPool::Corrupt(size_t n)
nb/ObjectPool.h
  W005 Functional cast
    98:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
* W043 Member could be protected
    122:    Pooled* NextUsed(PooledObjectId& bid) const;
  W075 Virtual function is public
    103:    virtual Pooled* DeqBlock(size_t size);
    108:    virtual void EnqBlock(Pooled* obj, bool deleted);
    184:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
* W077 Virtual function has no overrides
    103:    virtual Pooled* DeqBlock(size_t size);
    108:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    249:    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
    254:    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
* W090 Function could be const
    196:    bool Corrupt(size_t n);
    262:    void UpdateAlarm();
nb/ObjectPoolAudit.cpp
* W145 Auto variable copies an object
    112:    auto prev = interval_;
nb/ObjectPoolRegistry.h
* W042 Member could be private
    61:    bool NullifyObjectData() const { return nullifyObjectDataCfg_->CurrValue(); }
nb/PermanentHeap.cpp
* W106 Function does not invoke Debug::ft
    43: PermanentHeap* PermanentHeap::Instance()
nb/Pooled.cpp
  W004 C-style cast
    137:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    115:    auto fake = reinterpret_cast<const Pooled*>(&local);
nb/Pooled.h
  W075 Virtual function is public
    66:    virtual bool Passes(uint32_t selector) const { return assigned_; }
nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
* W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
nb/PosixSignal.cpp
  W006 reinterpret_cast
    71:    auto fake = reinterpret_cast<const PosixSignal*>(&local);
* W106 Function does not invoke Debug::ft
    124: Flags PS_Break()
    129: Flags PS_Delayed()
    134: Flags PS_Final()
    139: Flags PS_Interrupt()
    144: Flags PS_Native()
    149: Flags PS_NoError()
    154: Flags PS_NoLog()
nb/PosixSignal.h
* W032 Unused function
    148: Flags PS_Delayed();
* W053 Data could be const
    135:    RegCell sid_;
  W082 Adjacent arguments have the same type
    105:    PosixSignal(signal_t value, c_string name,
nb/PosixSignalRegistry.cpp
* W106 Function does not invoke Debug::ft
    92: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    104: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    175: signal_t PosixSignalRegistry::Value(const string& name) const
nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ftnt(Q1Link_dtor);
nb/Q1Link.h
* W032 Unused function
    65:    bool IsQueued() const { return next != nullptr; }
nb/Q1Way.h
  W004 C-style cast
    143:       auto ante = (Q1Link*)
    166:       return (T*) getptr1(item, diff_);  // location of item's vptr
    212:       return (T*) getptr1(item, diff_);     // location of item's vptr
    233:          item = (Q1Link*)
    247:       elem = (T*) getptr1(item, diff_);     // location of item's vptr
    260:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    332:          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
    340:       auto item = (Q1Link*)                   // start at the current item
    342:       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
    360:       return (Q1Link*) getptr2(&elem, diff_);
* W088 Argument could be const
    90/1:    bool Enq(T& elem)
    114/1:    bool Henq(T& elem)
    136/1:    bool Insert(T* prev, T& elem)
    171/1:    bool Exq(T& elem)
    328/1:    void Corrupt(T* elem)
* W099 Line contains adjacent spaces
    389:    inline static fn_name Q1Way_dtor()    { return "Q1Way.dtor"; }
    390:    inline static fn_name Q1Way_Init()    { return "Q1Way.Init"; }
    391:    inline static fn_name Q1Way_Enq()     { return "Q1Way.Enq"; }
    392:    inline static fn_name Q1Way_Henq()    { return "Q1Way.Henq"; }
    393:    inline static fn_name Q1Way_Insert()  { return "Q1Way.Insert"; }
    394:    inline static fn_name Q1Way_Deq()     { return "Q1Way.Deq"; }
    395:    inline static fn_name Q1Way_Exq()     { return "Q1Way.Exq"; }
    396:    inline static fn_name Q1Way_Next()    { return "Q1Way.Next"; }
    397:    inline static fn_name Q1Way_Size()    { return "Q1Way.Size"; }
    398:    inline static fn_name Q1Way_Purge()   { return "Q1Way.Purge"; }
    400:    inline static fn_name Q1Way_Item()    { return "Q1Way.Item"; }
nb/Q2Link.cpp
* W106 Function does not invoke Debug::ft
    40: Q2Link::~Q2Link()
nb/Q2Way.h
  W004 C-style cast
    145:       return (T*) getptr1(item, diff_);    // location of item's vptr
    174:       return (T*) getptr1(item, diff_);     // location of item's vptr
    191:          item = (Q2Link*)
    197:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    208:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    218:       return (T*) getptr1(item, diff_);     // location of item's vptr
    235:          item = (Q2Link*)
    241:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    252:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    336:       return (Q2Link*) getptr2(&elem, diff_);
* W032 Unused function
    298:    void Display(std::ostream& stream,
* W088 Argument could be const
    150/1:    bool Exq(T& elem)
* W090 Function could be const
    150:    bool Exq(T& elem)
* W099 Line contains adjacent spaces
    366:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    367:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    368:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    369:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    370:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    371:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    372:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    373:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    374:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    376:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
nb/RegCell.cpp
* W106 Function does not invoke Debug::ft
    38: RegCell::~RegCell()
    50: void RegCell::SetId(id_t cid)
nb/Registry.h
  W004 C-style cast
    116:       registry_ = (T**) Memory::Alloc(size, mem);
    506:                auto cell = (RegCell*) getptr2(item, diff_);
    564:       return (RegCell*) getptr2(&item, diff_);
    579:       auto table = (T**) Memory::Alloc(size, mem_);
* W042 Member could be private
    493:    void Purge()
* W088 Argument could be const
    277/1:    bool Erase(T& item)
* W099 Line contains adjacent spaces
    626:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    627:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    628:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    630:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    631:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    632:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    633:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    634:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    635:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    636:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
nb/Restart.cpp
* W106 Function does not invoke Debug::ft
    38: bool Restart::ClearsMemory(MemoryType type)
    79: RestartLevel Restart::LevelToClear(MemoryType type)
nb/RootThread.cpp
* W106 Function does not invoke Debug::ft
    61: static Gate& ExitGate()
nb/Singleton.h
  W004 C-style cast
    85:       reg->BindInstance((const Base**) &Instance_, type);
    104:       reg->UnbindInstance((const Base**) &Instance_);
* W099 Line contains adjacent spaces
    129:    inline static fn_name Singleton_Destroy()  { return "Singleton.Destroy"; }
nb/Singletons.cpp
* W053 Data could be const
    41:    MemoryType type;    // the type of memory that the singleton uses
* W106 Function does not invoke Debug::ft
    126: Singletons* Singletons::Instance()
nb/SlabHeap.cpp
  W004 C-style cast
    369:       auto succ = (void*) (uintptr_t(addr) + size);
* W106 Function does not invoke Debug::ft
    412: size_t SlabPriv::CurrAvail() const
    596: size_t SlabPriv::Overhead() const
    659: size_t SlabPriv::Size() const
    827: size_t SlabHeap::CurrAvail() const
    872: size_t SlabHeap::Overhead() const
    906: size_t SlabHeap::Size() const
    913: MemoryType SlabHeap::Type() const
  W119 Argument passed by value is modified
    638/1: void SlabPriv::SetSlabSize(size_t size)
* W145 Auto variable copies an object
    732:       for(auto free = avail.first; free != avail.second; ++free)
nb/SoftwareException.h
* W043 Member could be protected
    41:    SoftwareException(debug64_t errval, debug64_t offset);
    50:    SoftwareException(const SoftwareException& that) = default;
* W060 Base class constructor is public
    41:    SoftwareException(debug64_t errval, debug64_t offset);
    42:    SoftwareException(const std::string& errstr, debug64_t offset);
nb/Statistics.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast<const Statistic*>(&local);
* W106 Function does not invoke Debug::ft
    117: uint64_t Statistic::Overall() const
    248: uint64_t HighWatermark::Overall() const
    320: uint64_t LowWatermark::Overall() const
nb/Statistics.h
* W043 Member could be protected
    68:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  W050 Data is not private
    87:    std::atomic_size_t curr_;
    91:    std::atomic_size_t prev_;
    95:    std::atomic_uint64_t total_;
    99:    size_t divisor_;
* W053 Data could be const
    115:    RegCell sid_;
* W060 Base class constructor is public
    131:    explicit Counter(const std::string& expl, size_t divisor = 1);
  W075 Virtual function is public
    64:    virtual uint64_t Overall() const;
    68:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    87:    auto fake = reinterpret_cast<const StatisticsGroup*>(&local);
* W100 Insertion of blank line recommended
    47: //  --------------member name-----------------
nb/StatisticsGroup.h
* W042 Member could be private
    54:    static const size_t ReportWidth;
    71:    id_t Gid() const { return gid_.GetId(); }
* W053 Data could be const
    97:    RegCell gid_;
  W075 Virtual function is public
    66:    virtual void DisplayStats
nb/StatisticsRegistry.cpp
* W106 Function does not invoke Debug::ft
    128: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
nb/StatisticsRegistry.h
* W090 Function could be const
    77:    void StartInterval(bool first);
nb/StreamRequest.h
* W043 Member could be protected
    59:    StreamRequest(const StreamRequest& that);
* W060 Base class constructor is public
    54:    StreamRequest();
nb/Symbol.cpp
  W006 reinterpret_cast
    96:    auto fake = reinterpret_cast<const Symbol*>(&local);
nb/Symbol.h
* W053 Data could be const
    112:    Q1Link link_;
nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    59:    bool BindSymbol
nb/SysConsole.cpp
* W106 Function does not invoke Debug::ft
    33: std::istream& SysConsole::In()
    40: ostream& SysConsole::Out()
nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
nb/SysHeap.h
* W032 Unused function
    99:    SysHeap(MemoryType type, size_t size);
nb/SysHeap.win.cpp
* W106 Function does not invoke Debug::ft
    185: size_t SysHeap::Overhead() const { return 0; }
nb/SysMemory.h
  W026 Unused argument
    45/2:    bool Free(void* addr, size_t size);
* W032 Unused function
    49:    bool Lock(void* addr, size_t size);
    54:    bool Unlock(void* addr, size_t size);
nb/SysMemory.win.cpp
* W106 Function does not invoke Debug::ft
    50: static DWORD GetMemoryProtection(MemoryProtection attrs)
  W119 Argument passed by value is modified
    72/1: void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
nb/SysStackTrace.h
  W026 Unused argument
    39/1:    void Startup(RestartLevel level);
nb/SysStackTrace.win.cpp
  W004 C-style cast
    163:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, std::nothrow);
* W015 #include not sorted in standard order
    30: #include <Windows.h>
  W044 Typedef of pointer type
    53: typedef void* StackFrames[MaxFrames];
  W082 Adjacent arguments have the same type
    99:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
* W106 Function does not invoke Debug::ft
    129: fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
    145: void StackInfo::Shutdown()
    154: DWORD StackInfo::Startup()
    189: void SysStackTrace::Demangle(std::string& name)
    279: fn_depth SysStackTrace::FuncDepth()
    324: bool SysStackTrace::TrapIsOk() NO_FT
nb/SystemTime.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 101:    tm ymdhms;
  W131 C-style preprocessor directive
    74: #ifdef OS_WIN
    79: #ifdef OS_LINUX
nb/SysThread.cpp
* W106 Function does not invoke Debug::ft
    149: bool SysThread::ReportError(fn_name function, fixed_string expl, int error)
nb/SysThread.h
* W042 Member could be private
    92:    typedef void (*sighandler_t)(signal_t sig);
  W082 Adjacent arguments have the same type
    105:    static bool ReportError(fn_name function, fixed_string expl, int error);
nb/SysThread.win.cpp
  W004 C-style cast
    193:       (_beginthreadex_proc_type) EnterThread, (void*) client, 0, &id);
    193:       (_beginthreadex_proc_type) EnterThread, (void*) client, 0, &id);
    204:       SetThreadPriorityBoost((HANDLE) nthread_, true);
    218:       CloseHandle((HANDLE) nthread_);
    255:    if(!SetThreadPriority((HANDLE) nthread_, PriorityMap[prio]))
    297:    _set_se_translator((_se_translator_function) SE_Handler);
  W008 Cast removes const qualification
    193:       (_beginthreadex_proc_type) EnterThread, (void*) client, 0, &id);
* W106 Function does not invoke Debug::ft
    51: static signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
    232: bool SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    240: SysThreadId SysThread::RunningThreadId() NO_FT
    266: bool SysThread::SetPriorityAllowed()
  W107 Function does not invoke Debug::ft as first statement
    75:    Debug::ft("NodeBase.SE_Handler");
nb/SysTypes.cpp
  W006 reinterpret_cast
    40:    auto bytes = reinterpret_cast<uint8_t*>(&value);
* W106 Function does not invoke Debug::ft
    37: static uintptr_t BadPointer()
nb/SysTypes.h
* W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
* W030 Unused enumerator
    195:    MemInaccessible = 0,      // ---
    196:    MemExecuteOnly = 1,       // --x
    198:    MemReadExecute = 5,       // r-x
    200:    MemReadWriteExecute = 7,  // rwx
  W044 Typedef of pointer type
    101: typedef char* ptr_t;
    102: typedef const char* const_ptr_t;
    119: typedef const char* c_string;
    120: typedef const char* const fixed_string;
    125: typedef const char* const fn_name;      // for defining a function name
    126: typedef const char* const fn_name_arg;  // when fn_name is an argument
nb/ThisThread.cpp
* W106 Function does not invoke Debug::ft
    32: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    39: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    46: void ThisThread::IncludeInTrace()
    53: DelayRc ThisThread::Pause(const msecs_t& timeout)
    60: void ThisThread::PauseOver(word limit)
    67: word ThisThread::RtcPercentUsed()
    74: ThreadId ThisThread::RunningThreadId()
    81: TraceRc ThisThread::StartTracing(const string& opts)
    88: void ThisThread::StopTracing()
nb/Thread.cpp
  W006 reinterpret_cast
    1260:    auto p = reinterpret_cast<char*>(BAD_POINTER);
  W009 Pointer arithmetic
    2966:    ptrdiff_t stacksize = &local - priv_->stackBase_;
* W048 Data is write-only
    917:    SteadyTime::Point readyTime_;
* W099 Line contains adjacent spaces
    271:    CounterPtr       traps_;
    272:    CounterPtr       exceeds_;
    273:    CounterPtr       yields_;
    274:    CounterPtr       interrupts_;
    278:    AccumulatorPtr   totTime_;
* W106 Function does not invoke Debug::ft
    88: static std::map<SysThreadId, std::atomic_flag>& AccessFtLocks() NO_FT
    99: static std::atomic_flag& AccessFtLock() NO_FT
    121: static void EraseFtLock() NO_FT
    451: ContextSwitch* ContextSwitches::AddSwitch()
    1087: static bool ClearActiveThread(Thread* active)
    1213: Thread* Thread::ActiveThread() NO_FT
    1223: Mutex* Thread::BlockingMutex() const
    1230: TraceStatus Thread::CalcStatus(bool dynamic) const
    1248: bool Thread::CanBeScheduled() const
    1662: void Thread::ExitIfSafe(debug64_t offset) NO_FT
    1750: Thread* Thread::FindRunningThread() NO_FT
    1774: void Thread::FunctionInvoked(fn_name_arg func) NO_FT
    1818: void Thread::FunctionInvoked(fn_name_arg func, const std::nothrow_t&) NO_FT
    1836: BlockingReason Thread::GetBlockingReason() const
    1843: signal_t Thread::GetSignal() const
    1850: TraceStatus Thread::GetStatus() const
    2010: bool Thread::IsLocked() const
    2017: bool Thread::IsScheduled() const
    2024: bool Thread::IsTraceable() const
    2080: Thread* Thread::LockedThread()
    2142: TraceRc Thread::LogContextSwitches(bool on)
    2320: uint8_t Thread::MutexCount() const
    2327: SysThreadId Thread::NativeThreadId() const NO_FT
    2344: DelayRc Thread::Pause(msecs_t time)
    2390: double Thread::PercentIdle()
    2685: void Thread::ResetDebugFlags()
    2779: Thread* Thread::RunningThread() NO_FT
    2805: Thread* Thread::RunningThread(const std::nothrow_t&) NO_FT
    2859: void Thread::SetStatus(TraceStatus status)
    2957: void Thread::StackCheck() NO_FT
    3268: TraceRc Thread::StartTracing(const string& opts)
    3300: void Thread::StopTracing()
    3469: bool Thread::TraceRunningThread(Thread*& thr)
    3497: bool Thread::TraceRunningThread(Thread*& thr, const std::nothrow_t&)
    3524: void Thread::TrapCheck() NO_FT
    3725: void Thread::UpdateMutex(Mutex* mutex)
    3732: void Thread::UpdateMutexCount(bool acquired)
  W107 Function does not invoke Debug::ft as first statement
    1601:    Debug::ft("Thread.Exit");
    2598:    Debug::ft("Thread.Ready");
    2929:    Debug::ft("Thread.SignalHandler");
    2999:             Debug::ft("Thread.Start(initializing)");
    3541:       Debug::ft(Thread_TrapHandler);  //@
  W110 Override of Base.Display not found
    265: class ThreadStats : public Dynamic
    352: class ContextSwitches : public Permanent
* W111 Override of Object.Patch not found
    352: class ContextSwitches : public Permanent
    780: class ThreadPriv : public Permanent
  W119 Argument passed by value is modified
    1087/1: static bool ClearActiveThread(Thread* active)
    1857/1: bool Thread::HandleSignal(signal_t sig, uint32_t code)
    2344/1: DelayRc Thread::Pause(msecs_t time)
    3452/1: void Thread::Trace(Thread* thr,
nb/Thread.h
  W026 Unused argument
    339/2:       (BlockingReason why, fn_name_arg func) { return true; }
    348/1:    virtual void ScheduledIn(fn_name_arg func) { }
* W032 Unused function
    139:    static std::atomic_uint32_t* Vector();
    143:    static bool TestFlag(FlagId fid);
    147:    static void ResetFlag(FlagId fid);
    174:    bool ChangeFaction(Faction faction);
    501:    Mutex* BlockingMutex() const;
    509:    uint8_t MutexCount() const;
* W042 Member could be private
    151:    static void ResetFlags();
    166:    SysThreadId NativeThreadId() const;
    170:    Faction GetFaction() const { return faction_; }
* W065 Base class virtual destructor is not public
    280:    virtual ~Thread();
  W075 Virtual function is public
    117:    virtual bool EnqMsg(MsgBuffer& msg);
    191:    virtual TraceStatus CalcStatus(bool dynamic) const;
    251:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
* W077 Virtual function has no overrides
    117:    virtual bool EnqMsg(MsgBuffer& msg);
    251:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
    293:    virtual MsgBuffer* DeqMsg(const msecs_t& timeout);
  W082 Adjacent arguments have the same type
    657:    void DisplaySummary(std::ostream& stream,
* W090 Function could be const
    135:    bool Interrupt(FlagId reason);
    178:    void SetStatus(TraceStatus status);
    287:    void SetInitialized();
    431:    void Reset(FlagId fid);
    435:    void Ready();
    439:    void Preempt();
    458:    void Proceed();
    497:    void UpdateMutex(Mutex* mutex);
    505:    void UpdateMutexCount(bool acquired);
    557:    bool LogTrap(const Exception* ex,
    605:    void SetTrap(bool on);
    613:    void StackCheck();
    617:    void SetSignal(signal_t sig);
  W121 Static member function has indirect argument for its class
    600/1:    static void Trace(Thread* thr, fn_name_arg func,
nb/ThreadAdmin.cpp
* W106 Function does not invoke Debug::ft
    207: static ThreadAdmin* AccessAdminData()
    293: bool ThreadAdmin::BreakEnabled()
    369: void ThreadAdmin::Incr(Register r)
    457: bool ThreadAdmin::ReinitOnSchedTimeout()
    465: word ThreadAdmin::RtcInterval()
    473: word ThreadAdmin::RtcLimit()
    481: msecs_t ThreadAdmin::RtcTimeout()
    490: msecs_t ThreadAdmin::SchedTimeout()
    510: word ThreadAdmin::StackCheckInterval()
    518: word ThreadAdmin::StackUsageLimit()
    550: word ThreadAdmin::TrapCount()
    562: word ThreadAdmin::TrapInterval()
    570: word ThreadAdmin::TrapLimit()
    578: bool ThreadAdmin::TrapOnRtcTimeout()
  W110 Override of Base.Display not found
    56: class ThreadsStats : public Dynamic
nb/ThreadAdmin.h
* W099 Line contains adjacent spaces
    182:    CfgIntParmPtr  initTimeoutMsecs_;
    183:    CfgIntParmPtr  schedTimeoutMsecs_;
    185:    CfgIntParmPtr  rtcTimeoutMsecs_;
    187:    CfgIntParmPtr  rtcLimit_;
    188:    CfgIntParmPtr  rtcInterval_;
    190:    CfgIntParmPtr  trapLimit_;
    191:    CfgIntParmPtr  trapInterval_;
    193:    CfgIntParmPtr  stackUsageLimit_;
    194:    CfgIntParmPtr  stackCheckInterval_;
nb/ThreadRegistry.cpp
* W106 Function does not invoke Debug::ft
    51: static bool IsSortedByThreadId(const Thread* thr1, const Thread* thr2)
    335: Thread* ThreadRegistry::FindThread(SysThreadId nid) const NO_FT
    344: ThreadId ThreadRegistry::FindTid(SysThreadId nid) const NO_FT
    399: Thread* ThreadRegistry::GetThread(ThreadId tid) const
    414: std::vector<Thread*> ThreadRegistry::GetThreads() const
    456: bool ThreadRegistry::IsDeleted() const
    480: size_t ThreadRegistry::PreemptableCount() const
    642: size_t ThreadRegistry::Size()
nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast<const Tool*>(&local);
nb/Tool.h
  W075 Virtual function is public
    60:    virtual c_string Name() const = 0;
    64:    virtual c_string Expl() const = 0;
    70:    virtual std::string Status() const;
nb/ToolRegistry.cpp
* W106 Function does not invoke Debug::ft
    120: Tool* ToolRegistry::GetTool(FlagId id) const
nb/ToolTypes.h
* W030 Unused enumerator
    66:    TraceFailed,        // operation failed for some other reason
nb/TraceBuffer.cpp
  W004 C-style cast
    216:    buff_ = (TraceRecord**)
    220:    funcs_ = (FunctionTrace*)
  W005 Functional cast
    593:    stream << indent << "buffsize : " << int(std::log2(size_));
  W007 Cast down the inheritance hierarchy
    447:          auto ft = static_cast<FunctionTrace*>(rec);
    478:          auto ft = static_cast<FunctionTrace*>(rec);
* W106 Function does not invoke Debug::ft
    112: TraceBuffer::TraceBuffer() :
    148: TraceBuffer::~TraceBuffer()
    168: void* TraceBuffer::AddFunction()
    236: uint32_t TraceBuffer::AllocSlot()
    386: bool TraceBuffer::Empty() const
    404: bool TraceBuffer::Insert(TraceRecord* record)
    436: fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
    468: const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
    488: void TraceBuffer::Lock()
    495: void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
    515: void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
    626: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    791: void TraceBuffer::Unlock()
* W117 Line can merge with the next line and be under the length limit
    559:          (curr->slot_ != TraceRecord::InvalidSlot) &&
  W119 Argument passed by value is modified
    188/1: bool TraceBuffer::AllocBuffers(size_t n)
    367/1: TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
nb/TraceBuffer.h
  W026 Unused argument
    152/1:    TraceRc StartTracing(const std::string& opts);
* W032 Unused function
    182:    const SystemTime::Point& StartTime() const { return startTime_; }
  W110 Override of Base.Display not found
    64: class TraceBuffer : public Permanent
nb/TraceRecord.h
* W042 Member could be private
    54:    static const uint32_t InvalidSlot;
  W050 Data is not private
    125:    Id rid_ : 8;
  W075 Virtual function is public
    83:    virtual bool Display(std::ostream& stream, const std::string& opts);
* W090 Function could be const
    105:    virtual void ClaimBlocks() { }
nt/FunctionProfiler.cpp
  W004 C-style cast
    93:    functionq_ = (Q2Way<FunctionStats>*) Memory::Alloc(size, MemTemporary);
  W007 Cast down the inheritance hierarchy
    203:             auto ft = static_cast<FunctionTrace*>(rec);
* W022 Add using statement
    0:  // namespace NodeBase
  W082 Adjacent arguments have the same type
    60: static void CheckHigh(FunctionStats*& high,
* W106 Function does not invoke Debug::ft
    60: static void CheckHigh(FunctionStats*& high,
nt/FunctionProfiler.h
* W020 Using statement in header
    37: using namespace NodeBase;
* W090 Function could be const
    84:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W110 Override of Base.Display not found
    48: class FunctionProfiler : public Temporary
nt/FunctionStats.cpp
  W006 reinterpret_cast
    78:    auto fake = reinterpret_cast<const FunctionStats*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    49: int FunctionStats::Compare(const FunctionStats& that) const
    67: void FunctionStats::IncrCalls(const usecs_t& net)
nt/FunctionStats.h
* W020 Using statement in header
    31: using namespace NodeBase;
* W053 Data could be const
    91:    Q2Link link_;
nt/NtIncrement.cpp
  W005 Functional cast
    3180:    auto test = RecoveryThread::Test(index);
  W006 reinterpret_cast
    1603:    auto fake = reinterpret_cast<const Q1WayItem*>(&local);
    2097:    auto fake = reinterpret_cast<const Q2WayItem*>(&local);
    2608:    auto fake = reinterpret_cast<const RegistryItem*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
* W053 Data could be const
    1469:    Q1Link link_;
    1955:    Q2Link link_;
  W082 Adjacent arguments have the same type
    193:    static word Sort(const string& input, const string& output, string& expl);
* W106 Function does not invoke Debug::ft
    1025: static Heap* AccessHeap()
    1035: static Heap* EnsureHeap()
    1045: static word CheckHeap(bool shouldExist, const CliThread& cli, Heap*& heap)
    1582: Q1WayItem::~Q1WayItem()
    1613: Q1WayPool::Q1WayPool()
    1642: void Q1WayPool::Reallocate()
    2076: Q2WayItem::~Q2WayItem()
    2107: Q2WayPool::Q2WayPool()
    2136: void Q2WayPool::Reallocate()
    2598: RegistryItem::~RegistryItem()
    2626: RegistryPool::RegistryPool()
  W110 Override of Base.Display not found
    1348: class LbcPool : public Temporary
nt/NtIncrement.h
* W020 Using statement in header
    32: using namespace NodeBase;
* W028 Unused data
    80:    static const id_t LastNtIndex = FuncTraceScope;
* W060 Base class constructor is public
    44:    CorruptWhatParm();
    56:    explicit CorruptCommand(bool bind = true);
    98:    NtSaveWhatParm();
    110:    explicit NtSaveCommand(bool bind = true);
    123:    TestsAction();
    144:    explicit TestsCommand(bool bind = true);
nt/NtModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
nt/NtModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    62:    return static_cast<NtTestData*>(data);
* W022 Add using statement
    0:  // namespace NodeBase
nt/NtTestData.h
* W020 Using statement in header
    31: using namespace NodeBase;
* W090 Function could be const
    81:    void Reset();
nt/RecoveryThread.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W048 Data is write-only
    187:    int data_;
  W107 Function does not invoke Debug::ft as first statement
    295:       Debug::ft(RecoveryThread_Enter);
  W110 Override of Base.Display not found
    181: class ReadOnlyData : public Protected
nt/RecoveryThread.h
* W020 Using statement in header
    35: using namespace NodeBase;
nt/TestDatabase.cpp
* W106 Function does not invoke Debug::ft
    148: TestDatabase::State TestDatabase::GetState(const string& testname)
nt/TestDatabase.h
  W110 Override of Base.Display not found
    41: class TestDatabase : public NodeBase::Temporary
nw/ByteBuffer.h
  W056 Implicit constructor invoked: POD members not initialized
    63: class TinyBuffer : public ByteBuffer
    74: class SmallBuffer : public ByteBuffer
    85: class MediumBuffer : public ByteBuffer
    96: class LargeBuffer : public ByteBuffer
    107: class HugeBuffer : public ByteBuffer
  W075 Virtual function is public
    44:    virtual NodeBase::byte_t* Bytes() = 0;
    48:    virtual size_t Size() const = 0;
  W110 Override of Base.Display not found
    63: class TinyBuffer : public ByteBuffer
    74: class SmallBuffer : public ByteBuffer
    85: class MediumBuffer : public ByteBuffer
    96: class LargeBuffer : public ByteBuffer
    107: class HugeBuffer : public ByteBuffer
* W111 Override of Object.Patch not found
    35: class ByteBuffer : public NodeBase::Pooled
    63: class TinyBuffer : public ByteBuffer
    74: class SmallBuffer : public ByteBuffer
    85: class MediumBuffer : public ByteBuffer
    96: class LargeBuffer : public ByteBuffer
    107: class HugeBuffer : public ByteBuffer
nw/InputHandler.h
  W026 Unused argument
    138/3:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
    143/1:    virtual void SocketFailed(SysSocket* socket) const { }
* W043 Member could be protected
    71:    IpPort* Port() const { return port_; }
  W075 Virtual function is public
    101:    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
    109:    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
    128:    virtual void ReceiveBuff
    137:    virtual NodeBase::byte_t* HostToNetwork
    143:    virtual void SocketFailed(SysSocket* socket) const { }
* W088 Argument could be const
    138/1:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
nw/IoThread.cpp
  W004 C-style cast
    78:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  W009 Pointer arithmetic
    187:       source += rcvd;
  W119 Argument passed by value is modified
    141/2:    (const IpPort& port, const byte_t* source, size_t size) const
    141/3:    (const IpPort& port, const byte_t* source, size_t size) const
nw/IoThread.h
* W042 Member could be private
    87:    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  W050 Data is not private
    91:    const ipport_t port_;
    96:    IpPort* ipPort_;
    100:    SysIpL2Addr self_;
    104:    size_t recvs_;
    108:    SysIpL3Addr txAddr_;
    113:    SysIpL3Addr rxAddr_;
    117:    NodeBase::SteadyTime::Point time_;
    121:    NodeBase::byte_t* buffer_;
nw/IpBuffer.cpp
  W004 C-style cast
    158:    bytes_ = (byte_t*) newbytes;
  W009 Pointer arithmetic
    134:       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
    134:       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
    238:       bytes = bytes_ + hdrSize_;
    262:    bytes += hdrSize_;
* W106 Function does not invoke Debug::ft
    194: TraceStatus IpBuffer::GetStatus() const
nw/IpBuffer.h
  W009 Pointer arithmetic
    111:    NodeBase::byte_t* PayloadPtr() const { return bytes_ + hdrSize_; }
* W060 Base class constructor is public
    55:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  W075 Virtual function is public
    64:    virtual IpBuffer* Clone() const;
    124:    virtual size_t PayloadSize() const;
    143:    virtual bool AddBytes
  W082 Adjacent arguments have the same type
    55:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
* W127 Data could be free
    50:    static const size_t MaxBuffSize; // IpBuffer.cpp
nw/IpPort.cpp
  W006 reinterpret_cast
    307:    auto fake = reinterpret_cast<const IpPort*>(&local);
* W099 Line contains adjacent spaces
    60:    CounterPtr       recvs_;
    61:    AccumulatorPtr   bytesRcvd_;
    64:    CounterPtr       discards_;
    65:    CounterPtr       rejects_;
    66:    CounterPtr       sends_;
    67:    AccumulatorPtr   bytesSent_;
    69:    CounterPtr       overflows_;
* W106 Function does not invoke Debug::ft
    221: size_t IpPort::Discards() const
  W110 Override of Base.Display not found
    54: class IpPortStats : public Dynamic
nw/IpPort.h
* W042 Member could be private
    193:    virtual IoThread* CreateIoThread();
* W053 Data could be const
    211:    NodeBase::Q1Link link_;
  W075 Virtual function is public
    106:    virtual SysTcpSocket* CreateAppSocket();
    155:    virtual void DisplayStats
* W077 Virtual function has no overrides
    155:    virtual void DisplayStats
* W090 Function could be const
    193:    virtual IoThread* CreateIoThread();
nw/IpPortRegistry.cpp
* W106 Function does not invoke Debug::ft
    290: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
    548: bool IpPortRegistry::UseIPv6()
  W110 Override of Base.Display not found
    60: class LocalAddrCfg : public CfgStrParm
nw/IpService.cpp
  W006 reinterpret_cast
    72:    auto fake = reinterpret_cast<const IpService*>(&local);
nw/IpService.h
* W020 Using statement in header
    38: using namespace NodeBase;
* W053 Data could be const
    160:    RegCell sid_;
  W075 Virtual function is public
    63:    virtual c_string Name() const = 0;
    67:    virtual ipport_t Port() const = 0;
    71:    virtual IpProtocol Protocol() const = 0;
    75:    virtual Faction GetFaction() const = 0;
    80:    virtual bool Enabled() const = 0;
    84:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    88:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
    95:    virtual CliText* CreateText() const = 0;
    101:    virtual bool HasSharedSocket() const = 0;
    109:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
* W077 Virtual function has no overrides
    84:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    88:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
* W090 Function could be const
    156:    virtual IpPort* CreatePort(ipport_t pid) = 0;
nw/IpServiceCfg.h
* W020 Using statement in header
    29: using namespace NodeBase;
* W053 Data could be const
    60:    IpService* const service_;
  W082 Adjacent arguments have the same type
    43:    IpServiceCfg(c_string key, c_string def, c_string expl, IpService* service);
  W110 Override of Base.Display not found
    38: class IpServiceCfg : public CfgBoolParm
nw/IpServiceRegistry.cpp
* W106 Function does not invoke Debug::ft
    80: std::vector<IpService*> IpServiceRegistry::GetServices(const string& name) const
nw/IpServiceRegistry.h
* W032 Unused function
    61:    std::vector<IpService*> GetServices(const std::string& name) const;
nw/LocalAddrTest.cpp
  W006 reinterpret_cast
    243:       auto payload = reinterpret_cast<SysIpL3Addr*>(buff->PayloadPtr());
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    122: bool SendLocalIpService::Enabled() const
nw/LocalAddrTest.h
* W020 Using statement in header
    33: using namespace NodeBase;
  W110 Override of Base.Display not found
    110: class SendLocalIpService : public UdpIpService
nw/NwCliParms.h
* W060 Base class constructor is public
    68:    IpAddrParm(NodeBase::c_string help, NodeBase::c_string text);
nw/NwDaemons.cpp
  W007 Cast down the inheritance hierarchy
    261:       (this, static_cast<const TcpIpService*>(service), port);
    272:    auto daemon = static_cast<TcpIoDaemon*>(reg->FindDaemon(name.c_str()));
    321:       (this, static_cast<const UdpIpService*>(service), port);
    332:    auto daemon = static_cast<UdpIoDaemon*>(reg->FindDaemon(name.c_str()));
nw/NwDaemons.h
* W053 Data could be const
    98:    IoThreadRecreator* recreator_;
nw/NwIncrement.h
* W060 Base class constructor is public
    39:    NwClearWhatParm();
    54:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    97:    NwIncludeWhatParm();
    110:    explicit NwIncludeCommand(bool bind = true);
    127:    explicit NwQueryCommand(bool bind = true);
    142:    NwStatusCommand() = default;
nw/NwLogs.cpp
* W106 Function does not invoke Debug::ft
    152: static void UpdateAlarm
  W107 Function does not invoke Debug::ft as first statement
    102:    Debug::ft("NetworkBase.NetworkIsUp");
  W119 Argument passed by value is modified
    115/1: void OutputNwLog(LogId id, c_string func, nwerr_t errval, c_string extra)
nw/NwTracer.h
* W042 Member could be private
    63:    bool PeersEmpty() const;
    67:    bool PortsEmpty() const;
  W110 Override of Base.Display not found
    40: class NwTracer : public NodeBase::Permanent
nw/NwTypes.h
* W028 Unused data
    108: constexpr ipport_t FirstAppIpPort = 1024;
    114: constexpr ipport_t LastAppIpPort = MaxIpPort;
* W053 Data could be const
    60:       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
* W099 Line contains adjacent spaces
    60:       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
nw/SysIpL2Addr.cpp
  W005 Functional cast
    64:    byte = uint8_t(value);
    101:    quartet = uint16_t(value);
* W106 Function does not invoke Debug::ft
    358: const SysIpL2Addr& SysIpL2Addr::NullIpAddr()
nw/SysIpL2Addr.h
* W032 Unused function
    113:    static const SysIpL2Addr& NullIpAddr();
    117:    const IPv6Addr& Addr() const { return addr_; }
* W043 Member could be protected
    57:    SysIpL2Addr(const SysIpL2Addr& that) = default;
* W060 Base class constructor is public
    42:    SysIpL2Addr();
    49:    SysIpL2Addr(const std::string& text);
  W075 Virtual function is public
    73:    virtual void Nullify();
* W092 Function could be free
    113:    static const SysIpL2Addr& NullIpAddr(); // SysIpL2Addr.cpp
nw/SysIpL2Addr.win.cpp
  W004 C-style cast
    66:                auto netaddr = (sockaddr_in*) curr->ai_addr;
    74:                auto netaddr = (sockaddr_in6*) curr->ai_addr;
  W056 Implicit constructor invoked: POD members not initialized
  i 50:       addrinfo hints;
* W106 Function does not invoke Debug::ft
    127: bool SysIpL2Addr::SupportsIPv6()
nw/SysIpL3Addr.cpp
  W005 Functional cast
    64:    port = ipport_t(value);
nw/SysIpL3Addr.h
  W037 Member hides inherited name
    105:    void HostToNetwork(IPv4Addr& netaddr, ipport_t& netport) const;
    110:    void HostToNetwork(uint16_t netaddr[8], ipport_t& netport) const;
    115:    void NetworkToHost(IPv4Addr netaddr, ipport_t netport);
    120:    void NetworkToHost(const uint16_t netaddr[8], ipport_t netport);
    160:    std::string to_str(bool verbose) const;
* W060 Base class constructor is public
    41:    SysIpL3Addr();
    46:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    53:    SysIpL3Addr(IPv4Addr netaddr, ipport_t netport,
    60:    SysIpL3Addr(const uint16_t netaddr[8], ipport_t netport,
    69:    explicit SysIpL3Addr(const std::string& text);
    79:    SysIpL3Addr
  W082 Adjacent arguments have the same type
    79:    SysIpL3Addr
nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    65:          auto netaddr = (sockaddr_in*) info->ai_addr;
    88:          auto netaddr = (sockaddr_in6*) info->ai_addr;
    138:       HostToNetwork((IPv4Addr&) ipv4addr.sin_addr.s_addr, ipv4addr.sin_port);
    139:       addrinfo = (sockaddr*) &ipv4addr;
    148:       addrinfo = (sockaddr*) &ipv6addr;
  W056 Implicit constructor invoked: POD members not initialized
  i 51:    addrinfo hints;
  i 132:    sockaddr_in ipv4addr;
  i 133:    sockaddr_in6 ipv6addr;
nw/SysSocket.cpp
* W106 Function does not invoke Debug::ft
    155: bool SysSocket::SetTracing(bool tracing)
    185: bool SysSocket::TraceEnabled()
nw/SysSocket.h
* W032 Unused function
    50: uint64_t htonll(uint64_t hostllong);
    53: uint64_t ntohll(uint64_t netllong);
* W043 Member could be protected
    107:    bool IsValid() const;
    128:    virtual AllocRc SetService(const IpService* service, bool shared);
    145:    void OutputLog(NodeBase::LogId id,
* W065 Base class virtual destructor is not public
    214:    virtual ~SysSocket();
  W075 Virtual function is public
    99:    virtual IpProtocol Protocol() const { return IpAny; }
    128:    virtual AllocRc SetService(const IpService* service, bool shared);
    134:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
nw/SysSocket.win.cpp
  W004 C-style cast
    109:          (const char*)&dual, sizeof(dual)) == SOCKET_ERROR)
    135:       addr = (sockaddr*) &ipv4addr;
    145:       addr = (sockaddr*) &ipv6addr;
    276:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    283:       (char*) &max, &maxsize) == SOCKET_ERROR)
    295:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    302:       (char*) &max, &maxsize) == SOCKET_ERROR)
* W015 #include not sorted in standard order
    28: #include <WinSock2.h>
  W056 Implicit constructor invoked: POD members not initialized
  i 127:    sockaddr_in ipv4addr;
  i 128:    sockaddr_in6 ipv6addr;
  i 322:    WSAData wsaData;
* W106 Function does not invoke Debug::ft
    43: uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
    45: uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
    47: uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
    49: uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
    51: uint64_t ntohll(uint64_t netllong) { return ::ntohll(netllong); }
    53: uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
    228: bool SysSocket::IsValid() const
nw/SysTcpSocket.cpp
  W119 Argument passed by value is modified
    246/1: SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
nw/SysTcpSocket.h
* W032 Unused function
    143:    bool LocAddr(SysIpL3Addr& locAddr);
    198:    IpBuffer* IcMsg() const { return icMsg_; }
* W042 Member could be private
    90:    NodeBase::word Connect(const SysIpL3Addr& remAddr);
    138:    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
    160:    bool SetClose(bool graceful);
    189:    bool IsOpen() const;
  W075 Virtual function is public
    181:    virtual void Acquire();
    185:    virtual void Release();
* W077 Virtual function has no overrides
    181:    virtual void Acquire();
    185:    virtual void Release();
nw/SysTcpSocket.win.cpp
  W004 C-style cast
    56:       peer = (sockaddr*) &ipv6peer;
    61:       peer = (sockaddr*) &ipv4peer;
    111:       peer = (sockaddr*) &ipv6peer;
    118:          ((IPv4Addr&) ipv4peer.sin_addr.s_addr, ipv4peer.sin_port);
    119:       peer = (sockaddr*) &ipv4peer;
    200:       self = (sockaddr*) &ipv6self;
    205:       self = (sockaddr*) &ipv4self;
    338:       peer = (sockaddr*) &ipv6peer;
    343:       peer = (sockaddr*) &ipv4peer;
    409:       (char*) &linger_opts, sizeof(linger)) != SOCKET_ERROR)
    435:       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
    445:       (char*) &val, &valsize) == SOCKET_ERROR)
  W006 reinterpret_cast
    311:    auto rcvd = recv(Socket(), reinterpret_cast<char*>(buff), size, 0);
    382:    auto sent = send(Socket(), reinterpret_cast<const char*>(data), size, 0);
  W007 Cast down the inheritance hierarchy
    432:    bool alive = static_cast<const TcpIpService*>(service)->Keepalive();
  W056 Implicit constructor invoked: POD members not initialized
  i 47:    sockaddr_in ipv4peer;
  i 48:    sockaddr_in6 ipv6peer;
  i 98:    sockaddr_in ipv4peer;
  i 99:    sockaddr_in6 ipv6peer;
  i 191:    sockaddr_in ipv4self;
  i 192:    sockaddr_in6 ipv6self;
  i 329:    sockaddr_in ipv4peer;
  i 330:    sockaddr_in6 ipv6peer;
  i 404:    linger linger_opts;
  W119 Argument passed by value is modified
    165/1: word SysTcpSocket::Listen(size_t backlog)
nw/SysUdpSocket.h
* W042 Member could be private
    73:    NodeBase::word SendTo
nw/SysUdpSocket.win.cpp
  W004 C-style cast
    58:          (char*) &max, &maxsize) == SOCKET_ERROR)
    99:       peer = (sockaddr*) &ipv6peer;
    104:       peer = (sockaddr*) &ipv4peer;
    185:       peer = (sockaddr*) &ipv6peer;
    192:          ((IPv4Addr&) ipv4peer.sin_addr.s_addr, ipv4peer.sin_port);
    193:       peer = (sockaddr*) &ipv4peer;
  W006 reinterpret_cast
    109:       reinterpret_cast<char*>(buff), size, 0, peer, &peersize);
    198:       reinterpret_cast<const char*>(data), size, 0, peer, peersize);
  W056 Implicit constructor invoked: POD members not initialized
  i 90:    sockaddr_in ipv4peer;
  i 91:    sockaddr_in6 ipv6peer;
  i 172:    sockaddr_in ipv4peer;
  i 173:    sockaddr_in6 ipv6peer;
nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    215:    auto registrant = static_cast<SysTcpSocket*>(ipPort_->GetSocket());
    225:    auto svc = static_cast<const TcpIpService*>(ipPort_->GetService());
    310:    auto registrant = static_cast<SysTcpSocket*>(ipPort_->GetSocket());
    472:    auto sock = static_cast<SysTcpSocket*>(socket);
* W106 Function does not invoke Debug::ft
    492: SysTcpSocket* TcpIoThread::Listener() const
nw/TcpIoThread.h
* W042 Member could be private
    75:    void Unblock() override;
nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    61:    auto thread = static_cast<TcpIoThread*>(GetThread());
    67:       thread = static_cast<TcpIoThread*>(CreateThread());
    73:    auto svc = static_cast<const TcpIpService*>(GetService());
    93:    auto svc = static_cast<const TcpIpService*>(GetService());
nw/TcpIpService.h
* W042 Member could be private
    86:    IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    40:    virtual bool AcceptsConns() const { return true; }
    45:    virtual size_t MaxConns() const = 0;
    50:    virtual size_t MaxBacklog() const = 0;
    54:    virtual bool Keepalive() const { return false; }
nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    96:    auto socket = static_cast<SysUdpSocket*>(ipPort_->GetSocket());
    100:       auto svc = static_cast<const UdpIpService*>(ipPort_->GetService());
    201:       auto socket = static_cast<SysUdpSocket*>(ipPort_->GetSocket());
    216:       auto socket = static_cast<SysUdpSocket*>(ipPort_->GetSocket());
nw/UdpIoThread.h
* W042 Member could be private
    58:    void Unblock() override;
* W090 Function could be const
    62:    void ReleaseResources();
nw/UdpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto svc = static_cast<const UdpIpService*>(GetService());
nw/UdpIpService.h
* W042 Member could be private
    59:    IpPort* CreatePort(ipport_t pid) override;
on/OnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
on/OnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PbModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PbModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsBicFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsBicFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsBocFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsBocFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsCfbFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
pb/PotsCfbFeature.h
* W020 Using statement in header
    30: using namespace CallBase;
    31: using namespace NodeBase;
pb/PotsCfnFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
pb/PotsCfnFeature.h
* W020 Using statement in header
    31: using namespace CallBase;
    32: using namespace NodeBase;
pb/PotsCfuFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
pb/PotsCfuFeature.h
* W020 Using statement in header
    30: using namespace CallBase;
    31: using namespace NodeBase;
pb/PotsCircuit.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
pb/PotsCircuit.h
* W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
    42: using namespace NodeBase;
    43: using namespace SessionBase;
* W032 Unused function
    93:    bool IsRinging() const { return ringing_; }
    97:    bool CanFlash() const { return flash_; }
    102:    Cause::Ind GetCause() const { return cause_; }
* W042 Member could be private
    134:    void ResetCircuit();
pb/PotsCliParms.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsCliParms.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsCwtFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsCwtFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsCxfFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsCxfFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsFeature.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast<const PotsFeature*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsFeature.h
  W005 Functional cast
    72:    Id Fid() const { return Id(fid_.GetId()); }
* W020 Using statement in header
    39: using namespace NodeBase;
  W026 Unused argument
    95/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
* W042 Member could be private
    72:    Id Fid() const { return Id(fid_.GetId()); }
    80:    c_string FullName() const { return name_; }
    84:    bool CanBeDeactivated() const { return deactivation_; }
  W075 Virtual function is public
    94:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    107:    PotsFeature(Id fid, bool deactivation, c_string abbr, c_string name);
pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    94:    auto fake = reinterpret_cast<const PotsFeatureProfile*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsFeatureProfile.h
* W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    63/1:    virtual bool Deactivate(PotsProfile& profile);
    87/1:    virtual bool Unsubscribe(PotsProfile& profile);
* W042 Member could be private
    67:    PotsFeature::Id Fid() const { return fid_; }
* W053 Data could be const
    99:    Q1Link link_;
* W065 Base class virtual destructor is not public
    80:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    58:    virtual bool Activate(const PotsProfile& profile, CliThread& cli);  //d
    63:    virtual bool Deactivate(PotsProfile& profile);
* W077 Virtual function has no overrides
    87:    virtual bool Unsubscribe(PotsProfile& profile);
pb/PotsFeatureRegistry.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
pb/PotsFeatureRegistry.h
* W020 Using statement in header
    36: using namespace NodeBase;
* W090 Function could be const
    66:    void Audit();
pb/PotsFeatures.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    105: void DnRouteFeatureProfile::SetActive(bool on)
    113: void DnRouteFeatureProfile::SetDN(Address::DN dn)
pb/PotsFeatures.h
* W020 Using statement in header
    29: using namespace CallBase;
    30: using namespace NodeBase;
pb/PotsHtlFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
pb/PotsHtlFeature.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
* W053 Data could be const
    59:    Address::DN dn_;
pb/PotsIncrement.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsMessages.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
pb/PotsProfile.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast<const PotsProfile*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
pb/PotsProfile.h
* W020 Using statement in header
    36: using namespace NodeBase;
    37: using namespace CallBase;
    38: using namespace SessionBase;
* W090 Function could be const
    108:    void SetState(const ProtocolSM* psm, State state);
    118:    bool SetObjAddr(const MsgPort& port);
  W110 Override of Base.Display not found
    81:    struct PotsProfileDynamic : public Persistent
pb/PotsProfileRegistry.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    107: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
pb/PotsProfileRegistry.h
* W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
pb/PotsProtocol.cpp
  W006 reinterpret_cast
    454:    reinterpret_cast<const PotsFacilityInfo*>(bytes)->Display(stream, prefix);
    636:    reinterpret_cast<const PotsHeaderInfo*>(bytes)->Display(stream, prefix);
    749:    reinterpret_cast<const PotsRingInfo*>(bytes)->Display(stream, prefix);
    831:    reinterpret_cast<const PotsScanInfo*>(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    467:    auto&            pmsg = static_cast<PotsMessage&>(msg);
    524:    const auto&       pmsg = static_cast<const PotsMessage&>(msg);
    648:    auto&          pmsg = static_cast<PotsMessage&>(msg);
    672:    const auto&     pmsg = static_cast<const PotsMessage&>(msg);
    760:    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
    842:    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    464:    id_t             index;
    465:    word             sid, ind;
    467:    auto&            pmsg = static_cast<PotsMessage&>(msg);
    523:    TestRc            rc;
    524:    const auto&       pmsg = static_cast<const PotsMessage&>(msg);
    526:    id_t              index;
    527:    word              sid, ind;
    646:    word           port;
    648:    auto&          pmsg = static_cast<PotsMessage&>(msg);
    671:    TestRc          rc;
    672:    const auto&     pmsg = static_cast<const PotsMessage&>(msg);
    673:    word            port;
    759:    TestRc        rc;
    760:    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
    762:    bool          ring = false;
    763:    auto          exists = false;
    841:    TestRc        rc;
    842:    const auto&   pmsg = static_cast<const PotsMessage&>(msg);
    844:    string        scan;
    845:    auto          digits = false;
    846:    auto          flash = false;
    847:    auto          exists = false;
pb/PotsProtocol.h
* W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
* W028 Unused data
    105:    static const Id LastId    = NextId + 9;  // range constant
    133:    static const Id LastId   = NextId + 7;  // range constant
* W032 Unused function
    287:    MediaInfo* AddMedia(const MediaInfo& media);
  W038 Class could be namespace
    213: class Facility
* W043 Member could be protected
    263:    explicit PotsMessage(SbIpBufferPtr& buff);
* W060 Base class constructor is public
    263:    explicit PotsMessage(SbIpBufferPtr& buff);
    267:    PotsMessage(ProtocolSM* psm, size_t size);
pb/PotsSusFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsSusFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsTwcFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
pb/PotsTwcFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
pb/PotsWmlFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
pb/PotsWmlFeature.h
* W020 Using statement in header
    31: using namespace CallBase;
    32: using namespace NodeBase;
rn/RnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
rn/RnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
rsc/main.cpp
* W015 #include not sorted in standard order
    33: #include "SysTypes.h"
* W032 Unused function
    125: main_t main(int argc, char* argv[])
sb/AnalyzeSapEvent.cpp
* W106 Function does not invoke Debug::ft
    86: void AnalyzeSapEvent::Capture
sb/AnalyzeSnpEvent.cpp
* W106 Function does not invoke Debug::ft
    82: void AnalyzeSnpEvent::Capture
sb/Context.cpp
  W006 reinterpret_cast
    571:    auto fake = reinterpret_cast<const Context*>(&local);
    860:             auto toi = reinterpret_cast<TimeoutInfo*>(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    751:                inv = static_cast<InvokerThread*>(Thread::RunningThread());
    856:          auto pptr = static_cast<TlvMessage*>(m)->FindParm(Parameter::Timeout);
* W032 Unused function
    75:    SbException(debug64_t errval, debug64_t offset);
* W106 Function does not invoke Debug::ft
    338: void Context::Dump() const
    925: bool Context::TraceOn()
    935: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    683:    Debug::ft(Context_ProcessWork);
  W119 Argument passed by value is modified
    388/3: void Context::Enqueue(Q2Way<Context>& whichq, MsgPriority prio, bool henq)
    677/1: void Context::ProcessWork(InvokerThread* inv)
sb/Context.h
* W032 Unused function
    124:    static void Dump(NodeBase::fn_name_arg func,
  W037 Member hides inherited name
    165:    static ptrdiff_t LinkDiff();
* W042 Member could be private
    157:    bool StopTimer(const Base& owner, TimerId tid);
    191:    virtual void EndOfTransaction() { }
* W053 Data could be const
    307:    NodeBase::Q2Link link_;
    331:    NodeBase::Faction faction_;
* W065 Base class virtual destructor is not public
    187:    virtual ~Context();
  W075 Virtual function is public
    98:    virtual ContextType Type() const = 0;
    102:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    106:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    110:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    131:    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
* W088 Argument could be const
    286/1:    bool ProcessMsg(NodeBase::Q1Way<Message>& msgq, const InvokerThread* inv);
* W090 Function could be const
    157:    bool StopTimer(const Base& owner, TimerId tid);
    191:    virtual void EndOfTransaction() { }
  W141 Function could move to a subclass
    191:    virtual void EndOfTransaction() { } // MsgContext
sb/Event.cpp
* W106 Function does not invoke Debug::ft
    137: void Event::Capture
sb/Event.h
* W042 Member could be private
    129:    virtual bool Save();
    133:    virtual Event* Restore(EventHandler::Rc& rc);
    137:    virtual void Free();
* W043 Member could be protected
    95:    enum Location
sb/EventHandler.h
  W075 Virtual function is public
    122:    virtual Rc ProcessEvent
* W111 Override of Object.Patch not found
    47: class EventHandler : public NodeBase::Immutable
sb/Factory.cpp
  W005 Functional cast
    245:       if(icSignals_[i]) stream << int(i) << SPACE;
    253:       if(ogSignals_[i]) stream << int(i) << SPACE;
  W006 reinterpret_cast
    202:    auto fake = reinterpret_cast<const Factory*>(&local);
* W099 Line contains adjacent spaces
    54:    CounterPtr       icMsgsIntra_;
    55:    CounterPtr       icMsgsInter_;
    57:    CounterPtr       ogMsgsIntra_;
    58:    CounterPtr       ogMsgsInter_;
    60:    CounterPtr       contexts_;
    61:    CounterPtr       msgsDeleted_;
    62:    CounterPtr       ctxsDeleted_;
* W106 Function does not invoke Debug::ft
    217: size_t Factory::DiscardedContextCount() const
    224: size_t Factory::DiscardedMessageCount() const
  W110 Override of Base.Display not found
    46: class FactoryStats : public Dynamic
sb/Factory.h
  W005 Functional cast
    90:    Id Fid() const { return Id(fid_.GetId()); }
  W026 Unused argument
    130/1:    virtual Message* AllocOgMsg(SignalId sid) const;
    150/1:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    150/2:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
* W030 Unused enumerator
    84:       PortAllocFailed,      // failed to create PSM for context
* W032 Unused function
    230:    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
* W042 Member could be private
    150:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    234:    virtual Context* AllocContext() const;
  W075 Virtual function is public
    124:    virtual NodeBase::CliText* CreateText() const;
    130:    virtual Message* AllocOgMsg(SignalId sid) const;
    137:    virtual bool InjectMsg(Message& msg) const;
    143:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    150:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    160:    virtual bool ScreenIcMsgs(NodeBase::Q1Way<Message>& msgq);
    182:    virtual void DisplayStats
* W077 Virtual function has no overrides
    182:    virtual void DisplayStats
  W082 Adjacent arguments have the same type
    167:    void RecordMsg(bool incoming, bool inter, size_t size) const;
* W088 Argument could be const
    160/1:    virtual bool ScreenIcMsgs(NodeBase::Q1Way<Message>& msgq);
* W090 Function could be const
    160:    virtual bool ScreenIcMsgs(NodeBase::Q1Way<Message>& msgq);
    256:    virtual Rc ReceiveMsg
  W141 Function could move to a subclass
    234:    virtual Context* AllocContext() const; // PsmFactory
sb/GlobalAddress.h
* W032 Unused function
    47:    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
    66:    GlobalAddress(GlobalAddress&& that) = default;
  W082 Adjacent arguments have the same type
    51:    GlobalAddress
sb/InitiationReqEvent.cpp
* W106 Function does not invoke Debug::ft
    84: void InitiationReqEvent::Capture
sb/Initiator.cpp
  W006 reinterpret_cast
    218:    auto fake = reinterpret_cast<const Initiator*>(&local);
sb/Initiator.h
* W053 Data could be const
    141:    NodeBase::Q1Link link_;
* W065 Base class virtual destructor is not public
    103:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    98:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
* W088 Argument could be const
    112/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
sb/InvokerPool.cpp
  W006 reinterpret_cast
    283:    auto fake = reinterpret_cast<const InvokerPool*>(&local);
  W007 Cast down the inheritance hierarchy
    240:    invokersCfg_.reset(static_cast<CfgIntParm*>(reg->FindParm(parmKey)));
    566:       auto inv = static_cast<InvokerThread*>(Thread::RunningThread());
* W099 Line contains adjacent spaces
    120:    CounterPtr       requeues_;
    121:    CounterPtr       trojans_;
    122:    CounterPtr       lockouts_;
* W106 Function does not invoke Debug::ft
    737: void InvokerPool::RecordDelay(MsgPriority prio, const nsecs_t& delay) const
    789: size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
    797: nsecs_t InvokerPool::WorkQMaxDelay(MsgPriority prio) const
    805: size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  W110 Override of Base.Display not found
    111: class InvokerPoolStats : public Dynamic
    152: class InvokerWork : public Dynamic
sb/InvokerPool.h
  W005 Functional cast
    72:       { return NodeBase::Faction(faction_.GetId()); }
* W042 Member could be private
    76:    const NodeBase::Registry<InvokerThread>& Invokers() const
  W075 Virtual function is public
    95:    virtual void DisplayStats
* W077 Virtual function has no overrides
    95:    virtual void DisplayStats
* W090 Function could be const
    154:    void KickThread();
    158:    Context* FindWork();
    177:    void Requeue(Context& ctx);
    185:    void ScheduledOut();
sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    89:       auto p = reg->Pool(Faction(id));
* W106 Function does not invoke Debug::ft
    171: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
sb/InvokerThread.cpp
  W006 reinterpret_cast
    130:    auto fake = reinterpret_cast<const InvokerThread*>(&local);
* W106 Function does not invoke Debug::ft
    119: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
sb/InvokerThread.h
* W042 Member could be private
    57:    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
* W053 Data could be const
    132:    NodeBase::RegCell iid_;
    158:    static NodeBase::word RtcYieldPercent_;
sb/LocalAddress.h
* W032 Unused function
    55:    LocalAddress(LocalAddress&& that) = default;
sb/Message.cpp
* W106 Function does not invoke Debug::ft
    237: MsgDirection Message::Dir() const
    324: ProtocolId Message::GetProtocol() const
    355: SignalId Message::GetSignal() const
    410: MsgHeader* Message::Header() const
    479: bool Message::Passes(uint32_t selector) const
  W119 Argument passed by value is modified
    603/1: bool Message::Retrieve(ProtocolSM* psm)
    670/1: bool Message::Send(Route route)
  W125 Non-const cast is not a downcast
    968:          auto bt = dynamic_cast<const BuffTrace*>(bt_);
sb/Message.h
* W029 Unused enum
    72:    enum Location
* W030 Unused enumerator
    88:       IllegalSignal,   // illegal signal found              0000  sid
    89:       IllegalParm,     // illegal parameter found          index  pid
    90:       IncompleteParm,  // parameter too short              index  pid
    91:       MissingParm,     // mandatory parameter missing       0000  pid
    92:       Overflow,        // last parameter extends past end  index  pid
    93:       Trampled         // last parameter trampled fence    index  pid
* W032 Unused function
    181:    Message* FindSignal(SignalId sid) const;
* W042 Member could be private
    333:    virtual void Handled(bool retain);
    337:    virtual bool SendFailure(NodeBase::debug64_t errval);
* W043 Member could be protected
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    241:    NodeBase::MsgDirection Dir() const;
  W075 Virtual function is public
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    262:    virtual bool Send(Route route);
    266:    virtual bool Restore();
* W077 Virtual function has no overrides
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    266:    virtual bool Restore();
    320:    virtual void Refresh();
    333:    virtual void Handled(bool retain);
    337:    virtual bool SendFailure(NodeBase::debug64_t errval);
    345:    virtual void ClearContext() const;
* W088 Argument could be const
    132/1:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
* W090 Function could be const
    110:    void SetSignal(SignalId sid);
    114:    void SetJoin(bool join);
    225:    void SetProtocol(ProtocolId prid);
    229:    void SetPriority(MsgPriority prio);
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    362:    void SetRxAddr(const LocalAddress& rxaddr);
sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    75:    static_cast<MsgFactory*>(fac)->ProcessIcMsg(msg);
sb/MsgHeader.h
* W099 Line contains adjacent spaces
    42:    LocalAddress   txAddr;         // source address
    43:    LocalAddress   rxAddr;         // destination address
    44:    MsgPriority    priority : 2;   // message's priority
    45:    bool           initial  : 1;   // true for initial message
    46:    bool           final    : 1;   // true for final message
    47:    bool           join     : 1;   // true to create PSM and join root SSM
    48:    bool           self     : 1;   // true for message to self
    49:    bool           injected : 1;   // true if sent by InjectCommand
    50:    bool           kill     : 1;   // true to kill context on arrival
    51:    uint8_t        spare    : 6;   // reserved for future use
    52:    Message::Route route    : 2;   // the route that the message took
    53:    ProtocolId     protocol : 16;  // message's protocol
    54:    SignalId       signal   : 16;  // message's signal
    55:    uint16_t       length   : 16;  // total bytes in all parameters
sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    75:    locAddr_.sbAddr_.fid = static_cast<ProtocolSM&>(upper).GetFactory();
    147:    return static_cast<PsmFactory*>(fac)->AllocIcPsm(msg, *this);
    205:    auto port = static_cast<MsgPort*>(pool->BidToObj(locAddr.bid));
    260:       static_cast<PsmFactory*>(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    342:    return const_cast<MsgPort*>(this);
* W106 Function does not invoke Debug::ft
    324: bool MsgPort::Passes(uint32_t selector) const
sb/MsgPort.h
* W042 Member could be private
    53:    MsgPort(const Message& msg, Context& ctx);
sb/Parameter.cpp
  W006 reinterpret_cast
    109:    auto fake = reinterpret_cast<const Parameter*>(&local);
* W106 Function does not invoke Debug::ft
    199: Parameter::Usage Parameter::GetUsage(SignalId sid) const
sb/Parameter.h
  W005 Functional cast
    85:    Id Pid() const { return Id(pid_.GetId()); }
* W030 Unused enumerator
    121:       StreamContainsIllegalParm,
* W032 Unused function
    89:    ProtocolId Prid() const { return prid_; }
  W075 Virtual function is public
    99:    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
    108:    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
    137:    virtual TestRc InjectMsg
    150:    virtual TestRc VerifyMsg
sb/Protocol.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast<const Protocol*>(&local);
* W106 Function does not invoke Debug::ft
    131: Parameter* Protocol::FirstParm() const
    144: Signal* Protocol::FirstSignal() const
    157: Parameter* Protocol::GetParameter(ParameterId pid) const
    169: Signal* Protocol::GetSignal(SignalId sid) const
    181: void Protocol::NextParm(Parameter*& parm) const
    194: void Protocol::NextSignal(Signal*& sig) const
sb/Protocol.h
  W075 Virtual function is public
    77:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    83:    virtual void DisplayMsg(std::ostream& stream,
sb/ProtocolLayer.h
  W026 Unused argument
    150/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
* W032 Unused function
    68:    bool IsLowermost() const { return lower_ == nullptr; }
* W042 Member could be private
    89:    virtual FactoryId GetFactory() const = 0;
* W043 Member could be protected
    64:    bool IsUppermost() const { return upper_ == nullptr; }
* W065 Base class virtual destructor is not public
    126:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    52:    virtual MsgPort* Port() const = 0;
    56:    virtual ProtocolSM* UppermostPsm() const = 0;
    89:    virtual FactoryId GetFactory() const = 0;
    93:    virtual Message::Route Route() const = 0;
    102:    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
* W090 Function could be const
    167:    virtual Message* UnwrapMsg(Message& msg);
    174:    virtual Message* WrapMsg(Message& msg);
sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    405:       auto psm = static_cast<ProtocolSM*>(layer);
  W008 Cast removes const qualification
    650:    if(upper == nullptr) return const_cast<ProtocolSM*>(this);
* W106 Function does not invoke Debug::ft
    445: bool ProtocolSM::Passes(uint32_t selector) const
sb/ProtocolSM.h
  W026 Unused argument
    290/1:    virtual void MsgHandled(Message& msg) { }
    296/1:    virtual void RestoreIcMsg(Message& msg) { }
    302/1:    virtual void RefreshMsg(Message& msg) { }
* W030 Unused enumerator
    95:       SignalUnknown,     // signal not recognized
    97:       ParameterUnknown,  // parameter not recognized
    98:       ParameterInvalid,  // parameter not valid for this signal
* W032 Unused function
    135:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    166:    bool DropPeer(const GlobalAddress& peerPrevRemAddr);
* W042 Member could be private
    143:    ProtocolId GetProtocol() const;
    255:    bool SendMsg(Message& msg) override;
* W043 Member could be protected
    75:    enum IncomingRc
    84:    enum OutgoingRc
    129:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
* W077 Virtual function has no overrides
    241:    virtual void SetState(StateId stid);
    285:    virtual Priority GetPriority() const { return NormalPriority; }
    290:    virtual void MsgHandled(Message& msg) { }
    296:    virtual void RestoreIcMsg(Message& msg) { }
    302:    virtual void RefreshMsg(Message& msg) { }
* W090 Function could be const
    116:    void StopTimer(const Base& owner, TimerId tid);
sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    47:    ctx_ = static_cast<SsmContext*>(Context::RunningContext());
sb/RootServiceSM.h
  W026 Unused argument
    46/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    46:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
sb/SbDaemons.cpp
  W007 Cast down the inheritance hierarchy
    119:    auto daemon = static_cast<InvokerDaemon*>(reg->FindDaemon(name.c_str()));
sb/SbEvents.h
* W032 Unused function
    91:    StateId CurrState() const { return currState_; }
    131:    Message* SavedMsg() const { return savedMsg_; }
    227:    StateId CurrState() const { return currState_; }
    231:    StateId NextState() const { return nextState_; }
    372:    bool IsInitiation() const { return initiation_; }
    383:    Message* GetMessage() const { return message_; }
sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    51:    auto pid = ssm.CalcPort(static_cast<const AnalyzeMsgEvent&>(currEvent));
    121:    auto& fte = static_cast<ForceTransitionEvent&>(currEvent);
    135:    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
sb/SbIncrement.cpp
  W004 C-style cast
    767:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    724:       auto pool = reg->Pool(Faction(sf));
sb/SbIncrement.h
* W028 Unused data
    55:    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
    85:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
sb/SbInputHandler.cpp
  W006 reinterpret_cast
    75:    auto header = reinterpret_cast<const MsgHeader*>(source);
  W007 Cast down the inheritance hierarchy
    103:    SbIpBufferPtr sbbuff(static_cast<SbIpBuffer*>(buff.release()));
sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    62:       (static_cast<CfgIntParm*>(reg->FindParm("NoIngressQueueLength")));
    73:       (static_cast<CfgIntParm*>(reg->FindParm("NoIngressMessageCount")));
sb/SbIpBuffer.cpp
* W023 Remove using statement
    38: using namespace NetworkBase;
sb/SbIpBuffer.h
  W006 reinterpret_cast
    62:       { return reinterpret_cast<MsgHeader*>(HeaderPtr()); }
sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    185:          auto ctx = static_cast<const Context*>(*obj);
    272:          auto msg = static_cast<const Message*>(*obj);
    343:       auto port = static_cast<MsgPort*>(obj);
    377:          auto port = static_cast<const MsgPort*>(*obj);
    432:    auto psm = static_cast<ProtocolSM*>(NextUsed(PsmToAudit_));
    449:       psm = static_cast<ProtocolSM*>(NextUsed(PsmToAudit_));
    488:          auto psm = static_cast<const ProtocolSM*>(*obj);
    546:          auto ssm = static_cast<const ServiceSM*>(*obj);
    661:          auto tmr = static_cast<const Timer*>(*obj);
* W106 Function does not invoke Debug::ft
    605: void TimerPool::IncrTimeouts() const
sb/SbPools.h
  W110 Override of Base.Display not found
    183: class TimerPool : public NodeBase::ObjectPool
sb/SbTrace.cpp
  W005 Functional cast
    103:    width -= col_t(label.size());
    193:          stream << strClass(reg->Services().At(ServiceId(cid_)), false);
    198:          stream << strClass(reg->Factories().At(FactoryId(cid_)), false);
  W007 Cast down the inheritance hierarchy
    403:          bt = static_cast<BuffTrace*>(rec);
    856:       curr_ = static_cast<const AnalyzeSapEvent&>(sxp).CurrEvent()->Eid();
    859:       curr_ = static_cast<const AnalyzeSnpEvent&>(sxp).CurrEvent()->Eid();
    886:    mod_((static_cast<const InitiationReqEvent&>(sip)).GetModifier())
  W082 Adjacent arguments have the same type
    69: static void DisplayEvent(ostream& stream, ServiceId sid, EventId eid)
  W119 Argument passed by value is modified
    387/1:    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
sb/SbTrace.h
* W042 Member could be private
    520:    const StateId stid_;
  W050 Data is not private
    482:    ServiceId owner_;
    486:    const EventId eid_;
    516:    const ServiceId sid_;
    520:    const StateId stid_;
    524:    const EventHandler::Rc rc_;
* W060 Base class constructor is public
    462:    EventTrace(Id rid, const Event& evt);
    503:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    174:    static BuffTrace* NextIcMsg
  W121 Static member function has indirect argument for its class
    175/1:       (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip);
sb/SbTracer.h
  W082 Adjacent arguments have the same type
    136:    NodeBase::TraceRc SelectSignal
    190:       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  W110 Override of Base.Display not found
    113: class SbTracer : public NodeBase::Permanent
sb/Service.cpp
  W006 reinterpret_cast
    285:    auto fake = reinterpret_cast<const Service*>(&local);
* W106 Function does not invoke Debug::ft
    366: size_t Service::EventCount() const
    389: Trigger* Service::GetTrigger(TriggerId tid) const
sb/Service.h
  W005 Functional cast
    66:    Id Sid() const { return Id(sid_.GetId()); }
* W032 Unused function
    122:    bool Disable();
    126:    bool Enable();
* W042 Member could be private
    80:    static bool IsValidPortId(PortId pid)
    112:    bool IsModifiable() const { return modifiable_; }
* W043 Member could be protected
    88:    virtual NodeBase::c_string PortName(PortId pid) const;
  W075 Virtual function is public
    88:    virtual NodeBase::c_string PortName(PortId pid) const;
    108:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    184:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
sb/ServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    474:             tid = static_cast<AnalyzeSapEvent*>(sapEvent)->GetTrigger();
    478:          modifierSsm = static_cast<AnalyzeSapEvent*>(sapEvent)->CurrSsm();
    479:          currEvent = static_cast<AnalyzeSapEvent*>(sapEvent)->CurrEvent();
    530:             tid = static_cast<AnalyzeSapEvent*>(sapEvent)->GetTrigger();
    536:          currEvent = static_cast<AnalyzeSapEvent*>(sapEvent)->CurrEvent();
    537:          modifierInit = static_cast<AnalyzeSapEvent*>
    790:             else if(static_cast<AnalyzeSapEvent*>(nextEvent)
    793:             else if(static_cast<AnalyzeSapEvent*>(nextEvent)
    891:          initEvent = static_cast<InitiationReqEvent*>(nextEvent);
    895:             initEvent->SetSapEvent(static_cast<AnalyzeSapEvent&>(sapEvent));
    957:             auto sibling = static_cast<InitiationReqEvent*>
    998:    auto& initEvent = static_cast<InitiationReqEvent&>(currEvent);
* W106 Function does not invoke Debug::ft
    313: SsmContext* ServiceSM::GetContext() const
    327: Service* ServiceSM::GetService() const
    397: bool ServiceSM::Passes(uint32_t selector) const
* W117 Line can merge with the next line and be under the length limit
    791:                   ->CurrInitiator() != nullptr)
    794:                   ->CurrSsm() != nullptr)
  W119 Argument passed by value is modified
    418/1: EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
    858/2:    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
    926/2:    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
sb/ServiceSM.h
  W026 Unused argument
    83/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    195/1:       (Event& currEvent, Event*& nextEvent);
    195/2:       (Event& currEvent, Event*& nextEvent);
* W032 Unused function
    136:    bool HasTriggered(TriggerId tid) const;
* W042 Member could be private
    99:    StateId NextState() const { return nextState_; }
* W065 Base class virtual destructor is not public
    175:    virtual ~ServiceSM();
  W075 Virtual function is public
    63:    virtual SsmContext* GetContext() const;
    71:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    77:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    83:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    104:    virtual void SetNextState(StateId stid);
    111:    virtual void PsmDeleted(const ProtocolSM& exPsm);
    125:    virtual void SetNextSap(TriggerId sap);
    131:    virtual void SetNextSnp(TriggerId snp);
    143:    virtual void MorphToService(ServiceId sid);
* W077 Virtual function has no overrides
    143:    virtual void MorphToService(ServiceId sid);
* W090 Function could be const
    194:    virtual EventHandler::Rc ProcessInitNack
    243:    EventHandler::Rc ProcessSsmqSap
    254:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
sb/Signal.cpp
  W006 reinterpret_cast
    82:    auto fake = reinterpret_cast<const Signal*>(&local);
sb/Signal.h
  W005 Functional cast
    81:    Id Sid() const { return Id(sid_.GetId()); }
* W032 Unused function
    85:    ProtocolId Prid() const { return prid_; }
  W075 Virtual function is public
    92:    virtual NodeBase::CliText* CreateText() const;
sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    82:    return static_cast<SsmFactory*>(fac)->AllocRoot(msg, psm);
sb/SsmFactory.h
  W026 Unused argument
    48/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    42:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    48:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    56:    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
sb/State.cpp
  W006 reinterpret_cast
    198:    auto fake = reinterpret_cast<const State*>(&local);
* W106 Function does not invoke Debug::ft
    127: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    162: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    246: EventHandlerId State::GetHandler(EventId eid) const
    254: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
sb/State.h
  W005 Functional cast
    60:    Id Stid() const { return Id(stid_.GetId()); }
* W032 Unused function
    64:    ServiceId Sid() const { return sid_; }
sb/TextTlvMessage.h
  W027 Unused class
    37: class TextTlvMessage : public TlvMessage
* W032 Unused function
    58:    explicit TextTlvMessage(SbIpBufferPtr& buff);
    62:    TextTlvMessage(ProtocolSM* psm, size_t size);
    68:    bool Receive();
* W077 Virtual function has no overrides
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
* W090 Function could be const
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
sb/Timer.cpp
  W006 reinterpret_cast
    188:    auto fake = reinterpret_cast<const Timer*>(&local);
* W106 Function does not invoke Debug::ft
    203: bool Timer::Passes(uint32_t selector) const
sb/Timer.h
  W037 Member hides inherited name
    109:    static ptrdiff_t LinkDiff();
* W053 Data could be const
    137:    TimerId tid_;
    149:    NodeBase::Q2Link link_;
sb/TimerProtocol.cpp
  W006 reinterpret_cast
    106:    auto toi = reinterpret_cast<const TimeoutInfo*>(bytes);
sb/TimerProtocol.h
* W111 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
sb/TimerRegistry.cpp
  W119 Argument passed by value is modified
    76/1: Timer::QId TimerRegistry::CalcQId(uint32_t secs) const
sb/TimerThread.cpp
* W106 Function does not invoke Debug::ft
    62: TraceStatus TimerThread::CalcStatus(bool dynamic) const
sb/TlvIntParameter.h
  W007 Cast down the inheritance hierarchy
    69:       auto& tlvmsg = static_cast<TlvMessage&>(msg);
    101:       const auto& tlvmsg = static_cast<const TlvMessage&>(msg);
sb/TlvMessage.cpp
  W004 C-style cast
    166:    auto pptr = (TlvParm*) (layout->bytes + layout->header.length);
    250:    return (Fence*) fence;
    395:    pit.pptr = (TlvParm*) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    64:    auto encap = reinterpret_cast<const TlvMsgLayout*>(parm.bytes);
    459:    auto encap = reinterpret_cast<TlvMsgLayout*>(pptr->bytes);
  W008 Cast removes const qualification
    395:    pit.pptr = (TlvParm*) &pit.mptr->bytes[nextIndex];
  W009 Pointer arithmetic
    166:    auto pptr = (TlvParm*) (layout->bytes + layout->header.length);
    249:    auto fence = layout->bytes + layout->header.length;
  W119 Argument passed by value is modified
    223/2: TlvParm* TlvMessage::CopyParm(const TlvParm& src, ParameterId pid)
sb/TlvMessage.h
  W006 reinterpret_cast
    79:       return reinterpret_cast<T*>(pptr->bytes);
    93:       auto dest = reinterpret_cast<T*>(pptr->bytes);
    128:       parm = (pptr == nullptr ? nullptr : reinterpret_cast<T*>(pptr->bytes));
    281:       { return reinterpret_cast<TlvMsgLayout*>(Buffer()->HeaderPtr()); }
* W032 Unused function
    58:    TlvMessage(const TlvParm& parm, ProtocolSM* psm);
    67:    virtual TlvParm* Wrap(const TlvMessage& msg, ParameterId pid);
    176:    size_t AllParms(const TlvParm* ptab[], size_t size) const;
    182:    size_t FindParms(ParameterId pid, const TlvParm* ptab[], size_t size) const;
    196:    TlvParm* AddBytes(const NodeBase::byte_t* src, size_t size, ParameterId pid);
    202:    TlvParm* CopyParm(const TlvParm& src, ParameterId pid = NodeBase::NIL_ID);
    263:    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
    270:    virtual bool MatchParm
    286:    size_t ParmOffset(const ParmIterator& pit) const;
* W042 Member could be private
    147:       ParmIterator() : mptr(nullptr), pptr(nullptr), pindex(0) { }
    150:       ParmIterator& operator=(const ParmIterator& that) = default;
    165:    TlvParm* FirstParm(ParmIterator& pit) const;
    170:    TlvParm* NextParm(ParmIterator& pit) const;
    191:    virtual TlvParm* AddParm(ParameterId pid, size_t plen);
    276:    virtual void AddFence();
    280:    TlvMsgLayout* TlvLayout() const
    291:    Fence* FencePtr() const;
    295:    void CheckFence() const;
* W060 Base class constructor is public
    50:    TlvMessage(ProtocolSM* psm, size_t size);
    58:    TlvMessage(const TlvParm& parm, ProtocolSM* psm);
  W075 Virtual function is public
    67:    virtual TlvParm* Wrap(const TlvMessage& msg, ParameterId pid);
    191:    virtual TlvParm* AddParm(ParameterId pid, size_t plen);
    206:    virtual void DeleteParm(TlvParm& parm);
* W077 Virtual function has no overrides
    67:    virtual TlvParm* Wrap(const TlvMessage& msg, ParameterId pid);
    191:    virtual TlvParm* AddParm(ParameterId pid, size_t plen);
    206:    virtual void DeleteParm(TlvParm& parm);
    270:    virtual bool MatchParm
    276:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    104:    template<class T> T* CopyType
* W088 Argument could be const
    206/1:    virtual void DeleteParm(TlvParm& parm);
  W119 Argument passed by value is modified
    105/3:       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    67:    const auto& tmsg = static_cast<const TlvMessage&>(msg);
sb/TlvParameter.h
* W032 Unused function
    68:    static Id ExtractPid(const TlvParm& parm);
* W092 Function could be free
    68:    static Id ExtractPid(const TlvParm& parm); // TlvParameter.cpp
sb/TlvProtocol.cpp
  W006 reinterpret_cast
    67:       auto pptr = reinterpret_cast<TlvParm*>(&bytes[index]);
sb/Trigger.h
* W042 Member could be private
    79:    static bool IsValidId(Id tid)
sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    61:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    96:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    109:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    111:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    128:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    140:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    141:    auto& ode = static_cast<BcOriginationDeniedEvent&>(currEvent);
    156:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    158:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    164:       auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
    185:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    210:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    237:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    251:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    272:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    284:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    296:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    308:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    320:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    322:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    339:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    358:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    370:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    383:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    397:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    398:    auto& rre = static_cast<BcRemoteReleaseEvent&>(currEvent);
    412:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    424:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    426:    auto cmsg = static_cast<CipMessage*>(npsm->FirstRcvdMsg());
    453:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    465:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    466:    auto& tde = static_cast<BcTerminationDeniedEvent&>(currEvent);
    478:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    479:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    497:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    514:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    526:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    528:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    551:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    577:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    589:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    602:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    615:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    617:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    635:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    647:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    663:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    665:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    682:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    707:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    723:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    736:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    752:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    765:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    781:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    783:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    792:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    817:    auto& ate = static_cast<BcApplyTreatmentEvent&>(currEvent);
    818:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    854:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    868:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    882:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    883:    auto& lre = static_cast<BcLocalReleaseEvent&>(currEvent);
    896:    auto& cte = static_cast<BcReleaseCallEvent&>(currEvent);
    897:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    929:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    950:    auto& rue = static_cast<ProxyBcReleaseUserEvent&>(currEvent);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsBcHandlers.h
* W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
sn/PotsBcService.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    75:       auto& ppsm = static_cast<PotsCallPsm&>(psm);
    80:       auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(port));
    88:       SetNPsm(static_cast<CipPsm&>(psm));
    92:       SetUPsm(static_cast<MediaPsm&>(psm));
    128:    auto pmsg = static_cast<PotsMessage*>(ame.Msg());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    378: PotsProfile* PotsBcSsm::Profile() const
sn/PotsBcStates.cpp
* W022 Add using statement
    0:  // namespace SessionBase
sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    80:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsBicService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    80:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsBocService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    49:    const auto& icmsg = static_cast<const PotsMessage&>(msg1);
    116:    const auto& pmsg = static_cast<const Pots_UN_Message&>(msg);
    194:       auto pmsg = static_cast<const PotsMessage*>(msg);
    196:       cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
    200:       auto ppsm = static_cast<const PotsCallPsm*>(port.Upper());
    201:       cct = static_cast<PotsCircuit*>(tsw->GetCircuit(ppsm->TsPort()));
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    89:    auto pptr = reinterpret_cast<TlvParm*>(sbuff->PayloadPtr());
    90:    auto phi = reinterpret_cast<PotsHeaderInfo*>(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    87:    auto sbuff = static_cast<SbIpBuffer*>(buff.get());
    108:    auto prof = static_cast<PotsCircuit*>(cct)->Profile();
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCallIpService.cpp
* W022 Add using statement
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    96:       return static_cast<PotsCallPsm*>(psm);
    162:    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
    197:    auto& pmsg = static_cast<Pots_NU_Message&>(msg);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    186:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    244:       auto& ire = static_cast<InitiationReqEvent&>(currEvent);
    265:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    278:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCcwService.h
* W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    53:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
    55:    auto cfbp = static_cast<PotsCfbFeatureProfile*>(prof->FindFeature(CFB));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCfbService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    53:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
    55:    auto cfnp = static_cast<PotsCfnFeatureProfile*>(prof->FindFeature(CFN));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCfnService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    53:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
    55:    auto cfup = static_cast<PotsCfuFeatureProfile*>(prof->FindFeature(CFU));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCfuService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    264:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    269:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    271:       auto& cssm = static_cast<PotsCfxSsm&>(ssm);
    290:    auto& cssm = static_cast<PotsCfxSsm&>(ssm);
    291:    auto& pssm = static_cast<PotsBcSsm&>(*cssm.Parent());
    335:       auto pssm = static_cast<PotsBcSsm*>(Parent());
    360:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    437:    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
    439:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    452:          cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFU));
    474:          cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFU));
    488:       cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFU));
    494:       cfxp = static_cast<DnRouteFeatureProfile*>(prof->FindFeature(CFB));
    500:       cfnp = static_cast<PotsCfnFeatureProfile*>(prof->FindFeature(CFN));
    529:    auto& sap = static_cast<AnalyzeSapEvent&>(currEvent);
    532:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    587:       auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    594:    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
    608:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    616:       auto& snp = static_cast<AnalyzeSnpEvent&>(currEvent);
    632:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsCfxService.h
* W020 Using statement in header
    42: using namespace NodeBase;
    43: using namespace SessionBase;
    44: using namespace CallBase;
  W026 Unused argument
    61/1:    explicit PotsCfxSsm(ServiceId sid);
sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1381:          auto ring = reinterpret_cast<PotsRingInfo*>(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    468:    PotsMuxSsm* Mux() const { return static_cast<PotsMuxSsm*>(Parent()); }
    1094:    auto hldNPsm = static_cast<PotsMuxPsm*>(Context::ContextPsm());
    1131:          auto bcUPsm = static_cast<PotsCallPsm*>(psm);
    1201:    auto msg = static_cast<PotsMessage*>(Context::ContextMsg());
    1226:    auto npsm = static_cast<PotsMuxPsm*>(Context::ContextPsm());
    1238:    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
    1298:    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
    1340:    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
    1860:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    1861:    auto pmsg = static_cast<Pots_NU_Message*>(ame.Msg());
    1888:    auto& mux = static_cast<PotsCwmSsm&>(ssm);
    1900:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    1902:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    1909:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    2003:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2005:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    2006:    auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
    2007:    auto npsm = static_cast<PotsMuxPsm*>(pmsg->Psm());
    2100:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2112:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2124:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2136:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2150:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2162:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2174:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2186:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2198:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2199:    auto& are = static_cast<PotsCwmActiveReleaseEvent&>(currEvent);
    2211:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2212:    auto& ire = static_cast<PotsCwmInactiveReleaseEvent&>(currEvent);
    2224:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
    2244:    auto& cwt = static_cast<PotsCwmSsm&>(ssm);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
  W026 Unused argument
    455/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
* W053 Data could be const
    190:    Cause::Ind cause_;
* W117 Line can merge with the next line and be under the length limit
    611:    BindEventHandler
    625:    BindEventHandler
    629:    BindEventHandler
    631:    BindEventHandler
    633:    BindEventHandler
    637:    BindEventHandler
    645:    BindEventHandler
    647:    BindEventHandler
sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    297:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
    569:    auto& sap = static_cast<AnalyzeSapEvent&>(currEvent);
    574:       auto pssm = static_cast<PotsBcSsm*>(Parent());
    575:       auto ate = static_cast<BcApplyTreatmentEvent*>(sap.CurrEvent());
    590:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    598:       auto& snp = static_cast<AnalyzeSnpEvent&>(currEvent);
    629:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    657:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    743:    auto& init = static_cast<InitiationReqEvent&>(currEvent);
    745:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    838:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    860:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    880:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    882:    auto& cwtssm = static_cast<PotsCwbSsm&>(ssm);
    888:       auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
    911:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    934:    auto& cwtssm = static_cast<PotsCwbSsm&>(ssm);
    935:    auto& pssm = static_cast<PotsBcSsm&>(*ssm.Parent());
    953:    auto& relevt = static_cast<PotsCwtReleaseEvent&>(currEvent);
    954:    auto& cwtssm = static_cast<PotsCwbSsm&>(ssm);
    958:       auto pssm = static_cast<PotsBcSsm*>(cwtssm.Parent());
    977:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    979:    auto& cwtssm = static_cast<PotsCwtSsm&>(ssm);
    983:       auto pmsg = static_cast<Pots_UN_Message*>(ame.Msg());
    1024:    auto& cwtssm = static_cast<PotsCwtSsm&>(ssm);
    1025:    auto& relevt = static_cast<PotsCwtReleaseEvent&>(currEvent);
    1027:    auto pssm = static_cast<PotsBcSsm*>(cwtssm.Parent());
    1072:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W042 Member could be private
    263:    void StartTimer(TimerId tid, uint32_t secs);
* W053 Data could be const
    154:    Facility::Ind ind_;
  W075 Virtual function is public
    268:    void Cancel() override;
* W117 Line can merge with the next line and be under the length limit
    426:    BindEventHandler
    459:    BindEventHandler
    461:    BindEventHandler
    473:    BindEventHandler
sn/PotsCwtService.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    115:    auto& pssm = static_cast<BcSsm&>(*Parent());
    117:    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    81:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
    154:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    160:       auto htlp = static_cast<PotsHtlFeatureProfile*>(prof->FindFeature(HTL));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsHtlService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    183:    const auto& pmsg = static_cast<const PotsMessage&>(msg);
    229:    const auto& pmsg = static_cast<const PotsMessage&>(msg);
    232:    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(phi->port));
    332:    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
    385:    auto& pmsg = static_cast<Pots_UN_Message&>(msg);
    684:    auto& npsm = static_cast<PotsMuxPsm&>(psm);
    687:    auto cct = static_cast<PotsCircuit*>(tsw->GetCircuit(port));
    752:    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
    814:    auto pmsg = static_cast<PotsMessage*>(Context::ContextMsg());
    910:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    911:    auto pmsg = static_cast<Pots_NU_Message*>(ame.Msg());
    931:    auto& mux = static_cast<PotsMuxSsm&>(ssm);
    956:    auto& mux = static_cast<PotsMuxSsm&>(ssm);
    957:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    978:    auto& mux = static_cast<PotsMuxSsm&>(ssm);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W117 Line can merge with the next line and be under the length limit
    612:    BindEventHandler
    626:    BindEventHandler
sn/PotsMultiplexer.h
* W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
    47: using namespace NodeBase;
    48: using namespace SessionBase;
  W026 Unused argument
    158/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
* W032 Unused function
    77:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
* W042 Member could be private
    160:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    56:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    57:    auto msg = static_cast<CipMessage*>(ame.Msg());
    59:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    91:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    105:    auto msg = static_cast<CipMessage*>(Context::ContextMsg());
    107:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    132:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    133:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    135:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    171:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    181:    auto upsm = static_cast<ProxyBcPsm*>(pssm.UPsm());
    202:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    217:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    236:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    237:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    239:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    282:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    300:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    301:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    303:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    346:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    347:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    349:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    398:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    413:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    428:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    443:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    458:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    489:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    490:    auto upsm = static_cast<MediaPsm*>(Context::ContextPsm());
    517:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    533:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    534:    auto upsm = static_cast<MediaPsm*>(Context::ContextPsm());
    561:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
    579:    auto& cte = static_cast<BcReleaseCallEvent&>(currEvent);
    580:    auto& pssm = static_cast<PotsBcSsm&>(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    132:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    133:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    134:    auto          sid = msg->GetSignal();
    135:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    137:    CauseInfo*    cci;
    236:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    237:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    238:    auto          sid = msg->GetSignal();
    239:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    241:    CauseInfo*    cci;
    300:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    301:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    302:    auto          sid = msg->GetSignal();
    303:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    305:    CauseInfo*    cci;
    346:    auto&         ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    347:    auto          msg = static_cast<CipMessage*>(ame.Msg());
    348:    auto          sid = msg->GetSignal();
    349:    auto&         pssm = static_cast<PotsBcSsm&>(ssm);
    351:    CauseInfo*    cci;
sn/PotsProxyHandlers.h
* W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
sn/PotsProxySessions.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
sn/PotsProxySessions.h
* W020 Using statement in header
    28: using namespace CallBase;
    29: using namespace NodeBase;
sn/PotsSessions.h
* W020 Using statement in header
    44: using namespace CallBase;
    45: using namespace NetworkBase;
    46: using namespace NodeBase;
    47: using namespace SessionBase;
* W042 Member could be private
    410:    ProtocolSM* TimerPsm(TimerId tid) const;
sn/PotsStatistics.cpp
* W022 Add using statement
    0:  // namespace CallBase::Cause
    0:  // namespace NodeBase
sn/PotsStatistics.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    79:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsSusService.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
sn/PotsTreatmentRegistry.cpp
* W022 Add using statement
    0:  // namespace CallBase::Cause
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    118: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    199: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
sn/PotsTreatmentRegistry.h
* W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
* W042 Member could be private
    58:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
sn/PotsTreatments.cpp
  W006 reinterpret_cast
    79:    auto fake = reinterpret_cast<const PotsTreatmentQueue*>(&local);
    188:    auto fake = reinterpret_cast<const PotsTreatment*>(&local);
  W007 Cast down the inheritance hierarchy
    235:    auto pssm = static_cast<PotsBcSsm*>(ate.Owner());
    274:    auto pssm = static_cast<PotsBcSsm*>(ate.Owner());
    300:    auto pssm = static_cast<PotsBcSsm*>(ate.Owner());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsTreatments.h
* W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
* W042 Member could be private
    96:    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
* W053 Data could be const
    168:    PotsTreatmentQueue::QId qid_;
    172:    Q1Link link_;
    201:    Tone::Id tone_;
    205:    uint32_t secs_;
  W075 Virtual function is public
    149:    virtual EventHandler::Rc ApplyTreatment
* W117 Line can merge with the next line and be under the length limit
    186:    PotsToneTreatment
sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    193:    const auto& pssm = static_cast<const PotsBcSsm&>(parentSsm);
    195:    auto wmlp = static_cast<PotsWmlFeatureProfile*>(prof->FindFeature(WML));
    391:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    415:    auto& ire = static_cast<InitiationReqEvent&>(currEvent);
    417:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    422:    wmlp_ = static_cast<PotsWmlFeatureProfile*>(prof->FindFeature(WML));
    489:    auto& sap = static_cast<AnalyzeSapEvent&>(currEvent);
    492:    auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    552:       auto& pssm = static_cast<PotsBcSsm&>(*Parent());
    570:    auto pssm = static_cast<PotsBcSsm*>(Parent());
    593:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    598:       auto tmsg = static_cast<TlvMessage*>(ame.Msg());
    600:       auto& wssm = static_cast<PotsWmlSsm&>(ssm);
    619:    auto& wssm = static_cast<PotsWmlSsm&>(ssm);
    620:    auto& pssm = static_cast<PotsBcSsm&>(*wssm.Parent());
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
sn/PotsWmlService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
sn/SnIncrement.cpp
* W022 Add using statement
    0:  // namespace NodeBase
sn/SnIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
sn/SnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
sn/SnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
st/MscAddress.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast<const MscAddress*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    73: bool MscAddress::ExternalFid(FactoryId& fid) const
st/MscAddress.h
* W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    140:          tt = static_cast<const TransTrace*>(rec);
    148:          auto mt = static_cast<const MsgTrace*>(rec);
    675:    auto rxnet = static_cast<const TransTrace*>(events_[index]);
    692:             trans = static_cast<const TransTrace*>(rec);
    704:             return static_cast<const MsgTrace*>(rec);
    719:    auto txmsg = static_cast<const MsgTrace*>(events_[index]);
    740:             trans = static_cast<const TransTrace*>(rec);
    747:             auto rxmsg = static_cast<const MsgTrace*>(rec);
    900:          tt = static_cast<const TransTrace*>(rec);
    936:             mt = static_cast<const MsgTrace*>(rec);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
  W119 Argument passed by value is modified
    1025/1:    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
* W144 Auto variable copies an object returned by const reference
    1280:    auto tools = buff->GetTools();
  W147 Trailing comment not aligned with one above
    52: constexpr size_t MinMsgLine = 5;  // minimum length of horizontal line
st/MscBuilder.h
* W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
st/MscContext.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast<const MscContext*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    81: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
st/MscContext.h
* W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
st/MscContextPair.cpp
  W006 reinterpret_cast
    87:    auto fake = reinterpret_cast<const MscContextPair*>(&local);
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    53: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
st/MscContextPair.h
* W020 Using statement in header
    34: using namespace NodeBase;
st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    112:    auto ctx = static_cast<Context*>(pool->FirstUsed(bid));
* W022 Add using statement
    0:  // namespace NodeBase
st/StIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
st/StModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
st/StModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    64:    return static_cast<StTestData*>(data);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
st/StTestData.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W082 Adjacent arguments have the same type
    78:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    480:    auto tpsm = static_cast<TestPsm*>(Psm());
    495:    auto tssm = static_cast<TestSsm*>(RootSsm());
    543:       if(p->GetFactory() == TestFactoryId) return static_cast<TestPsm*>(p);
    785:       SetTestPsm(static_cast<TestPsm*>(&psm));
    890:    auto& ame = static_cast<AnalyzeMsgEvent&>(currEvent);
    891:    auto tmsg = static_cast<TestMessage*>(ame.Msg());
    924:    auto tmsg = static_cast<TestMessage*>(Context::ContextMsg());
    933:    auto apsm = static_cast<SsmFactory*>(afac)->AllocOgPsm(*amsg);
    944:    auto& tssm = static_cast<TestSsm&>(ssm);
    960:    auto& tssm = static_cast<TestSsm&>(ssm);
    975:    auto tmsg = static_cast<TestMessage*>(Context::ContextMsg());
    976:    auto& tssm = static_cast<TestSsm&>(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W117 Line can merge with the next line and be under the length limit
    706:    BindMsgAnalyzer
    710:    BindEventHandler
    712:    BindEventHandler
    722:    BindMsgAnalyzer
    726:    BindEventHandler
    728:    BindEventHandler
st/TestSessions.h
* W020 Using statement in header
    43: using namespace NodeBase;
    44: using namespace SessionBase;
* W042 Member could be private
    265:    void UpdateTestPsm();
    348:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    354:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
* W090 Function could be const
    265:    void UpdateTestPsm();
* W092 Function could be free
    113:    static TestPsm* Find(const MsgPort& port); // TestSessions.cpp
