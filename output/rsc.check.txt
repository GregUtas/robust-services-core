LINE COUNTS
   81367   source code not in one of the categories below
   42081   blank line
   18666   blank comment
   10484   comment at the top of a file (e.g. for the file's name or license info)
    8142   comment followed by a repeated character to draw a rule (e.g. //---- ...)
   21474   comment not in one of the categories above (e.g. //  <text>)
   16386   bare left brace
   14784   bare right brace
    1603   bare right brace with semicolon
    1803   access control
    5059   invocation of Debug::ft
     695   definition of an fn_name
    6301   #include directive
    1143   preprocessor directive other than #include
     938   using statement
  230926   TOTAL

WARNING COUNTS (* if supported by >fix)
  W004   133  C-style cast
  W005    59  Functional cast
  W006   119  reinterpret_cast
  W007   644  Cast down the inheritance hierarchy
  W008    46  Cast removes const qualification
  W009    15  Pointer arithmetic
* W015     3  #include not sorted in standard order
* W020   168  Using statement in header
* W022   201  Add using statement
  W026    63  Unused argument
  W027     8  Unused class
* W028    39  Unused data
* W029     1  Unused enum
* W030    20  Unused enumerator
* W032   122  Unused function
* W033     1  Unused typedef
* W035     1  No referent for friend declaration
  W037    15  Member hides inherited name
  W038     1  Class could be namespace
* W042   174  Member could be private
* W043    73  Member could be protected
  W044    13  Typedef of pointer type
* W048     2  Data is write-only
  W050    26  Data is not private
* W053    60  Data could be const
* W054     1  Data could be const pointer
* W055     1  Data need not be mutable
  W056     7  Implicit constructor invoked: POD members not initialized
* W060    58  Base class constructor is public
  W062     2  Member not included in member initialization list
* W065    10  Base class virtual destructor is not public
  W075   401  Virtual function is public
* W077    57  Virtual function has no overrides
  W082   113  Adjacent arguments have the same type
* W088    40  Argument could be const
* W090    97  Function could be const
* W092   124  Function could be free
* W099   294  Line contains adjacent spaces
  W102     3  Line length exceeds the standard maximum
* W106   634  Function does not invoke Debug::ft
  W107    17  Function does not invoke Debug::ft as first statement
  W110    40  Override of Base.Display not found
* W111    11  Override of Object.Patch not found
* W117    40  Line can merge with the next line and be under the length limit
  W119    96  Argument passed by value is modified
  W120     5  Function returns non-const reference or pointer to member data
  W121     2  Static member function has indirect argument for its class
  W125     1  Non-const cast is not a downcast
* W127    42  Data could be free
* W130     8  Redundant scope
  W141     3  Function could be moved to a subclass
====================================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE (i = informational)
W004 C-style cast
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(491):    Singleton< TrafficCallPool >::Extant()->Enq((TrafficCall*) addr);
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1051):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDynamic);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(605):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(633):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(538):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(908):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1240):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1453):    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4702):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(391):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1927):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2170):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2977):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3071):    return (CxxScoped*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3084):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(210):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(617):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1570):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1663):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(379):    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(108):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(108):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.cpp(227):    return (Object*) addr;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliPtrParm.cpp(91):          p = (void*) n;
  C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.cpp(161):       auto base = (const Base*) obj;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(313):    auto after = (ptr_t) next_ + size;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(326):       if(wrap && (after > (const_ptr_t) first)) return nullptr;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(333):       if(wrap || (after > (const_ptr_t) first)) return nullptr;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(507):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(507):       used = (const_ptr_t) next_ - (const_ptr_t) first;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(509):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(509):       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(285):    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(326):    heap_->state = (uint8_t*) (heapAddr + infoSize);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(358):          ReleaseBlock((HeapBlock*) addr, level);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(369):       ReserveBlock((HeapBlock*) addr);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(451):       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(496):    auto block = (const HeapBlock*) addr;
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(621):                   if(block < (HeapBlock*) heap_)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(623):                   else if(block < (HeapBlock*) heap_->minAddr)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(692):    FreeBlock((HeapBlock*) addr, level);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(740):    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(820):       auto size = BlockToSize((const HeapBlock*) addr);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(823):       auto index = BlockToIndex((const HeapBlock*) addr, level);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(875):       if((HeapBlock*) block->link.prev->next != block)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(877):       if((HeapBlock*) block->link.next->prev != block)
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(87):    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(312):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, std::nothrow);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(336):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(386):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(422):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(858):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(926):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(951):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(982):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(983):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(987):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(1050):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/Greg/Documents/rsc/rsc/nb/Pooled.cpp(136):    auto obj = (Pooled*) addr;
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(143):       auto ante = (Q1Link*)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(166):       return (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(212):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(233):          item = (Q1Link*)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(247):       elem = (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(260):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(332):          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(340):       auto item = (Q1Link*)                   // start at the current item
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(342):       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(360):       return (Q1Link*) getptr2(&elem, diff_);
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(145):       return (T*) getptr1(item, diff_);    // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(174):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(191):          item = (Q2Link*)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(197):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(208):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(218):       return (T*) getptr1(item, diff_);     // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(235):          item = (Q2Link*)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(241):          elem = (T*) getptr1(item, diff_);  // location of item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(252):       return (T*) getptr1(item, diff_);       // location of next item's vptr
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(336):       return (Q2Link*) getptr2(&elem, diff_);
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(117):       registry_ = (T**) Memory::Alloc(size, mem);
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(507):                auto cell = (RegCell*) getptr2(item, diff_);
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(565):       return (RegCell*) getptr2(&item, diff_);
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(579):       auto table = (T**) Memory::Alloc(size, mem_);
  C:/Users/Greg/Documents/rsc/rsc/nb/Singleton.h(85):       reg->BindInstance((const Base**) &Instance_, type);
  C:/Users/Greg/Documents/rsc/rsc/nb/Singleton.h(104):       reg->UnbindInstance((const Base**) &Instance_);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.win.cpp(214):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(159):       (_beginthreadex_proc_type) entry, (void*) client, 0, &nid);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(159):       (_beginthreadex_proc_type) entry, (void*) client, 0, &nid);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(160):    auto handle = (HANDLE) result;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(314):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(155):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, std::nothrow);
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(214):    buff_ = (TraceRecord**)
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(218):    funcs_ = (FunctionTrace*)
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.cpp(93):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemporary);
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.cpp(79):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp(158):    bytes_ = (byte_t*) newbytes;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(66):                auto netaddr = (sockaddr_in*) curr->ai_addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(74):                auto netaddr = (sockaddr_in6*) curr->ai_addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(65):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(88):          auto netaddr = (sockaddr_in6*) info->ai_addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(139):       addrinfo = (sockaddr*) &ipv4addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(148):       addrinfo = (sockaddr*) &ipv6addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(109):          (const char*)&dual, sizeof(dual)) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(135):       addr = (sockaddr*) &ipv4addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(145):       addr = (sockaddr*) &ipv6addr;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(276):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(283):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(295):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(302):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(55):       peer = (sockaddr*) &ipv6peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(60):       peer = (sockaddr*) &ipv4peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(110):       peer = (sockaddr*)&ipv6peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(117):       peer = (sockaddr*)&ipv4peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(189):       self = (sockaddr*) &ipv6self;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(194):       self = (sockaddr*) &ipv4self;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(327):       peer = (sockaddr*) &ipv6peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(332):       peer = (sockaddr*) &ipv4peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(398):       (char*) &linger_opts, sizeof(linger)) != SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(424):       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(434):       (char*) &val, &valsize) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(52):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(93):       peer = (sockaddr*) &ipv6peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(98):       peer = (sockaddr*) &ipv4peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(162):       peer = (sockaddr*) &ipv6peer;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(169):       peer = (sockaddr*) &ipv4peer;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(696):    ((ProtocolSM*) p)->Kill();
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(166):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(250):    return (Fence*) fence;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(394):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/Greg/Documents/rsc/rsc/cb/DigitString.cpp(127):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/Greg/Documents/rsc/rsc/cb/DigitString.cpp(138):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(224):          << spaces(3) << LineType(t) << CRLF;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(235):          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(236):          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(237):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(296):          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
  C:/Users/Greg/Documents/rsc/rsc/ct/CtIncrement.cpp(1360):       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/Greg/Documents/rsc/rsc/ct/CtIncrement.cpp(1375):    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(589):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(637):          oper = Cxx::Operator(i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(686):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(692):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(697):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1661):             return TypeMatch(match - 1);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(2082):    if(item_->GetTypeSpec()->Tags()->PtrCount(false) >= TagCount(ptrs))
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3658):    if(TagCount(n) >= ptrs_) return false;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3676):    if(TagCount(n) >= ptrs_) return false;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3747):       if(TagCount(n) >= ptrs_) ptrs_ = n + 1;
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2135):    *Cli_->obuf << ": " << Warning(log.warning_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(147):          type = LibTokenType(i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2291):          fp *= std::pow(10.0, int(num));
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2398):          oper = Cxx::Operator(match->second);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(415): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/Greg/Documents/rsc/rsc/mb/Tones.h(73):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(234):       auto type = MemoryType(m);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(727):    return BlockState(state);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(590):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(938):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(1087):          auto type = MemoryType(memtype);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(1101):          auto type = MemoryType(memtype);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(1131):          auto type = MemoryType(m);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(1142):          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(1489):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(3096):       auto heap = Memory::AccessHeap(MemoryType(m));
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTracer.cpp(230):             stream << Faction(f) << CRLF;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(97):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(358):          Truncate(TimeField(int(field) + 1));
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(531):          return OutOfRange(TimeField(f));
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(591):    stream << indent << "buffsize : " << int(std::log2(size_));
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(3208):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(3237):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(4020):    auto test = RecoveryThread::Test(index);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPortCfgParm.h(51):    ipport_t GetPort() const { return ipport_t(CurrValue()); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.cpp(64):    byte = uint8_t(value);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.cpp(101):    quartet = uint16_t(value);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.cpp(64):    port = ipport_t(value);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(72):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(91):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(72):       { return NodeBase::Faction(faction_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(87):       auto p = reg->Pool(Faction(id));
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(85):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(654):       auto pool = reg->Pool(Faction(sc));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(99):    width -= col_t(label.size());
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(188):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(193):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(65):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/Signal.h(81):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/State.h(60):    Id Stid() const { return Id(stid_.GetId()); }
W006 reinterpret_cast
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(68):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(69):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(481):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.cpp(89):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.cpp(112):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.cpp(98):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(382):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(214):    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(517):    auto& dm = reinterpret_cast< const DM_Message& >(message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(518):    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(644):    auto& em = reinterpret_cast< const EM_Message& >(message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(1297):       auto& rm = reinterpret_cast< const RM_Message& >(message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(2086):    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(2158):    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(2299):    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(2303):    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
  C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.cpp(185):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.cpp(214):    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.cpp(100):       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.cpp(129):    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(62):       reinterpret_cast< const IM_Message* >(this)->Display(stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(65):       reinterpret_cast< const RM_Message* >(this)->Display(stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(68):       reinterpret_cast< const DM_Message* >(this)->Display(stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(71):       reinterpret_cast< const FM_Message* >(this)->Display(stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(74):       reinterpret_cast< const EM_Message* >(this)->Display(stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(77):       reinterpret_cast< const BM_Message* >(this)->Display(stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(198):       auto header = reinterpret_cast< const DipHeader* >(source);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(208):       auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(227):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(233):       auto im = reinterpret_cast< IM_Message* >(src);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(241):       auto dm = reinterpret_cast< DM_Message* >(src);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(252):       auto em = reinterpret_cast< EM_Message* >(src);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(279):    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(288):       auto rm = reinterpret_cast< RM_Message* >(msg);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(299):       auto dm = reinterpret_cast< DM_Message* >(msg);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(310):       auto em = reinterpret_cast< EM_Message* >(msg);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(331):    auto header = reinterpret_cast< const DipHeader* >(payload);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(356):    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.cpp(58):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.cpp(97):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.cpp(529):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/mb/Tones.cpp(61):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.cpp(112):    auto fake = reinterpret_cast< const Alarm* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp(95):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp(158):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.cpp(135):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.cpp(93):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.cpp(73):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.cpp(173):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.cpp(102):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.cpp(113):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.cpp(74):    auto fake = reinterpret_cast< const Daemon* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.cpp(133):    auto fake = reinterpret_cast< const Log* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(125):    SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(340):       where = reinterpret_cast< Entry* >(buff_);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(348):    SetNext(reinterpret_cast< Entry* >(after));
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(385):          SetNext(reinterpret_cast< Entry* >(buff_));
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.cpp(120):    auto fake = reinterpret_cast< const LogGroup* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Module.cpp(65):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.cpp(114):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(558):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Pooled.cpp(114):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(71):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.cpp(84):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.cpp(84):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/Symbol.cpp(96):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMutex.cpp(41):    auto fake = reinterpret_cast< const SysMutex* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.cpp(34):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1240):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/Greg/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.cpp(76):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1494):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1988):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(2499):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(299):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.cpp(72):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/nw/LocalAddrTest.cpp(212):          auto payload = reinterpret_cast< SysIpL3Addr* >(buff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(300):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(371):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(103):       reinterpret_cast< char* >(buff), size, 0, peer, &peersize);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(174):       reinterpret_cast< const char* >(data), size, 0, peer, peersize);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.cpp(84):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(94):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.cpp(84):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(453):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(635):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(748):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(830):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(577):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(867):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(201):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.cpp(217):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(283):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.cpp(128):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.cpp(108):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(88):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbInputHandler.cpp(75):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIpBuffer.h(62):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.cpp(287):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/Signal.cpp(81):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/State.cpp(204):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/Timer.cpp(189):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sb/TimerProtocol.cpp(106):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(64):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(458):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(79):       return reinterpret_cast< T* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(93):       auto dest = reinterpret_cast< T* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(128):       parm = (pptr == nullptr ? nullptr : reinterpret_cast< T* >(pptr->bytes));
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(282):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvProtocol.cpp(66):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(89):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(90):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1381):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(80):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(189):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.cpp(85):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.cpp(91):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.cpp(87):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(124):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(137):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(157):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(167):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(66):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.cpp(106):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.cpp(154):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(41):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(43):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(395):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(423):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(690):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(720):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(850):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(1180):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(1185):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp(384):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp(825):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(359):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(360):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(362):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(391):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(400):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(427):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(531):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(672):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(704):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(909):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(914):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDir.cpp(69):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDir.cpp(139):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDir.cpp(156):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.cpp(94):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.cpp(121):       auto dir = static_cast< CodeDir* >(*d);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.cpp(130):       auto dir = static_cast< CodeDir* >(*d);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(79):          auto base = static_cast< const Class* >(*b);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(235):       auto base = static_cast< const Class* >(*b);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(265):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(288):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1021):       auto f = static_cast< const CodeFile* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1029):       auto f = static_cast< const CodeFile* >(*u);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1421):       auto file = static_cast< const CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1623):          auto file = static_cast< const CodeFile* >(*d);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(2019):       auto file = static_cast< const CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(2183):       const auto& name = static_cast< const CodeFile* >(*f)->Name();
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(2365):                auto incl = static_cast< const CodeFile* >(*a);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(2462):          auto file = static_cast< const CodeFile* >(*d);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(2491):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(2522):       auto base = static_cast< const Class* >(*b);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(79):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(192):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(251):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(276):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(307):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(333):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(361):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(404):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(458):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(484):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(510):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Items();
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(517):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(557):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(584):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(737):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(765):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(883):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(963):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(990):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(1020):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(122):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(148):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(176):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(198):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(217):       auto item = static_cast< CxxScoped* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(238):       auto item = static_cast< CxxScoped* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(260):       auto item = static_cast< CxxNamed* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(205):       auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(1010):       auto data = static_cast< const Data* >(item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(1046):       auto func = static_cast< Function* >(item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(1124):       auto cls = static_cast< const Class* >(item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(1148):       auto cls = static_cast< const Class* >(item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(1179):          auto func = static_cast< const Function* >(item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CtIncrement.cpp(1089):          auto dir = static_cast< CodeDir* >(*d);
  C:/Users/Greg/Documents/rsc/rsc/ct/CtIncrement.cpp(1112):          auto file = static_cast< CodeFile* >(*f);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(108):       auto cls = static_cast< Class* >(call->Via()->Root());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(283):          static_cast< const Function* >(item)->IsInline())
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1243):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1246):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1263):          auto c = static_cast< Class* >(*s);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(2711):       auto func = static_cast< const Function* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(2753):       auto func = static_cast< const Function* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(2762):       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(1010):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(1092):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(1105):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1615):          auto derived = static_cast< const Class* >(root);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1717):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1725):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1882):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item_)))
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1936):       auto type = static_cast< TypeSpec* >(item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1946):       spec->SetReferent(static_cast< CxxScoped* >(item_), nullptr);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(2132):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(74):             static_cast< Function* >(tfunc)->SetTemplateParm();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(404):          space = static_cast< Namespace* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(428):          cls = static_cast< Class* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(482):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(493):          auto tdef = static_cast< Typedef* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(498):          item = static_cast< CxxScoped* >(root);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(767):    return static_cast< Class* >(root);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1213):    return (static_cast< Class* >(root)->FindCtor(nullptr) == nullptr);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2073):    auto cls = (type == Cxx::Class ? static_cast< Class* >(inner) : nullptr);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2320):       auto func = static_cast< Function* >(ref);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(89):             auto farg = static_cast< Function* >(a->item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(924):       auto cls = static_cast<const Class*>(scope);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1711):          auto op = static_cast< Operation* >(expr);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1845):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1859):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1911):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1926):    auto item = static_cast< Data* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2013):          static_cast< Block* >(GetScope())->EraseItem(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2029):          static_cast< Block* >(GetScope())->ReplaceItem(this, next_.release());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(3722):    else if(!static_cast< Function* >(item)->virtual_)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4499):       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4512):       auto i = FindArg(static_cast< const Argument* >(item), false);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4559):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5264):    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5719):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5731):    auto func = static_cast< Function* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5976):                auto item = static_cast< CxxNamed* >(args.front().item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(6165):       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(96):          auto func = static_cast< Function* >(GetScope());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(204):       auto& fname = static_cast< Function* >(GetScope())->Name();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(220):    auto cls = static_cast< Class* >(ref);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(244):    auto func = static_cast< Function* >(GetScope());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(308):       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(359):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(371):    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(408):    GetClass()->EraseSubclass(static_cast< Class* >(GetScope()));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(439):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(473):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1194):          ref = static_cast< const Function* >(ref)->FindRootFunc();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1548):    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1838):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1885):    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2082):    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2217):    static_cast< Class* >(grantor_)->EraseFriend(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2316):          space = static_cast< Namespace* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2329):          cls = static_cast< Class* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2368):          auto tdef = static_cast< Typedef* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2373):          item = static_cast< CxxScoped* >(root);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2557):    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2692):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2828):    auto func = static_cast< Function* >(GetScope());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2912):    ref_ = static_cast< ClassData* >(cls->FindData(name_));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3637):    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3835):          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.cpp(404):    static_cast< Block* >(GetScope())->EraseItem(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.cpp(1251):             static_cast< Class* >(result.item_)->InvokeCopyCtor();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(547):    return static_cast< Macro* >(macros.front());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(584):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(592):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(600):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(606):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(962):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(988):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1047):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1080):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1107):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1165):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1188):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1298):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1823):       inClass = static_cast< Class* >(inRoot);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1828):       outClass = static_cast< Class* >(outRoot);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1869):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2264):       func = static_cast< Function* >(proc.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2278):       cls = static_cast< Class* >(proc.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2379):    auto cls = static_cast< Class* >(arg.item_->Root());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2417):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2438):    auto cls = static_cast< Class* >(spec.item_->Root());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2459):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2483):       cls = static_cast< Class* >(root);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2685):       area = static_cast< Class* >(targ);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(3055):    auto cls = static_cast< Class* >(root);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(3122):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(266):       auto func = static_cast< const Function* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(734):    return static_cast< Namespace* >(scope);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(806):    auto defn = static_cast< Data* >(data->GetMate());
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(899):    auto defn = static_cast< Function* >(func->GetMate());
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(927):    auto func = static_cast< const Function* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1165):    auto oper = static_cast< const Operation* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1432):    static_cast< Class* >(log.item_)->SetClassTag(Cxx::StructType);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1481):          static_cast< Forward* >(*f)->SetClassTag(to);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1523):    auto decl = static_cast< CxxScope* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1685):    auto item = static_cast< CxxScope* >(ParseFileItem(pos, space));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1698):          auto tname = static_cast< const TypeName* >(*r);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1712):       UpdateDebugFt(static_cast< Function* >(item));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1748):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1818):    static_cast< Class* >(log.item_)->SetClassTag(Cxx::ClassType);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2077):    auto decl = static_cast< Function* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2462):    static_cast< Function* >(log.item_)->SetExplicit(false);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2558):    static_cast< ClassData* >(log.item_)->SetMutable(false);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2594):    static_cast< Function* >(log.item_)->SetOverride(false);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2615):    auto qname = static_cast< const QualName* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2679):    static_cast< Function* >(log.item_)->SetVirtual(false);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2749):       usages.directs.erase(static_cast< CxxNamed* >(*i));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2750):       usages.indirects.erase(static_cast< CxxNamed* >(*i));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2822):          auto data = static_cast< const Data* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2836):             auto func = static_cast< const Function* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(2850):             auto data = static_cast< const Data* >(*i);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(3000):    return FindSigEnd(static_cast< const Function* >(log.item_));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(3309):    auto data = static_cast< Data* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(3376):    auto func = static_cast< Function* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(3467):    auto data = static_cast< const Data* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4044):    auto data = static_cast< Data* >(aref);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4051):    ReplaceImpl(static_cast< Function* >(log.item_));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4202):    auto func = static_cast< Function* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4552):    auto cls = static_cast< Class* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4853):    auto cls = static_cast< Class* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5294):       ns = static_cast< Namespace* >(ref)->OuterSpace();
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5370):    auto func = static_cast< const Function* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5451):    auto func = static_cast<const Function*>(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5461):       auto slit = static_cast< StrLiteral* >(arg);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5475):    auto data = static_cast< SpaceData* >(arg->Referent());
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5482):    auto slit = static_cast< StrLiteral* >(file_->PosToItem(lpos));
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5509):    static_cast< Ifndef* >(log.item_)->ChangeName(guard);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5574):    auto type = static_cast< TypeName* >(log.item_);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(6141):    static_cast< Function* >(log.item_)->SetExplicit(true);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(6190):    static_cast< Function* >(log.item_)->SetOverride(true);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(6294):    static_cast< Function* >(log.item_)->SetVirtual(true);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(6582):       auto items = GetItemsForDefn(static_cast< const CxxScope* >(next));
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3157):          auto def = static_cast< Define* >(item);
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.cpp(667):             auto f = static_cast< const Function* >(elem);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(482):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(520):    auto op = static_cast< Operation* >(call.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(824):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(899):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(938):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1069):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1070):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1232):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1523):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1690):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1716):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1744):    auto d = static_cast< Do* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1952):    auto f = static_cast< For* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2060):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2112):          curr = static_cast< FuncData* >(data.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2401):             static_cast< If* >(first)->SetElseIf();
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2407):    auto i = static_cast< If* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2550):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2594):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2613):    static_cast< Operation* >(token.get())->SetNew();
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2669):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3083):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3130):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3379):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3405):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3497):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3531):    auto t = static_cast< Try* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3593):    auto op = static_cast< Operation* >(token.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(3889):    auto w = static_cast< While* >(statement.get());
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(4248):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.cpp(201):    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(274):    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(327):    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.cpp(228):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.cpp(86):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.cpp(108):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.cpp(73):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.cpp(173):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/Greg/Documents/rsc/rsc/nb/CoutThread.cpp(87):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.cpp(212):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(567):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(581):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(600):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(628):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(675):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(795):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(817):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(835):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(908):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogThread.cpp(87):       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
  C:/Users/Greg/Documents/rsc/rsc/nb/MemoryTrace.cpp(88):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(445):          auto ft = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(476):          auto ft = static_cast< FunctionTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.cpp(203):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtTestData.cpp(62):    return static_cast< NtTestData* >(data);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwDaemons.cpp(121):    auto daemon = static_cast< TcpIoDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/Greg/Documents/rsc/rsc/nw/NwDaemons.cpp(183):    auto daemon = static_cast< UdpIoDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(421):    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.cpp(213):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.cpp(223):    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.cpp(308):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.cpp(470):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpPort.cpp(61):    auto thread = static_cast< TcpIoThread* >(GetThread());
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpPort.cpp(67):       thread = static_cast< TcpIoThread* >(CreateIoThread());
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpPort.cpp(73):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpPort.cpp(93):    auto svc = static_cast< const TcpIpService* >(GetService());
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.cpp(94):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.cpp(98):       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.cpp(199):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIpPort.cpp(53):    auto svc = static_cast< const UdpIpService* >(GetService());
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsIncrement.cpp(398):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(466):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(523):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(647):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(671):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(759):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(841):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(757):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(862):          auto pptr = static_cast< TlvMessage* >
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(240):    invokersCfg_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(567):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgContext.cpp(75):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.cpp(74):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.cpp(146):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.cpp(204):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.cpp(259):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.cpp(404):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/Greg/Documents/rsc/rsc/sb/RootServiceSM.cpp(47):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/Greg/Documents/rsc/rsc/sb/SbDaemons.cpp(119):    auto daemon = static_cast< InvokerDaemon* >(reg->FindDaemon(name.c_str()));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbHandlers.cpp(50):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbHandlers.cpp(120):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbHandlers.cpp(134):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(761):       auto msg = static_cast< Message* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(846):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(1052):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(1276):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp(1483):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbInputHandler.cpp(103):    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbInvokerPools.cpp(61):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbInvokerPools.cpp(72):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.cpp(204):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.cpp(261):    auto psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.cpp(278):       psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(398):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(851):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(854):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(881):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(448):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(452):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(453):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(504):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(510):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(511):          modifierInit = static_cast< AnalyzeSapEvent* >
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(764):             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(767):             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(865):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(869):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(931):             auto sibling = static_cast< InitiationReqEvent* >
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(972):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/SsmContext.cpp(81):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvIntParameter.h(69):       auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvIntParameter.h(101):       auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.cpp(67):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(58):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(61):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(96):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(109):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(111):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(128):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(140):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(141):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(156):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(158):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(164):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(185):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(210):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(237):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(251):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(272):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(284):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(296):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(308):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(320):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(322):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(339):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(358):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(370):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(383):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(397):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(398):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(412):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(424):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(426):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(453):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(465):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(466):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(478):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(479):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(497):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(514):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(526):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(528):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(551):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(577):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(589):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(602):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(615):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(617):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(635):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(647):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(663):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(665):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(682):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(707):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(723):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(736):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(752):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(765):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(781):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(783):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(792):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(817):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(818):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(854):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(868):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(882):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(883):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(896):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(897):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(929):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(950):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(75):       auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(80):       auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(88):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(92):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(128):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.cpp(80):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.cpp(80):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(49):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(116):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(194):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(196):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(200):       auto ppsm = static_cast< const PotsCallPsm* >(port.Upper());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(201):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(87):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(108):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(96):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(162):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(197):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp(186):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp(244):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp(265):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp(278):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.cpp(53):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.cpp(55):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.cpp(53):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.cpp(55):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.cpp(53):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.cpp(55):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(264):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(269):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(271):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(290):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(291):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(335):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(360):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(437):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(439):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(452):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(474):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(488):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(494):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(500):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(529):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(532):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(587):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(594):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(608):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(616):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(632):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(468):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1094):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1131):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1201):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1226):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1238):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1298):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1340):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1860):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1861):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1888):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1900):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1902):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(1909):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2003):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2005):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2006):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2007):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2100):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2112):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2124):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2136):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2150):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2162):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2174):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2186):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2198):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2199):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2211):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2212):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2224):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(2244):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(297):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(569):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(574):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(575):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(590):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(598):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(629):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(657):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(743):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(745):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(838):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(860):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(880):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(882):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(888):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(911):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(934):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(935):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(953):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(954):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(958):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(977):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(979):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(983):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(1024):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(1025):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(1027):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(1072):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsDiscService.cpp(115):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsDiscService.cpp(117):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.cpp(81):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.cpp(154):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.cpp(160):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(183):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(229):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(232):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(332):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(385):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(685):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(688):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(753):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(815):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(911):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(912):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(932):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(957):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(958):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(979):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(56):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(57):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(59):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(105):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(107):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(132):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(171):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(181):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(202):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(217):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(236):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(237):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(239):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(282):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(300):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(301):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(303):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(346):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(347):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(349):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(398):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(413):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(428):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(443):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(458):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(489):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(490):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(517):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(533):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(534):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(561):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(579):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(580):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.cpp(79):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(236):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(275):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(301):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(195):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(391):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(415):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(417):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(422):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(489):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(492):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(552):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(570):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(593):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(598):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(600):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(619):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(620):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(139):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(147):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(674):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(691):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(703):             return static_cast< const MsgTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(718):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(739):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(746):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(899):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(935):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/Greg/Documents/rsc/rsc/st/StIncrement.cpp(112):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/Greg/Documents/rsc/rsc/st/StTestData.cpp(63):    return static_cast< StTestData* >(data);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(480):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(495):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(543):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(785):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(890):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(891):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(924):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(933):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(944):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(960):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(975):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(976):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(605):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(633):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(94):    item_(const_cast< CxxToken* >(item)),
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1364):       auto self = const_cast< Class* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1562):    return const_cast< Class* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1726):    return const_cast< Class* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(2707):       return const_cast< ClassInst* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(137):    CxxArea* GetArea() const override { return const_cast< CxxArea* >(this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(538):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(583):    Class* GetClass() const override { return const_cast< Class* >(this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(908):    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(1054):       override { return const_cast< Namespace* >(this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1002):    return const_cast< DataSpec* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1581):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2875):    return const_cast< TypeName* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(717):       override { return const_cast< QualName* >(this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1240):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(3088):    return FoundFunc(const_cast< Function* >(this), args);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4468):    auto prev = const_cast< Function* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4692):    if(IsTemplate()) return const_cast< Function* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4702):    if(tmplt_ != nullptr) return (CxxScope*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(391):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1442):       const override { return const_cast< Function* >(this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(745):    if(n == 0) return const_cast< CxxScoped* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1927):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2170):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2603):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2629):    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2639):    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2977):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3071):    return (CxxScoped*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3084):    return (CxxToken*) this;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(210):    CxxScoped* Referent() const override { return (CxxScoped*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(617):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1570):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1663):    CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(811):       const_cast< CxxToken* >(this) : nullptr);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(844):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(508):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(4536):       func->SetTemplate(const_cast< Function* >(tmplt));
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp(67):    objects.push_back(const_cast< Base* >(this));
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.cpp(334):    return const_cast< MsgPort* >(this);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.cpp(638):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(394):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W009 Pointer arithmetic
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(211):       dest = payload + received;
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(43):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(50):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(313):    auto after = (ptr_t) next_ + size;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(314):    auto wrap = after >= (buff_ + size_);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(341):       after = buff_ + size;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2957):    ptrdiff_t stacksize = &local - priv_->stackBase_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.cpp(189):       source += rcvd;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp(134):       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp(134):       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp(229):       bytes = bytes_ + hdrSize_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp(253):    bytes += hdrSize_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h(106):    NodeBase::byte_t* PayloadPtr() const { return bytes_ + hdrSize_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(166):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(249):    auto fence = layout->bytes + layout->header.length;
W015 #include not sorted in standard order
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(31): #include <windows.h>
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(28): #include <winsock2.h>
  C:/Users/Greg/Documents/rsc/rsc/rsc/main.cpp(63): #include "SysTypes.h"
W020 Using statement in header
  C:/Users/Greg/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelf.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelf.h(33): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace NetworkBase;
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.h(36): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(35): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.h(33): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.h(33): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(51): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(52): using namespace NetworkBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(53): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(54): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(54): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(55): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(33): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(34): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(35): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.h(38): using NodeBase::word;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxCharLiteral.h(35): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStrLiteral.h(41): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(47): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(48): using std::string;
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(46): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(40): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.h(38): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.h(35): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/BotTracer.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipModule.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(39): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(40): using namespace NetworkBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipTypes.h(26): using namespace NetworkBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipTypes.h(27): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(35): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/StartupParameters.h(21): using namespace NetworkBase;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(27): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MbPools.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.h(34): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.h(32): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(38): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/mb/Tones.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.h(37): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/nw/LocalAddrTest.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsBicFeature.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsBocFeature.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.h(30): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.h(31): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.h(30): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(42): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(43): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCwtFeature.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCxfFeature.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(39): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.h(31): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsIncrement.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h(36): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h(37): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h(38): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(47): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(48): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(49): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsSusFeature.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsTwcFeature.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.h(31): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.h(29): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.h(29): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.h(44): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.h(31): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(47): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(48): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.h(29): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxySessions.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h(45): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h(46): using namespace NetworkBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h(47): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h(48): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.h(31): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.h(30): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/SnIncrement.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.h(33): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.h(34): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/StIncrement.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(43): using namespace NodeBase;
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(44): using namespace SessionBase;
W022 Add using statement
  C:/Users/Greg/Documents/rsc/rsc/an/AnIncrement.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/an/AnModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0):  // namespace NetworkBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfIpService.cpp(0):  // namespace NetworkBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfIpService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcEvents.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcEvents.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcFactory.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcFactory.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(0):  // namespace NetworkBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcRouting.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcStates.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcStates.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/BcTriggers.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/CbModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/DigitString.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0):  // namespace NetworkBase
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cb/TestCallFactory.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/cb/TestCallFactory.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/cn/CnModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/dip/WinterOrders.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MbModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MbPools.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/mb/Switch.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/ToneRegistry.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/mb/Tones.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/nt/NtModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/nt/NtTestData.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/nw/LocalAddrTest.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/on/OnModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PbModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsBicFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsBocFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCliParms.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsIncrement.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsMessages.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsMessages.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsMessages.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsMessages.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsSusFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/rn/RnModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcService.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcStates.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0):  // namespace NetworkBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallIpService.cpp(0):  // namespace NetworkBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallIpService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsDiscService.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsDiscService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsDiscService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxySessions.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxySessions.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsStatistics.cpp(0):  // namespace CallBase::Cause
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsStatistics.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(0):  // namespace CallBase::Cause
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(0):  // namespace CallBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(0):  // namespace MediaBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/sn/SnIncrement.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/sn/SnModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/StIncrement.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/StModule.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/StTestData.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/StTestData.cpp(0):  // namespace SessionBase
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(0):  // namespace NodeBase
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(0):  // namespace SessionBase
W026 Unused argument
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(419/3):       const CxxNamed* item, const CxxScope* scope) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(911/1):    static void Shutdown(NodeBase::RestartLevel level);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(915/1):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(77/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1819/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(169/1):    word ChangeCast(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(170/1):    word ChangeClassToNamespace(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(173/1):    word ChangeOperator(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(178/1):    word EraseCast(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(179/1):    word EraseClass(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(192/1):    word InsertCopyCtorCall(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(193/1):    word InsertDataInit(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(195/1):    word InsertDisplay(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(196/1):    word InsertEnumName(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(197/1):    word InsertFallthrough(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(202/1):    word InsertMemberInit(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(204/1):    word InsertPODCtor(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(205/1):    word InsertPureVirtual(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(207/1):    word MoveDefine(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(208/1):    word MoveMemberInit(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(212/1):    word ReplaceHeading(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(213/1):    word ReplaceName(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(417/1):    word FixInvokers(const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(426/1):    word ChangeFunctionToMember(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(426/2):    word ChangeFunctionToMember(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(427/1):    word ChangeInvokerToMember(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(427/2):    word ChangeInvokerToMember(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(428/1):    word EraseArgument(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(428/2):    word EraseArgument(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(429/1):    word EraseDefaultValue(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(429/2):    word EraseDefaultValue(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(430/1):    word EraseParameter(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(430/2):    word EraseParameter(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(432/1):    word InsertArgument(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(432/2):    word InsertArgument(const Function* func, word offset);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(433/1):    word SplitVirtualFunction(const Function* func);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.h(123/1):    static void noop(debug64_t info = 0);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(75/3):       const std::string& prefix, const Flags& options) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(324/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(333/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.h(152/1):    TraceRc StartTracing(const std::string& opts);
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(138/3):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(143/1):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(95/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(63/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(87/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(131/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(151/1):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(151/2):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(150/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(288/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(294/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(300/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/RootServiceSM.h(50/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(79/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(187/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(187/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/SsmFactory.h(48/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.h(61/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(455/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(158/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(299): class CipUdpService : public UdpIpService
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(192): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.h(78): struct LibItemSort
  C:/Users/Greg/Documents/rsc/rsc/dip/DipModule.h(37): class DipModule : public Module
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.h(42): class MediaFailureEvent : public Event
  C:/Users/Greg/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h(43): class SysLock
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(37): class TextTlvMessage : public TlvMessage
W028 Unused data
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(387):    constexpr TriggerId NextId = FirstId + 3;
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(446):    constexpr char Unchecked = ' ';  // spacing not determined
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(162): constexpr ProtocolError IM_TIMEOUT = 0x01;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(163): constexpr ProtocolError IM_EXPECTED = 0x02;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(164): constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(165): constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(166): constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(167): constexpr ProtocolError IM_REPEATED = 0x06;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(168): constexpr ProtocolError IM_FROM_SERVER = 0x07;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(169): constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(170): constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(171): constexpr ProtocolError DM_BEFORE_RM = 0x0A;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(172): constexpr ProtocolError RM_EXPECTED = 0x0B;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(173): constexpr ProtocolError RM_REPEATED = 0x0C;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(174): constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(175): constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(197): constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(208): constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(209): constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(210): constexpr category_t CATEGORY_BRACKET = 0x40;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(213): constexpr category_t CATEGORY_ORDER = 0x43;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(215): constexpr category_t CATEGORY_RESULT = 0x45;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(218): constexpr category_t CATEGORY_COMMAND = 0x48;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(219): constexpr category_t CATEGORY_PARAMETER = 0x49;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(220): constexpr category_t CATEGORY_PRESS = 0x4A;
  C:/Users/Greg/Documents/rsc/rsc/nb/NbAppIds.h(73): constexpr FlagId FirstAppDebugFlag = 11;
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(195):    static const id_t LastNbIndex = 3;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(63): constexpr size_t GBs = 1024 * 1024 * 1024;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(125): const SysTickTimer* TickTimer = SysTickTimer::Instance();
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(80):    static const id_t LastNtIndex = FuncTraceScope;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(106):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(134):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.h(55):    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.h(85):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(72):    enum Location
W030 Unused enumerator
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(147):       Multiple   // two statements or more
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(62):       FIRST_BOT_SPECIFIC_ERROR
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(188):    MemInaccessible = 0,      // ---
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(189):    MemExecuteOnly = 1,       // --x
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(191):    MemReadExecute = 5,       // r-x
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(193):    MemReadWriteExecute = 7,  // rwx
  C:/Users/Greg/Documents/rsc/rsc/nb/ToolTypes.h(66):    TraceFailed,        // operation failed for some other reason
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(85):       PortAllocFailed,      // failed to create PSM for context
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(88):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(89):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(90):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(91):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(92):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(93):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(121):       StreamContainsIllegalParm,
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(96):       SignalUnknown,     // signal not recognized
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(98):       ParameterUnknown,  // parameter not recognized
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(99):       ParameterInvalid,  // parameter not valid for this signal
W032 Unused function
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(214):    Digit At(DigitCount i) const;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(183):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(195):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(160):    size_t Arrays() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1228):    bool IsFinal() const { return GetDecl()->final_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.h(46):    size_t rfind_first_of
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.h(114):    std::string& Prefix(std::string&& scope,
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(421):    word FixInvoker(const Function* func, const CodeWarning& log);
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(447):    size_t LineFindFirstOf(size_t pos, const std::string& chars) const;
  C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.h(72):    DipHeader* Header() const;
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.h(48):    explicit TokenMessage(const Token* stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.h(141):    void set_as_ascii(const std::string& text);
  C:/Users/Greg/Documents/rsc/rsc/dip/WinterOrders.h(52):    size_t get_number_of_results() const;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.h(48):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.h(56):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(120):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/Greg/Documents/rsc/rsc/mb/Tones.h(73):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(144):    const T& Back() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(152):    T& Back()
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(160):    const T& At(size_t index) const
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(168):    T& At(size_t index)
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(192):    const T* Data() const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgStrParm.h(61):    c_string NextValue() const { return next_.c_str(); }
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(71):    virtual void Initialize();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(80):    virtual Object* Create();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(84):    virtual Object* GetQuasiSingleton();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(143):    bool SetVptr(const Object& obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(150):    bool SetTemplate(Object& obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(158):    bool SetQuasiSingleton(Object& obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(142):    word Result() const { return result_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(167):    PerThreadInfo()
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroupRegistry.h(62):    Log* FindLog(const std::string& name, LogId id) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.h(50):    size_t Words(size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.h(58):    void Set(void* dest, byte_t value, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.h(78):    void* Realloc(void* addr, size_t size, MemoryType type);
  C:/Users/Greg/Documents/rsc/rsc/nb/Module.h(96):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(92):    ClassId GetClassId() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(104):    ObjectId GetObjectId() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(110):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(131):    void MorphTo(const Class& target);
  C:/Users/Greg/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.h(148): Flags PS_Delayed();
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Link.h(65):    bool IsQueued() const { return next != nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Link.h(66):    bool IsQueued() const { return next != nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(298):    void Display(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(80):    std::string Normalize(const std::string& path);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(95):    void GetCurrDir(std::string& dirName);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h(48):    SysLock();
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h(65):    void Acquire();
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h(69):    void Release();
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h(73):    SysThreadId Owner() const { return owner_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h(77):    void Display(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMemory.h(48):    bool Lock(void* addr, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMemory.h(53):    bool Unlock(void* addr, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMutex.h(116):    Thread* Owner() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.h(83):    bool TickTimingAvailable() const { return available_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(77):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(124):    static std::atomic_uint32_t* Vector();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(128):    static bool TestFlag(FlagId fid);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(132):    static void ResetFlag(FlagId fid);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(155):    Faction GetFaction() const { return faction_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(159):    bool ChangeFaction(Faction faction);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(488):    SysMutex* BlockingMutex() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(496):    uint8_t MutexCount() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/TimePoint.h(45):    explicit TimePoint(const SysTime& time);
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.h(182):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/Greg/Documents/rsc/rsc/nw/IpServiceRegistry.h(56):    IpService* GetService(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h(113):    static const SysIpL2Addr& NullIpAddr();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h(117):    const IPv6Addr& Addr() { return addr_; }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(50): uint64_t htonll(uint64_t hostllong);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(53): uint64_t ntohll(uint32_t netllong);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(142):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(197):    IpBuffer* IcMsg() const { return icMsg_; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(93):    bool IsRinging() const { return ringing_; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(97):    bool CanFlash() const { return flash_; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(102):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(288):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/Greg/Documents/rsc/rsc/rsc/main.cpp(102): main_t main(int argc, char* argv[])
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func,
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(231):    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
  C:/Users/Greg/Documents/rsc/rsc/sb/GlobalAddress.h(47):    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/Greg/Documents/rsc/rsc/sb/GlobalAddress.h(66):    GlobalAddress(GlobalAddress&& that) = default;
  C:/Users/Greg/Documents/rsc/rsc/sb/LocalAddress.h(55):    LocalAddress(LocalAddress&& that) = default;
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(181):    Message* FindSignal(SignalId sid) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(89):    ProtocolId Prid() const { return prid_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(68):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(137):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(168):    bool DropPeer(const GlobalAddress& peerPrevRemAddr);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h(131):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h(227):    StateId CurrState() const { return currState_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h(231):    StateId NextState() const { return nextState_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h(372):    bool IsInitiation() const { return initiation_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h(383):    Message* GetMessage() const { return message_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(131):    bool Disable();
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(135):    bool Enable();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(132):    bool HasTriggered(TriggerId tid) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Signal.h(85):    ProtocolId Prid() const { return prid_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/State.h(64):    ServiceId Sid() const { return sid_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(58):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(62):    TextTlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(68):    bool Receive();
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(58):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(67):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(176):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(182):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(196):    TlvParmPtr AddBytes
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(203):    TlvParmPtr CopyParm
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(265):    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(272):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(287):    size_t ParmOffset(ParmIterator& pit) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(77):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
W033 Unused typedef
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.h(226): using PersistentStr =
W035 No referent for friend declaration
  C:/Users/Greg/Documents/rsc/rsc/dip/DipModule.h(39):    friend class Singleton< DipModule >;
W037 Member hides inherited name
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(316):    static const Id NextId = FirstId + 50;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(883):    static const Id NextId                 = FirstUn + 7;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(63):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(213):    static const Id FirstId = BcEvent::NextId;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(219):    static const Id NextId        = FirstId + 4;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(303):    static const Id NextId              = FirstId + 7;
  C:/Users/Greg/Documents/rsc/rsc/mb/Tones.h(77):    static ptrdiff_t CellDiff();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(105):    void HostToNetwork(IPv4Addr& netaddr, ipport_t& netport) const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(110):    void HostToNetwork(uint16_t netaddr[8], ipport_t& netport) const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(115):    void NetworkToHost(IPv4Addr netaddr, ipport_t netport);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(120):    void NetworkToHost(const uint16_t netaddr[8], ipport_t netport);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(160):    std::string to_str(bool verbose) const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(164):    void Nullify();
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(166):    static ptrdiff_t LinkDiff();
  C:/Users/Greg/Documents/rsc/rsc/sb/Timer.h(106):    static ptrdiff_t LinkDiff();
W038 Class could be namespace
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(214): class Facility
W042 Member could be private
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d)
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(183):    Rc AddDigit(Digit d);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(202):    DigitCount Size() const;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(237):    void EnsureMediaMsg() override;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(246):    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(404):    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1145):    CipPsm* AllocNPsm();
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(488):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(54):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.h(54):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(130):    const CxxTokenList Items() const { return items_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(131):    const IncludePtrVector& Includes() const { return incls_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(279):    size_t FindFirstReference(const CxxTokenVector& refs) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(284):    size_t FindLastUsage(const CxxNamedSet& usages) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.h(104):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.h(64):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(541):    Numeric(NumericType type, size_t width, bool sign) :
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(92):    Typedef* FindType(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(178):    Enum* FindEnum(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(182):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(350):    virtual bool IsCompiledTemplate() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(401):    void FindCtors(FunctionVector& ctors) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(417):    FunctionDefinition GetFuncDefinition(FunctionRole role) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(529):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(1015):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(286):    virtual CxxToken* GetValue() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(335):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(164):    size_t Refs() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(739):    static Cxx::Access ScopeAccess() { return Frame_->ScopeAccess(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(865):    static bool OptionIsOn(char opt);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(873):    static void Trace(CxxTrace::Action act, const CodeFile& file);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(240):    virtual bool ResolveTemplate
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(601):    TypeName* Last() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(763):    bool ResolveTemplate
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(907):    bool IsUnboundedArray() const { return array_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1198):    DataSpec(const DataSpec& that);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(354):    const Data* GetDecl() const { return (defn_ ? mate_ : this); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(359):    const Data* GetDefn() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1168):    bool IsDefaulted() const { return GetDefn()->defaulted_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1222):    Function* GetBase() const { return GetDecl()->base_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1292):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1361):    bool IsInvokedInBase() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1390):    void CheckAccessControl() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1394):    void CheckIfHiding() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(70):    bool IsClassMember() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(79):    bool IsSubscopeOf(const std::string& fqSuper) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(137):    bool Contains(const CxxToken* item) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(626):    void CheckAccessControl() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1162):    bool ResolveTemplate
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1894):    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStrLiteral.h(87):    static DataPtr CreateRef()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(491):    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(159):    bool Advance();
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(363):    const LineInfo* GetLineInfo(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(413):    bool LineHasTrailingCommentAt(size_t n, size_t offset) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(451):    size_t LineRfindFirstOf(size_t pos, const std::string& chars) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(527):    NodeBase::word CheckDepth(size_t n) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryVarSet.h(53):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.h(95):    bool is_number() const;
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.h(123):    size_t set_from(const Token* stream);
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.h(128):    size_t set_from(const Token* stream, size_t length);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(132):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(170):    void SetOgPort(Switch::PortId ogport);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(193):    void PrepareOgMsgq() override;
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(197):    Event* ReceiveMsg(Message& msg) override;
  C:/Users/Greg/Documents/rsc/rsc/mb/Switch.h(74):    static bool IsValidPort(PortId pid)
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(59):    static const size_t MaxNameSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(63):    static const size_t MaxExplSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.h(52):    virtual bool CurrValue() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.h(56):    virtual bool NextValue() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.h(70):    bool SetNext(c_string input) override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBoolParm.h(68):    bool SetNextValue(bool value) override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.h(48):    bool CurrValue() const override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.h(69):    bool SetNextValue(bool value) override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.h(84):    bool SetNext(c_string input) override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h(68):    c_string Key() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h(100):    virtual std::string GetCurr() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParmRegistry.h(60):    CfgTuple* FindTuple(const std::string& key) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(75):    virtual MemoryType ObjType() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(137):    virtual Object* New(size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(53):    static const char EscapeChar;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(58):    static const char StringChar;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(62):    static const char BreakChar;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(66):    static const char CommentChar;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(70):    static const char OptSkipChar;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(78):    static const char SymbolChar;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(130):    bool ReadingFromFile() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h(46):    static const char CommandSeparator;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(39):    static fixed_string AnyIntParm;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliStack.h(68):    const CliCommand* FindCommand
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h(61):    c_string HelpText() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.h(97):    id_t Did() const { return did_.GetId(); }
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(124):    bool IsFixedSize() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(66):    static const size_t MaxExplSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(123):    static Log* Find(c_string groupName, LogId id, LogGroup*& group);
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBufferRegistry.h(61):    static const size_t LogBufferSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.h(63):    static const size_t MaxExplSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.h(80):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.h(84):    bool Suppressed() const { return suppressed_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/MutexRegistry.h(56):    SysMutex* Find(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(98):    virtual InstanceId GetInstanceId() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(65):    bool NullifyObjectData() const { return nullifyObjectDataCfg_->CurrValue(); }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(494):    void Purge()
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(56):    static const size_t MaxExplSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(54):    static const size_t MaxExplSize;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(58):    static const size_t ReportWidth;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(66):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(81):    int16_t DayOfWeek() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(136):    c_string strMonth() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(136):    static void ResetFlags();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(151):    SysThreadId NativeThreadId() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceRecord.h(54):    static const uint32_t InvalidSlot;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(87):    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h(185):    virtual IoThread* CreateIoThread();
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(69):    virtual ipport_t Port() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/NwTracer.h(63):    bool PeersEmpty() const;
  C:/Users/Greg/Documents/rsc/rsc/nw/NwTracer.h(67):    bool PortsEmpty() const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(164):    void Nullify();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(89):    NodeBase::word Connect(const SysIpL3Addr& remAddr);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(137):    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(159):    bool SetClose(bool graceful);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(188):    bool IsOpen() const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.h(73):    NodeBase::word SendTo
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.h(75):    void Unblock() override;
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpService.h(86):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.h(58):    void Unblock() override;
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIpService.h(59):    IpPort* CreatePort(ipport_t pid) override;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(134):    void ResetCircuit();
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(72):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(80):    c_string FullName() const { return name_; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(84):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(67):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(158):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(192):    virtual void EndOfTransaction() { }
  C:/Users/Greg/Documents/rsc/rsc/sb/Event.h(130):    virtual bool Save();
  C:/Users/Greg/Documents/rsc/rsc/sb/Event.h(134):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/Greg/Documents/rsc/rsc/sb/Event.h(138):    virtual void Free();
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(151):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(235):    virtual Context* AllocContext() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.h(57):    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(329):    virtual void Handled(bool retain);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(333):    virtual bool SendFailure(NodeBase::debug64_t errval);
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.h(53):    MsgPort(const Message& msg, Context& ctx);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(145):    ProtocolId GetProtocol() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(253):    bool SendMsg(Message& msg) override;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(520):    const StateId stid_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(65):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(79):    static bool IsValidPortId(PortId pid)
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(121):    bool IsModifiable() const { return modifiable_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(125):    bool IsModifier() const { return modifier_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(95):    StateId NextState() const { return nextState_; }
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(147):       ParmIterator() : mptr(nullptr), pptr(nullptr), pindex(0) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(150):       ParmIterator& operator=(const ParmIterator& that) = default;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(165):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(170):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(191):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(277):    virtual void AddFence();
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(281):    TlvMsgLayout* TlvLayout() const
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(292):    Fence* FencePtr() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(296):    void CheckFence() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Trigger.h(80):    static bool IsValidId(Id tid)
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(263):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h(160):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h(414):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(58):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(96):    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(348):    TestPsm* GetTestPsm() const { return testPsm_; }
W043 Member could be protected
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(125):    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/Greg/Documents/rsc/rsc/ct/CtIncrement.cpp(94):    static LibrarySet* Evaluate(CliThread& cli);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(68):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(70):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(71):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(74):    const TypedefPtrVector* Types() const { return &types_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(75):    const AsmPtrVector* Assembly() const { return &assembly_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(76):    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(901):    const std::string& GetText() const { return text_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(68):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(186):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(196):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1005):    TypeSpecUser GetUserType() const { return user_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(334):    bool IsThreadLocal() const { return thread_local_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(338):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(342):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(106):    CxxScoped* FindInheritedName() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(125):    virtual bool IsUnused() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(142):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(150):    size_t XrefSize() const { return xref_.size() * 3 * sizeof(CxxNamed*); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(460):    std::string strLocation() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(375):    size_t PrevBegin(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(387):    LineType PosToType(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(391):    bool IsBlankLine(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(395):    size_t LineSize(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(399):    bool OnSameLine(size_t pos1, size_t pos2) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(404):    int CompareCode(size_t pos, const std::string& str) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(408):    size_t FindComment(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(423):    size_t LineFindNext(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(427):    bool IsFirstNonBlank(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(431):    bool NoCodeFollows(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(437):    size_t LineFind(size_t pos, const std::string& str) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(441):    size_t LineRfind(size_t pos, const std::string& str) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(455):    size_t LineFindNonBlank(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(459):    size_t LineRfindNonBlank(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(471):    size_t FindNonBlank(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(75):    virtual void Display(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(98):    void LogSubtended(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h(51):    static fixed_string UnexpectedIndex;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.h(44):    bool BindCommand(CliCommand& comm);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(131):    static fixed_string AnyStringParm;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(166):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(176):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(186):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(212):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(234):    bool GetFileName(std::string& s, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(246):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(261):    bool IsOptional() const { return opt_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.h(44):    FunctionTrace();
  C:/Users/Greg/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(72):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/StreamRequest.h(59):    StreamRequest(const StreamRequest& that);
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(71):    IpPort* Port() const { return port_; }
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(110):    NodeBase::id_t Sid() const { return sid_.GetId(); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h(57):    SysIpL2Addr(const SysIpL2Addr& that) = default;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(107):    bool IsValid() const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(128):    virtual AllocRc SetService(const IpService* service, bool shared);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(145):    void OutputLog(NodeBase::LogId id,
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(264):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/Greg/Documents/rsc/rsc/sb/Event.h(96):    enum Location
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(241):    NodeBase::MsgDirection Dir() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(64):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(76):    enum IncomingRc
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(85):    enum OutgoingRc
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(131):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(87):    virtual NodeBase::c_string PortName(PortId pid) const;
W044 Typedef of pointer type
  C:/Users/Greg/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(53): typedef void* StackFrames[MaxFrames];
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(95): typedef char* ptr_t;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(96): typedef const char* const_ptr_t;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(113): typedef const char* c_string;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(114): typedef const char* const fixed_string;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(119): typedef const char* const fn_name;      // for defining a function name
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h(120): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.h(58): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.h(59): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W048 Data is write-only
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(121):    bool game_started;                // set when the game has begun
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(147):    word our_number_of_disbands;    // disbands required (negative for builds)
W050 Data is not private
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(360):    size_t refs_ : 16;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(333):    CxxToken* item_;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(952):    bool ptrDet_: 1;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(956):    bool refDet_: 1;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(563):    std::string code_;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(567):    CodeFile* file_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(211):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(215):    ostringstreamPtr obuf;
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(95):    std::atomic_size_t curr_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(99):    std::atomic_size_t prev_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(103):    std::atomic_uint64_t total_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(107):    size_t divisor_;
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceRecord.h(125):    Id rid_ : 8;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(91):    const ipport_t port_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(96):    IpPort* ipPort_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(100):    SysIpL2Addr self_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(104):    size_t recvs_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(108):    SysIpL3Addr txAddr_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(113):    SysIpL3Addr rxAddr_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(117):    NodeBase::TimePoint time_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h(121):    NodeBase::byte_t* buffer_;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(482):    ServiceId owner_;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(486):    const EventId eid_;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(516):    const ServiceId sid_;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(520):    const StateId stid_;
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(524):    const EventHandler::Rc rc_;
W053 Data could be const
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(173):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(340):    Progress::Ind progress_;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(356):    Cause::Ind cause_;
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(241):    LibraryVarSet* varSet_;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryTypes.h(64):    size_t level;    // the file's level in the build
  C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.h(112):       BotEvent event;       // event
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(144):    DipHeader header;  // no parameters (length = 0)
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h(202):    byte_t first_payload_byte;  // for creating a pointer to the first byte
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.h(93):    RegCell port_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(136):    RegCell aid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.h(96):    word min_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.h(100):    word max_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h(158):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.h(122):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.cpp(61):    istreamPtr file_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.h(110):    RegCell iid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.h(179):    RegCell did_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.h(183):    size_t size_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(189):    RegCell lid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.h(141):    RegCell gid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Module.h(134):    RegCell mid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(54):    Q2Link link;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(136):    uintptr_t patchArea_;
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.h(135):    RegCell sid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Singletons.cpp(41):    MemoryType type;    // the type of memory that the singleton uses
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(123):    RegCell sid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(101):    RegCell gid_;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(54):    static secs_t LongIntervalSecs;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(59):    static secs_t ShortIntervalSecs;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(66):    static size_t WakeupsBetweenReports;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static Duration SleepInterval;
  C:/Users/Greg/Documents/rsc/rsc/nb/Symbol.h(112):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMutex.h(141):    RegCell mid_;
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.h(91):    Q2Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1360):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1846):    Q2Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h(203):    NodeBase::Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(153):    NodeBase::RegCell sid_;
  C:/Users/Greg/Documents/rsc/rsc/nw/NwTypes.h(60):       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(99):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.h(59):    Address::DN dn_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(309):    NodeBase::Q2Link link_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(333):    NodeBase::Faction faction_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.h(137):    NodeBase::Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.h(132):    NodeBase::RegCell iid_;
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.h(158):    static NodeBase::word RtcYieldPercent_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Timer.h(134):    TimerId tid_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Timer.h(146):    NodeBase::Q2Link link_;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(190):    Cause::Ind cause_;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(154):    Facility::Ind ind_;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(168):    PotsTreatmentQueue::QId qid_;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(172):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(201):    Tone::Id tone_;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(205):    secs_t duration_;
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.h(145):    Q1Link link_;
  C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W054 Data could be const pointer
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryTypes.h(63):    CodeFile* file;  // the file
W055 Data need not be mutable
  C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.h(113):       mutable secs_t secs;  // delay
W056 Implicit constructor invoked: POD members not initialized
i C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(60):    _finddata_t attributes_;
i C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(41):    LARGE_INTEGER frequency;
i C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(63):       LARGE_INTEGER now;
i C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(69):       _timeb now;
i C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    _timeb timebuff;
i C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.win.cpp(43):    tm timeofday;
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(63): class TinyBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(74): class SmallBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(85): class MediumBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(96): class LargeBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(107): class HugeBuffer : public ByteBuffer
i C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(50):       addrinfo hints;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(51):    addrinfo hints;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(132):    sockaddr_in ipv4addr;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(133):    sockaddr_in6 ipv6addr;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(127):    sockaddr_in ipv4addr;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(128):    sockaddr_in6 ipv6addr;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(322):    WSAData wsaData;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(46):    sockaddr_in ipv4peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(47):    sockaddr_in6 ipv6peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(97):    sockaddr_in ipv4peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(98):    sockaddr_in6 ipv6peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(180):    sockaddr_in ipv4self;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(181):    sockaddr_in6 ipv6self;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(318):    sockaddr_in ipv4peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(319):    sockaddr_in6 ipv6peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(393):    linger linger_opts;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(84):    sockaddr_in ipv4peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(85):    sockaddr_in6 ipv6peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(149):    sockaddr_in ipv4peer;
i C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(150):    sockaddr_in6 ipv6peer;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(170):    struct SignalEntry
i C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(234):    SignalEntry trace_[TraceSize];
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(220):    struct MessageEntry
i C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(357):    MessageEntry trace_[TraceSize];
W060 Base class constructor is public
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(263):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(78):    Lexer();
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(c_string help, bool opt = false,
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.h(44):    FunctionTrace();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(56):    LogsAction();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(76):    explicit LogsCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(93):    SetWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(107):    explicit SetCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(124):    IncludeWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(138):    explicit IncludeCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(155):    ExcludeWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(168):    explicit ExcludeCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(199):    explicit QueryCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(216):    SaveWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(228):    explicit SaveCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(245):    ClearWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h(263):    explicit ClearCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/Greg/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(139):    explicit Counter(const std::string& expl, size_t divisor = 1);
  C:/Users/Greg/Documents/rsc/rsc/nb/StreamRequest.h(54):    StreamRequest();
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(44):    CorruptWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(56):    explicit CorruptCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(98):    NtSaveWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(110):    explicit NtSaveCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(123):    TestsAction();
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h(144):    explicit TestsCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h(55):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwCliParms.h(67):    IpAddrParm(NodeBase::c_string help, NodeBase::c_string text);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(39):    NwClearWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(54):    explicit NwClearCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(69):    NwExcludeWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(97):    NwIncludeWhatParm();
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(110):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(127):    explicit NwQueryCommand(bool bind = true);
  C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h(142):    NwStatusCommand() = default;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h(42):    SysIpL2Addr();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h(49):    SysIpL2Addr(const std::string& text);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(41):    SysIpL3Addr();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(46):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(53):    SysIpL3Addr(IPv4Addr netaddr, ipport_t netport,
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(60):    SysIpL3Addr(const uint16_t netaddr[8], ipport_t netport,
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(69):    explicit SysIpL3Addr(const std::string& text);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(79):    SysIpL3Addr
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(264):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h(268):    PotsMessage(ProtocolSM* psm, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(462):    EventTrace(Id rid, const Event& evt);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(503):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(50):    TlvMessage(ProtocolSM* psm, size_t size);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(58):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
W062 Member not included in member initialization list
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(41):    FileWalker(const char* dirName, const char* fileSpec);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(60):    _finddata_t attributes_;
W065 Base class virtual destructor is not public
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(196):    virtual ~LibrarySet();
  C:/Users/Greg/Documents/rsc/rsc/nb/CliAppData.h(82):    virtual ~CliAppData();
  C:/Users/Greg/Documents/rsc/rsc/nb/Exception.h(71):    virtual ~Exception();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(259):    virtual ~Thread();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(214):    virtual ~SysSocket();
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(80):    virtual ~PotsFeatureProfile();
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(188):    virtual ~Context();
  C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.h(99):    virtual ~Initiator();
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual ~ProtocolLayer();
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(167):    virtual ~ServiceSM();
W075 Virtual function is public
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1019):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1029):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1037):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1038):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1051):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1058):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1063):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1070):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1076):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1083):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1088):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1092):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1099):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1105):    virtual CipMessage* BuildCipIam();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1208):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(465):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(467):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(469):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(470):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h(510):    void SetUPsm(MediaPsm& psm) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.h(54):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.h(104):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.h(64):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(102):    virtual Function* FindFunc(const std::string& name,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(110):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(114):    virtual CxxScoped* FindItem(const std::string& name) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(288):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(301):    virtual Class* BaseClass()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(306):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(345):    virtual Class* GetClassTemplate() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(350):    virtual bool IsCompiledTemplate() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(365):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(529):    bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h(632):    CxxTokenVector Items() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(55):    virtual bool IsIncludeGuard() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(286):    virtual CxxToken* GetValue() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(291):    virtual bool IsDefined() const { return true; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(297):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(335):    CxxToken* RootType() const override { return GetValue(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(489):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(493):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(497):    virtual bool AddEndif(const Endif* e) { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h(501):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(126):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(138):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(154):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(170):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(198):    bool Display(ostream& stream, const string& opts) override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(57):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(63):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(68):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(78):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(84):    virtual std::string ScopedName(bool templates) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(90):    virtual void GetScopedNames(stringVector& names, bool templates) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(95):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(102):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(107):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(130):    virtual CxxScoped* DirectType() const { return Referent(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(134):    virtual void FindReferent();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(140):    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(144):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(151):    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(156):    virtual StackArg MemberToArg
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(169):    virtual void GetDirectClasses(CxxUsageSets& symbols);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(176):    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(181):    virtual std::string XrefName(bool templates) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(470):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(763):    bool ResolveTemplate
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(768):    bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1013):    virtual bool ContainsTemplateParameter() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1017):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1027):    virtual TypeSpec* Clone() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1031):    virtual TypeTags* Tags() = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1032):    virtual const TypeTags* Tags() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1036):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1042):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1048):    virtual TagCount Refs() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1053):    virtual TagCount Arrays() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1057):    virtual bool HasArrayDefn() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1061):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1065):    virtual void EnterArrays() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1070):    virtual TypeTags GetAllTags() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1075):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1080):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1084):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1090):    virtual void SetPtrs(TagCount count) = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1095):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1099):    virtual StackArg ResultType() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1103):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1107):    virtual void SetUserType(TypeSpecUser user) const { user_ = user; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1118):    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1125):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1130):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1134):    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1140):    virtual void Instantiating(CxxScopedVector& locals) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1144):    virtual void GetNames(stringVector& names) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1149):    virtual bool NamesReferToArgs(const NameVector& names,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(71):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(76):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(84):    virtual void AccessibilityOf
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(378):    virtual void Promote
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(383):    virtual bool IsUnionMember() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1390):    void CheckAccessControl() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(1394):    void CheckIfHiding() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(59):    virtual bool NameRefersToItem(const std::string& name,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(88):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView& view) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(97):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(110):    virtual void AddFiles(LibItemSet& imSet) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(115):    virtual void UpdateReference(CxxToken* item, bool insert) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(125):    virtual bool IsUnused() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(131):    virtual bool CheckIfUnused(Warning warning) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(626):    void CheckAccessControl() const override;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1162):    bool ResolveTemplate
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1894):    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(71):    virtual void Delete();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(75):    virtual void SetLoc(CodeFile* file, size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(84):    virtual void SetContext(size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(94):    virtual void CopyContext(const CxxToken* that, bool internal);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(122):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(126):    virtual void SetScope(CxxScope* scope) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(131):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(137):    virtual bool IsForward() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(141):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(146):    virtual std::string TypeString(bool arg) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(151):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(157):    virtual Class* DirectClass() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(161):    virtual bool IsConst() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(165):    virtual bool IsVolatile() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(169):    virtual bool IsConstPtr() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(173):    virtual bool IsVolatilePtr() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(177):    virtual bool IsConstPtr(size_t n) const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(181):    virtual bool IsVolatilePtr(size_t n) const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(189):    virtual bool IsStatic() const { return true; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(193):    virtual bool IsExtern() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(197):    virtual void SetAccess(Cxx::Access access) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(201):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(206):    virtual bool IsAuto() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(211):    virtual bool IsIndirect(bool arrays) const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(215):    virtual void Creating() { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(220):    virtual void Instantiate() { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(224):    virtual bool IsInitializing() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(229):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(234):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(239):    virtual CxxArea* GetArea() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(244):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(249):    virtual CxxScope* GetMate() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(254):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(258):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(264):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(268):    virtual CxxScope* GetTemplateInstance() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(277):    virtual CxxScoped* FindTemplateAnalog(const CxxToken* item) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(282):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(287):    virtual void GetConvertibleTypes(StackArgVector& types, bool expl) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(291):    virtual CxxScoped* Referent() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(299):    virtual bool EnterScope() { return true; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(304):    virtual void EnterBlock();
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(309):    virtual void ExitBlock() const { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(315):    virtual bool AppendUnary() { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(319):    virtual CxxToken* Back() { return this; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(324):    virtual bool WasRead() { return false; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(336):    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(341):    virtual bool SetNonConst() { return true; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(346):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(352):    virtual void RecordUsage() { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(356):    virtual void UpdateXref(bool insert) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(361):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(378):    virtual CxxToken* PosToItem(size_t pos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(383):    virtual bool LocateItem(const CxxToken* item, size_t& n)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(389):    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(394):    virtual void Check() const { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(398):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(402):    virtual CxxTokenSet* Xref() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(406):    virtual bool InLine() const { return true; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(411):    virtual void Print
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(417):    virtual void Shrink() { }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(440):    virtual bool IsPOD() const { return GetNumeric().IsPOD(); }
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(455):    virtual void UpdatePos(EditorAction action,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(691):    virtual void PushBack(uint32_t c) = 0;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.h(45):    virtual const std::string& Name() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.h(49):    virtual void Rename(const std::string& name);
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.h(53):    virtual void GetDecls(CxxNamedSet& items) { }
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(80):    virtual LibSetType GetType() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(86):    virtual NodeBase::word Check(NodeBase::CliThread& cli,
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(93):    virtual NodeBase::word Count(std::string& result) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(99):    virtual NodeBase::word Countlines(std::string& result) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(105):    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(111):    virtual NodeBase::word Format(std::string& expl) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(119):    virtual NodeBase::word Parse
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(126):    virtual NodeBase::word Scan(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(133):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(137):    virtual BuildOrder SortInBuildOrder() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(142):    virtual LibrarySet* Assign(LibrarySet* that);
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(143):    virtual LibrarySet* Intersection(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(144):    virtual LibrarySet* Difference(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(145):    virtual LibrarySet* Union(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(146):    virtual LibrarySet* Directories() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(147):    virtual LibrarySet* Files() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(148):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(149):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* Implements() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* Users(bool self) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* AffectedBy() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* Affecters() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* NeededBy() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* Needers() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* DeclaredBy() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* Declarers() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* Definitions() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* ReferencedBy() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(164):    virtual LibrarySet* Referencers() const;
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryVarSet.h(53):    void to_str(stringVector& strings, bool verbose) const override;
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(91):    virtual bool process_command_line_parameter(char token, std::string& value);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(97):    virtual std::string report_command_line_parameters();
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.h(72):    virtual std::string Name() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.h(76):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(75):    virtual void Display(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(93):    virtual void GetSubtended(std::vector< Base* >& objects) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(104):    virtual void ClaimBlocks();
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(122):    virtual void Cleanup() { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(129):    virtual void Startup(RestartLevel level) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(137):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.h(141):    virtual MemoryType MemType() const { return MemPermanent; }
  C:/Users/Greg/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBoolParm.h(47):    bool CurrValue() const override { return curr_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.h(48):    bool CurrValue() const override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h(72):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(71):    virtual void Initialize();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(75):    virtual MemoryType ObjType() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(80):    virtual Object* Create();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(84):    virtual Object* GetQuasiSingleton();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliAppData.h(63):    virtual void EventOccurred(Event event);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h(60):    virtual word ExplainCommand(std::ostream& stream, bool verbose) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h(93):    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.h(75):    virtual void Enter();
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.h(80):    virtual void Exit();
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(143):    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(151):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(161):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(171):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(181):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(191):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(219):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(229):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(239):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(252):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/Greg/Documents/rsc/rsc/nb/Exception.h(51):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(55):    virtual void* Addr() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(59):    virtual size_t Size() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(63):    virtual MemoryType Type() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(67):    virtual void* Alloc(size_t size) = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(71):    virtual void Free(void* addr) = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(76):    virtual size_t BlockToSize(const void* addr) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(81):    virtual bool Validate(const void* addr) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(85):    virtual bool CanBeProtected() const { return true; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h(92):    virtual int SetPermissions(MemoryProtection attrs);
  C:/Users/Greg/Documents/rsc/rsc/nb/MsgBuffer.h(58):    virtual TraceStatus GetStatus() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(79):    virtual Class* GetClass() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(87):    virtual void PostInitialize() { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(98):    virtual InstanceId GetInstanceId() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(102):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(107):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(175):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(68):    virtual uint64_t Overall() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(72):    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(74):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(47):    virtual void GetName(std::string& fileName) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(51):    virtual bool IsSubdir() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(55):    virtual bool AtEnd() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(60):    virtual bool Advance() = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(176):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(230):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Tool.h(64):    virtual c_string Name() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Tool.h(68):    virtual c_string Expl() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Tool.h(74):    virtual std::string Status() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceRecord.h(83):    virtual bool Display(std::ostream& stream, const std::string& opts);
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(44):    virtual NodeBase::byte_t* Bytes() = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(48):    virtual size_t Size() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(101):    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(109):    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(128):    virtual void ReceiveBuff
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(137):    virtual NodeBase::byte_t* HostToNetwork
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(143):    virtual void SocketFailed(SysSocket* socket) const { }
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h(119):    virtual size_t PayloadSize() const;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h(138):    virtual bool AddBytes
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h(102):    virtual SysTcpSocket* CreateAppSocket();
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h(147):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(60):    virtual NodeBase::c_string Name() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(64):    virtual IpProtocol Protocol() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(69):    virtual ipport_t Port() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(73):    virtual NodeBase::Faction GetFaction() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(77):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(81):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(88):    virtual NodeBase::CliText* CreateText() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(94):    virtual bool HasSharedSocket() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(102):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(99):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(128):    virtual AllocRc SetService(const IpService* service, bool shared);
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(134):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(180):    virtual void Acquire();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(184):    virtual void Release();
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpService.h(40):    virtual bool AcceptsConns() const { return true; }
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpService.h(45):    virtual size_t MaxConns() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpService.h(50):    virtual size_t MaxBacklog() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpService.h(54):    virtual bool Keepalive() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(94):    virtual PotsFeatureProfile* Subscribe
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(58):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(63):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(98):    virtual ContextType Type() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(102):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(106):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(110):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(114):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/Greg/Documents/rsc/rsc/sb/EventHandler.h(123):    virtual Rc ProcessEvent
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(125):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(131):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(138):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(144):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(151):    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(161):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(183):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(90):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(132):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(152):    virtual void Save();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(157):    virtual void Unsave();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(176):    virtual bool SendToSelf();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(262):    virtual bool Send(Route route);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(266):    virtual bool Restore();
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(99):    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(108):    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(137):    virtual TestRc InjectMsg
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(150):    virtual TestRc VerifyMsg
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.h(82):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.h(114):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(52):    virtual MsgPort* Port() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(56):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(89):    virtual FactoryId GetFactory() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(93):    virtual Message::Route Route() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(102):    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
  C:/Users/Greg/Documents/rsc/rsc/sb/RootServiceSM.h(50):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(87):    virtual NodeBase::c_string PortName(PortId pid) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(117):    virtual ServiceSM* AllocModifier() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(67):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(73):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(79):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(100):    virtual void SetNextState(StateId stid);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(107):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(121):    virtual void SetNextSap(TriggerId sap);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(127):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/Greg/Documents/rsc/rsc/sb/Signal.h(92):    virtual NodeBase::CliText* CreateText() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/SsmFactory.h(42):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/SsmFactory.h(48):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(67):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(191):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(208):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(268):    void Cancel() override;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h(149):    virtual EventHandler::Rc ApplyTreatment
W077 Virtual function has no overrides
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(68):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(73):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h(78):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.h(48):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h(114):    virtual std::string GetInput() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(71):    virtual void Initialize();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(75):    virtual MemoryType ObjType() const = 0;
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(80):    virtual Object* Create();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(84):    virtual Object* GetQuasiSingleton();
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(88):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.h(80):    virtual void Exit();
  C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.h(148):    virtual void Recover() { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(79):    virtual Class* GetClass() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(87):    virtual void PostInitialize() { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(98):    virtual InstanceId GetInstanceId() const;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(102):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(107):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(230):    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(272):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(278):    virtual MsgBuffer* DeqMsg(const Duration& timeout);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h(147):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(77):    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(81):    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(180):    virtual void Acquire();
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h(184):    virtual void Release();
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(87):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(183):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(90):    virtual void DisplayStats
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(152):    virtual void Save();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(157):    virtual void Unsave();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(165):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(172):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(176):    virtual bool SendToSelf();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(266):    virtual bool Restore();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(316):    virtual void Refresh();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(329):    virtual void Handled(bool retain);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(333):    virtual bool SendFailure(NodeBase::debug64_t errval);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(341):    virtual void ClearContext() const;
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(239):    virtual void SetState(StateId stid);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(283):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(288):    virtual void MsgHandled(Message& msg) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(294):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(300):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(139):    virtual void MorphToService(ServiceId sid);
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(67):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(191):    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(208):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(272):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(277):    virtual void AddFence();
W082 Adjacent arguments have the same type
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1212):    BcFactory(Id fid, ProtocolId prid, c_string name);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(535):    void UpdatePos(EditorAction action,
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.h(64):    WarningAttrs(bool fixable, bool preserve, NodeBase::c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.h(143):    void UpdatePos(EditorAction action,
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(617):    SymbolView(Accessibility a, TypeMatch m, Cxx::Access c,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(287):    TypeMatch CalcMatchWith(const StackArg& that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(342):    TypeMatch MatchWith(const StackArg& that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxLocation.h(76):    void UpdatePos(EditorAction action, size_t begin, size_t count, size_t from);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(366):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(663):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(864):    bool SetPointer(size_t n, bool readonly, bool unstable);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1118):    virtual TypeMatch MatchTemplate(const TypeSpec* that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(185): static TypeMatch MatchTemplate(const string& thisType,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(378):    virtual void Promote
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(240):    bool GetBracedSpan(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h(1809):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.h(59):    bool GetSeqSpan(size_t begin, size_t& left, size_t& end) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.h(64):    bool GetParSpan(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp(40): static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.h(53):    size_t rfind_first_not_of(const std::string& str,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.h(139):    size_t CompareScopes
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.h(177):    size_t Replace(std::string& code,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(48): static bool GetSpanFailure(size_t& begin, size_t& left, size_t& end)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(114):    bool GetSpan3(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(336):    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(455):    virtual void UpdatePos(EditorAction action,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(491):    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h(868):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(578): static void DebugFtNames(const Function* func, string& flit, string& fvar)
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(948): static bool ItemIsUsedBetween(const CxxToken* item, size_t begin, size_t end)
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1005): static void Rename(string& code, const string& oldName, const string& newName)
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(106):    void Rename(size_t pos, const string& oldName, const string& newName);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(261):    bool AdjustHorizontally(size_t pos, size_t len, const string& spacing);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(297):    word InsertForward(size_t pos, const string& nspace, const string& forward);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(302):    word InsertNamespaceForward(size_t pos,
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(319):    static void ChangeForwards
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(366):    void FindFreeItemPos(const Namespace* space, const string& name,
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(376):    CxxItemVector FindDeclRange
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(505):    void UpdateItemDefnAttrs(const CxxToken* prev,
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(511):    word UpdateItemDefnLoc(const CxxToken* prev,
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(566):    bool GetSpan(const CxxToken* item, size_t& begin, size_t& end);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(594):    size_t Replace(size_t pos, size_t count, const string& code);
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(641):    void UpdatePos(EditorAction action,
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(256):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(577):    LineType CalcLineType(size_t n, bool& cont, bool& c_comment);
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h(655):    void SetDepth(int depth1, int depth2, bool merge = true);
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(74):    NodeBase::word Import
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(108):    NodeBase::word Assign(CliThread& cli, const std::string& name,
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(137):    NodeBase::word Rename(CliThread& cli, const std::string& oldName,
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(76): static bool SetCompoundType
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(472):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/Greg/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/Greg/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/Greg/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(502):    virtual void report_failed_press
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(190):    bool set_move_by_convoy_order(ProvinceId unit,
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(398):    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(71):    Alarm(c_string name, c_string expl, secs_t delay);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.h(51):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.h(55):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.h(63):    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(c_string key, c_string def, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBoolParm.h(39):    CfgBoolParm(c_string key, c_string def, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(c_string key, c_string def,
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h(94):    CfgParm(c_string key, c_string def, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgStrParm.h(40):    CfgStrParm(c_string key, c_string def, c_string expl);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCharParm.h(40):    CliCharParm(c_string help, c_string chars,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h(103):    CliCommand(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.h(59):    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.h(102):    CliIncrement(c_string name, c_string help, uint32_t size = 32);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(c_string help, word min, word max,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(246):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h(252):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h(49):    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(99):    char CharPrompt(const std::string& prompt,
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(106):    word IntPrompt(const std::string& prompt, word min, word max);
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(251):    void Report1
  C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.h(63):    static void Spool(const std::string& name,
  C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.h(99):    int strCompare
  C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.h(111):    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.h(123): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.h(129): bool ValidateOptions
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(238):    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(243):    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.h(105):    PosixSignal(signal_t value, c_string name,
  C:/Users/Greg/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/Greg/Documents/rsc/rsc/nb/SymbolRegistry.h(59):    bool BindSymbol
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h(107):    bool FindFiles(const char* dirName,
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(115):    static SysThread_t Create
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(91):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(72):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(631):    void DisplaySummary(std::ostream& stream,
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.cpp(60): static void CheckHigh(FunctionStats*& high,
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(201):    static word Sort(const string& input, const string& output, string& expl);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h(55):    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPortCfgParm.h(42):    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h(79):    SysIpL3Addr
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h(107):    PotsFeature(Id fid, bool deactivation, c_string abbr, c_string name);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(132):    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(168):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/GlobalAddress.h(51):    GlobalAddress
  C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.h(94):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(65): static void DisplayEvent(ostream& stream, ServiceId sid, EventId eid)
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(174):    static BuffTrace* NextIcMsg
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTracer.h(136):    NodeBase::TraceRc SelectSignal
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTracer.h(190):       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(181):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/Greg/Documents/rsc/rsc/sb/SsmFactory.h(56):    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(104):    template< class T > T* CopyType
  C:/Users/Greg/Documents/rsc/rsc/st/StTestData.h(78):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(354):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W088 Argument could be const
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(506/4):       const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const;
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(268/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(366/1):    bool GetFuncSpecial(FunctionPtr& func);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(379/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(400/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(427/1):    bool GetCompoundType(QualNamePtr& name, Cxx::Type type);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(495/1):    bool GetNum(ExprPtr& expr);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(496/1):    bool GetChar(ExprPtr& expr, Cxx::Encoding code, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(497/1):    bool GetStr(ExprPtr& expr, Cxx::Encoding code, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(507/1):    bool GetCast(ExprPtr& expr);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(508/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(515/1):    bool HandleTilde(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(519/1):    bool GetSubscript(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(528/1):    bool GetAlignOf(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(529/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(530/1):    bool GetConditional(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(531/1):    bool GetDefined(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(532/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(533/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(534/1):    bool GetNoExcept(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(535/1):    bool GetSizeOf(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(536/1):    bool GetThrow(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(537/1):    bool GetTypeId(ExprPtr& expr, size_t pos);
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(59/2):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(90/1):    bool Enq(T& elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(114/1):    bool Henq(T& elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(136/1):    bool Insert(T* prev, T& elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(171/1):    bool Exq(T& elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(328/1):    void Corrupt(T* elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(150/1):    bool Exq(T& elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(278/1):    bool Erase(T& item)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(116/2):       (ThreadEntry entry, Thread* client, size_t stackSize, SysThreadId& nid);
  C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h(138/1):       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h(58/1):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(288/1):    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(161/1):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.h(108/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(132/1):    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(107/1):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(208/1):    virtual void DeleteParm(TlvParmLayout& parm);
W090 Function could be const
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1111):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1167):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(152):    void InsertClass(Class* cls);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(153):    void InsertData(Data* data);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(154):    void InsertEtor(Enumerator* etor);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(155):    void InsertEnum(Enum* item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(156):    void InsertForw(Forward* forw);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(157):    void InsertFriend(Friend* frnd);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(158):    void InsertFunc(Function* func);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(159):    void InsertMacro(Macro* macro);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(160):    void InsertSpace(Namespace* space);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(161):    void InsertTerm(Terminal* term);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(162):    void InsertType(Typedef* type);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(166):    void EraseClass(const Class* cls);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(167):    void EraseData(const Data* data);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(168):    void EraseEtor(const Enumerator* etor);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(169):    void EraseEnum(const Enum* item);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(170):    void EraseForw(const Forward* forw);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(171):    void EraseFriend(const Friend* frnd);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(172):    void EraseFunc(const Function* func);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(173):    void EraseMacro(const Macro* macro);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(174):    void EraseSpace(const Namespace* space);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(175):    void EraseTerm(const Terminal* term);
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(176):    void EraseType(const Typedef* type);
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(80):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(108):    NodeBase::word Assign(CliThread& cli, const std::string& name,
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(125):    NodeBase::word Purge(const std::string& name, std::string& expl);
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(163):    void Shrink();
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(206):    virtual void process_ccd_message
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(212):    virtual void process_drw_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(243):    virtual void process_out_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(251):    virtual void process_smr_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(268):    virtual void process_adm_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(273):    virtual void process_not_ccd_message(const TokenMessage& message,
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(467):    virtual void process_hlo_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(472):    virtual void process_map_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(476):    virtual void process_mdf_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(484):    virtual void process_sco_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(488):    virtual void process_now_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(492):    virtual void process_slo_message(const TokenMessage& message);
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(120):    void SetStatus(AlarmStatus status);
  C:/Users/Greg/Documents/rsc/rsc/nb/CallbackRequest.h(44):    virtual void Callback() { }
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.h(137):    virtual Object* New(size_t size);
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(118):    void SetInterval(uint8_t interval);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.h(143):    void SetState(index_t index, BlockState state);
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(59):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(185):    bool Corrupt(size_t n);
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h(251):    void UpdateAlarm();
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(150):    bool Exq(T& elem)
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsRegistry.h(72):    void StartInterval(bool first);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(170):    DelayRc Suspend(SysSentry_t& sentry, const Duration& timeout);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(120):    bool Interrupt(const Flags& mask = NoFlags);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(163):    void SetStatus(TraceStatus status);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(266):    void SetInitialized();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(418):    void Reset(FlagId fid);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(422):    void Ready();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(426):    void Preempt();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(445):    void Proceed();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(484):    void UpdateMutex(SysMutex* mutex);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(492):    void UpdateMutexCount(bool acquired);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(544):    bool LogTrap(const Exception* ex,
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(592):    void SetTrap(bool on);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(600):    void StackCheck();
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(604):    void SetSignal(signal_t sig);
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceRecord.h(105):    virtual void ClaimBlocks() { }
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.h(84):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/Greg/Documents/rsc/rsc/nt/NtTestData.h(81):    void Reset();
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h(185):    virtual IoThread* CreateIoThread();
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(149):    virtual IpPort* CreatePort(ipport_t pid) = 0;
  C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.h(62):    void ReleaseResources();
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(66):    void Audit();
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h(108):    void SetState(const ProtocolSM* psm, State state);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h(118):    bool SetObjAddr(const MsgPort& port);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(158):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(192):    virtual void EndOfTransaction() { }
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(161):    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(257):    virtual Rc ReceiveMsg
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(149):    void KickThread();
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(153):    Context* FindWork();
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(172):    void Requeue(Context& ctx);
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h(180):    void ScheduledOut();
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(110):    void SetSignal(SignalId sid);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(114):    void SetJoin(bool join);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(225):    void SetProtocol(ProtocolId prid);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(229):    void SetPriority(MsgPriority prio);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(233):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(237):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.h(358):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(167):    virtual Message* UnwrapMsg(Message& msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h(174):    virtual Message* WrapMsg(Message& msg);
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h(118):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(186):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(235):    EventHandler::Rc ProcessSsmqSap
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h(246):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(265):    void UpdateTestPsm();
W092 Function could be free
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.h(88):    static void DisplayStateCounts // AnIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(176):    static bool IsValidDigit(Digit d) // DigitString.cpp
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1115):    static void DisplayStateCounts // AnIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1120):    static void ResetStateCounts(RestartLevel level); // CbModule.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(357):    const stringVector& Prolog() const; // CodeFile.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(461):    static void UpdateOperator(Cxx::Operator& oper, size_t args); // CxxScope.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(735):    static bool AtFileScope(); // CxxToken.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(750):    static Cxx::Access ScopeVisibility(); // CxxArea.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(808):    static void WasCalled(Function* func); // CxxScope.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(845):    static void PushXrefFrame(XrefUpdater updater); // CxxScope.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(849):    static void PopXrefFrame(); // CxxScope.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(857):    static void PushXrefItem(TypeName* item); // CxxNamed.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(861):    static TypeName* FindXrefItem(const std::string& name); // CxxScoped.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(871):    static void Trace(CxxTrace::Action act, const CxxToken* token); // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(872):    static void Trace(CxxTrace::Action act, const StackArg& arg); // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(873):    static void Trace(CxxTrace::Action act, const CodeFile& file); // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(874):    static void Trace(CxxTrace::Action act, NodeBase::word err, // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(879):    static void InsertTracepoint // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(884):    static void EraseTracepoint // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(889):    static void ClearTracepoints(); // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(893):    static void DisplayTracepoints // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(915):    static void Startup(NodeBase::RestartLevel level) { } // CtModule.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h(953):    static bool StartTracing(); // Parser.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(177):    static void AddUsing(Using* use); // CxxScoped.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(182):    static void RemoveUsing(const Using* use); // CxxScoped.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h(186):    static void ResetUsings(); // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(118):    static size_t CommitCount(); // CodeFileSet.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(154):    static void ReportFix(const CodeWarning* log, word rc); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(169):    word ChangeCast(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(170):    word ChangeClassToNamespace(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(173):    word ChangeOperator(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(178):    word EraseCast(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(179):    word EraseClass(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(192):    word InsertCopyCtorCall(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(193):    word InsertDataInit(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(195):    word InsertDisplay(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(196):    word InsertEnumName(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(197):    word InsertFallthrough(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(202):    word InsertMemberInit(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(204):    word InsertPODCtor(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(205):    word InsertPureVirtual(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(207):    word MoveDefine(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(208):    word MoveMemberInit(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(212):    word ReplaceHeading(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(213):    word ReplaceName(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(358):    static void QualifyClassItems // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(417):    word FixInvokers(const CodeWarning& log); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(426):    word ChangeFunctionToMember(const Function* func, word offset); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(427):    word ChangeInvokerToMember(const Function* func, word offset); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(428):    word EraseArgument(const Function* func, word offset); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(429):    word EraseDefaultValue(const Function* func, word offset); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(430):    word EraseParameter(const Function* func, word offset); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(432):    word InsertArgument(const Function* func, word offset); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h(433):    word SplitVirtualFunction(const Function* func); // Editor.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.h(74):    static bool IsOperator(const std::string& s); // Library.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(137):    NodeBase::word Rename(CliThread& cli, const std::string& oldName, // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(170):    static void ResetStats(); // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(174):    static void DisplayStats(std::ostream& stream); // CtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(586):    static bool Backup(size_t cause); // Parser.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h(619):    static std::string Indent(); // Parser.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(179):    void cancel_event(BotEvent event); // BaseBot.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(524):    static void report_ccd(const Token& power, bool disorder); // BaseBot.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(544):    static void report_out(const Token& power); // BaseBot.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(556):    void report_exit(c_string reason); // BaseBot.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h(716):    static bool send_buff(DipIpBuffer& buff); // BaseBot.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(162):    static MapAndUnits* create_clone(); // MapAndUnits.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(166):    static void delete_clone(MapAndUnits*& clone); // MapAndUnits.cpp
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h(259):    std::string display_retreat_result(const UnitOrder& unit) const; // BaseBot.cpp
  C:/Users/Greg/Documents/rsc/rsc/mb/Switch.h(74):    static bool IsValidPort(PortId pid) // Circuit.cpp
  C:/Users/Greg/Documents/rsc/rsc/mb/ToneRegistry.h(54):    static Switch::PortId ToneToPort(Tone::Id tid); // MediaPsm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.h(92):    static const std::string& ValidValueChars(); // CfgParmRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.h(97):    static const std::string& ValidBlankChars(); // CfgParmRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CoutThread.h(48):    static void Spool(c_string s, bool eol = false); // CoutThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.h(111):    static void SetSwFlag(FlagId fid, bool value); // NtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.h(115):    static void ResetSwFlags(); // NtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.h(119):    static Flags GetSwFlags(); // NtIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.h(123):    static void noop(debug64_t info = 0); // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Element.h(50):    static bool IsUnnamed(); // ModuleRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.h(45):    static ostringstreamPtr CreateStream(); // CliThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.h(58):    static void Spool(const std::string& name, ostringstreamPtr& stream, // FileThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.h(63):    static void Spool(const std::string& name, // FileThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.h(72):    static void Truncate(const std::string& name); // NbIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(128):    static Log* Find(c_string log); // Log.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(136):    static size_t Count(); // NbIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/LogThread.h(68):    static void Spool(ostringstreamPtr& stream, const Log* log); // Log.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/MainArgs.h(61):    static void PushBack(const std::string& arg); // main.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.h(90):    void SetLevel(RestartLevel level); // InitThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.h(94):    static RestartLevel NextLevel(); // ModuleRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.h(110):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid); // Object.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance(); // Memory.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.h(48):    static void ListHeaps(std::set< void* >& heaps, std::ostringstream& expl); // Memory.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(122):    static SysThread_t Wrap(); // SysThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(126):    static void Delete(SysThread_t& thread); // SysThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(131):    static SysSentry_t CreateSentry(); // SysThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(135):    static void DeleteSentry(SysSentry_t& sentry); // SysThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h(174):    bool Resume(SysSentry_t& sentry); // SysThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(158):    static const int16_t* DaysPerMonth(int16_t year); // SysTime.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(221):    static double PercentIdle(); // NbIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(624):    static void EnableFactions(const FactionFlags& enabled); // ModuleRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(640):    static TraceRc LogContextSwitches(bool on); // NbIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(648):    static void DisplayContextSwitches(std::ostream& stream); // NbIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/TimePoint.h(82):    static TimePoint Never(); // TimePoint.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.h(105):    void QueryTools(std::ostream& stream) const; // NbIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/NwDaemons.h(49):    static TcpIoDaemon* GetDaemon(const TcpIpService* service, ipport_t port); // TcpIpPort.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/NwDaemons.h(92):    static UdpIoDaemon* GetDaemon(const UdpIpService* service, ipport_t port); // UdpIpPort.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h(113):    static const SysIpL2Addr& NullIpAddr(); // SysIpL2Addr.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(156):    static NodeBase::c_string AlarmName(nwerr_t errval); // NwLogs.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(161):    static bool StartLayer(); // NwModule.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h(166):    static void StopLayer(); // NwModule.cpp
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(138):    static void DisplayStateCounts // AnIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(147):    static void ResetStateCounts(RestartLevel level); // PotsProfileRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(84):    static RootServiceSM* ContextRoot(); // Event.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(120):    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset); // Context.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(125):    static void Dump(NodeBase::fn_name_arg func, // Context.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Event.h(70):    static bool AppCanHandle(Id eid) // State.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/EventHandler.h(92):    static bool AppCanRegister(Id ehid) // Service.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/EventHandler.h(100):    static bool AppCanUse(Id ehid) // State.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.h(168):    static MsgPort* FindPeer(const GlobalAddress& remAddr); // PsmFactory.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h(155):    static NodeBase::c_string ExplainRc(TestRc rc); // StIncrement.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/SbDaemons.h(43):    static InvokerDaemon* GetDaemon(NodeBase::Faction faction, size_t size); // InvokerPool.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.h(79):    static bool IsValidPortId(PortId pid) // State.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.h(71):    static Id ExtractPid(const TlvParmLayout& parm); // TlvParameter.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Trigger.h(80):    static bool IsValidId(Id tid) // ServiceSM.cpp
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h(113):    static TestPsm* Find(const MsgPort& port); // TestSessions.cpp
W099 Line contains adjacent spaces
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(65):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(66):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(67):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(68):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(70):    CauseInfo*    cci;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(120):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(121):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(122):    auto       sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(123):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(161):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(162):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(163):    auto       sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(164):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(191):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(192):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(193):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(194):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp(196):    CauseInfo*    cci;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(392):    id_t        idx;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(393):    word        fid, rid;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(395):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(422):    TestRc       rc;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(423):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(425):    id_t         idx;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(426):    word         fid, rid;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(719):    auto          state = GetState();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(720):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(721):    auto          sig = tmsg.GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(722):    TimeoutInfo*  toi = nullptr;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(724):    auto          err = true;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(725):    debug64_t     error;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(849):    auto          state = GetState();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(850):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(851):    auto          sig = msg.GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(853):    auto          err = true;
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp(854):    debug64_t     error;
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(359):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(360):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(361):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(362):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(364):    CauseInfo*    cci;
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(414):    CxxWord("D",   "D",    "D",  F),  // ALIGNAS
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(415):    CxxWord("@",   "@",    "@",  T),  // ASM
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(416):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(417):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(418):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(419):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(420):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(421):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(422):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(423):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(424):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(425):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(426):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(427):    CxxWord("DP",  "-",    "-",  F),  // EXTERN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(428):    CxxWord("-",   "-",    "-",  F),  // FINAL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(429):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(430):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(431):    CxxWord("-",   "-",    "g",  T),  // GOTO
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(432):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(433):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(434):    CxxWord("P",   "P",    "-",  F),  // INLINE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(435):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(436):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(437):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(438):    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(439):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(440):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(441):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(442):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(443):    CxxWord("DP",  "DP",   "D",  F),  // STATIC
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(444):    CxxWord("$",   "$",    "$",  T),  // STATIC_ASSERT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(445):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(446):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(447):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(448):    CxxWord("D",   "D",    "D",  F),  // THREAD_LOCAL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(449):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(450):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(451):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(452):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(453):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(454):    CxxWord("DP",  "DP",   "D",  F),  // VOLATILE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(455):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(456):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(457):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(485):    CxxOp(           SCOPE_STR, 2, 18, F, F, F, XN),  // SCOPE_RESOLUTION
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(486):    CxxOp(                 ".", 2, 17, F, F, F, NN),  // REFERENCE_SELECT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(487):    CxxOp(                "->", 2, 17, T, F, F, NN),  // POINTER_SELECT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(488):    CxxOp(                 "[", 2, 17, T, F, F, NN),  // ARRAY_SUBSCRIPT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(489):    CxxOp(                 "(", 0, 17, F, F, F, NN),  // FUNCTION_CALL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(490):    CxxOp(                "++", 1, 17, T, F, F, NX),  // POSTFIX_INCREMENT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(491):    CxxOp(                "--", 1, 17, T, F, F, NX),  // POSTFIX_DECREMENT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(492):    CxxOp(         DEFINED_STR, 1, 17, F, F, F, XN),  // DEFINED
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(493):    CxxOp(          TYPEID_STR, 1, 17, F, F, F, XN),  // TYPE_NAME
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(494):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F, XN),  // CONST_CAST
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(495):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F, XN),  // DYNAMIC_CAST
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(497):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F, XN),  // STATIC_CAST
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(498):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F, XN),  // SIZEOF_TYPE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(499):    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F, XN),  // ALIGNOF_TYPE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(500):    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F, XN),  // NOEXCEPT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(501):    CxxOp(                "++", 1, 16, T, T, F, XN),  // PREFIX_INCREMENT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(502):    CxxOp(                "--", 1, 16, T, T, F, XN),  // PREFIX_DECREMENT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(503):    CxxOp(                 "~", 1, 16, T, T, F, XN),  // ONES_COMPLEMENT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(504):    CxxOp(                 "!", 1, 16, T, T, F, XN),  // LOGICAL_NOT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(505):    CxxOp(                 "+", 1, 16, T, T, F, XN),  // UNARY_PLUS
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(506):    CxxOp(                 "-", 1, 16, T, T, F, XN),  // UNARY_MINUS
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(507):    CxxOp(                 "&", 1, 16, T, T, F, XN),  // ADDRESS_OF
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(508):    CxxOp(                 "*", 1, 16, T, T, F, XN),  // INDIRECTION
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(509):    CxxOp(             NEW_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(510):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE_ARRAY
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(511):    CxxOp(          DELETE_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(512):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE_ARRAY
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(513):    CxxOp(                 "(", 2, 16, T, T, F, SN),  // CAST
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(514):    CxxOp(                ".*", 2, 15, F, F, F, NN),  // REFERENCE_SELECT_MEMBER
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(515):    CxxOp(               "->*", 2, 15, T, F, F, NN),  // POINTER_SELECT_MEMBER
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(516):    CxxOp(                 "*", 2, 14, T, F, T, SS),  // MULTIPLY
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(517):    CxxOp(                 "/", 2, 14, T, F, F, SS),  // DIVIDE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(518):    CxxOp(                 "%", 2, 14, T, F, F, SS),  // MODULO
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(519):    CxxOp(                 "+", 2, 13, T, F, T, SS),  // ADD
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(520):    CxxOp(                 "-", 2, 13, T, F, F, SS),  // SUBTRACT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(521):    CxxOp(                "<<", 2, 12, T, F, F, SS),  // LEFT_SHIFT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(522):    CxxOp(                ">>", 2, 12, T, F, F, SS),  // RIGHT_SHIFT
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(523):    CxxOp(                 "<", 2, 11, T, F, T, SS),  // LESS
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(524):    CxxOp(                "<=", 2, 11, T, F, T, SS),  // LESS_OR_EQUAL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(525):    CxxOp(                 ">", 2, 11, T, F, T, SS),  // GREATER
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(526):    CxxOp(                ">=", 2, 11, T, F, T, SS),  // GREATER_OR_EQUAL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(527):    CxxOp(                "==", 2, 10, T, F, T, SS),  // EQUALITY
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(528):    CxxOp(                "!=", 2, 10, T, F, T, SS),  // INEQUALITY
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(529):    CxxOp(                 "&", 2,  9, T, F, T, SS),  // BITWISE_AND
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(530):    CxxOp(                 "^", 2,  8, T, F, T, SS),  // BITWISE_XOR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(531):    CxxOp(                 "|", 2,  7, T, F, T, SS),  // BITWISE_OR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(532):    CxxOp(                "&&", 2,  6, T, F, T, SS),  // LOGICAL_AND
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(533):    CxxOp(                "||", 2,  5, T, F, T, SS),  // LOGICAL_OR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(534):    CxxOp(                 "?", 3,  4, F, F, F, SS),  // CONDITIONAL
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(535):    CxxOp(                 "=", 2,  3, T, T, F, SS),  // ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(536):    CxxOp(                "*=", 2,  3, T, T, F, SS),  // MULTIPLY_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(537):    CxxOp(                "/=", 2,  3, T, T, F, SS),  // DIVIDE_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(538):    CxxOp(                "%=", 2,  3, T, T, F, SS),  // MODULO_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(539):    CxxOp(                "+=", 2,  3, T, T, F, SS),  // ADD_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(540):    CxxOp(                "-=", 2,  3, T, T, F, SS),  // SUBTRACT_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(541):    CxxOp(               "<<=", 2,  3, T, T, F, SS),  // LEFT_SHIFT_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(542):    CxxOp(               ">>=", 2,  3, T, T, F, SS),  // RIGHT_SHIFT_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(543):    CxxOp(                "&=", 2,  3, T, T, F, SS),  // BITWISE_AND_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(544):    CxxOp(                "^=", 2,  3, T, T, F, SS),  // BITWISE_XOR_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(545):    CxxOp(                "|=", 2,  3, T, T, F, SS),  // BITWISE_OR_ASSIGN
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(546):    CxxOp(           THROW_STR, 0,  2, F, T, F, SS),  // THROW
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(547):    CxxOp(                 ",", 2,  1, F, F, F, NS),  // STATEMENT_SEPARATOR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(548):    CxxOp(                 "$", 0,  0, F, F, F, XX),  // START_OF_EXPRESSION
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(549):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // FALSE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(550):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // TRUE
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(551):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // NULLPTR
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(552):    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX)   // NIL_OPERATOR
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(90):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(91):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(92):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(93):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("d",  1, DIR_SET,  ANY_SET,  ERR_SET),   // OpDirectories
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("f",  1, FILE_SET, ANY_SET,  ERR_SET),   // OpFiles
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(111):    OperatorInfo("db", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpDeclaredBy
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(114):    OperatorInfo("rb", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpReferencedBy
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(208):    inline static fn_name Array_ctor()    { return "Array.ctor"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(209):    inline static fn_name Array_dtor()    { return "Array.dtor"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Array.h(210):    inline static fn_name Array_Init()    { return "Array.Init"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Duration.h(191): int64_t  operator/(const Duration& lhs, const Duration& rhs);
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(613):                case Split:     c = 'S'; break;
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(614):                case Merged:    c = 'm'; break;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(169):    CounterPtr      allocCount_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(170):    CounterPtr      freeCount_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(171):    CounterPtr      failCount_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(172):    CounterPtr      auditCount_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(173):    CounterPtr      expansions_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_dtor()    { return "Q1Way.dtor"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Init()    { return "Q1Way.Init"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Enq()     { return "Q1Way.Enq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(392):    inline static fn_name Q1Way_Henq()    { return "Q1Way.Henq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Insert()  { return "Q1Way.Insert"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(394):    inline static fn_name Q1Way_Deq()     { return "Q1Way.Deq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(395):    inline static fn_name Q1Way_Exq()     { return "Q1Way.Exq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(396):    inline static fn_name Q1Way_Next()    { return "Q1Way.Next"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(397):    inline static fn_name Q1Way_Size()    { return "Q1Way.Size"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(398):    inline static fn_name Q1Way_Purge()   { return "Q1Way.Purge"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h(400):    inline static fn_name Q1Way_Item()    { return "Q1Way.Item"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(369):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(370):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(372):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(373):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(374):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h(376):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(626):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(628):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(634):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(635):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h(636):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Singleton.h(129):    inline static fn_name Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(274):    CounterPtr       traps_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(275):    CounterPtr       exceeds_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(276):    CounterPtr       yields_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(277):    CounterPtr       interrupts_;
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(281):    AccumulatorPtr   totTime_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(183):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(187):    CfgIntParmPtr  rtcLimit_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  rtcInterval_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(190):    CfgIntParmPtr  trapLimit_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(191):    CfgIntParmPtr  trapInterval_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(193):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h(194):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(60):    CounterPtr       recvs_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(61):    AccumulatorPtr   bytesRcvd_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       discards_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(65):    CounterPtr       rejects_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(66):    CounterPtr       sends_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(67):    AccumulatorPtr   bytesSent_;
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(69):    CounterPtr       overflows_;
  C:/Users/Greg/Documents/rsc/rsc/nw/NwTypes.h(60):       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(463):    id_t             index;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(464):    word             sid, ind;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(466):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(522):    TestRc            rc;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(523):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(525):    id_t              index;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(526):    word              sid, ind;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(645):    word           port;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(647):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(670):    TestRc          rc;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(671):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(672):    word            port;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(758):    TestRc        rc;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(759):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    bool          ring = false;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(762):    auto          exists = false;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(840):    TestRc        rc;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(841):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(843):    string        scan;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(844):    auto          digits = false;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(845):    auto          flash = false;
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp(846):    auto          exists = false;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(53):    CounterPtr       icMsgsIntra_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(54):    CounterPtr       icMsgsInter_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(56):    CounterPtr       ogMsgsIntra_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       ogMsgsInter_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(59):    CounterPtr       contexts_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(60):    CounterPtr       msgsDeleted_;
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(61):    CounterPtr       ctxsDeleted_;
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(119):    CounterPtr       requeues_;
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(120):    CounterPtr       trojans_;
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(121):    CounterPtr       lockouts_;
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(42):    LocalAddress   txAddr;         // source address
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(43):    LocalAddress   rxAddr;         // destination address
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(44):    MsgPriority    priority : 2;   // message's priority
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(45):    bool           initial  : 1;   // true for initial message
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(46):    bool           final    : 1;   // true for final message
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(47):    bool           join     : 1;   // true to create PSM and join root SSM
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool           self     : 1;   // true for message to self
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool           injected : 1;   // true if sent by InjectCommand
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool           kill     : 1;   // true to kill context on arrival
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(51):    uint8_t        spare    : 6;   // reserved for future use
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(52):    Message::Route route    : 2;   // the route that the message took
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(53):    ProtocolId     protocol : 16;  // message's protocol
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(54):    SignalId       signal   : 16;  // message's signal
  C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h(55):    uint16_t       length   : 16;  // total bytes in all parameters
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(132):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(133):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    CauseInfo*    cci;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(236):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(237):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(238):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(239):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(241):    CauseInfo*    cci;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(300):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(301):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(302):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(303):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(305):    CauseInfo*    cci;
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(346):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(347):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(348):    auto          sid = msg->GetSignal();
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(349):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(351):    CauseInfo*    cci;
W102 Line length exceeds the standard maximum
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp(285):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(3073): "Alloc  Low kB     kB       Bytes                            Memory        Prot\n"
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(3074): "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
W106 Function does not invoke Debug::ft
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1347): void PotsTrafficThread::RecordHoldingTime(const Duration& time)
  C:/Users/Greg/Documents/rsc/rsc/cb/DigitString.cpp(136): Digit DigitString::At(DigitCount i) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1082): void CodeFile::EraseClass(const Class* cls)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1090): void CodeFile::EraseData(const Data* data)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1098): void CodeFile::EraseEnum(const Enum* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1106): void CodeFile::EraseForw(const Forward* forw)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1114): void CodeFile::EraseFunc(const Function* func)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1156): void CodeFile::EraseItem(const CxxToken* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1170): void CodeFile::EraseSpace(const SpaceDefn* space)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1178): void CodeFile::EraseType(const Typedef* type)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1186): void CodeFile::EraseUsing(const Using* use)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1551): void CodeFile::GetLineCounts() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1761): void CodeFile::InsertAsm(Asm* code)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1769): void CodeFile::InsertClass(Class* cls)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1777): void CodeFile::InsertData(Data* data)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1785): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1794): void CodeFile::InsertEnum(Enum* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1802): void CodeFile::InsertForw(Forward* forw)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1810): void CodeFile::InsertFunc(Function* func)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1818): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1861): void CodeFile::InsertItem(CxxToken* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1886): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1894): void CodeFile::InsertSpace(SpaceDefn* space)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1902): void CodeFile::InsertStaticAssert(StaticAssert* assert)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1910): void CodeFile::InsertType(Typedef* type)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(1918): void CodeFile::InsertUsing(Using* use)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp(92): static bool IsSortedByFileLevel(const FileLevel& item1, const FileLevel& item2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(55): void CodeItemSet::CopyItems(const CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp(67): void CodeItemSet::CopyUsages(const CxxUsageSets& usages)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeTypes.cpp(406): size_t IndentSize()
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeTypes.cpp(413): bool IsAccessControl(const std::string& s)
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeTypes.cpp(426): size_t LineLengthMax()
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(342): bool CodeWarning::HasCodeToDisplay() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(349): bool CodeWarning::HasInfoToDisplay() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(808): bool CodeWarning::IsInformational() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(815): bool CodeWarning::IsSortedByFile
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(834): bool CodeWarning::IsSortedByType
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(853): bool CodeWarning::IsSortedToFix
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(872): void CodeWarning::ItemDeleted(const CxxToken* item) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(882): size_t CodeWarning::Line() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(950): bool CodeWarning::Preserve() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(977): bool CodeWarning::Suppress() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp(1218): bool CodeWarning::WasResolved() const
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(103): Cxx::Access FindAccessControl(const std::string& s)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(824): static void EraseTemplateArgs
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(856): static void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(866): void CxxUsageSets::AddBase(CxxNamed* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(874): void CxxUsageSets::AddDirect(CxxNamed* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(882): void CxxUsageSets::AddForward(CxxNamed* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(893): void CxxUsageSets::AddIndirect(CxxNamed* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(901): void CxxUsageSets::AddInherit(CxxNamed* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp(909): void CxxUsageSets::AddUser(CxxNamed* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(69): static TypeMatch FindMin(const std::vector< TypeMatch >& matches)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1559): Class* Class::GetClassTemplate() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1595): Cxx::Access Class::GetCurrAccess() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1612): void Class::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(1723): CxxScope* Class::GetTemplate() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(2197): Class* Class::OuterClass() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(3366): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(3384): void CxxArea::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(3424): void CxxArea::InsertFunc(Function* func)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(46): static void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(58): bool IncludesAreSorted(const IncludePtr& incl1, const IncludePtr& incl2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(201): CxxToken* Define::AutoType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(1008): bool Macro::WasRead()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp(1048): CxxScope* MacroName::GetScope() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(59): static bool CompilingTemplateFunction()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(323): TypeName* Context::FindXrefItem(const string& name)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(335): const Parser* Context::GetParser()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(343): XrefUpdater Context::GetXrefUpdater()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(372): void Context::OnLine(size_t line, bool compiling)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(386): bool Context::OptionIsOn(char opt)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(414): bool Context::ParsingSourceCode()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(422): bool Context::ParsingTemplateInstance()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(447): void Context::PopXrefFrame()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(465): void Context::PushScope(CxxScope* scope, bool hidden)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(474): void Context::PushXrefFrame(XrefUpdater updater)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(481): void Context::PushXrefItem(TypeName* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(503): CxxScope* Context::Scope()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(554): void Context::SetPos(size_t pos)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(569): void Context::SetPos(const CxxLocation& loc)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(971): OptionalCode* ParseFrame::Optional() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1162): CxxScope* ParseFrame::Scope() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1169): Cxx::Access ParseFrame::ScopeAccess() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1176): Cxx::Access ParseFrame::SetAccess(Cxx::Access access)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(1580): bool StackArg::IsBool() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(2271): TypeName* XrefFrame::FindItem(const string& name) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(2283): void XrefFrame::PushItem(TypeName* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxLocation.cpp(41): void CxxLocation::SetLoc(CodeFile* file, size_t pos)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxLocation.cpp(49): void CxxLocation::SetLoc(CodeFile* file, size_t pos, bool internal)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(166): CxxArea* CxxNamed::GetArea() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(175): Class* CxxNamed::GetClass() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(206): CodeFile* CxxNamed::GetDistinctDeclFile() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(221): CodeFile* CxxNamed::GetImplFile() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(230): void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(237): Namespace* CxxNamed::GetSpace() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(563): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(932): TypeTags DataSpec::GetAllTags() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1000): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1137): bool DataSpec::IsAutoDecl() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1204): bool DataSpec::IsPOD() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(1576): CxxScoped* DataSpec::Referent() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2017): TypeName* QualName::At(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2239): CxxScope* QualName::GetScope() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2270): TypeName* QualName::GetTemplateArgs() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2360): TypeName* QualName::Last() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2594): size_t QualName::Size() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2775): CxxScoped* TypeName::DirectType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2872): TypeName* TypeName::GetTemplateArgs() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3065): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3647): int TypeTags::IsConstPtr() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3656): bool TypeTags::IsConstPtr(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3665): int TypeTags::IsVolatilePtr() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3674): bool TypeTags::IsVolatilePtr(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(3714): TagCount TypeTags::PtrCount(bool arrays) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(114): bool FuncDefnsAreSorted(const Function* func1, const Function* func2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(146): FunctionVector FuncsInArea(const FunctionVector& defns, const CxxArea* area)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(271): bool Block::CrlfOver(Form form) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(412): CxxToken* Block::FirstStatement() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(420): Function* Block::GetFunction() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(896): void ClassData::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1005): void ClassData::SetMemInit(const MemberInit* init)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1540): CodeFile* Data::GetDeclFile() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1547): const Data* Data::GetDefn() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1556): CodeFile* Data::GetDefnFile() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1599): TypeName* Data::GetTemplateArgs() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1739): bool Data::IsConst() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(1907): bool Data::WasRead()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2304): TypeSpec* FuncSpec::Clone() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2336): void FuncSpec::EnterArrays() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2353): void FuncSpec::FindReferent()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2361): TypeTags FuncSpec::GetAllTags() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2368): void FuncSpec::GetNames(stringVector& names) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2376): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2383): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2390): bool FuncSpec::HasArrayDefn() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2397): void FuncSpec::Instantiating(CxxScopedVector& locals) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2405): bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2413): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2421): TypeMatch FuncSpec::MatchTemplate(const TypeSpec* that,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2431): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2439): bool FuncSpec::NamesReferToArgs(const NameVector& names,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2465): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2472): TagCount FuncSpec::Refs() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2506): void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2522): const TypeTags* FuncSpec::Tags() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2529): TypeTags* FuncSpec::Tags()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(2933): uint32_t Function::CalcHash() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4564): FunctionRole Function::FuncRole() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4601): FunctionType Function::FuncType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4612): Cxx::Access Function::GetAccess() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4620): CodeFile* Function::GetDeclFile() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4627): void Function::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4634): const Function* Function::GetDefn() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4643): Function* Function::GetDefn()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4652): CodeFile* Function::GetDefnFile() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4661): CxxScope* Function::GetScope() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4689): CxxScope* Function::GetTemplate() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4700): CxxScope* Function::GetTemplateInstance() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(4708): TemplateType Function::GetTemplateType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5216): bool Function::IsImplemented() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5439): size_t Function::LogOffsetToArgIndex(word offset) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(6172): bool Function::WasRead()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(6379): void SpaceData::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(6478): void SpaceDefn::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(471): Class* BaseDecl::GetClass() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(595): void CxxScoped::AddFiles(LibItemSet& imSet) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(823): bool CxxScoped::IsAuto() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(832): bool CxxScoped::IsClassMember() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(846): bool CxxScoped::IsConst() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(855): bool CxxScoped::IsConstPtr() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(864): bool CxxScoped::IsConstPtr(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(873): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(881): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(894): bool CxxScoped::IsIndirect(bool arrays) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1158): void CxxScoped::UpdateReference(CxxToken* item, bool insert) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1215): CxxTokenVector CxxScoped::XrefItems() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1452): void Enum::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1473): TypeSpec* Enum::GetTypeSpec() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1732): void Enumerator::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(1923): CxxToken* Forward::AutoType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2005): void Forward::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2166): CxxToken* Friend::AutoType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2438): void Friend::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2455): Function* Friend::GetFunction() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2464): QualName* Friend::GetQualName() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2473): CxxScoped* Friend::GetReferent() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2907): CxxScoped* MemberInit::Referent() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(2969): CxxToken* TemplateParm::AutoType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3063): CxxScoped* TemplateParm::Referent() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3076): CxxToken* TemplateParm::RootType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3544): void Typedef::GetDecls(CxxNamedSet& items)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3560): TypeName* Typedef::GetTemplateArgs() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.cpp(410): void CxxStatement::EnterBlock()
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(251): template< typename T > void GetSymbols
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(263): static bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(276): static bool IsSortedForXref(const CxxScoped* item1, const CxxScoped* item2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(419): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(426): void CxxSymbols::EraseData(const Data* data)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(433): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(440): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(447): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(454): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(461): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(468): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(475): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(482): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(489): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(826): void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(833): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(840): void CxxSymbols::InsertData(Data* data)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(847): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(854): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(861): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(868): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(875): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(882): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(889): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(896): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp(903): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(262): template< typename T > void EraseSymbol(const CxxScoped* item,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(282): template< typename T > void ListSymbols(const std::string& name,
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(60): bool IsSortedByFilePos(const CxxToken* item1, const CxxToken* item2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(91): bool IsSortedByPos(const CxxToken* item1, const CxxToken* item2)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(723): CxxScope* CxxToken::GetTemplateInstance() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(732): bool CxxToken::IsInTemplateInstance() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(739): bool CxxToken::IsPointer(bool arrays) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1335): Numeric FloatLiteral::GetNumeric() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1394): Numeric IntLiteral::BaseNumeric() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1531): CxxToken* Literal::AutoType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1554): CxxToken* Literal::RootType() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(1570): Cxx::ItemType Literal::Type() const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxVector.h(47): template< typename T > size_t IndexOf
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxVector.h(63): template< class T > void SortAndDisplayItems
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxVector.h(93): template< class T > void SortAndDisplayItemPtrs
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxVector.h(127): template< class T > void EraseItem(std::vector< T* >& vec, const T* item)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxVector.h(151): template< class T > void EraseItemPtr
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1975): size_t Editor::CommitCount() { return Commits_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4833): static FunctionRole WarningToRole(Warning log)
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(133): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(141): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(87): static IndentRule ClassifyIndent(string& id)
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(805): word Lexer::CheckDepth(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(855): int Lexer::CheckLineMerge(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1271): size_t Lexer::CurrBegin(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1297): size_t Lexer::CurrEnd(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2081): const LineInfo* Lexer::GetLineInfo(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2090): LineInfo* Lexer::GetLineInfo(size_t pos)
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2099): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2123): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2200): bool Lexer::GetNthLine(size_t n, string& s) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2690): bool Lexer::LineHasTrailingCommentAt(size_t n, size_t offset) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2772): size_t Lexer::LineSize(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2815): size_t Lexer::NextBegin(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2930): size_t Lexer::NextPos(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3172): size_t Lexer::PrevBegin(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3248): void Lexer::SetDepth(int depth1, int depth2, bool merge)
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.cpp(34): bool IsSortedByName(const LibraryItem* item1, const LibraryItem* item2)
  C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.cpp(81): bool LibItemSort::operator()
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(97): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(104): LibrarySet* LibrarySet::Affecters() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(111): LibrarySet* LibrarySet::Assign(LibrarySet* that)
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(128): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(169): LibrarySet* LibrarySet::Create
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(177): LibrarySet* LibrarySet::DeclaredBy() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(184): LibrarySet* LibrarySet::Declarers() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(191): LibrarySet* LibrarySet::Definitions() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(198): LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(205): LibrarySet* LibrarySet::Directories() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(230): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(237): LibrarySet* LibrarySet::Files() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(244): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(269): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(288): LibrarySet* LibrarySet::Implements() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(295): LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(302): bool LibrarySet::IsReadOnly() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(309): bool LibrarySet::IsTemporary() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(341): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(348): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(355): LibrarySet* LibrarySet::Needers() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(372): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(384): LibrarySet* LibrarySet::OpError(c_string op) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(412): LibrarySet* LibrarySet::ReferencedBy() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(419): LibrarySet* LibrarySet::Referencers() const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(516): LibrarySet* LibrarySet::Union(const LibrarySet* that) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(523): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp(530): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(326): size_t Parser::CurrPos() const
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(435): BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(442): BaseBot* BaseBot::instance()
  C:/Users/Greg/Documents/rsc/rsc/dip/ConvoySubversion.cpp(29): void ConvoySubversion::clear()  // <b>
  C:/Users/Greg/Documents/rsc/rsc/dip/ConvoySubversion.cpp(37): void ConvoySubversion::decrement()
  C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp(415): ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(282): bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(300): bool MapAndUnits::can_move_to_province
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(562): TokenMessage MapAndUnits::encode_location(const Location& location) const
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(838): TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(1145): const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(1384): MapAndUnits* MapAndUnits::instance()
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(2451): Token MapAndUnits::province_token(ProvinceId province) const
  C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp(2570): bool MapAndUnits::set_move_by_single_step_convoy_order
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(32): Token::Token(const category_t cat, const subtoken_t sub)
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(40): Token& Token::operator=(const Token& that)
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(48): int Token::get_number() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(57): bool Token::is_number() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(64): bool Token::is_power() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(71): bool Token::is_province() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(118): Token::SeasonType Token::order_season() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(129): PowerId Token::power_id() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(137): ProvinceId Token::province_id() const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(260): Token power_token(PowerId power)
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(273): Token province_token(ProvinceId province)
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.cpp(145): Token TokenMessage::at(size_t index) const
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.cpp(152): void TokenMessage::clear()
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.cpp(279): Token TokenMessage::front() const
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.cpp(338): Token TokenMessage::operator[](size_t index) const
  C:/Users/Greg/Documents/rsc/rsc/dip/TokenTextMap.cpp(328): TokenTextMap* TokenTextMap::instance()
  C:/Users/Greg/Documents/rsc/rsc/dip/WinterOrders.cpp(37): size_t WinterOrders::get_number_of_results() const
  C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.cpp(234): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/Greg/Documents/rsc/rsc/mb/Switch.cpp(85): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/Greg/Documents/rsc/rsc/mb/ToneRegistry.cpp(77): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.cpp(197): AlarmStatus Alarm::Status() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp(90): void Base::Nullify(size_t n)
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp(154): Base::vptr_t Base::Vptr() const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.cpp(88): void CfgBitParm::Explain(string& expl) const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.cpp(55): bool CfgFlagParm::CurrValue() const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.cpp(74): bool CfgFlagParm::NextValue() const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.cpp(68): void CfgIntParm::Explain(string& expl) const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(349): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgStrParm.cpp(60): void CfgStrParm::Explain(string& expl) const
  C:/Users/Greg/Documents/rsc/rsc/nb/CinThread.cpp(65): void CinThread::ClearClient(const Thread* client)
  C:/Users/Greg/Documents/rsc/rsc/nb/ClassRegistry.cpp(89): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.cpp(596): bool CliBuffer::ReadingFromFile() const
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCookie.cpp(118): uint32_t CliCookie::Index(uint32_t depth) const
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(57): void Debug::Assert(bool condition, debug64_t errval)
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(73): void Debug::ft(fn_name_arg func)
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(81): void Debug::ftnt(fn_name_arg func)
  C:/Users/Greg/Documents/rsc/rsc/nb/Element.cpp(202): bool Element::RunningInLab()
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(189): CtorChain::CtorChain(FunctionTrace* inner) :
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(206): bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(259): CtorChain::Action CtorChain::CalcAction
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(327): TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(346): bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(389): bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(407): TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(456): void CtorChain::HandleFunction(FunctionTrace* func)
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(483): void CtorChain::MoveOuterAboveInit()
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(497): void CtorChain::MoveOuterAboveInner() const
  C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp(510): void CtorChain::SetOuter(FunctionTrace* outer)
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.cpp(145): void Heap::Freeing(void* addr, size_t size)
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.cpp(161): bool Heap::IsFixedSize() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Heap.cpp(195): void Heap::Requested(size_t size, void* addr)
  C:/Users/Greg/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/Greg/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/Greg/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::SuspendRoot()
  C:/Users/Greg/Documents/rsc/rsc/nb/InitFlags.cpp(55): bool InitFlags::TraceInit()
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.cpp(139): size_t Log::Count()
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(500): void LogBuffer::UpdateMax()
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.cpp(179): void LogGroup::SetSuppressed(bool suppressed)
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroupRegistry.cpp(190): LogGroup* LogGroupRegistry::Group(id_t gid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/MainArgs.cpp(142): size_t MainArgs::Size()
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(196): static Heap* EnsureHeap(MemoryType type)
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(213): Heap* Memory::AccessHeap(MemoryType type)
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(230): MemoryType Memory::AddrToType(const void* addr)
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(247): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(427): bool Memory::Protect(MemoryType type)
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(508): bool Memory::Unprotect(MemoryType type)
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(539): size_t Memory::Words(size_t size)
  C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.cpp(61): static const FactionFlags& AllFactions()
  C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.cpp(103): static const FactionFlags& ShutdownFactions()
  C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.cpp(195): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/MsgBuffer.cpp(68): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.cpp(125): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(126): static NbHeap::index_t IndexToChild(NbHeap::index_t index)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(135): static NbHeap::index_t IndexToParent(NbHeap::index_t index)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(144): static NbHeap::index_t IndexToSibling(NbHeap::index_t index)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(155): static size_t Log2Size(NbHeap::level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(164): static size_t LevelToSize(NbHeap::level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(173): static NbHeap::level_t SizeToLevel(size_t size)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(392): bool NbHeap::AddrIsValid(const void* addr, bool header) const
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(433): HeapBlock* NbHeap::AllocBlock(level_t level, size_t size)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(465): NbHeap::index_t NbHeap::BlockToIndex
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(532): NbHeap::BlockState NbHeap::Corrupt(int reason, bool restart) const
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(544): HeapBlock* NbHeap::Dequeue(level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(645): void NbHeap::EnqBlock(HeapBlock* block, index_t index, level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(654): HeapBlock* NbHeap::Enqueue(HeapBlock* block, level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(697): void NbHeap::FreeBlock(HeapBlock* block, level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(716): NbHeap::BlockState NbHeap::GetState(index_t index) const
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(732): HeapBlock* NbHeap::IndexToBlock(index_t index, level_t level) const
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(752): void NbHeap::ReleaseBlock(HeapBlock* block, level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(768): void NbHeap::ReserveBlock(const HeapBlock* block)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(781): void NbHeap::SetState(index_t index, BlockState state)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(797): void NbHeap::SplitAncestors(index_t block)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(845): NbHeap::BlockState NbHeap::ValidateBlock
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTracer.cpp(190): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.cpp(75): char BlockingReasonChar(BlockingReason reason)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.cpp(98): char FactionChar(Faction faction)
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.cpp(59): Object::ClassId Object::GetClassId() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.cpp(70): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/Greg/Documents/rsc/rsc/nb/Object.cpp(95): Object::ObjectId Object::GetObjectId() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(84): static ObjectBlock* ObjToBlock(const Pooled* obj)
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(352): size_t ObjectPool::AllocCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(519): size_t ObjectPool::AvailCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(526): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(742): void ObjectPool::EnqBlock(Pooled* obj, bool deleted)
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(837): size_t ObjectPool::Expansions() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(844): size_t ObjectPool::FailCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(885): size_t ObjectPool::FreeCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(892): bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(904): size_t ObjectPool::InUseCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(911): size_t ObjectPool::LowAvailCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(918): ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(937): Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(1009): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(1018): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(280): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/PermanentHeap.cpp(43): PermanentHeap* PermanentHeap::Instance()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(124): Flags PS_Break()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(129): Flags PS_Delayed()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(134): Flags PS_Final()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(139): Flags PS_Interrupt()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(144): Flags PS_Native()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(149): Flags PS_NoError()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp(154): Flags PS_NoLog()
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(58): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(89): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(101): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/Greg/Documents/rsc/rsc/nb/Q2Link.cpp(40): Q2Link::~Q2Link()
  C:/Users/Greg/Documents/rsc/rsc/nb/RegCell.cpp(38): RegCell::~RegCell()
  C:/Users/Greg/Documents/rsc/rsc/nb/RegCell.cpp(50): void RegCell::SetId(id_t cid)
  C:/Users/Greg/Documents/rsc/rsc/nb/Restart.cpp(38): bool Restart::ClearsMemory(MemoryType type)
  C:/Users/Greg/Documents/rsc/rsc/nb/Restart.cpp(69): RestartLevel Restart::LevelToClear(MemoryType type)
  C:/Users/Greg/Documents/rsc/rsc/nb/Singletons.cpp(126): Singletons* Singletons::Instance()
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.cpp(112): uint64_t Statistic::Overall() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.cpp(243): uint64_t HighWatermark::Overall() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.cpp(315): uint64_t LowWatermark::Overall() const
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(126): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysConsole.cpp(33): std::istream& SysConsole::In()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysConsole.cpp(40): ostream& SysConsole::Out()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(96): bool FileWalker::AtEnd() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(103): void FileWalker::GetName(string& fileName) const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(112): bool FileWalker::IsSubdir() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.win.cpp(105): void* SysHeap::Addr() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.win.cpp(137): bool SysHeap::CanBeProtected() const { return false; }
  C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.win.cpp(172): void SysHeap::ListHeaps(std::set< void* >& heaps, std::ostringstream& expl)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.win.cpp(34): SysLock::SysLock() :
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.win.cpp(46): SysLock::~SysLock()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.win.cpp(64): void SysLock::Acquire()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.win.cpp(96): void SysLock::Release()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMemory.win.cpp(50): static DWORD GetMemoryProtection(MemoryProtection attrs)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMutex.cpp(62): Thread* SysMutex::Owner() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(50): static signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(222): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(262): SysThreadId SysThread::RunningThreadId()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(121): fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(137): void StackInfo::Shutdown()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(146): DWORD StackInfo::Startup()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(257): fn_depth SysThreadStack::FuncDepth()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.cpp(47): SysTickTimer* SysTickTimer::Instance()
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(59): TimePoint SysTickTimer::Now() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(179): int16_t SysTime::DayOfWeek() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(189): int16_t SysTime::DayOfYear() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(205): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(213): size_t SysTime::DaysSinceT0() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(243): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(261): int64_t SysTime::MsecsSinceT0() const
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.cpp(31): static uintptr_t BadPointer()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(32): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(39): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(46): void ThisThread::IncludeInTrace()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(53): DelayRc ThisThread::Pause(const Duration& timeout)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(60): void ThisThread::PauseOver(word limit)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(67): word ThisThread::RtcPercentUsed()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(74): ThreadId ThisThread::RunningThreadId()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(81): TraceRc ThisThread::StartTracing(const string& opts)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp(88): void ThisThread::StopTracing()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(106): static std::atomic_flag& AccessFtLock()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(454): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1060): static bool ClearActiveThread(Thread* active)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1191): Thread* Thread::ActiveThread()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1203): SysMutex* Thread::BlockingMutex() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1210): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1228): bool Thread::CanBeScheduled() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1745): Thread* Thread::FindRunningThread()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1771): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1817): void Thread::FunctionInvoked(fn_name_arg func, const std::nothrow_t&)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1837): BlockingReason Thread::GetBlockingReason() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1844): signal_t Thread::GetSignal() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1851): TraceStatus Thread::GetStatus() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2012): bool Thread::IsLocked() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2019): bool Thread::IsScheduled() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2026): bool Thread::IsTraceable() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2082): Thread* Thread::LockedThread()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2142): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2320): uint8_t Thread::MutexCount() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2327): SysThreadId Thread::NativeThreadId() const
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2346): DelayRc Thread::Pause(Duration time)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2388): double Thread::PercentIdle()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2671): void Thread::ResetDebugFlags()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2764): Thread* Thread::RunningThread()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2792): Thread* Thread::RunningThread(const std::nothrow_t&)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2848): void Thread::SetStatus(TraceStatus status)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2946): void Thread::StackCheck()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3236): TraceRc Thread::StartTracing(const string& opts)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3268): void Thread::StopTracing()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3437): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3465): bool Thread::TraceRunningThread(Thread*& thr, const std::nothrow_t&)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3492): void Thread::TrapCheck()
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3683): void Thread::UpdateMutex(SysMutex* mutex)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3690): void Thread::UpdateMutexCount(bool acquired)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(206): static ThreadAdmin* AccessAdminData()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(292): bool ThreadAdmin::BreakEnabled()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(368): void ThreadAdmin::Incr(Register r)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(455): bool ThreadAdmin::ReinitOnSchedTimeout()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(463): word ThreadAdmin::RtcInterval()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(471): word ThreadAdmin::RtcLimit()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(479): Duration ThreadAdmin::RtcTimeout()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(488): Duration ThreadAdmin::SchedTimeout()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(508): word ThreadAdmin::StackCheckInterval()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(516): word ThreadAdmin::StackUsageLimit()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(548): word ThreadAdmin::TrapCount()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(560): word ThreadAdmin::TrapInterval()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(568): word ThreadAdmin::TrapLimit()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(576): bool ThreadAdmin::TrapOnRtcTimeout()
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp(48): static bool IsSortedByThreadId(const Thread* thr1, const Thread* thr2)
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp(267): Thread* ThreadRegistry::FindThread(SysThreadId nid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp(310): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp(323): std::vector< Thread* > ThreadRegistry::GetThreads() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp(361): bool ThreadRegistry::IsDeleted() const
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp(511): size_t ThreadRegistry::Size()
  C:/Users/Greg/Documents/rsc/rsc/nb/ToolRegistry.cpp(117): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(110): TraceBuffer::TraceBuffer() :
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(146): TraceBuffer::~TraceBuffer()
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(166): void* TraceBuffer::AddFunction()
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(234): uint32_t TraceBuffer::AllocSlot()
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(384): bool TraceBuffer::Empty() const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(402): bool TraceBuffer::Insert(TraceRecord* record)
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(434): fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(466): const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(486): void TraceBuffer::Lock()
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(493): void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(513): void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(624): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(786): void TraceBuffer::Unlock()
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.cpp(60): static void CheckHigh(FunctionStats*& high,
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.cpp(47): int FunctionStats::Compare(const FunctionStats& that) const
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.cpp(65): void FunctionStats::IncrCalls(const Duration& net)
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1002): static word CheckHeap(bool shouldExist, const CliThread& cli, Heap*& heap)
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1473): Q1WayItem::~Q1WayItem()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1504): Q1WayPool::Q1WayPool()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1533): void Q1WayPool::Reallocate()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1967): Q2WayItem::~Q2WayItem()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1998): Q2WayPool::Q2WayPool()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(2027): void Q2WayPool::Reallocate()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(2489): RegistryItem::~RegistryItem()
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(2517): RegistryPool::RegistryPool()
  C:/Users/Greg/Documents/rsc/rsc/nt/TestDatabase.cpp(148): TestDatabase::State TestDatabase::GetState(const string& testname)
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp(185): TraceStatus IpBuffer::GetStatus() const
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(213): size_t IpPort::Discards() const
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPortRegistry.cpp(286): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPortRegistry.cpp(501): bool IpPortRegistry::UseIPv6()
  C:/Users/Greg/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(77): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/Greg/Documents/rsc/rsc/nw/NwLogs.cpp(143): static void UpdateAlarm
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.cpp(358): const SysIpL2Addr& SysIpL2Addr::NullIpAddr()
  C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(127): bool SysIpL2Addr::SupportsIPv6()
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.cpp(150): bool SysSocket::SetTracing(bool tracing)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.cpp(180): bool SysSocket::TraceEnabled()
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(43): uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(45): uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(47): uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(49): uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(51): uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(53): uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
  C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp(228): bool SysSocket::IsValid() const
  C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.cpp(490): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsBicFeature.cpp(80): CliText* PotsBicFeature::Attrs() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsBocFeature.cpp(69): CliText* PotsBocFeature::Attrs() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(76): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(86): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(76): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(64): CliText* PotsCwtFeature::Attrs() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(65): CliText* PotsCxfFeature::Attrs() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.cpp(105): void DnRouteFeatureProfile::SetActive(bool on)
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.cpp(113): void DnRouteFeatureProfile::SetDN(Address::DN dn)
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(81): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(107): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsSusFeature.cpp(62): CliText* PotsSusFeature::Attrs() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(81): CliText* PotsTwcFeature::Attrs() const
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(85): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/Greg/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(86): void AnalyzeSapEvent::Capture
  C:/Users/Greg/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(82): void AnalyzeSnpEvent::Capture
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(335): void Context::Dump() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(932): bool Context::TraceOn()
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(942): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/Greg/Documents/rsc/rsc/sb/Event.cpp(137): void Event::Capture
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(216): size_t Factory::DiscardedContextCount() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(223): size_t Factory::DiscardedMessageCount() const
  C:/Users/Greg/Documents/rsc/rsc/sb/FactoryRegistry.cpp(147): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(84): void InitiationReqEvent::Capture
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(738): void InvokerPool::RecordDelay(MsgPriority prio, const Duration& delay) const
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(790): size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(798): Duration InvokerPool::WorkQMaxDelay(MsgPriority prio) const
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(806): size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(169): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.cpp(117): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(236): MsgDirection Message::Dir() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(323): ProtocolId Message::GetProtocol() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(354): SignalId Message::GetSignal() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(409): MsgHeader* Message::Header() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.cpp(198): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(129): Parameter* Protocol::FirstParm() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(142): Signal* Protocol::FirstSignal() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(155): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(167): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(179): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp(192): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(78): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.cpp(370): void TimerPool::IncrTimeouts() const
  C:/Users/Greg/Documents/rsc/rsc/sb/Service.cpp(377): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceRegistry.cpp(78): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(313): Service* ServiceSM::GetService() const
  C:/Users/Greg/Documents/rsc/rsc/sb/State.cpp(133): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/Greg/Documents/rsc/rsc/sb/State.cpp(168): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/Greg/Documents/rsc/rsc/sb/State.cpp(251): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/State.cpp(259): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/Greg/Documents/rsc/rsc/sb/TimerThread.cpp(61): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp(378): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(118): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(199): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.cpp(73): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/Greg/Documents/rsc/rsc/st/MscContext.cpp(80): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.cpp(53): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W107 Function does not invoke Debug::ft as first statement
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp(490):    Debug::ft("CodeFile.Affecters");
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp(2200):    Debug::ft("Tracepoint.OnLine");
  C:/Users/Greg/Documents/rsc/rsc/nb/CinThread.cpp(103):       Debug::ft(CinThread_Enter);
  C:/Users/Greg/Documents/rsc/rsc/nb/Exception.cpp(42):    Debug::ft("Exception.ctor");  //@
  C:/Users/Greg/Documents/rsc/rsc/nb/MutexGuard.cpp(35):    Debug::ft("MutexGuard.ctor");
  C:/Users/Greg/Documents/rsc/rsc/nb/MutexGuard.cpp(55):       Debug::ftnt("MutexGuard.Release");
  C:/Users/Greg/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ftnt(Q1Link_dtor);
  C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp(74):    Debug::ft("NodeBase.SE_Handler");
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1684):    Debug::ft("Thread.ExitIfSafe");
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2559):    Debug::ft("Thread.Ready");
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2918):    Debug::ft("Thread.SignalHandler");
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3017):          Debug::ft(Thread_Start);
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3511):       Debug::ft(Thread_TrapHandler);  //@
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(3678):       Debug::ft(RecoveryThread_Enter);
  C:/Users/Greg/Documents/rsc/rsc/nw/LocalAddrTest.cpp(184):       Debug::ft("SendLocalThread.Enter");
  C:/Users/Greg/Documents/rsc/rsc/nw/NwLogs.cpp(99):    Debug::ft("NetworkBase.NetworkIsUp");
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(689):    Debug::ft(Context_ProcessWork);
W110 Override of Base.Display not found
  C:/Users/Greg/Documents/rsc/rsc/an/PotsShelf.h(42): class PotsShelfIpService : public UdpIpService
  C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp(225): class TrafficCallPool : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(299): class CipUdpService : public UdpIpService
  C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h(334): class CipTcpService : public TcpIpService
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h(97): class CxxSymbols: public NodeBase::Base
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.h(48): class Interpreter : public NodeBase::Base
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.cpp(43): struct AlarmDynamic : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nb/Class.cpp(48): struct ClassDynamic : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.cpp(56): struct LogDynamic : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(96): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(162): class ObjectPoolStats : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(204): struct ObjectPoolDynamic : public Persistent
  C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp(38): class FileWalker : public FileList
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.h(38): class SysTickTimer : public Immutable
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(268): class ThreadStats : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(355): class ContextSwitches : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp(55): class ThreadsStats : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.h(64): class TraceBuffer : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.h(48): class FunctionProfiler : public Temporary
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(884): class TestHeap : public NbHeap
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(1239): class LbcPool : public Temporary
  C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp(2881): class SysTimePool : public Temporary
  C:/Users/Greg/Documents/rsc/rsc/nt/TestDatabase.h(41): class TestDatabase : public NodeBase::Temporary
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(63): class TinyBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(74): class SmallBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(85): class MediumBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(96): class LargeBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(107): class HugeBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp(54): class IpPortStats : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/nw/IpPortRegistry.cpp(56): class LocalAddrCfg : public CfgStrParm
  C:/Users/Greg/Documents/rsc/rsc/nw/NwTracer.h(40): class NwTracer : public NodeBase::Permanent
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h(81):    struct PotsProfileDynamic : public Persistent
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp(45): class FactoryStats : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(110): class InvokerPoolStats : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp(151): class InvokerWork : public Dynamic
  C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.h(167): class TimerPool : public NodeBase::ObjectPool
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTracer.h(113): class SbTracer : public NodeBase::Permanent
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h(56): class PotsCallIpService : public UdpIpService
W111 Override of Object.Patch not found
  C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp(61): class ProtectedHeap : public NbHeap
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(355): class ContextSwitches : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(750): class ThreadPriv : public Permanent
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(35): class ByteBuffer : public NodeBase::Pooled
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(63): class TinyBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(74): class SmallBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(85): class MediumBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(96): class LargeBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h(107): class HugeBuffer : public ByteBuffer
  C:/Users/Greg/Documents/rsc/rsc/sb/EventHandler.h(48): class EventHandler : public NodeBase::Immutable
  C:/Users/Greg/Documents/rsc/rsc/sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
W117 Line can merge with the next line and be under the length limit
  C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.cpp(102):    return (use == Mandatory ?
  C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(238):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(693):       attrs.test(HasPublicMemberFunction) ||
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(724):       attrs.test(HasPublicStaticData) ||
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(731):          attrs.test(HasInstantiations) ||
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2706):    auto sName = (del ?
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(2716):          auto vName = (del ?
  C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp(1711):          (press->message == contents))
  C:/Users/Greg/Documents/rsc/rsc/nb/CliStack.h(68):    const CliCommand* FindCommand
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(192):       stream << fileName_ << SPACE
  C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.cpp(388):    BindText(*new CliText
  C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.cpp(392):    BindText(*new CliText
  C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.cpp(394):    BindText(*new CliText
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(1021):    BindText(*new CliText
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(2499):    BindText(*new CliText
  C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp(3078): fixed_string PoolsHeader =
  C:/Users/Greg/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(557):          (curr->slot_ != TraceRecord::InvalidSlot) &&
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(765):                   ->CurrInitiator() != nullptr)
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(768):                   ->CurrSsm() != nullptr)
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(611):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(625):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(629):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(631):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(633):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(637):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(645):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp(647):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(426):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(459):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(461):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp(473):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(612):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(626):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(706):    BindMsgAnalyzer
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(710):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(712):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(722):    BindMsgAnalyzer
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(726):    BindEventHandler
  C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp(728):    BindEventHandler
W119 Argument passed by value is modified
  C:/Users/Greg/Documents/rsc/rsc/cb/DigitString.cpp(44/1): DigitString::DigitString(Address::DN dn) : size_(0)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(132/3):    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp(2830/2):    const CxxScope* scope, CodeFile* file, SymbolView& view) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp(2017/1): TypeName* QualName::At(size_t n) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5497/2):    const CxxScope* scope, CodeFile* file, SymbolView& view) const
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp(5737/1): void Function::SetOperator(Cxx::Operator oper)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp(3883/1): void Using::SetScope(CxxScope* scope)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp(217/2): static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp(239/2): static size_t FindTemplateEnd(const string& name, size_t pos)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp(721/5):    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp(755/3): size_t rfind_first_not_of(const string& str, const string& chars, size_t off)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp(769/2): size_t rfind_first_of(const string& str, size_t off, const string& chars)
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp(752/2):    const CxxToken* item, word offset, const string& info) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1918/1): bool Editor::CodeFollowsImmediately(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(1933/1): bool Editor::CommentFollows(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4352/1): word Editor::InsertForward(size_t pos,
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(4520/1):    (size_t pos, const string& nspace, const string& forward)
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5146/2): CxxToken* Editor::ParseFileItem(size_t pos, Namespace* ns) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(5339/1): void Editor::Rename(size_t pos, const string& oldName, const string& newName)
  C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp(6572/3):    const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(488/1): LibExprErr Interpreter::ApplyOperator(bool operand)
  C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp(599/1): LibrarySet* Interpreter::Error(LibExprErr err) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1271/1): size_t Lexer::CurrBegin(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1330/1): size_t Lexer::Find(size_t pos, const string& str) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1347/3): size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1459/2): size_t Lexer::FindFirstOf(const string& targs, size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1578/1): size_t Lexer::FindLineEnd(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1619/1): size_t Lexer::FindNonBlank(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1636/1): size_t Lexer::FindWord(size_t pos, const string& id) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(1982/2): size_t Lexer::GetHexNum(int64_t& num, size_t max)
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2005/1): bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2607/1): size_t Lexer::LineFind(size_t pos, const string& str) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2639/1): size_t Lexer::LineFindFirstOf(size_t pos, const std::string& chars) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2670/1): size_t Lexer::LineFindNonBlank(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2847/1): string Lexer::NextIdentifier(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2893/1): size_t Lexer::NextLineIndentation(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2908/1): string Lexer::NextOperator(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(2930/1): size_t Lexer::NextPos(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3066/1): bool Lexer::NoCodeFollows(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3172/1): size_t Lexer::PrevBegin(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3203/1): size_t Lexer::Rfind(size_t pos, const std::string& str) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3218/1): size_t Lexer::RfindFirstOf(size_t pos, const std::string& chars) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3233/1): size_t Lexer::RfindNonBlank(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3304/1): size_t Lexer::SkipCharLiteral(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3347/1): size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp(3380/1): size_t Lexer::SkipTemplateSpec(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(1145/2): bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(2484/1): size_t Parser::GetLineNum(size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp(4301/2): void Parser::Log(Warning warning, size_t pos) const
  C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp(147/1): bool Token::set_number(int number)
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(30/1): size_t find_first_one(uword n)
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(55/1): size_t log2(size_t n, bool up)
  C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp(122/1): size_t round_to_2_exp_n(size_t n, size_t e, bool up)
  C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp(90/1): void Base::Nullify(size_t n)
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.cpp(192/3):    (const CliThread& cli, const string& expl, std::streamsize p)
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.cpp(39/2): CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
  C:/Users/Greg/Documents/rsc/rsc/nb/CliTextParm.cpp(142/2): void CliTextParm::Explain(ostream& stream, col_t indent) const
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.cpp(753/2):    (const string& expl, size_t begin, size_t end, col_t indent) const
  C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.cpp(75/4):    const string& prefix, const byte_t* bytes, size_t count)
  C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.cpp(311/2): size_t strSkipSpaces(const std::string& str, size_t index)
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp(98/1): LogBuffer::LogBuffer(size_t size) :
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(243/2): NbHeap::NbHeap(MemoryType type, size_t size) : Heap(),
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(414/1): void* NbHeap::Alloc(size_t size)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(697/1): void NbHeap::FreeBlock(HeapBlock* block, level_t level)
  C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp(797/1): void NbHeap::SplitAncestors(index_t block)
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(526/1): bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(540/1): Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
  C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp(564/1): bool ObjectPool::Corrupt(size_t n)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysMemory.win.cpp(72/1): void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(106/1): void SysTime::AddDays(size_t days)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(139/1): void SysTime::AddMsecs(msecs_t msecs)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(397/1): void SysTime::SubDays(size_t days)
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp(430/1): void SysTime::SubMsecs(msecs_t msecs)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1060/1): static bool ClearActiveThread(Thread* active)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(1858/1): bool Thread::HandleSignal(signal_t sig, uint32_t code)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(2346/1): DelayRc Thread::Pause(Duration time)
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp(3420/1): void Thread::Trace(Thread* thr,
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(186/1): bool TraceBuffer::AllocBuffers(size_t n)
  C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp(365/1): TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.cpp(143/2):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.cpp(143/3):    (const IpPort& port, const byte_t* source, size_t size) const
  C:/Users/Greg/Documents/rsc/rsc/nw/NwLogs.cpp(106/1): void OutputNwLog(LogId id, c_string func, nwerr_t errval, c_string extra)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.cpp(246/1): SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
  C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(154/1): word SysTcpSocket::Listen(size_t backlog)
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(385/3): void Context::Enqueue(Q2Way< Context >& whichq, MsgPriority prio, bool henq)
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp(683/1): void Context::ProcessWork(InvokerThread* inv)
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(589/1): bool Message::Retrieve(ProtocolSM* psm)
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(656/1): bool Message::Send(Route route)
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp(382/1):    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(392/1): EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(832/2):    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
  C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp(900/2):    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
  C:/Users/Greg/Documents/rsc/rsc/sb/TimerRegistry.cpp(75/1): Timer::QId TimerRegistry::CalcQId(secs_t secs) const
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp(223/2): TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
  C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h(105/3):       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
  C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp(1024/1):    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
W120 Function returns non-const reference or pointer to member data
  C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h(1000):    DigitString& DialedDigits() { return dialed_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h(288):    Editor& GetEditor() { return editor_; }
  C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h(76):    LibItemSet& Items() { return items_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h(82):    Registry< CliParm >& Parms() { return parms_; }
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(190):    CliCookie& Cookie() { return cookie_; }
W121 Static member function has indirect argument for its class
  C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h(587/1):    static void Trace(Thread* thr, fn_name_arg func,
  C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h(175/1):       (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip);
W125 Non-const cast is not a downcast
  C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp(954):          auto bt = dynamic_cast< const BuffTrace* >(bt_);
W127 Data could be free
  C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h(247):    static fixed_string DigitToChar; // DigitString.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(389):    static const CxxWord Attrs[Cxx::NIL_KEYWORD + 1]; // Parser.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(583):    static const Numeric Short; // CxxRoot.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(584):    static const Numeric uChar; // CxxRoot.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h(588):    static const Numeric uShort; // CxxRoot.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h(1202):    static const TypeSpecPtr Bool; // CxxExecute.cpp
  C:/Users/Greg/Documents/rsc/rsc/ct/Library.h(151):    static NodeBase::fixed_string SubsDir; // CodeDir.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(59):    static const size_t MaxNameSize; // Alarm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h(63):    static const size_t MaxExplSize; // Alarm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.h(60):    static const char CommentChar; // CfgParmRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBoolParm.h(60):    static fixed_string AnyBoolParm; // CliBoolParm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(53):    static const char EscapeChar; // CliBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(58):    static const char StringChar; // CliBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(62):    static const char BreakChar; // CliBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(66):    static const char CommentChar; // CliBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(70):    static const char OptSkipChar; // CliBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h(78):    static const char SymbolChar; // CliBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCharParm.h(66):    static const char CharSeparator; // CliCharParm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h(46):    static const char CommandSeparator; // CliThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(39):    static fixed_string AnyIntParm; // CliIntParm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h(75):    static const char RangeSeparator; // CliIntParm.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h(277):    static const char CliPrompt; // CliThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/InitThread.h(75):    static const Flags RecreateMask; // Daemon.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/InitThread.h(76):    static const Flags ScheduleMask; // Thread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Log.h(66):    static const size_t MaxExplSize; // Log.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/LogBufferRegistry.h(61):    static const size_t LogBufferSize; // LogBufferRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.h(63):    static const size_t MaxExplSize; // LogGroup.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.h(51):    static const signal_t MaxId; // PosixSignalRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(56):    static const size_t MaxExplSize; // Statistics.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h(91):    static const char NotUpdated; // Statistics.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(54):    static const size_t MaxExplSize; // StatisticsGroup.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h(58):    static const size_t ReportWidth; // StatisticsRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(54):    static secs_t LongIntervalSecs; // StatisticsThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(59):    static secs_t ShortIntervalSecs; // StatisticsThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(66):    static size_t WakeupsBetweenReports; // StatisticsThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static Duration SleepInterval; // StatisticsThread.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(162):    static const int16_t YearOfT0; // SysTime.cpp
  C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h(166):    static const int16_t WeekDayOfT0; // SysTime.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h(50):    static const size_t MaxBuffSize; // IpBuffer.cpp
  C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h(56):    static const NodeBase::id_t MaxId; // IpServiceRegistry.cpp
  C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h(181):    static const SignalEntry NilSignalEntry; // PotsCircuit.cpp
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(361):    static const MessageEntry NilMessageEntry; // Context.cpp
W130 Redundant scope
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(91):    Debug::ft("Debug.GetSwFlags");
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(101):    Debug::ft("Debug.noop");
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(108):    Debug::ft("Debug.Progress");
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(118):    Debug::ft("Debug.ResetSwFlags");
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(127):    Debug::ftnt("Debug.SetSwFlag");
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(146):    Debug::ftnt("Debug.SwFlagOn");
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(163):    Debug::ftnt(Debug_SwLog);
  C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp(167):    Debug::ftnt(Debug_SwLog);
W141 Function could be moved to a subclass
  C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.h(56):    virtual bool NextValue() const = 0; // CfgBoolParm
  C:/Users/Greg/Documents/rsc/rsc/sb/Context.h(192):    virtual void EndOfTransaction() { } // MsgContext
  C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h(235):    virtual Context* AllocContext() const; // PsmFactory
====================================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE (i = informational)
C:/Users/Greg/Documents/rsc/rsc/an/AnIncrement.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/an/AnIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/an/AnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/an/AnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/an/PotsShelf.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
    34: using namespace NetworkBase;
  W110 Override of Base.Display not found
    42: class PotsShelfIpService : public UdpIpService
C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    124:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    137:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    157:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    167:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    68:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    69:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    66:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/an/PotsShelfIpService.cpp
* W022 Add using statement
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    491:    Singleton< TrafficCallPool >::Extant()->Enq((TrafficCall*) addr);
    1051:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDynamic);
  W006 reinterpret_cast
    481:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W053 Data could be const
    173:    Q1Link link_;
* W106 Function does not invoke Debug::ft
    1347: void PotsTrafficThread::RecordHoldingTime(const Duration& time)
  W110 Override of Base.Display not found
    225: class TrafficCallPool : public Dynamic
C:/Users/Greg/Documents/rsc/rsc/an/PotsTrafficThread.h
* W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
* W092 Function could be free
    88:    static void DisplayStateCounts // AnIncrement.cpp
C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    89:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    106:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    154:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcAddress.h
* W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
* W032 Unused function
    214:    Digit At(DigitCount i) const;
* W042 Member could be private
    176:    static bool IsValidDigit(Digit d)
    183:    Rc AddDigit(Digit d);
    202:    DigitCount Size() const;
* W043 Member could be protected
    125:    static DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
* W092 Function could be free
    176:    static bool IsValidDigit(Digit d) // DigitString.cpp
* W127 Data could be free
    247:    static fixed_string DigitToChar; // DigitString.cpp
C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    112:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W117 Line can merge with the next line and be under the length limit
    102:    return (use == Mandatory ?
C:/Users/Greg/Documents/rsc/rsc/cb/BcCause.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/cb/BcEvents.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcFactory.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    41:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    43:    auto& bcssm = static_cast< BcSsm& >(ssm);
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    65:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    66:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    67:    auto          sid = msg->GetSignal();
    68:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    70:    CauseInfo*    cci;
    120:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    121:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    122:    auto       sid = msg->GetSignal();
    123:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    161:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    162:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    163:    auto       sid = msg->GetSignal();
    164:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    191:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    192:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    193:    auto          sid = msg->GetSignal();
    194:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    196:    CauseInfo*    cci;
C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    98:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcProgress.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.cpp
  W006 reinterpret_cast
    382:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    395:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    423:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    690:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    720:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    850:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1180:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1185:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    392:    id_t        idx;
    393:    word        fid, rid;
    395:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    422:    TestRc       rc;
    423:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    425:    id_t         idx;
    426:    word         fid, rid;
    719:    auto          state = GetState();
    720:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    721:    auto          sig = tmsg.GetSignal();
    722:    TimeoutInfo*  toi = nullptr;
    724:    auto          err = true;
    725:    debug64_t     error;
    849:    auto          state = GetState();
    850:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    851:    auto          sig = msg.GetSignal();
    853:    auto          err = true;
    854:    debug64_t     error;
C:/Users/Greg/Documents/rsc/rsc/cb/BcProtocol.h
* W020 Using statement in header
    51: using namespace NodeBase;
    52: using namespace NetworkBase;
    53: using namespace SessionBase;
    54: using namespace MediaBase;
  W027 Unused class
    299: class CipUdpService : public UdpIpService
* W032 Unused function
    183:    MediaInfo* AddMedia(const MediaInfo& media);
* W042 Member could be private
    237:    void EnsureMediaMsg() override;
    246:    IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    404:    Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W110 Override of Base.Display not found
    299: class CipUdpService : public UdpIpService
    334: class CipTcpService : public TcpIpService
C:/Users/Greg/Documents/rsc/rsc/cb/BcRouting.cpp
* W022 Add using statement
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcRouting.h
* W020 Using statement in header
    31: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/cb/BcService.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcSessions.h
* W020 Using statement in header
    53: using namespace MediaBase;
    54: using namespace NodeBase;
    55: using namespace SessionBase;
  W037 Member hides inherited name
    316:    static const Id NextId = FirstId + 50;
    883:    static const Id NextId                 = FirstUn + 7;
* W042 Member could be private
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1145:    CipPsm* AllocNPsm();
* W043 Member could be protected
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
* W053 Data could be const
    340:    Progress::Ind progress_;
    356:    Cause::Ind cause_;
  W075 Virtual function is public
    1010:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1019:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1020:    virtual EventHandler::Rc RaiseRemoteProgress
    1022:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1029:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1030:    virtual EventHandler::Rc RaiseLocalProgress
    1032:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1037:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1038:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1045:    virtual EventHandler::Rc RaiseLocalRelease
    1047:    virtual EventHandler::Rc RaiseRemoteRelease
    1049:    virtual EventHandler::Rc RaiseReleaseCall
    1051:    virtual EventHandler::Rc RaiseApplyTreatment
    1058:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1063:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1070:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1076:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1083:    virtual EventHandler::Rc HandleLocalAlerting();
    1088:    virtual EventHandler::Rc HandleLocalAnswer();
    1092:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1099:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1105:    virtual CipMessage* BuildCipIam();
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1208:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W082 Adjacent arguments have the same type
    1212:    BcFactory(Id fid, ProtocolId prid, c_string name);
* W090 Function could be const
    1111:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1167:    CipMessage* BuildCipRel(Cause::Ind cause);
* W092 Function could be free
    1115:    static void DisplayStateCounts // AnIncrement.cpp
    1120:    static void ResetStateCounts(RestartLevel level); // CbModule.cpp
  W120 Function returns non-const reference or pointer to member data
    1000:    DigitString& DialedDigits() { return dialed_; }
C:/Users/Greg/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    384:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    825:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
  W102 Line length exceeds the standard maximum
    285:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/Greg/Documents/rsc/rsc/cb/BcStates.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/BcTriggers.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/cb/CbModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/cb/CbModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    127:       auto rc = AddDigit(Digit(ds.digits_[i]));
    138:    if(i < Size()) return Digit(digits_[i]);
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    136: Digit DigitString::At(DigitCount i) const
  W119 Argument passed by value is modified
    44/1: DigitString::DigitString(Address::DN dn) : size_(0)
C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    359:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    360:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    362:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    391:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    400:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    426:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    427:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    531:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    672:          return static_cast< ProxyBcPsm* >(p);
    704:          ppsm = static_cast< ProxyBcPsm* >(psm);
    909:    auto& tmsg = static_cast< const CipMessage& >(msg);
    914:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    359:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    360:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    361:    auto          sid = msg->GetSignal();
    362:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    364:    CauseInfo*    cci;
* W117 Line can merge with the next line and be under the length limit
    238:    BindEventHandler
C:/Users/Greg/Documents/rsc/rsc/cb/ProxyBcSessions.h
* W020 Using statement in header
    33: using namespace MediaBase;
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W027 Unused class
    192: class ProxyBcDisconnecting : public BcDisconnecting
* W028 Unused data
    63:    static const ServicePortId NextPortId = FirstPortId + 1;
    219:    static const Id NextId        = FirstId + 4;
    303:    static const Id NextId              = FirstId + 7;
    387:    constexpr TriggerId NextId = FirstId + 3;
* W032 Unused function
    195:    explicit ProxyBcDisconnecting(ServiceId sid);
  W037 Member hides inherited name
    63:    static const ServicePortId NextPortId = FirstPortId + 1;
    213:    static const Id FirstId = BcEvent::NextId;
    219:    static const Id NextId        = FirstId + 4;
    303:    static const Id NextId              = FirstId + 7;
* W042 Member could be private
    488:    ProxyBcPsm* FirstBroadcast() const;
  W075 Virtual function is public
    465:    virtual EventHandler::Rc RaiseReleaseUser
    467:    virtual EventHandler::Rc RaiseProxyProgress
    469:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    470:    virtual EventHandler::Rc RaiseProxyRelease
    510:    void SetUPsm(MediaPsm& psm) override;
C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
* W042 Member could be private
    54:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/Greg/Documents/rsc/rsc/cb/TestCallFactory.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/cn/CnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/cn/CnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/ct/CodeCoverage.h
  W110 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
C:/Users/Greg/Documents/rsc/rsc/ct/CodeDir.cpp
  W007 Cast down the inheritance hierarchy
    69:       auto file = static_cast< CodeFile* >(*f);
    139:       auto file = static_cast< CodeFile* >(*f);
    156:       auto file = static_cast< CodeFile* >(*f);
C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto file = static_cast< CodeFile* >(*f);
    121:       auto dir = static_cast< CodeDir* >(*d);
    130:       auto dir = static_cast< CodeDir* >(*d);
C:/Users/Greg/Documents/rsc/rsc/ct/CodeDirSet.h
* W042 Member could be private
    54:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    54:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.cpp
  W007 Cast down the inheritance hierarchy
    79:          auto base = static_cast< const Class* >(*b);
    235:       auto base = static_cast< const Class* >(*b);
    265:                auto type = static_cast< const Typedef* >(*item2);
    288:          auto type = static_cast< const Typedef* >(*item1);
    1021:       auto f = static_cast< const CodeFile* >(*i);
    1029:       auto f = static_cast< const CodeFile* >(*u);
    1421:       auto file = static_cast< const CodeFile* >(*f);
    1623:          auto file = static_cast< const CodeFile* >(*d);
    2019:       auto file = static_cast< const CodeFile* >(*f);
    2183:       const auto& name = static_cast< const CodeFile* >(*f)->Name();
    2365:                auto incl = static_cast< const CodeFile* >(*a);
    2462:          auto file = static_cast< const CodeFile* >(*d);
    2491:       auto file = static_cast< CodeFile* >(*f);
    2522:       auto base = static_cast< const Class* >(*b);
* W106 Function does not invoke Debug::ft
    1082: void CodeFile::EraseClass(const Class* cls)
    1090: void CodeFile::EraseData(const Data* data)
    1098: void CodeFile::EraseEnum(const Enum* item)
    1106: void CodeFile::EraseForw(const Forward* forw)
    1114: void CodeFile::EraseFunc(const Function* func)
    1156: void CodeFile::EraseItem(const CxxToken* item)
    1170: void CodeFile::EraseSpace(const SpaceDefn* space)
    1178: void CodeFile::EraseType(const Typedef* type)
    1186: void CodeFile::EraseUsing(const Using* use)
    1551: void CodeFile::GetLineCounts() const
    1761: void CodeFile::InsertAsm(Asm* code)
    1769: void CodeFile::InsertClass(Class* cls)
    1777: void CodeFile::InsertData(Data* data)
    1785: bool CodeFile::InsertDirective(DirectivePtr& dir)
    1794: void CodeFile::InsertEnum(Enum* item)
    1802: void CodeFile::InsertForw(Forward* forw)
    1810: void CodeFile::InsertFunc(Function* func)
    1818: void CodeFile::InsertInclude(IncludePtr& incl)
    1861: void CodeFile::InsertItem(CxxToken* item)
    1886: void CodeFile::InsertMacro(Macro* macro)
    1894: void CodeFile::InsertSpace(SpaceDefn* space)
    1902: void CodeFile::InsertStaticAssert(StaticAssert* assert)
    1910: void CodeFile::InsertType(Typedef* type)
    1918: void CodeFile::InsertUsing(Using* use)
  W107 Function does not invoke Debug::ft as first statement
    490:    Debug::ft("CodeFile.Affecters");
C:/Users/Greg/Documents/rsc/rsc/ct/CodeFile.h
  W026 Unused argument
    419/3:       const CxxNamed* item, const CxxScope* scope) const;
* W042 Member could be private
    130:    const CxxTokenList Items() const { return items_; }
    131:    const IncludePtrVector& Includes() const { return incls_; }
    279:    size_t FindFirstReference(const CxxTokenVector& refs) const;
    284:    size_t FindLastUsage(const CxxNamedSet& usages) const;
  W082 Adjacent arguments have the same type
    535:    void UpdatePos(EditorAction action,
* W092 Function could be free
    357:    const stringVector& Prolog() const; // CodeFile.cpp
  W120 Function returns non-const reference or pointer to member data
    288:    Editor& GetEditor() { return editor_; }
C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    605:    LibrarySet* nbSet = (LibrarySet*) this;
    633:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    79:       auto file = static_cast< CodeFile* >(*f);
    192:       auto file = static_cast< CodeFile* >(*f);
    251:       auto file = static_cast< CodeFile* >(*f);
    276:       auto file = static_cast< CodeFile* >(*f);
    307:       auto file = static_cast< CodeFile* >(*f);
    333:       auto file = static_cast< CodeFile* >(*f);
    361:       auto file = static_cast< CodeFile* >(*f);
    404:       auto file = static_cast< CodeFile* >(*f);
    458:       auto file = static_cast< CodeFile* >(*f);
    484:       auto file = static_cast< CodeFile* >(*f);
    510:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Items();
    517:       auto file = static_cast< CodeFile* >(*f);
    557:       auto file = static_cast< CodeFile* >(*f);
    584:       auto file = static_cast< CodeFile* >(*f);
    737:       auto file = static_cast< CodeFile* >(*f);
    765:       auto file = static_cast< CodeFile* >(*f);
    883:       auto file = static_cast< CodeFile* >(*f);
    963:       auto file = static_cast< CodeFile* >(*f);
    990:       auto file = static_cast< CodeFile* >(*f);
    1020:       auto file = static_cast< CodeFile* >(*f);
  W008 Cast removes const qualification
    605:    LibrarySet* nbSet = (LibrarySet*) this;
    633:    LibrarySet* nsSet = (LibrarySet*) this;
* W106 Function does not invoke Debug::ft
    92: static bool IsSortedByFileLevel(const FileLevel& item1, const FileLevel& item2)
C:/Users/Greg/Documents/rsc/rsc/ct/CodeFileSet.h
* W042 Member could be private
    104:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    104:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.cpp
  W007 Cast down the inheritance hierarchy
    122:       auto item = static_cast< CxxNamed* >(*i);
    148:       auto item = static_cast< CxxNamed* >(*i);
    176:       auto item = static_cast< CxxNamed* >(*i);
    198:       auto item = static_cast< CxxNamed* >(*i);
    217:       auto item = static_cast< CxxScoped* >(*i);
    238:       auto item = static_cast< CxxScoped* >(*i);
    260:       auto item = static_cast< CxxNamed* >(*i);
* W106 Function does not invoke Debug::ft
    55: void CodeItemSet::CopyItems(const CxxNamedSet& items)
    67: void CodeItemSet::CopyUsages(const CxxUsageSets& usages)
C:/Users/Greg/Documents/rsc/rsc/ct/CodeItemSet.h
* W042 Member could be private
    64:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    64:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/Greg/Documents/rsc/rsc/ct/CodeTypes.cpp
* W106 Function does not invoke Debug::ft
    406: size_t IndentSize()
    413: bool IsAccessControl(const std::string& s)
    426: size_t LineLengthMax()
C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.cpp
  W005 Functional cast
    224:          << spaces(3) << LineType(t) << CRLF;
    235:          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
    236:          *stream << setw(5) << WarningCode(Warning(w)) << setw(6)
    237:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
    296:          *stream << (Attrs_.at(Warning(w)).fixable_ ? '*' : SPACE);
  W007 Cast down the inheritance hierarchy
    205:       auto file = static_cast< CodeFile* >(*f);
    1010:       auto data = static_cast< const Data* >(item_);
    1046:       auto func = static_cast< Function* >(item_);
    1124:       auto cls = static_cast< const Class* >(item_);
    1148:       auto cls = static_cast< const Class* >(item_);
    1179:          auto func = static_cast< const Function* >(item_);
  W008 Cast removes const qualification
    94:    item_(const_cast< CxxToken* >(item)),
* W106 Function does not invoke Debug::ft
    342: bool CodeWarning::HasCodeToDisplay() const
    349: bool CodeWarning::HasInfoToDisplay() const
    808: bool CodeWarning::IsInformational() const
    815: bool CodeWarning::IsSortedByFile
    834: bool CodeWarning::IsSortedByType
    853: bool CodeWarning::IsSortedToFix
    872: void CodeWarning::ItemDeleted(const CxxToken* item) const
    882: size_t CodeWarning::Line() const
    950: bool CodeWarning::Preserve() const
    977: bool CodeWarning::Suppress() const
    1218: bool CodeWarning::WasResolved() const
C:/Users/Greg/Documents/rsc/rsc/ct/CodeWarning.h
* W020 Using statement in header
    38: using NodeBase::word;
  W082 Adjacent arguments have the same type
    64:    WarningAttrs(bool fixable, bool preserve, NodeBase::c_string expl);
    143:    void UpdatePos(EditorAction action,
C:/Users/Greg/Documents/rsc/rsc/ct/CtIncrement.cpp
  W005 Functional cast
    1360:       Context::EraseTracepoint(file, line - 1, Tracepoint::Action(mode));
    1375:    Context::InsertTracepoint(file, line - 1, Tracepoint::Action(mode));
  W007 Cast down the inheritance hierarchy
    1089:          auto dir = static_cast< CodeDir* >(*d);
    1112:          auto file = static_cast< CodeFile* >(*f);
* W043 Member could be protected
    94:    static LibrarySet* Evaluate(CliThread& cli);
C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    589:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    637:          oper = Cxx::Operator(i);
    686:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    692:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    697:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
* W099 Line contains adjacent spaces
    414:    CxxWord("D",   "D",    "D",  F),  // ALIGNAS
    415:    CxxWord("@",   "@",    "@",  T),  // ASM
    416:    CxxWord("-",   "-",    "D",  F),  // AUTO
    417:    CxxWord("-",   "-",    "b",  T),  // BREAK
    418:    CxxWord("-",   "-",    "c",  T),  // CASE
    419:    CxxWord("C",   "C",    "-",  T),  // CLASS
    420:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    421:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    422:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    423:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    424:    CxxWord("-",   "-",    "d",  T),  // DO
    425:    CxxWord("E",   "E",    "E",  T),  // ENUM
    426:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    427:    CxxWord("DP",  "-",    "-",  F),  // EXTERN
    428:    CxxWord("-",   "-",    "-",  F),  // FINAL
    429:    CxxWord("-",   "-",    "f",  T),  // FOR
    430:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    431:    CxxWord("-",   "-",    "g",  T),  // GOTO
    432:    CxxWord("H",   "H",    "H",  F),  // HASH
    433:    CxxWord("-",   "-",    "i",  T),  // IF
    434:    CxxWord("P",   "P",    "-",  F),  // INLINE
    435:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    436:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    437:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    438:    CxxWord("-",   "-",    "-",  F),  // OVERRIDE
    439:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    440:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    441:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    442:    CxxWord("-",   "-",    "r",  T),  // RETURN
    443:    CxxWord("DP",  "DP",   "D",  F),  // STATIC
    444:    CxxWord("$",   "$",    "$",  T),  // STATIC_ASSERT
    445:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    446:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    447:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    448:    CxxWord("D",   "D",    "D",  F),  // THREAD_LOCAL
    449:    CxxWord("-",   "-",    "t",  T),  // TRY
    450:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    451:    CxxWord("C",   "C",    "-",  T),  // UNION
    452:    CxxWord("U",   "U",    "U",  T),  // USING
    453:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    454:    CxxWord("DP",  "DP",   "D",  F),  // VOLATILE
    455:    CxxWord("-",   "-",    "w",  T),  // WHILE
    456:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    457:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    485:    CxxOp(           SCOPE_STR, 2, 18, F, F, F, XN),  // SCOPE_RESOLUTION
    486:    CxxOp(                 ".", 2, 17, F, F, F, NN),  // REFERENCE_SELECT
    487:    CxxOp(                "->", 2, 17, T, F, F, NN),  // POINTER_SELECT
    488:    CxxOp(                 "[", 2, 17, T, F, F, NN),  // ARRAY_SUBSCRIPT
    489:    CxxOp(                 "(", 0, 17, F, F, F, NN),  // FUNCTION_CALL
    490:    CxxOp(                "++", 1, 17, T, F, F, NX),  // POSTFIX_INCREMENT
    491:    CxxOp(                "--", 1, 17, T, F, F, NX),  // POSTFIX_DECREMENT
    492:    CxxOp(         DEFINED_STR, 1, 17, F, F, F, XN),  // DEFINED
    493:    CxxOp(          TYPEID_STR, 1, 17, F, F, F, XN),  // TYPE_NAME
    494:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F, XN),  // CONST_CAST
    495:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F, XN),  // DYNAMIC_CAST
    497:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F, XN),  // STATIC_CAST
    498:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F, XN),  // SIZEOF_TYPE
    499:    CxxOp(         ALIGNOF_STR, 1, 16, F, T, F, XN),  // ALIGNOF_TYPE
    500:    CxxOp(        NOEXCEPT_STR, 1, 16, F, T, F, XN),  // NOEXCEPT
    501:    CxxOp(                "++", 1, 16, T, T, F, XN),  // PREFIX_INCREMENT
    502:    CxxOp(                "--", 1, 16, T, T, F, XN),  // PREFIX_DECREMENT
    503:    CxxOp(                 "~", 1, 16, T, T, F, XN),  // ONES_COMPLEMENT
    504:    CxxOp(                 "!", 1, 16, T, T, F, XN),  // LOGICAL_NOT
    505:    CxxOp(                 "+", 1, 16, T, T, F, XN),  // UNARY_PLUS
    506:    CxxOp(                 "-", 1, 16, T, T, F, XN),  // UNARY_MINUS
    507:    CxxOp(                 "&", 1, 16, T, T, F, XN),  // ADDRESS_OF
    508:    CxxOp(                 "*", 1, 16, T, T, F, XN),  // INDIRECTION
    509:    CxxOp(             NEW_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE
    510:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F, XX),  // OBJECT_CREATE_ARRAY
    511:    CxxOp(          DELETE_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE
    512:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F, XX),  // OBJECT_DELETE_ARRAY
    513:    CxxOp(                 "(", 2, 16, T, T, F, SN),  // CAST
    514:    CxxOp(                ".*", 2, 15, F, F, F, NN),  // REFERENCE_SELECT_MEMBER
    515:    CxxOp(               "->*", 2, 15, T, F, F, NN),  // POINTER_SELECT_MEMBER
    516:    CxxOp(                 "*", 2, 14, T, F, T, SS),  // MULTIPLY
    517:    CxxOp(                 "/", 2, 14, T, F, F, SS),  // DIVIDE
    518:    CxxOp(                 "%", 2, 14, T, F, F, SS),  // MODULO
    519:    CxxOp(                 "+", 2, 13, T, F, T, SS),  // ADD
    520:    CxxOp(                 "-", 2, 13, T, F, F, SS),  // SUBTRACT
    521:    CxxOp(                "<<", 2, 12, T, F, F, SS),  // LEFT_SHIFT
    522:    CxxOp(                ">>", 2, 12, T, F, F, SS),  // RIGHT_SHIFT
    523:    CxxOp(                 "<", 2, 11, T, F, T, SS),  // LESS
    524:    CxxOp(                "<=", 2, 11, T, F, T, SS),  // LESS_OR_EQUAL
    525:    CxxOp(                 ">", 2, 11, T, F, T, SS),  // GREATER
    526:    CxxOp(                ">=", 2, 11, T, F, T, SS),  // GREATER_OR_EQUAL
    527:    CxxOp(                "==", 2, 10, T, F, T, SS),  // EQUALITY
    528:    CxxOp(                "!=", 2, 10, T, F, T, SS),  // INEQUALITY
    529:    CxxOp(                 "&", 2,  9, T, F, T, SS),  // BITWISE_AND
    530:    CxxOp(                 "^", 2,  8, T, F, T, SS),  // BITWISE_XOR
    531:    CxxOp(                 "|", 2,  7, T, F, T, SS),  // BITWISE_OR
    532:    CxxOp(                "&&", 2,  6, T, F, T, SS),  // LOGICAL_AND
    533:    CxxOp(                "||", 2,  5, T, F, T, SS),  // LOGICAL_OR
    534:    CxxOp(                 "?", 3,  4, F, F, F, SS),  // CONDITIONAL
    535:    CxxOp(                 "=", 2,  3, T, T, F, SS),  // ASSIGN
    536:    CxxOp(                "*=", 2,  3, T, T, F, SS),  // MULTIPLY_ASSIGN
    537:    CxxOp(                "/=", 2,  3, T, T, F, SS),  // DIVIDE_ASSIGN
    538:    CxxOp(                "%=", 2,  3, T, T, F, SS),  // MODULO_ASSIGN
    539:    CxxOp(                "+=", 2,  3, T, T, F, SS),  // ADD_ASSIGN
    540:    CxxOp(                "-=", 2,  3, T, T, F, SS),  // SUBTRACT_ASSIGN
    541:    CxxOp(               "<<=", 2,  3, T, T, F, SS),  // LEFT_SHIFT_ASSIGN
    542:    CxxOp(               ">>=", 2,  3, T, T, F, SS),  // RIGHT_SHIFT_ASSIGN
    543:    CxxOp(                "&=", 2,  3, T, T, F, SS),  // BITWISE_AND_ASSIGN
    544:    CxxOp(                "^=", 2,  3, T, T, F, SS),  // BITWISE_XOR_ASSIGN
    545:    CxxOp(                "|=", 2,  3, T, T, F, SS),  // BITWISE_OR_ASSIGN
    546:    CxxOp(           THROW_STR, 0,  2, F, T, F, SS),  // THROW
    547:    CxxOp(                 ",", 2,  1, F, F, F, NS),  // STATEMENT_SEPARATOR
    548:    CxxOp(                 "$", 0,  0, F, F, F, XX),  // START_OF_EXPRESSION
    549:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // FALSE
    550:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // TRUE
    551:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX),  // NULLPTR
    552:    CxxOp(           ERROR_STR, 0,  0, F, F, F, XX)   // NIL_OPERATOR
* W106 Function does not invoke Debug::ft
    103: Cxx::Access FindAccessControl(const std::string& s)
    824: static void EraseTemplateArgs
    856: static void Union(CxxNamedSet& lhs, const CxxNamedSet& rhs)
    866: void CxxUsageSets::AddBase(CxxNamed* item)
    874: void CxxUsageSets::AddDirect(CxxNamed* item)
    882: void CxxUsageSets::AddForward(CxxNamed* item)
    893: void CxxUsageSets::AddIndirect(CxxNamed* item)
    901: void CxxUsageSets::AddInherit(CxxNamed* item)
    909: void CxxUsageSets::AddUser(CxxNamed* item)
C:/Users/Greg/Documents/rsc/rsc/ct/Cxx.h
* W028 Unused data
    446:    constexpr char Unchecked = ' ';  // spacing not determined
* W042 Member could be private
    541:    Numeric(NumericType type, size_t width, bool sign) :
  W082 Adjacent arguments have the same type
    617:    SymbolView(Accessibility a, TypeMatch m, Cxx::Access c,
* W092 Function could be free
    461:    static void UpdateOperator(Cxx::Operator& oper, size_t args); // CxxScope.cpp
* W127 Data could be free
    389:    static const CxxWord Attrs[Cxx::NIL_KEYWORD + 1]; // Parser.cpp
    583:    static const Numeric Short; // CxxRoot.cpp
    584:    static const Numeric uChar; // CxxRoot.cpp
    588:    static const Numeric uShort; // CxxRoot.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    108:       auto cls = static_cast< Class* >(call->Via()->Root());
    283:          static_cast< const Function* >(item)->IsInline())
    1243:    auto area = static_cast< CxxArea* >(GetScope());
    1246:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1263:          auto c = static_cast< Class* >(*s);
    2711:       auto func = static_cast< const Function* >(item);
    2753:       auto func = static_cast< const Function* >(item);
    2762:       return tmplt_->FindFriend(static_cast< const CxxScope* >(ref));
  W008 Cast removes const qualification
    1364:       auto self = const_cast< Class* >(this);
    1562:    return const_cast< Class* >(this);
    1726:    return const_cast< Class* >(this);
    2707:       return const_cast< ClassInst* >(this);
* W106 Function does not invoke Debug::ft
    69: static TypeMatch FindMin(const std::vector< TypeMatch >& matches)
    1559: Class* Class::GetClassTemplate() const
    1595: Cxx::Access Class::GetCurrAccess() const
    1612: void Class::GetDecls(CxxNamedSet& items)
    1723: CxxScope* Class::GetTemplate() const
    2197: Class* Class::OuterClass() const
    3366: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
    3384: void CxxArea::GetDecls(CxxNamedSet& items)
    3424: void CxxArea::InsertFunc(Function* func)
* W117 Line can merge with the next line and be under the length limit
    693:       attrs.test(HasPublicMemberFunction) ||
    724:       attrs.test(HasPublicStaticData) ||
    731:          attrs.test(HasInstantiations) ||
  W119 Argument passed by value is modified
    132/3:    (const CxxScoped* member, const CxxScope* scope, SymbolView* view)
    2830/2:    const CxxScope* scope, CodeFile* file, SymbolView& view) const
C:/Users/Greg/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    538:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    908:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
  W007 Cast down the inheritance hierarchy
    1010:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    137:    CxxArea* GetArea() const override { return const_cast< CxxArea* >(this); }
    538:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    583:    Class* GetClass() const override { return const_cast< Class* >(this); }
    908:    CxxScope* GetTemplateInstance() const override { return (CxxScope*) this; }
    1054:       override { return const_cast< Namespace* >(this); }
* W042 Member could be private
    92:    Typedef* FindType(const std::string& name) const;
    178:    Enum* FindEnum(const std::string& name) const;
    182:    Enumerator* FindEnumerator(const std::string& name) const;
    350:    virtual bool IsCompiledTemplate() const { return false; }
    401:    void FindCtors(FunctionVector& ctors) const;
    417:    FunctionDefinition GetFuncDefinition(FunctionRole role) const;
    529:    bool AddAnonymousUnion(const ClassPtr& cls) override;
    1015:    Namespace* FindNamespace(const std::string& name) const;
* W043 Member could be protected
    68:    const ClassPtrVector* Classes() const { return &classes_; }
    70:    const EnumPtrVector* Enums() const { return &enums_; }
    71:    const ForwardPtrVector* Forws() const { return &forws_; }
    74:    const TypedefPtrVector* Types() const { return &types_; }
    75:    const AsmPtrVector* Assembly() const { return &assembly_; }
    76:    const StaticAssertPtrVector* Asserts() const { return &asserts_; }
* W060 Base class constructor is public
    263:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W075 Virtual function is public
    102:    virtual Function* FindFunc(const std::string& name,
    110:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    114:    virtual CxxScoped* FindItem(const std::string& name) const;
    288:    virtual ClassInst* EnsureInstance(const TypeName* type);
    301:    virtual Class* BaseClass()
    306:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    345:    virtual Class* GetClassTemplate() const;
    350:    virtual bool IsCompiledTemplate() const { return false; }
    365:    virtual bool DerivesFrom(const Class* cls) const;
    529:    bool AddAnonymousUnion(const ClassPtr& cls) override;
    632:    CxxTokenVector Items() const override;
C:/Users/Greg/Documents/rsc/rsc/ct/CxxCharLiteral.h
* W020 Using statement in header
    35: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    1092:       auto macro = static_cast< Macro* >(ref_);
    1105:       auto macro = static_cast< Macro* >(ref_);
* W106 Function does not invoke Debug::ft
    46: static void AlignLeft(ostream& stream, const string& prefix)
    58: bool IncludesAreSorted(const IncludePtr& incl1, const IncludePtr& incl2)
    201: CxxToken* Define::AutoType() const
    1008: bool Macro::WasRead()
    1048: CxxScope* MacroName::GetScope() const
C:/Users/Greg/Documents/rsc/rsc/ct/CxxDirective.h
* W042 Member could be private
    286:    virtual CxxToken* GetValue() const = 0;
    335:    CxxToken* RootType() const override { return GetValue(); }
* W043 Member could be protected
    901:    const std::string& GetText() const { return text_; }
  W050 Data is not private
    360:    size_t refs_ : 16;
  W075 Virtual function is public
    55:    virtual bool IsIncludeGuard() const { return false; }
    286:    virtual CxxToken* GetValue() const = 0;
    291:    virtual bool IsDefined() const { return true; }
    297:    virtual void SetExpr(ExprPtr& rhs);
    335:    CxxToken* RootType() const override { return GetValue(); }
    489:    virtual bool AddElif(Elif* e) { return false; }
    493:    virtual bool AddElse(const Else* e) { return false; }
    497:    virtual bool AddEndif(const Endif* e) { return false; }
    501:    virtual bool HasCompiledCode() const { return compile_; }
C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.cpp
  W005 Functional cast
    1661:             return TypeMatch(match - 1);
    2082:    if(item_->GetTypeSpec()->Tags()->PtrCount(false) >= TagCount(ptrs))
  W007 Cast down the inheritance hierarchy
    1615:          auto derived = static_cast< const Class* >(root);
    1717:       auto thisClass = static_cast< Class* >(thisRoot);
    1725:             auto thatClass = static_cast< Class* >(thatRoot);
    1882:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item_)))
    1936:       auto type = static_cast< TypeSpec* >(item_);
    1946:       spec->SetReferent(static_cast< CxxScoped* >(item_), nullptr);
    2132:          static_cast< Class* >(root)->BlockCopied(this);
  W075 Virtual function is public
    126:    bool Display(ostream& stream, const string& opts) override;
    138:    bool Display(ostream& stream, const string& opts) override;
    154:    bool Display(ostream& stream, const string& opts) override;
    170:    bool Display(ostream& stream, const string& opts) override;
    198:    bool Display(ostream& stream, const string& opts) override;
* W106 Function does not invoke Debug::ft
    59: static bool CompilingTemplateFunction()
    323: TypeName* Context::FindXrefItem(const string& name)
    335: const Parser* Context::GetParser()
    343: XrefUpdater Context::GetXrefUpdater()
    372: void Context::OnLine(size_t line, bool compiling)
    386: bool Context::OptionIsOn(char opt)
    414: bool Context::ParsingSourceCode()
    422: bool Context::ParsingTemplateInstance()
    447: void Context::PopXrefFrame()
    465: void Context::PushScope(CxxScope* scope, bool hidden)
    474: void Context::PushXrefFrame(XrefUpdater updater)
    481: void Context::PushXrefItem(TypeName* item)
    503: CxxScope* Context::Scope()
    554: void Context::SetPos(size_t pos)
    569: void Context::SetPos(const CxxLocation& loc)
    971: OptionalCode* ParseFrame::Optional() const
    1162: CxxScope* ParseFrame::Scope() const
    1169: Cxx::Access ParseFrame::ScopeAccess() const
    1176: Cxx::Access ParseFrame::SetAccess(Cxx::Access access)
    1580: bool StackArg::IsBool() const
    2271: TypeName* XrefFrame::FindItem(const string& name) const
    2283: void XrefFrame::PushItem(TypeName* item)
  W107 Function does not invoke Debug::ft as first statement
    2200:    Debug::ft("Tracepoint.OnLine");
C:/Users/Greg/Documents/rsc/rsc/ct/CxxExecute.h
  W026 Unused argument
    911/1:    static void Shutdown(NodeBase::RestartLevel level);
    915/1:    static void Startup(NodeBase::RestartLevel level) { }
* W032 Unused function
    160:    size_t Arrays() const;
* W042 Member could be private
    164:    size_t Refs() const;
    739:    static Cxx::Access ScopeAccess() { return Frame_->ScopeAccess(); }
    865:    static bool OptionIsOn(char opt);
    873:    static void Trace(CxxTrace::Action act, const CodeFile& file);
  W050 Data is not private
    333:    CxxToken* item_;
  W082 Adjacent arguments have the same type
    287:    TypeMatch CalcMatchWith(const StackArg& that,
    342:    TypeMatch MatchWith(const StackArg& that,
* W092 Function could be free
    735:    static bool AtFileScope(); // CxxToken.cpp
    750:    static Cxx::Access ScopeVisibility(); // CxxArea.cpp
    808:    static void WasCalled(Function* func); // CxxScope.cpp
    845:    static void PushXrefFrame(XrefUpdater updater); // CxxScope.cpp
    849:    static void PopXrefFrame(); // CxxScope.cpp
    857:    static void PushXrefItem(TypeName* item); // CxxNamed.cpp
    861:    static TypeName* FindXrefItem(const std::string& name); // CxxScoped.cpp
    871:    static void Trace(CxxTrace::Action act, const CxxToken* token); // CxxExecute.cpp
    872:    static void Trace(CxxTrace::Action act, const StackArg& arg); // CxxExecute.cpp
    873:    static void Trace(CxxTrace::Action act, const CodeFile& file); // CxxExecute.cpp
    874:    static void Trace(CxxTrace::Action act, NodeBase::word err, // CxxExecute.cpp
    879:    static void InsertTracepoint // CtIncrement.cpp
    884:    static void EraseTracepoint // CtIncrement.cpp
    889:    static void ClearTracepoints(); // CtIncrement.cpp
    893:    static void DisplayTracepoints // CtIncrement.cpp
    915:    static void Startup(NodeBase::RestartLevel level) { } // CtModule.cpp
    953:    static bool StartTracing(); // Parser.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/CxxLocation.cpp
* W106 Function does not invoke Debug::ft
    41: void CxxLocation::SetLoc(CodeFile* file, size_t pos)
    49: void CxxLocation::SetLoc(CodeFile* file, size_t pos, bool internal)
C:/Users/Greg/Documents/rsc/rsc/ct/CxxLocation.h
  W082 Adjacent arguments have the same type
    76:    void UpdatePos(EditorAction action, size_t begin, size_t count, size_t from);
C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.cpp
  W005 Functional cast
    3658:    if(TagCount(n) >= ptrs_) return false;
    3676:    if(TagCount(n) >= ptrs_) return false;
    3747:       if(TagCount(n) >= ptrs_) ptrs_ = n + 1;
  W007 Cast down the inheritance hierarchy
    74:             static_cast< Function* >(tfunc)->SetTemplateParm();
    404:          space = static_cast< Namespace* >(item);
    428:          cls = static_cast< Class* >(item);
    482:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    493:          auto tdef = static_cast< Typedef* >(item);
    498:          item = static_cast< CxxScoped* >(root);
    767:    return static_cast< Class* >(root);
    1213:    return (static_cast< Class* >(root)->FindCtor(nullptr) == nullptr);
    2073:    auto cls = (type == Cxx::Class ? static_cast< Class* >(inner) : nullptr);
    2320:       auto func = static_cast< Function* >(ref);
  W008 Cast removes const qualification
    1002:    return const_cast< DataSpec* >(this);
    1581:    const_cast< DataSpec* >(this)->FindReferent();
    2875:    return const_cast< TypeName* >(this);
* W106 Function does not invoke Debug::ft
    166: CxxArea* CxxNamed::GetArea() const
    175: Class* CxxNamed::GetClass() const
    206: CodeFile* CxxNamed::GetDistinctDeclFile() const
    221: CodeFile* CxxNamed::GetImplFile() const
    230: void CxxNamed::GetScopedNames(stringVector& names, bool templates) const
    237: Namespace* CxxNamed::GetSpace() const
    563: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    932: TypeTags DataSpec::GetAllTags() const
    1000: TypeSpec* DataSpec::GetTypeSpec() const
    1137: bool DataSpec::IsAutoDecl() const
    1204: bool DataSpec::IsPOD() const
    1576: CxxScoped* DataSpec::Referent() const
    2017: TypeName* QualName::At(size_t n) const
    2239: CxxScope* QualName::GetScope() const
    2270: TypeName* QualName::GetTemplateArgs() const
    2360: TypeName* QualName::Last() const
    2594: size_t QualName::Size() const
    2775: CxxScoped* TypeName::DirectType() const
    2872: TypeName* TypeName::GetTemplateArgs() const
    3065: void TypeName::PushBack(TypeNamePtr& type)
    3647: int TypeTags::IsConstPtr() const
    3656: bool TypeTags::IsConstPtr(size_t n) const
    3665: int TypeTags::IsVolatilePtr() const
    3674: bool TypeTags::IsVolatilePtr(size_t n) const
    3714: TagCount TypeTags::PtrCount(bool arrays) const
  W119 Argument passed by value is modified
    2017/1: TypeName* QualName::At(size_t n) const
C:/Users/Greg/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1240:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1453:    CxxToken* RootType() const override { return (CxxToken*) Referent(); }
  W008 Cast removes const qualification
    717:       override { return const_cast< QualName* >(this); }
    1240:    CxxToken* AutoType() const override { return (CxxToken*) this; }
* W042 Member could be private
    240:    virtual bool ResolveTemplate
    601:    TypeName* Last() const;
    763:    bool ResolveTemplate
    907:    bool IsUnboundedArray() const { return array_; }
    1198:    DataSpec(const DataSpec& that);
* W043 Member could be protected
    68:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    186:    void DisplayReferent(std::ostream& stream, bool fq) const;
    196:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    1005:    TypeSpecUser GetUserType() const { return user_; }
  W050 Data is not private
    952:    bool ptrDet_: 1;
    956:    bool refDet_: 1;
  W075 Virtual function is public
    57:    virtual bool IsDeclaredInFunction() const { return false; }
    63:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    68:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    78:    virtual std::string QualifiedName(bool scopes, bool templates)
    84:    virtual std::string ScopedName(bool templates) const;
    90:    virtual void GetScopedNames(stringVector& names, bool templates) const;
    95:    virtual Function* GetFunction() const { return nullptr; }
    102:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    107:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    130:    virtual CxxScoped* DirectType() const { return Referent(); }
    134:    virtual void FindReferent();
    140:    virtual void SetReferent(CxxScoped* item, const SymbolView* view) const;
    144:    virtual void SetAsReferent(const CxxNamed* user) { }
    151:    virtual StackArg NameToArg(Cxx::Operator op, TypeName* name);
    156:    virtual StackArg MemberToArg
    169:    virtual void GetDirectClasses(CxxUsageSets& symbols);
    176:    virtual void GetDirectTemplateArgs(CxxUsageSets& symbols) const;
    181:    virtual std::string XrefName(bool templates) const;
    470:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    763:    bool ResolveTemplate
    768:    bool ResolveTypedef(Typedef* type, size_t n) const override;
    1013:    virtual bool ContainsTemplateParameter() const;
    1017:    virtual Function* GetFuncSpec() const { return nullptr; }
    1027:    virtual TypeSpec* Clone() const = 0;
    1031:    virtual TypeTags* Tags() = 0;
    1032:    virtual const TypeTags* Tags() const = 0;
    1036:    virtual void AddArray(ArraySpecPtr& array) = 0;
    1042:    virtual TagCount Ptrs(bool arrays) const = 0;
    1048:    virtual TagCount Refs() const = 0;
    1053:    virtual TagCount Arrays() const = 0;
    1057:    virtual bool HasArrayDefn() const = 0;
    1061:    virtual void EnteringScope(const CxxScope* scope) = 0;
    1065:    virtual void EnterArrays() const = 0;
    1070:    virtual TypeTags GetAllTags() const = 0;
    1075:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1080:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1084:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1090:    virtual void SetPtrs(TagCount count) = 0;
    1095:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1099:    virtual StackArg ResultType() const = 0;
    1103:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1107:    virtual void SetUserType(TypeSpecUser user) const { user_ = user; }
    1118:    virtual TypeMatch MatchTemplate(const TypeSpec* that,
    1125:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1130:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1134:    virtual bool ItemIsTemplateArg(const CxxNamed* item) const = 0;
    1140:    virtual void Instantiating(CxxScopedVector& locals) const = 0;
    1144:    virtual void GetNames(stringVector& names) const = 0;
    1149:    virtual bool NamesReferToArgs(const NameVector& names,
  W082 Adjacent arguments have the same type
    366:    TypeMatch MatchTemplate(const TypeName* that,
    663:    TypeMatch MatchTemplate(const QualName* that,
    864:    bool SetPointer(size_t n, bool readonly, bool unstable);
    1118:    virtual TypeMatch MatchTemplate(const TypeSpec* that,
* W127 Data could be free
    1202:    static const TypeSpecPtr Bool; // CxxExecute.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.cpp
  W004 C-style cast
    4702:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W007 Cast down the inheritance hierarchy
    89:             auto farg = static_cast< Function* >(a->item_);
    924:       auto cls = static_cast<const Class*>(scope);
    1711:          auto op = static_cast< Operation* >(expr);
    1845:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1859:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1911:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    1926:    auto item = static_cast< Data* >(FindTemplateAnalog(this));
    2013:          static_cast< Block* >(GetScope())->EraseItem(this);
    2029:          static_cast< Block* >(GetScope())->ReplaceItem(this, next_.release());
    3722:    else if(!static_cast< Function* >(item)->virtual_)
    4499:       func = static_cast< Function* >(inst->FindTemplateAnalog(this));
    4512:       auto i = FindArg(static_cast< const Argument* >(item), false);
    4559:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    5264:    auto that = static_cast< const Argument* >(FindTemplateAnalog(arg));
    5719:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    5731:    auto func = static_cast< Function* >(FindTemplateAnalog(this));
    5976:                auto item = static_cast< CxxNamed* >(args.front().item_);
    6165:       auto func = static_cast< Function* >(cls->FindTemplateAnalog(this));
  W008 Cast removes const qualification
    3088:    return FoundFunc(const_cast< Function* >(this), args);
    4468:    auto prev = const_cast< Function* >(this);
    4692:    if(IsTemplate()) return const_cast< Function* >(this);
    4702:    if(tmplt_ != nullptr) return (CxxScope*) this;
  W082 Adjacent arguments have the same type
    185: static TypeMatch MatchTemplate(const string& thisType,
* W106 Function does not invoke Debug::ft
    114: bool FuncDefnsAreSorted(const Function* func1, const Function* func2)
    146: FunctionVector FuncsInArea(const FunctionVector& defns, const CxxArea* area)
    271: bool Block::CrlfOver(Form form) const
    412: CxxToken* Block::FirstStatement() const
    420: Function* Block::GetFunction() const
    896: void ClassData::GetDecls(CxxNamedSet& items)
    1005: void ClassData::SetMemInit(const MemberInit* init)
    1540: CodeFile* Data::GetDeclFile() const
    1547: const Data* Data::GetDefn() const
    1556: CodeFile* Data::GetDefnFile() const
    1599: TypeName* Data::GetTemplateArgs() const
    1739: bool Data::IsConst() const
    1907: bool Data::WasRead()
    2304: TypeSpec* FuncSpec::Clone() const
    2336: void FuncSpec::EnterArrays() const
    2353: void FuncSpec::FindReferent()
    2361: TypeTags FuncSpec::GetAllTags() const
    2368: void FuncSpec::GetNames(stringVector& names) const
    2376: TypeName* FuncSpec::GetTemplateArgs() const
    2383: TypeSpec* FuncSpec::GetTypeSpec() const
    2390: bool FuncSpec::HasArrayDefn() const
    2397: void FuncSpec::Instantiating(CxxScopedVector& locals) const
    2405: bool FuncSpec::ItemIsTemplateArg(const CxxNamed* item) const
    2413: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    2421: TypeMatch FuncSpec::MatchTemplate(const TypeSpec* that,
    2431: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    2439: bool FuncSpec::NamesReferToArgs(const NameVector& names,
    2465: TagCount FuncSpec::Ptrs(bool arrays) const
    2472: TagCount FuncSpec::Refs() const
    2506: void FuncSpec::SetReferent(CxxScoped* item, const SymbolView* view) const
    2522: const TypeTags* FuncSpec::Tags() const
    2529: TypeTags* FuncSpec::Tags()
    2933: uint32_t Function::CalcHash() const
    4564: FunctionRole Function::FuncRole() const
    4601: FunctionType Function::FuncType() const
    4612: Cxx::Access Function::GetAccess() const
    4620: CodeFile* Function::GetDeclFile() const
    4627: void Function::GetDecls(CxxNamedSet& items)
    4634: const Function* Function::GetDefn() const
    4643: Function* Function::GetDefn()
    4652: CodeFile* Function::GetDefnFile() const
    4661: CxxScope* Function::GetScope() const
    4689: CxxScope* Function::GetTemplate() const
    4700: CxxScope* Function::GetTemplateInstance() const
    4708: TemplateType Function::GetTemplateType() const
    5216: bool Function::IsImplemented() const
    5439: size_t Function::LogOffsetToArgIndex(word offset) const
    6172: bool Function::WasRead()
    6379: void SpaceData::GetDecls(CxxNamedSet& items)
    6478: void SpaceDefn::GetDecls(CxxNamedSet& items)
  W119 Argument passed by value is modified
    5497/2:    const CxxScope* scope, CodeFile* file, SymbolView& view) const
    5737/1: void Function::SetOperator(Cxx::Operator oper)
C:/Users/Greg/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    391:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    391:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1442:       const override { return const_cast< Function* >(this); }
  W026 Unused argument
    77/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
* W030 Unused enumerator
    147:       Multiple   // two statements or more
* W032 Unused function
    1228:    bool IsFinal() const { return GetDecl()->final_; }
* W042 Member could be private
    354:    const Data* GetDecl() const { return (defn_ ? mate_ : this); }
    359:    const Data* GetDefn() const;
    1168:    bool IsDefaulted() const { return GetDefn()->defaulted_; }
    1222:    Function* GetBase() const { return GetDecl()->base_; }
    1292:    size_t MaxArgs() const { return args_.size(); }
    1361:    bool IsInvokedInBase() const;
    1390:    void CheckAccessControl() const override;
    1394:    void CheckIfHiding() const override;
* W043 Member could be protected
    334:    bool IsThreadLocal() const { return thread_local_; }
    338:    bool IsConstexpr() const { return constexpr_; }
    342:    bool WasInited() const { return GetDecl()->inited_; }
  W075 Virtual function is public
    71:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    76:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    84:    virtual void AccessibilityOf
    378:    virtual void Promote
    383:    virtual bool IsUnionMember() const { return false; }
    1390:    void CheckAccessControl() const override;
    1394:    void CheckIfHiding() const override;
  W082 Adjacent arguments have the same type
    378:    virtual void Promote
* W092 Function could be free
    177:    static void AddUsing(Using* use); // CxxScoped.cpp
    182:    static void RemoveUsing(const Using* use); // CxxScoped.cpp
    186:    static void ResetUsings(); // CxxExecute.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1927:    return (CxxToken*) this;
    2170:    return (CxxToken*) this;
    2977:    return (CxxToken*) this;
    3071:    return (CxxScoped*) this;
    3084:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    96:          auto func = static_cast< Function* >(GetScope());
    204:       auto& fname = static_cast< Function* >(GetScope())->Name();
    220:    auto cls = static_cast< Class* >(ref);
    244:    auto func = static_cast< Function* >(GetScope());
    308:       auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    359:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    371:    auto item = static_cast< Argument* >(FindTemplateAnalog(this));
    408:    GetClass()->EraseSubclass(static_cast< Class* >(GetScope()));
    439:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    473:    return static_cast< Class* >(name_->GetReferent());
    1194:          ref = static_cast< const Function* >(ref)->FindRootFunc();
    1548:    auto item = static_cast< Enum* >(FindTemplateAnalog(this));
    1838:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    1885:    auto item = static_cast< Enumerator* >(FindTemplateAnalog(this));
    2082:    auto item = static_cast< Forward* >(FindTemplateAnalog(this));
    2217:    static_cast< Class* >(grantor_)->EraseFriend(this);
    2316:          space = static_cast< Namespace* >(item);
    2329:          cls = static_cast< Class* >(item);
    2368:          auto tdef = static_cast< Typedef* >(item);
    2373:          item = static_cast< CxxScoped* >(root);
    2557:    auto item = static_cast< Friend* >(grantor_->FindTemplateAnalog(this));
    2692:       static_cast< CxxArea* >(scope)->AddFunc(func);
    2828:    auto func = static_cast< Function* >(GetScope());
    2912:    ref_ = static_cast< ClassData* >(cls->FindData(name_));
    3637:    auto item = static_cast< Typedef* >(FindTemplateAnalog(this));
    3835:          auto item = static_cast< Using* >(FindTemplateAnalog(this));
  W008 Cast removes const qualification
    745:    if(n == 0) return const_cast< CxxScoped* >(this);
    1927:    return (CxxToken*) this;
    2170:    return (CxxToken*) this;
    2603:    const_cast< Friend* >(this)->FindReferent();
    2629:    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
    2639:    const_cast< Friend* >(this)->SetScope(cls->GetScope());
    2977:    return (CxxToken*) this;
    3071:    return (CxxScoped*) this;
    3084:    return (CxxToken*) this;
* W106 Function does not invoke Debug::ft
    471: Class* BaseDecl::GetClass() const
    595: void CxxScoped::AddFiles(LibItemSet& imSet) const
    823: bool CxxScoped::IsAuto() const
    832: bool CxxScoped::IsClassMember() const
    846: bool CxxScoped::IsConst() const
    855: bool CxxScoped::IsConstPtr() const
    864: bool CxxScoped::IsConstPtr(size_t n) const
    873: bool CxxScoped::IsDeclaredInFunction() const
    881: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    894: bool CxxScoped::IsIndirect(bool arrays) const
    1158: void CxxScoped::UpdateReference(CxxToken* item, bool insert) const
    1215: CxxTokenVector CxxScoped::XrefItems() const
    1452: void Enum::GetDecls(CxxNamedSet& items)
    1473: TypeSpec* Enum::GetTypeSpec() const
    1732: void Enumerator::GetDecls(CxxNamedSet& items)
    1923: CxxToken* Forward::AutoType() const
    2005: void Forward::GetDecls(CxxNamedSet& items)
    2166: CxxToken* Friend::AutoType() const
    2438: void Friend::GetDecls(CxxNamedSet& items)
    2455: Function* Friend::GetFunction() const
    2464: QualName* Friend::GetQualName() const
    2473: CxxScoped* Friend::GetReferent() const
    2907: CxxScoped* MemberInit::Referent() const
    2969: CxxToken* TemplateParm::AutoType() const
    3063: CxxScoped* TemplateParm::Referent() const
    3076: CxxToken* TemplateParm::RootType() const
    3544: void Typedef::GetDecls(CxxNamedSet& items)
    3560: TypeName* Typedef::GetTemplateArgs() const
  W119 Argument passed by value is modified
    3883/1: void Using::SetScope(CxxScope* scope)
C:/Users/Greg/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    210:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    617:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1570:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1663:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    210:    CxxScoped* Referent() const override { return (CxxScoped*) this; }
    617:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1570:    CxxToken* AutoType() const override { return (CxxToken*) this; }
    1663:    CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1819/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
* W042 Member could be private
    70:    bool IsClassMember() const;
    79:    bool IsSubscopeOf(const std::string& fqSuper) const;
    137:    bool Contains(const CxxToken* item) const;
    626:    void CheckAccessControl() const override;
    1162:    bool ResolveTemplate
    1894:    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
* W043 Member could be protected
    106:    CxxScoped* FindInheritedName() const;
    125:    virtual bool IsUnused() const { return false; }
    142:    void DisplayFiles(std::ostream& stream) const;
    150:    size_t XrefSize() const { return xref_.size() * 3 * sizeof(CxxNamed*); }
  W075 Virtual function is public
    59:    virtual bool NameRefersToItem(const std::string& name,
    88:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView& view) const;
    97:    virtual void RecordAccess(Cxx::Access access) const;
    110:    virtual void AddFiles(LibItemSet& imSet) const;
    115:    virtual void UpdateReference(CxxToken* item, bool insert) const;
    125:    virtual bool IsUnused() const { return false; }
    131:    virtual bool CheckIfUnused(Warning warning) const;
    626:    void CheckAccessControl() const override;
    1162:    bool ResolveTemplate
    1894:    bool ResolveTypedef(Typedef* type, size_t n) const override { return false; }
  W082 Adjacent arguments have the same type
    240:    bool GetBracedSpan(size_t& begin, size_t& left, size_t& end) const;
    1809:    Using(QualNamePtr& name, bool space, bool added = false);
C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.cpp
  W007 Cast down the inheritance hierarchy
    404:    static_cast< Block* >(GetScope())->EraseItem(this);
    1251:             static_cast< Class* >(result.item_)->InvokeCopyCtor();
* W106 Function does not invoke Debug::ft
    410: void CxxStatement::EnterBlock()
C:/Users/Greg/Documents/rsc/rsc/ct/CxxStatement.h
  W082 Adjacent arguments have the same type
    59:    bool GetSeqSpan(size_t begin, size_t& left, size_t& end) const;
    64:    bool GetParSpan(size_t& begin, size_t& left, size_t& end) const;
C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.cpp
  W082 Adjacent arguments have the same type
    40: static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  W119 Argument passed by value is modified
    217/2: static size_t FindTemplateBegin(const string& name, size_t pos, size_t depth)
    239/2: static size_t FindTemplateEnd(const string& name, size_t pos)
    721/5:    (string& code, const string& s1, const string& s2, size_t begin, size_t end)
    755/3: size_t rfind_first_not_of(const string& str, const string& chars, size_t off)
    769/2: size_t rfind_first_of(const string& str, size_t off, const string& chars)
C:/Users/Greg/Documents/rsc/rsc/ct/CxxString.h
* W032 Unused function
    46:    size_t rfind_first_of
    114:    std::string& Prefix(std::string&& scope,
  W082 Adjacent arguments have the same type
    53:    size_t rfind_first_not_of(const std::string& str,
    139:    size_t CompareScopes
    177:    size_t Replace(std::string& code,
C:/Users/Greg/Documents/rsc/rsc/ct/CxxStrLiteral.h
* W020 Using statement in header
    41: using namespace NodeBase;
* W042 Member could be private
    87:    static DataPtr CreateRef()
C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W004 C-style cast
    379:    CodeFile* itemFile = (CodeFile*) UINTPTR_MAX;
  W007 Cast down the inheritance hierarchy
    547:    return static_cast< Macro* >(macros.front());
    584:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    592:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    600:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    606:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
* W106 Function does not invoke Debug::ft
    251: template< typename T > void GetSymbols
    263: static bool IsSortedByScope(const CxxScoped* item1, const CxxScoped* item2)
    276: static bool IsSortedForXref(const CxxScoped* item1, const CxxScoped* item2)
    419: void CxxSymbols::EraseClass(const Class* cls)
    426: void CxxSymbols::EraseData(const Data* data)
    433: void CxxSymbols::EraseEnum(const Enum* item)
    440: void CxxSymbols::EraseEtor(const Enumerator* etor)
    447: void CxxSymbols::EraseForw(const Forward* forw)
    454: void CxxSymbols::EraseFriend(const Friend* frnd)
    461: void CxxSymbols::EraseFunc(const Function* func)
    468: void CxxSymbols::EraseMacro(const Macro* macro)
    475: void CxxSymbols::EraseSpace(const Namespace* space)
    482: void CxxSymbols::EraseTerm(const Terminal* term)
    489: void CxxSymbols::EraseType(const Typedef* type)
    826: void CxxSymbols::FindTerminal(const string& name, SymbolVector& list) const
    833: void CxxSymbols::InsertClass(Class* cls)
    840: void CxxSymbols::InsertData(Data* data)
    847: void CxxSymbols::InsertEnum(Enum* item)
    854: void CxxSymbols::InsertEtor(Enumerator* etor)
    861: void CxxSymbols::InsertForw(Forward* forw)
    868: void CxxSymbols::InsertFriend(Friend* frnd)
    875: void CxxSymbols::InsertFunc(Function* func)
    882: void CxxSymbols::InsertMacro(Macro* macro)
    889: void CxxSymbols::InsertSpace(Namespace* space)
    896: void CxxSymbols::InsertTerm(Terminal* term)
    903: void CxxSymbols::InsertType(Typedef* type)
C:/Users/Greg/Documents/rsc/rsc/ct/CxxSymbols.h
* W090 Function could be const
    152:    void InsertClass(Class* cls);
    153:    void InsertData(Data* data);
    154:    void InsertEtor(Enumerator* etor);
    155:    void InsertEnum(Enum* item);
    156:    void InsertForw(Forward* forw);
    157:    void InsertFriend(Friend* frnd);
    158:    void InsertFunc(Function* func);
    159:    void InsertMacro(Macro* macro);
    160:    void InsertSpace(Namespace* space);
    161:    void InsertTerm(Terminal* term);
    162:    void InsertType(Typedef* type);
    166:    void EraseClass(const Class* cls);
    167:    void EraseData(const Data* data);
    168:    void EraseEtor(const Enumerator* etor);
    169:    void EraseEnum(const Enum* item);
    170:    void EraseForw(const Forward* forw);
    171:    void EraseFriend(const Friend* frnd);
    172:    void EraseFunc(const Function* func);
    173:    void EraseMacro(const Macro* macro);
    174:    void EraseSpace(const Namespace* space);
    175:    void EraseTerm(const Terminal* term);
    176:    void EraseType(const Typedef* type);
* W106 Function does not invoke Debug::ft
    262: template< typename T > void EraseSymbol(const CxxScoped* item,
    282: template< typename T > void ListSymbols(const std::string& name,
  W110 Override of Base.Display not found
    97: class CxxSymbols: public NodeBase::Base
C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.cpp
  W007 Cast down the inheritance hierarchy
    962:    auto oper = static_cast< Operation* >(item.get());
    988:          auto ante = static_cast< Operation* >(prev.get());
    1047:       auto oper = static_cast< Operation* >(item.get());
    1080:    auto oper = static_cast< Operation* >(prev.get());
    1107:    auto oper = static_cast< Operation* >(item.get());
    1165:    auto oper = static_cast< Operation* >(item.get());
    1188:       auto ante = static_cast< Operation* >(prev.get());
    1298:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1823:       inClass = static_cast< Class* >(inRoot);
    1828:       outClass = static_cast< Class* >(outRoot);
    1869:    auto call = static_cast< Operation* >(args_.front().get());
    2264:       func = static_cast< Function* >(proc.item_);
    2278:       cls = static_cast< Class* >(proc.item_);
    2379:    auto cls = static_cast< Class* >(arg.item_->Root());
    2417:       auto newCall = static_cast< Operation* >(args_.front().get());
    2438:    auto cls = static_cast< Class* >(spec.item_->Root());
    2459:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    2483:       cls = static_cast< Class* >(root);
    2685:       area = static_cast< Class* >(targ);
    3055:    auto cls = static_cast< Class* >(root);
    3122:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    811:       const_cast< CxxToken* >(this) : nullptr);
    844:    CxxToken* prev = const_cast< CxxToken* >(this);
  W082 Adjacent arguments have the same type
    48: static bool GetSpanFailure(size_t& begin, size_t& left, size_t& end)
* W106 Function does not invoke Debug::ft
    60: bool IsSortedByFilePos(const CxxToken* item1, const CxxToken* item2)
    91: bool IsSortedByPos(const CxxToken* item1, const CxxToken* item2)
    723: CxxScope* CxxToken::GetTemplateInstance() const
    732: bool CxxToken::IsInTemplateInstance() const
    739: bool CxxToken::IsPointer(bool arrays) const
    1335: Numeric FloatLiteral::GetNumeric() const
    1394: Numeric IntLiteral::BaseNumeric() const
    1531: CxxToken* Literal::AutoType() const
    1554: CxxToken* Literal::RootType() const
    1570: Cxx::ItemType Literal::Type() const
* W117 Line can merge with the next line and be under the length limit
    2706:    auto sName = (del ?
    2716:          auto vName = (del ?
  W119 Argument passed by value is modified
    752/2:    const CxxToken* item, word offset, const string& info) const
C:/Users/Greg/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    508:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
* W042 Member could be private
    491:    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
* W043 Member could be protected
    460:    std::string strLocation() const;
  W075 Virtual function is public
    71:    virtual void Delete();
    75:    virtual void SetLoc(CodeFile* file, size_t pos) const;
    84:    virtual void SetContext(size_t pos);
    94:    virtual void CopyContext(const CxxToken* that, bool internal);
    122:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    126:    virtual void SetScope(CxxScope* scope) { }
    131:    virtual CxxScope* GetScope() const { return nullptr; }
    137:    virtual bool IsForward() const { return false; }
    141:    virtual QualName* GetQualName() const { return nullptr; }
    146:    virtual std::string TypeString(bool arg) const
    151:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    157:    virtual Class* DirectClass() const;
    161:    virtual bool IsConst() const { return false; }
    165:    virtual bool IsVolatile() const { return false; }
    169:    virtual bool IsConstPtr() const { return false; }
    173:    virtual bool IsVolatilePtr() const { return false; }
    177:    virtual bool IsConstPtr(size_t n) const { return false; }
    181:    virtual bool IsVolatilePtr(size_t n) const { return false; }
    189:    virtual bool IsStatic() const { return true; }
    193:    virtual bool IsExtern() const { return false; }
    197:    virtual void SetAccess(Cxx::Access access) { }
    201:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    206:    virtual bool IsAuto() const { return false; }
    211:    virtual bool IsIndirect(bool arrays) const { return false; }
    215:    virtual void Creating() { }
    220:    virtual void Instantiate() { }
    224:    virtual bool IsInitializing() const { return false; }
    229:    virtual CxxToken* AutoType() const { return nullptr; }
    234:    virtual Namespace* GetSpace() const { return nullptr; }
    239:    virtual CxxArea* GetArea() const { return nullptr; }
    244:    virtual Class* GetClass() const { return nullptr; }
    249:    virtual CxxScope* GetMate() const { return nullptr; }
    254:    virtual Class* Declarer() const { return GetClass(); }
    258:    virtual CxxScope* GetTemplate() const { return nullptr; }
    264:    virtual TypeName* GetTemplateArgs() const;
    268:    virtual CxxScope* GetTemplateInstance() const;
    277:    virtual CxxScoped* FindTemplateAnalog(const CxxToken* item) const;
    282:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    287:    virtual void GetConvertibleTypes(StackArgVector& types, bool expl) { }
    291:    virtual CxxScoped* Referent() const { return nullptr; }
    299:    virtual bool EnterScope() { return true; }
    304:    virtual void EnterBlock();
    309:    virtual void ExitBlock() const { }
    315:    virtual bool AppendUnary() { return false; }
    319:    virtual CxxToken* Back() { return this; }
    324:    virtual bool WasRead() { return false; }
    336:    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
    341:    virtual bool SetNonConst() { return true; }
    346:    virtual void WasMutated(const StackArg* arg) { }
    352:    virtual void RecordUsage() { }
    356:    virtual void UpdateXref(bool insert) { }
    361:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) { }
    378:    virtual CxxToken* PosToItem(size_t pos) const;
    383:    virtual bool LocateItem(const CxxToken* item, size_t& n)
    389:    virtual CxxScoped* FindNthItem(const std::string& name, size_t& n)
    394:    virtual void Check() const { }
    398:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    402:    virtual CxxTokenSet* Xref() const { return nullptr; }
    406:    virtual bool InLine() const { return true; }
    411:    virtual void Print
    417:    virtual void Shrink() { }
    440:    virtual bool IsPOD() const { return GetNumeric().IsPOD(); }
    455:    virtual void UpdatePos(EditorAction action,
    691:    virtual void PushBack(uint32_t c) = 0;
  W082 Adjacent arguments have the same type
    114:    bool GetSpan3(size_t& begin, size_t& left, size_t& end) const;
    336:    virtual bool WasWritten(const StackArg* arg, bool direct, bool indirect);
    455:    virtual void UpdatePos(EditorAction action,
    491:    virtual bool GetSpan(size_t& begin, size_t& left, size_t& end) const;
    868:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
C:/Users/Greg/Documents/rsc/rsc/ct/CxxVector.h
* W106 Function does not invoke Debug::ft
    47: template< typename T > size_t IndexOf
    63: template< class T > void SortAndDisplayItems
    93: template< class T > void SortAndDisplayItemPtrs
    127: template< class T > void EraseItem(std::vector< T* >& vec, const T* item)
    151: template< class T > void EraseItemPtr
C:/Users/Greg/Documents/rsc/rsc/ct/Editor.cpp
  W005 Functional cast
    2135:    *Cli_->obuf << ": " << Warning(log.warning_);
  W007 Cast down the inheritance hierarchy
    266:       auto func = static_cast< const Function* >(item);
    734:    return static_cast< Namespace* >(scope);
    806:    auto defn = static_cast< Data* >(data->GetMate());
    899:    auto defn = static_cast< Function* >(func->GetMate());
    927:    auto func = static_cast< const Function* >(item);
    1165:    auto oper = static_cast< const Operation* >(log.item_);
    1432:    static_cast< Class* >(log.item_)->SetClassTag(Cxx::StructType);
    1481:          static_cast< Forward* >(*f)->SetClassTag(to);
    1523:    auto decl = static_cast< CxxScope* >(log.item_);
    1685:    auto item = static_cast< CxxScope* >(ParseFileItem(pos, space));
    1698:          auto tname = static_cast< const TypeName* >(*r);
    1712:       UpdateDebugFt(static_cast< Function* >(item));
    1748:    auto func = static_cast< const Function* >(log.item_);
    1818:    static_cast< Class* >(log.item_)->SetClassTag(Cxx::ClassType);
    2077:    auto decl = static_cast< Function* >(log.item_);
    2462:    static_cast< Function* >(log.item_)->SetExplicit(false);
    2558:    static_cast< ClassData* >(log.item_)->SetMutable(false);
    2594:    static_cast< Function* >(log.item_)->SetOverride(false);
    2615:    auto qname = static_cast< const QualName* >(log.item_);
    2679:    static_cast< Function* >(log.item_)->SetVirtual(false);
    2749:       usages.directs.erase(static_cast< CxxNamed* >(*i));
    2750:       usages.indirects.erase(static_cast< CxxNamed* >(*i));
    2822:          auto data = static_cast< const Data* >(*i);
    2836:             auto func = static_cast< const Function* >(*i);
    2850:             auto data = static_cast< const Data* >(*i);
    3000:    return FindSigEnd(static_cast< const Function* >(log.item_));
    3309:    auto data = static_cast< Data* >(log.item_);
    3376:    auto func = static_cast< Function* >(log.item_);
    3467:    auto data = static_cast< const Data* >(log.item_);
    4044:    auto data = static_cast< Data* >(aref);
    4051:    ReplaceImpl(static_cast< Function* >(log.item_));
    4202:    auto func = static_cast< Function* >(log.item_);
    4552:    auto cls = static_cast< Class* >(log.item_);
    4853:    auto cls = static_cast< Class* >(item);
    5294:       ns = static_cast< Namespace* >(ref)->OuterSpace();
    5370:    auto func = static_cast< const Function* >(log.item_);
    5451:    auto func = static_cast<const Function*>(log.item_);
    5461:       auto slit = static_cast< StrLiteral* >(arg);
    5475:    auto data = static_cast< SpaceData* >(arg->Referent());
    5482:    auto slit = static_cast< StrLiteral* >(file_->PosToItem(lpos));
    5509:    static_cast< Ifndef* >(log.item_)->ChangeName(guard);
    5574:    auto type = static_cast< TypeName* >(log.item_);
    6141:    static_cast< Function* >(log.item_)->SetExplicit(true);
    6190:    static_cast< Function* >(log.item_)->SetOverride(true);
    6294:    static_cast< Function* >(log.item_)->SetVirtual(true);
    6582:       auto items = GetItemsForDefn(static_cast< const CxxScope* >(next));
  W082 Adjacent arguments have the same type
    578: static void DebugFtNames(const Function* func, string& flit, string& fvar)
    948: static bool ItemIsUsedBetween(const CxxToken* item, size_t begin, size_t end)
    1005: static void Rename(string& code, const string& oldName, const string& newName)
* W106 Function does not invoke Debug::ft
    1975: size_t Editor::CommitCount() { return Commits_; }
    4833: static FunctionRole WarningToRole(Warning log)
  W119 Argument passed by value is modified
    1918/1: bool Editor::CodeFollowsImmediately(size_t pos) const
    1933/1: bool Editor::CommentFollows(size_t pos) const
    4352/1: word Editor::InsertForward(size_t pos,
    4520/1:    (size_t pos, const string& nspace, const string& forward)
    5146/2: CxxToken* Editor::ParseFileItem(size_t pos, Namespace* ns) const
    5339/1: void Editor::Rename(size_t pos, const string& oldName, const string& newName)
    6572/3:    const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const
C:/Users/Greg/Documents/rsc/rsc/ct/Editor.h
* W020 Using statement in header
    47: using namespace NodeBase;
    48: using std::string;
  W026 Unused argument
    169/1:    word ChangeCast(const CodeWarning& log);
    170/1:    word ChangeClassToNamespace(const CodeWarning& log);
    173/1:    word ChangeOperator(const CodeWarning& log);
    178/1:    word EraseCast(const CodeWarning& log);
    179/1:    word EraseClass(const CodeWarning& log);
    192/1:    word InsertCopyCtorCall(const CodeWarning& log);
    193/1:    word InsertDataInit(const CodeWarning& log);
    195/1:    word InsertDisplay(const CodeWarning& log);
    196/1:    word InsertEnumName(const CodeWarning& log);
    197/1:    word InsertFallthrough(const CodeWarning& log);
    202/1:    word InsertMemberInit(const CodeWarning& log);
    204/1:    word InsertPODCtor(const CodeWarning& log);
    205/1:    word InsertPureVirtual(const CodeWarning& log);
    207/1:    word MoveDefine(const CodeWarning& log);
    208/1:    word MoveMemberInit(const CodeWarning& log);
    212/1:    word ReplaceHeading(const CodeWarning& log);
    213/1:    word ReplaceName(const CodeWarning& log);
    417/1:    word FixInvokers(const CodeWarning& log);
    426/1:    word ChangeFunctionToMember(const Function* func, word offset);
    426/2:    word ChangeFunctionToMember(const Function* func, word offset);
    427/1:    word ChangeInvokerToMember(const Function* func, word offset);
    427/2:    word ChangeInvokerToMember(const Function* func, word offset);
    428/1:    word EraseArgument(const Function* func, word offset);
    428/2:    word EraseArgument(const Function* func, word offset);
    429/1:    word EraseDefaultValue(const Function* func, word offset);
    429/2:    word EraseDefaultValue(const Function* func, word offset);
    430/1:    word EraseParameter(const Function* func, word offset);
    430/2:    word EraseParameter(const Function* func, word offset);
    432/1:    word InsertArgument(const Function* func, word offset);
    432/2:    word InsertArgument(const Function* func, word offset);
    433/1:    word SplitVirtualFunction(const Function* func);
* W032 Unused function
    421:    word FixInvoker(const Function* func, const CodeWarning& log);
  W082 Adjacent arguments have the same type
    106:    void Rename(size_t pos, const string& oldName, const string& newName);
    261:    bool AdjustHorizontally(size_t pos, size_t len, const string& spacing);
    297:    word InsertForward(size_t pos, const string& nspace, const string& forward);
    302:    word InsertNamespaceForward(size_t pos,
    319:    static void ChangeForwards
    366:    void FindFreeItemPos(const Namespace* space, const string& name,
    376:    CxxItemVector FindDeclRange
    505:    void UpdateItemDefnAttrs(const CxxToken* prev,
    511:    word UpdateItemDefnLoc(const CxxToken* prev,
    566:    bool GetSpan(const CxxToken* item, size_t& begin, size_t& end);
    594:    size_t Replace(size_t pos, size_t count, const string& code);
    641:    void UpdatePos(EditorAction action,
* W088 Argument could be const
    506/4:       const CxxToken* item, const CxxToken* next, ItemDefnAttrs& attrs) const;
* W092 Function could be free
    118:    static size_t CommitCount(); // CodeFileSet.cpp
    154:    static void ReportFix(const CodeWarning* log, word rc); // Editor.cpp
    169:    word ChangeCast(const CodeWarning& log); // Editor.cpp
    170:    word ChangeClassToNamespace(const CodeWarning& log); // Editor.cpp
    173:    word ChangeOperator(const CodeWarning& log); // Editor.cpp
    178:    word EraseCast(const CodeWarning& log); // Editor.cpp
    179:    word EraseClass(const CodeWarning& log); // Editor.cpp
    192:    word InsertCopyCtorCall(const CodeWarning& log); // Editor.cpp
    193:    word InsertDataInit(const CodeWarning& log); // Editor.cpp
    195:    word InsertDisplay(const CodeWarning& log); // Editor.cpp
    196:    word InsertEnumName(const CodeWarning& log); // Editor.cpp
    197:    word InsertFallthrough(const CodeWarning& log); // Editor.cpp
    202:    word InsertMemberInit(const CodeWarning& log); // Editor.cpp
    204:    word InsertPODCtor(const CodeWarning& log); // Editor.cpp
    205:    word InsertPureVirtual(const CodeWarning& log); // Editor.cpp
    207:    word MoveDefine(const CodeWarning& log); // Editor.cpp
    208:    word MoveMemberInit(const CodeWarning& log); // Editor.cpp
    212:    word ReplaceHeading(const CodeWarning& log); // Editor.cpp
    213:    word ReplaceName(const CodeWarning& log); // Editor.cpp
    358:    static void QualifyClassItems // Editor.cpp
    417:    word FixInvokers(const CodeWarning& log); // Editor.cpp
    426:    word ChangeFunctionToMember(const Function* func, word offset); // Editor.cpp
    427:    word ChangeInvokerToMember(const Function* func, word offset); // Editor.cpp
    428:    word EraseArgument(const Function* func, word offset); // Editor.cpp
    429:    word EraseDefaultValue(const Function* func, word offset); // Editor.cpp
    430:    word EraseParameter(const Function* func, word offset); // Editor.cpp
    432:    word InsertArgument(const Function* func, word offset); // Editor.cpp
    433:    word SplitVirtualFunction(const Function* func); // Editor.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    147:          type = LibTokenType(i);
* W099 Line contains adjacent spaces
    90:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    91:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    92:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    93:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    94:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    95:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    96:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    97:    OperatorInfo("d",  1, DIR_SET,  ANY_SET,  ERR_SET),   // OpDirectories
    98:    OperatorInfo("f",  1, FILE_SET, ANY_SET,  ERR_SET),   // OpFiles
    111:    OperatorInfo("db", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpDeclaredBy
    114:    OperatorInfo("rb", 1, ITEM_SET, ANY_SET,  ERR_SET),   // OpReferencedBy
* W106 Function does not invoke Debug::ft
    133: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    141: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  W119 Argument passed by value is modified
    488/1: LibExprErr Interpreter::ApplyOperator(bool operand)
    599/1: LibrarySet* Interpreter::Error(LibExprErr err) const
C:/Users/Greg/Documents/rsc/rsc/ct/Interpreter.h
* W092 Function could be free
    74:    static bool IsOperator(const std::string& s); // Library.cpp
  W110 Override of Base.Display not found
    48: class Interpreter : public NodeBase::Base
C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    2291:          fp *= std::pow(10.0, int(num));
    2398:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    3157:          auto def = static_cast< Define* >(item);
* W106 Function does not invoke Debug::ft
    87: static IndentRule ClassifyIndent(string& id)
    805: word Lexer::CheckDepth(size_t n) const
    855: int Lexer::CheckLineMerge(size_t n) const
    1271: size_t Lexer::CurrBegin(size_t pos) const
    1297: size_t Lexer::CurrEnd(size_t pos) const
    2081: const LineInfo* Lexer::GetLineInfo(size_t pos) const
    2090: LineInfo* Lexer::GetLineInfo(size_t pos)
    2099: size_t Lexer::GetLineNum(size_t pos) const
    2123: size_t Lexer::GetLineStart(size_t line) const
    2200: bool Lexer::GetNthLine(size_t n, string& s) const
    2690: bool Lexer::LineHasTrailingCommentAt(size_t n, size_t offset) const
    2772: size_t Lexer::LineSize(size_t pos) const
    2815: size_t Lexer::NextBegin(size_t pos) const
    2930: size_t Lexer::NextPos(size_t pos) const
    3172: size_t Lexer::PrevBegin(size_t pos) const
    3248: void Lexer::SetDepth(int depth1, int depth2, bool merge)
  W119 Argument passed by value is modified
    1271/1: size_t Lexer::CurrBegin(size_t pos) const
    1330/1: size_t Lexer::Find(size_t pos, const string& str) const
    1347/3: size_t Lexer::FindClosing(char lhc, char rhc, size_t pos) const
    1459/2: size_t Lexer::FindFirstOf(const string& targs, size_t pos) const
    1578/1: size_t Lexer::FindLineEnd(size_t pos) const
    1619/1: size_t Lexer::FindNonBlank(size_t pos) const
    1636/1: size_t Lexer::FindWord(size_t pos, const string& id) const
    1982/2: size_t Lexer::GetHexNum(int64_t& num, size_t max)
    2005/1: bool Lexer::GetIncludeFile(size_t pos, string& file, bool& angle) const
    2607/1: size_t Lexer::LineFind(size_t pos, const string& str) const
    2639/1: size_t Lexer::LineFindFirstOf(size_t pos, const std::string& chars) const
    2670/1: size_t Lexer::LineFindNonBlank(size_t pos) const
    2847/1: string Lexer::NextIdentifier(size_t pos) const
    2893/1: size_t Lexer::NextLineIndentation(size_t pos) const
    2908/1: string Lexer::NextOperator(size_t pos) const
    2930/1: size_t Lexer::NextPos(size_t pos) const
    3066/1: bool Lexer::NoCodeFollows(size_t pos) const
    3172/1: size_t Lexer::PrevBegin(size_t pos) const
    3203/1: size_t Lexer::Rfind(size_t pos, const std::string& str) const
    3218/1: size_t Lexer::RfindFirstOf(size_t pos, const std::string& chars) const
    3233/1: size_t Lexer::RfindNonBlank(size_t pos) const
    3304/1: size_t Lexer::SkipCharLiteral(size_t pos) const
    3347/1: size_t Lexer::SkipStrLiteral(size_t pos, bool& fragmented) const
    3380/1: size_t Lexer::SkipTemplateSpec(size_t pos) const
C:/Users/Greg/Documents/rsc/rsc/ct/Lexer.h
* W032 Unused function
    447:    size_t LineFindFirstOf(size_t pos, const std::string& chars) const;
* W042 Member could be private
    159:    bool Advance();
    363:    const LineInfo* GetLineInfo(size_t pos) const;
    413:    bool LineHasTrailingCommentAt(size_t n, size_t offset) const;
    451:    size_t LineRfindFirstOf(size_t pos, const std::string& chars) const;
    527:    NodeBase::word CheckDepth(size_t n) const;
* W043 Member could be protected
    375:    size_t PrevBegin(size_t pos) const;
    387:    LineType PosToType(size_t pos) const;
    391:    bool IsBlankLine(size_t pos) const;
    395:    size_t LineSize(size_t pos) const;
    399:    bool OnSameLine(size_t pos1, size_t pos2) const;
    404:    int CompareCode(size_t pos, const std::string& str) const;
    408:    size_t FindComment(size_t pos) const;
    423:    size_t LineFindNext(size_t pos) const;
    427:    bool IsFirstNonBlank(size_t pos) const;
    431:    bool NoCodeFollows(size_t pos) const;
    437:    size_t LineFind(size_t pos, const std::string& str) const;
    441:    size_t LineRfind(size_t pos, const std::string& str) const;
    455:    size_t LineFindNonBlank(size_t pos) const;
    459:    size_t LineRfindNonBlank(size_t pos) const;
    471:    size_t FindNonBlank(size_t pos) const;
  W050 Data is not private
    563:    std::string code_;
    567:    CodeFile* file_;
* W060 Base class constructor is public
    78:    Lexer();
  W082 Adjacent arguments have the same type
    256:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
    577:    LineType CalcLineType(size_t n, bool& cont, bool& c_comment);
    655:    void SetDepth(int depth1, int depth2, bool merge = true);
C:/Users/Greg/Documents/rsc/rsc/ct/Library.cpp
  W007 Cast down the inheritance hierarchy
    667:             auto f = static_cast< const Function* >(elem);
C:/Users/Greg/Documents/rsc/rsc/ct/Library.h
* W020 Using statement in header
    46: using namespace NodeBase;
* W053 Data could be const
    241:    LibraryVarSet* varSet_;
  W082 Adjacent arguments have the same type
    74:    NodeBase::word Import
    108:    NodeBase::word Assign(CliThread& cli, const std::string& name,
    137:    NodeBase::word Rename(CliThread& cli, const std::string& oldName,
* W090 Function could be const
    80:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    108:    NodeBase::word Assign(CliThread& cli, const std::string& name,
    125:    NodeBase::word Purge(const std::string& name, std::string& expl);
    163:    void Shrink();
* W092 Function could be free
    137:    NodeBase::word Rename(CliThread& cli, const std::string& oldName, // CtIncrement.cpp
* W127 Data could be free
    151:    static NodeBase::fixed_string SubsDir; // CodeDir.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.cpp
* W106 Function does not invoke Debug::ft
    34: bool IsSortedByName(const LibraryItem* item1, const LibraryItem* item2)
    81: bool LibItemSort::operator()
C:/Users/Greg/Documents/rsc/rsc/ct/LibraryItem.h
  W027 Unused class
    78: struct LibItemSort
  W075 Virtual function is public
    45:    virtual const std::string& Name() const;
    49:    virtual void Rename(const std::string& name);
    53:    virtual void GetDecls(CxxNamedSet& items) { }
C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.cpp
* W106 Function does not invoke Debug::ft
    97: LibrarySet* LibrarySet::AffectedBy() const
    104: LibrarySet* LibrarySet::Affecters() const
    111: LibrarySet* LibrarySet::Assign(LibrarySet* that)
    128: LibrarySet* LibrarySet::CommonAffecters() const
    169: LibrarySet* LibrarySet::Create
    177: LibrarySet* LibrarySet::DeclaredBy() const
    184: LibrarySet* LibrarySet::Declarers() const
    191: LibrarySet* LibrarySet::Definitions() const
    198: LibrarySet* LibrarySet::Difference(const LibrarySet* that) const
    205: LibrarySet* LibrarySet::Directories() const
    230: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    237: LibrarySet* LibrarySet::Files() const
    244: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    269: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    288: LibrarySet* LibrarySet::Implements() const
    295: LibrarySet* LibrarySet::Intersection(const LibrarySet* that) const
    302: bool LibrarySet::IsReadOnly() const
    309: bool LibrarySet::IsTemporary() const
    341: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    348: LibrarySet* LibrarySet::NeededBy() const
    355: LibrarySet* LibrarySet::Needers() const
    372: word LibrarySet::NotImplemented(string& expl) const
    384: LibrarySet* LibrarySet::OpError(c_string op) const
    412: LibrarySet* LibrarySet::ReferencedBy() const
    419: LibrarySet* LibrarySet::Referencers() const
    516: LibrarySet* LibrarySet::Union(const LibrarySet* that) const
    523: LibrarySet* LibrarySet::UsedBy(bool self) const
    530: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/Greg/Documents/rsc/rsc/ct/LibrarySet.h
* W065 Base class virtual destructor is not public
    196:    virtual ~LibrarySet();
  W075 Virtual function is public
    80:    virtual LibSetType GetType() const;
    86:    virtual NodeBase::word Check(NodeBase::CliThread& cli,
    93:    virtual NodeBase::word Count(std::string& result) const;
    99:    virtual NodeBase::word Countlines(std::string& result) const;
    105:    virtual NodeBase::word Fix(NodeBase::CliThread& cli,
    111:    virtual NodeBase::word Format(std::string& expl) const;
    119:    virtual NodeBase::word Parse
    126:    virtual NodeBase::word Scan(std::ostream& stream,
    133:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    137:    virtual BuildOrder SortInBuildOrder() const;
    142:    virtual LibrarySet* Assign(LibrarySet* that);
    143:    virtual LibrarySet* Intersection(const LibrarySet* that) const;
    144:    virtual LibrarySet* Difference(const LibrarySet* that) const;
    145:    virtual LibrarySet* Union(const LibrarySet* that) const;
    146:    virtual LibrarySet* Directories() const;
    147:    virtual LibrarySet* Files() const;
    148:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    149:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    150:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    151:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    152:    virtual LibrarySet* Implements() const;
    153:    virtual LibrarySet* UsedBy(bool self) const;
    154:    virtual LibrarySet* Users(bool self) const;
    155:    virtual LibrarySet* AffectedBy() const;
    156:    virtual LibrarySet* Affecters() const;
    157:    virtual LibrarySet* CommonAffecters() const;
    158:    virtual LibrarySet* NeededBy() const;
    159:    virtual LibrarySet* Needers() const;
    160:    virtual LibrarySet* DeclaredBy() const;
    161:    virtual LibrarySet* Declarers() const;
    162:    virtual LibrarySet* Definitions() const;
    163:    virtual LibrarySet* ReferencedBy() const;
    164:    virtual LibrarySet* Referencers() const;
  W120 Function returns non-const reference or pointer to member data
    76:    LibItemSet& Items() { return items_; }
C:/Users/Greg/Documents/rsc/rsc/ct/LibraryTypes.h
* W053 Data could be const
    64:    size_t level;    // the file's level in the build
* W054 Data could be const pointer
    63:    CodeFile* file;  // the file
C:/Users/Greg/Documents/rsc/rsc/ct/LibraryVarSet.h
* W042 Member could be private
    53:    void to_str(stringVector& strings, bool verbose) const override;
  W075 Virtual function is public
    53:    void to_str(stringVector& strings, bool verbose) const override;
C:/Users/Greg/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    482:    auto op = static_cast< Operation* >(token.get());
    520:    auto op = static_cast< Operation* >(call.get());
    824:    auto brace = static_cast< BraceInit* >(token.get());
    899:    auto cast = static_cast< Operation* >(token.get());
    938:    auto c = static_cast< Catch* >(statement.get());
    1069:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    1070:    static_cast< ClassData* >(data.get())->SetWidth(width);
    1232:    auto cond = static_cast< Operation* >(token.get());
    1523:    auto cast = static_cast< Operation* >(token.get());
    1690:    auto op = static_cast< Operation* >(token.get());
    1716:    auto delOp = static_cast< Operation* >(token.get());
    1744:    auto d = static_cast< Do* >(statement.get());
    1952:    auto f = static_cast< For* >(statement.get());
    2060:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    2112:          curr = static_cast< FuncData* >(data.get());
    2401:             static_cast< If* >(first)->SetElseIf();
    2407:    auto i = static_cast< If* >(statement.get());
    2550:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2594:    auto newOp = static_cast< Operation* >(token.get());
    2613:    static_cast< Operation* >(token.get())->SetNew();
    2669:    auto op = static_cast< Operation* >(token.get());
    3083:    static_cast< Return* >(statement.get())->AddExpr(expr);
    3130:    auto op = static_cast< Operation* >(token.get());
    3379:    auto op = static_cast< Operation* >(token.get());
    3405:    auto s = static_cast< Switch* >(statement.get());
    3497:    auto op = static_cast< Operation* >(token.get());
    3531:    auto t = static_cast< Try* >(statement.get());
    3593:    auto op = static_cast< Operation* >(token.get());
    3889:    auto w = static_cast< While* >(statement.get());
    4248:          auto op = static_cast< Operation* >(token)->Op();
  W008 Cast removes const qualification
    4536:       func->SetTemplate(const_cast< Function* >(tmplt));
  W082 Adjacent arguments have the same type
    76: static bool SetCompoundType
* W106 Function does not invoke Debug::ft
    326: size_t Parser::CurrPos() const
  W119 Argument passed by value is modified
    1145/2: bool Parser::GetCompoundType(QualNamePtr& name, Cxx::Type type)
    2484/1: size_t Parser::GetLineNum(size_t pos) const
    4301/2: void Parser::Log(Warning warning, size_t pos) const
C:/Users/Greg/Documents/rsc/rsc/ct/Parser.h
  W082 Adjacent arguments have the same type
    472:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
* W088 Argument could be const
    268/1:    bool GetStatements(BlockPtr& block, bool braced);
    366/1:    bool GetFuncSpecial(FunctionPtr& func);
    379/1:    bool GetCtorInit(FunctionPtr& func);
    400/1:    bool GetArguments(FunctionPtr& func);
    427/1:    bool GetCompoundType(QualNamePtr& name, Cxx::Type type);
    495/1:    bool GetNum(ExprPtr& expr);
    496/1:    bool GetChar(ExprPtr& expr, Cxx::Encoding code, size_t pos);
    497/1:    bool GetStr(ExprPtr& expr, Cxx::Encoding code, size_t pos);
    507/1:    bool GetCast(ExprPtr& expr);
    508/1:    bool GetPrecedence(ExprPtr& expr);
    515/1:    bool HandleTilde(ExprPtr& expr, size_t pos);
    519/1:    bool GetSubscript(ExprPtr& expr, size_t pos);
    528/1:    bool GetAlignOf(ExprPtr& expr, size_t pos);
    529/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op, size_t pos);
    530/1:    bool GetConditional(ExprPtr& expr, size_t pos);
    531/1:    bool GetDefined(ExprPtr& expr, size_t pos);
    532/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op, size_t pos);
    533/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op, size_t pos);
    534/1:    bool GetNoExcept(ExprPtr& expr, size_t pos);
    535/1:    bool GetSizeOf(ExprPtr& expr, size_t pos);
    536/1:    bool GetThrow(ExprPtr& expr, size_t pos);
    537/1:    bool GetTypeId(ExprPtr& expr, size_t pos);
* W092 Function could be free
    170:    static void ResetStats(); // CtIncrement.cpp
    174:    static void DisplayStats(std::ostream& stream); // CtIncrement.cpp
    586:    static bool Backup(size_t cause); // Parser.cpp
    619:    static std::string Indent(); // Parser.cpp
C:/Users/Greg/Documents/rsc/rsc/ct/SetOperations.h
  W082 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion
C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.cpp
  W006 reinterpret_cast
    214:    auto em = reinterpret_cast< EM_Message* >(buff->PayloadPtr());
    517:    auto& dm = reinterpret_cast< const DM_Message& >(message);
    518:    auto tokens = reinterpret_cast< const Token* >(&dm.tokens);
    644:    auto& em = reinterpret_cast< const EM_Message& >(message);
    1297:       auto& rm = reinterpret_cast< const RM_Message& >(message);
    2086:    auto bm = reinterpret_cast< DipMessage* >(buff->PayloadPtr());
    2158:    auto im = reinterpret_cast< IM_Message* >(buff->PayloadPtr());
    2299:    auto dm = reinterpret_cast< DM_Message* >(buff->PayloadPtr());
    2303:    message.get_tokens(reinterpret_cast< Token* >(&dm->tokens), count);
* W106 Function does not invoke Debug::ft
    435: BaseBot::StartupResult BaseBot::initialise(const StartupParameters& parameters)
    442: BaseBot* BaseBot::instance()
* W117 Line can merge with the next line and be under the length limit
    1711:          (press->message == contents))
C:/Users/Greg/Documents/rsc/rsc/dip/BaseBot.h
* W020 Using statement in header
    40: using namespace NodeBase;
* W030 Unused enumerator
    62:       FIRST_BOT_SPECIFIC_ERROR
  W075 Virtual function is public
    91:    virtual bool process_command_line_parameter(char token, std::string& value);
    97:    virtual std::string report_command_line_parameters();
  W082 Adjacent arguments have the same type
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    502:    virtual void report_failed_press
* W090 Function could be const
    206:    virtual void process_ccd_message
    212:    virtual void process_drw_message(const TokenMessage& message);
    243:    virtual void process_out_message(const TokenMessage& message);
    251:    virtual void process_smr_message(const TokenMessage& message);
    268:    virtual void process_adm_message(const TokenMessage& message);
    273:    virtual void process_not_ccd_message(const TokenMessage& message,
    467:    virtual void process_hlo_message(const TokenMessage& message);
    472:    virtual void process_map_message(const TokenMessage& message);
    476:    virtual void process_mdf_message(const TokenMessage& message);
    484:    virtual void process_sco_message(const TokenMessage& message);
    488:    virtual void process_now_message(const TokenMessage& message);
    492:    virtual void process_slo_message(const TokenMessage& message);
* W092 Function could be free
    179:    void cancel_event(BotEvent event); // BaseBot.cpp
    524:    static void report_ccd(const Token& power, bool disorder); // BaseBot.cpp
    544:    static void report_out(const Token& power); // BaseBot.cpp
    556:    void report_exit(c_string reason); // BaseBot.cpp
    716:    static bool send_buff(DipIpBuffer& buff); // BaseBot.cpp
C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.cpp
  W006 reinterpret_cast
    185:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
    214:    auto message = reinterpret_cast< const DipMessage* >(ipb->HeaderPtr());
  W007 Cast down the inheritance hierarchy
    201:    DipIpBufferPtr ipb(static_cast< DipIpBuffer* >(msg));
C:/Users/Greg/Documents/rsc/rsc/dip/BotThread.h
* W020 Using statement in header
    38: using namespace NodeBase;
* W053 Data could be const
    112:       BotEvent event;       // event
* W055 Data need not be mutable
    113:       mutable secs_t secs;  // delay
C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.cpp
  W006 reinterpret_cast
    100:       auto message = reinterpret_cast< const DipMessage* >(buff_->HeaderPtr());
    129:    return reinterpret_cast< DipHeader* >(buff_->HeaderPtr());
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/dip/BotTrace.h
* W020 Using statement in header
    35: using namespace NodeBase;
* W032 Unused function
    72:    DipHeader* Header() const;
C:/Users/Greg/Documents/rsc/rsc/dip/BotTracer.h
* W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/dip/ConvoySubversion.cpp
* W106 Function does not invoke Debug::ft
    29: void ConvoySubversion::clear()  // <b>
    37: void ConvoySubversion::decrement()
C:/Users/Greg/Documents/rsc/rsc/dip/DipModule.h
* W020 Using statement in header
    29: using namespace NodeBase;
  W027 Unused class
    37: class DipModule : public Module
* W035 No referent for friend declaration
    39:    friend class Singleton< DipModule >;
C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.cpp
  W005 Functional cast
    415: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
  W006 reinterpret_cast
    62:       reinterpret_cast< const IM_Message* >(this)->Display(stream);
    65:       reinterpret_cast< const RM_Message* >(this)->Display(stream);
    68:       reinterpret_cast< const DM_Message* >(this)->Display(stream);
    71:       reinterpret_cast< const FM_Message* >(this)->Display(stream);
    74:       reinterpret_cast< const EM_Message* >(this)->Display(stream);
    77:       reinterpret_cast< const BM_Message* >(this)->Display(stream);
    198:       auto header = reinterpret_cast< const DipHeader* >(source);
    208:       auto header = reinterpret_cast< const DipHeader* >(payload);
    227:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    233:       auto im = reinterpret_cast< IM_Message* >(src);
    241:       auto dm = reinterpret_cast< DM_Message* >(src);
    252:       auto em = reinterpret_cast< EM_Message* >(src);
    279:    auto msg = reinterpret_cast< DipHeader* >(buff.PayloadPtr());
    288:       auto rm = reinterpret_cast< RM_Message* >(msg);
    299:       auto dm = reinterpret_cast< DM_Message* >(msg);
    310:       auto em = reinterpret_cast< EM_Message* >(msg);
    331:    auto header = reinterpret_cast< const DipHeader* >(payload);
    356:    auto msg = reinterpret_cast< BM_Message* >(buff->PayloadPtr());
  W007 Cast down the inheritance hierarchy
    274:    auto dipbuff = static_cast< DipIpBuffer* >(&buff);
    327:    DipIpBufferPtr dipbuff(static_cast< DipIpBuffer* >(buff.release()));
  W009 Pointer arithmetic
    211:       dest = payload + received;
* W106 Function does not invoke Debug::ft
    415: ipport_t BotTcpService::Port() const { return ipport_t(port_); }
C:/Users/Greg/Documents/rsc/rsc/dip/DipProtocol.h
* W020 Using statement in header
    39: using namespace NodeBase;
    40: using namespace NetworkBase;
* W028 Unused data
    162: constexpr ProtocolError IM_TIMEOUT = 0x01;
    163: constexpr ProtocolError IM_EXPECTED = 0x02;
    164: constexpr ProtocolError IM_WRONG_ENDIAN = 0x03;
    165: constexpr ProtocolError IM_WRONG_MAGIC_NUMBER = 0x04;
    166: constexpr ProtocolError IM_INCOMPATIBLE_VERSION = 0x05;
    167: constexpr ProtocolError IM_REPEATED = 0x06;
    168: constexpr ProtocolError IM_FROM_SERVER = 0x07;
    169: constexpr ProtocolError INVALID_MESSAGE_TYPE = 0x08;
    170: constexpr ProtocolError MESSAGE_TOO_SHORT = 0x09;
    171: constexpr ProtocolError DM_BEFORE_RM = 0x0A;
    172: constexpr ProtocolError RM_EXPECTED = 0x0B;
    173: constexpr ProtocolError RM_REPEATED = 0x0C;
    174: constexpr ProtocolError RM_FROM_CLIENT = 0x0D;
    175: constexpr ProtocolError DM_INVALID_TOKEN = 0x0E;
    197: constexpr BotEvent FIRST_BOT_BM_EVENT = 2;  // start of subclass events
* W053 Data could be const
    144:    DipHeader header;  // no parameters (length = 0)
    202:    byte_t first_payload_byte;  // for creating a pointer to the first byte
C:/Users/Greg/Documents/rsc/rsc/dip/DipTypes.h
* W020 Using statement in header
    26: using namespace NetworkBase;
    27: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.cpp
* W106 Function does not invoke Debug::ft
    282: bool MapAndUnits::can_move_to(const UnitOrder& unit, const Location& dest) const
    300: bool MapAndUnits::can_move_to_province
    562: TokenMessage MapAndUnits::encode_location(const Location& location) const
    838: TokenMessage MapAndUnits::encode_unit(const UnitOrder& unit) const
    1145: const LocationSet* MapAndUnits::get_neighbours(const Location& location) const
    1384: MapAndUnits* MapAndUnits::instance()
    2451: Token MapAndUnits::province_token(ProvinceId province) const
    2570: bool MapAndUnits::set_move_by_single_step_convoy_order
C:/Users/Greg/Documents/rsc/rsc/dip/MapAndUnits.h
* W020 Using statement in header
    35: using namespace NodeBase;
* W048 Data is write-only
    121:    bool game_started;                // set when the game has begun
    147:    word our_number_of_disbands;    // disbands required (negative for builds)
  W082 Adjacent arguments have the same type
    190:    bool set_move_by_convoy_order(ProvinceId unit,
    398:    bool has_route_to_province(const UnitOrder& unit, ProvinceId province,
* W092 Function could be free
    162:    static MapAndUnits* create_clone(); // MapAndUnits.cpp
    166:    static void delete_clone(MapAndUnits*& clone); // MapAndUnits.cpp
    259:    std::string display_retreat_result(const UnitOrder& unit) const; // BaseBot.cpp
C:/Users/Greg/Documents/rsc/rsc/dip/StartupParameters.h
* W020 Using statement in header
    21: using namespace NetworkBase;
C:/Users/Greg/Documents/rsc/rsc/dip/Token.cpp
* W106 Function does not invoke Debug::ft
    32: Token::Token(const category_t cat, const subtoken_t sub)
    40: Token& Token::operator=(const Token& that)
    48: int Token::get_number() const
    57: bool Token::is_number() const
    64: bool Token::is_power() const
    71: bool Token::is_province() const
    118: Token::SeasonType Token::order_season() const
    129: PowerId Token::power_id() const
    137: ProvinceId Token::province_id() const
    260: Token power_token(PowerId power)
    273: Token province_token(ProvinceId province)
  W119 Argument passed by value is modified
    147/1: bool Token::set_number(int number)
C:/Users/Greg/Documents/rsc/rsc/dip/Token.h
* W020 Using statement in header
    27: using namespace NodeBase;
* W028 Unused data
    208: constexpr category_t CATEGORY_NUMBER_MIN = 0x00;
    209: constexpr category_t CATEGORY_NUMBER_MAX = 0x3F;
    210: constexpr category_t CATEGORY_BRACKET = 0x40;
    213: constexpr category_t CATEGORY_ORDER = 0x43;
    215: constexpr category_t CATEGORY_RESULT = 0x45;
    218: constexpr category_t CATEGORY_COMMAND = 0x48;
    219: constexpr category_t CATEGORY_PARAMETER = 0x49;
    220: constexpr category_t CATEGORY_PRESS = 0x4A;
* W042 Member could be private
    95:    bool is_number() const;
C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.cpp
* W106 Function does not invoke Debug::ft
    145: Token TokenMessage::at(size_t index) const
    152: void TokenMessage::clear()
    279: Token TokenMessage::front() const
    338: Token TokenMessage::operator[](size_t index) const
C:/Users/Greg/Documents/rsc/rsc/dip/TokenMessage.h
* W032 Unused function
    48:    explicit TokenMessage(const Token* stream);
    141:    void set_as_ascii(const std::string& text);
* W042 Member could be private
    123:    size_t set_from(const Token* stream);
    128:    size_t set_from(const Token* stream, size_t length);
C:/Users/Greg/Documents/rsc/rsc/dip/TokenTextMap.cpp
* W106 Function does not invoke Debug::ft
    328: TokenTextMap* TokenTextMap::instance()
C:/Users/Greg/Documents/rsc/rsc/dip/WinterOrders.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    37: size_t WinterOrders::get_number_of_results() const
C:/Users/Greg/Documents/rsc/rsc/dip/WinterOrders.h
* W032 Unused function
    52:    size_t get_number_of_results() const;
C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    58:    auto fake = reinterpret_cast< const Circuit* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/mb/Circuit.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
* W053 Data could be const
    93:    RegCell port_;
  W075 Virtual function is public
    72:    virtual std::string Name() const = 0;
    76:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/Greg/Documents/rsc/rsc/mb/MbModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/mb/MbModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/mb/MbPools.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/mb/MbPools.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/mb/MediaEndpt.h
* W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
* W032 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    92:    explicit MediaEndpt(MediaPsm& psm);
* W042 Member could be private
    104:    virtual void EndOfTransaction();
  W075 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
* W077 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.cpp
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/mb/MediaFailureEvent.h
* W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
  W027 Unused class
    42: class MediaFailureEvent : public Event
* W032 Unused function
    48:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    56:    MediaEndpt* Mep() const { return mep_; }
C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/mb/MediaParameter.h
* W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    529:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    228:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    234: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/Greg/Documents/rsc/rsc/mb/MediaPsm.h
* W020 Using statement in header
    37: using namespace NodeBase;
    38: using namespace SessionBase;
* W032 Unused function
    120:    MediaEndpt* Mep() const { return mep_; }
* W042 Member could be private
    132:    Tone::Id GetOgTone() const { return ogTone_; }
    170:    void SetOgPort(Switch::PortId ogport);
    193:    void PrepareOgMsgq() override;
    197:    Event* ReceiveMsg(Message& msg) override;
  W075 Virtual function is public
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
* W077 Virtual function has no overrides
    68:    virtual void SetOgPsm(MediaPsm* ogPsm);
    73:    virtual void SetOgTone(Tone::Id ogTone);
    78:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    86:       auto mpsm = static_cast< MediaPsm* >(psm);
    108:       auto mpsm = static_cast< MediaPsm* >(psm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/mb/MediaSsm.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
* W032 Unused function
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W075 Virtual function is public
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
* W077 Virtual function has no overrides
    48:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/Greg/Documents/rsc/rsc/mb/Switch.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    85: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/Greg/Documents/rsc/rsc/mb/Switch.h
* W020 Using statement in header
    37: using namespace NodeBase;
* W042 Member could be private
    74:    static bool IsValidPort(PortId pid)
* W092 Function could be free
    74:    static bool IsValidPort(PortId pid) // Circuit.cpp
C:/Users/Greg/Documents/rsc/rsc/mb/ToneRegistry.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    77: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/Greg/Documents/rsc/rsc/mb/ToneRegistry.h
* W020 Using statement in header
    31: using namespace NodeBase;
* W092 Function could be free
    54:    static Switch::PortId ToneToPort(Tone::Id tid); // MediaPsm.cpp
C:/Users/Greg/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    61:    auto fake = reinterpret_cast< const Tone* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    73:    Id Tid() const { return Id(tid_.GetId()); }
* W020 Using statement in header
    31: using namespace NodeBase;
* W032 Unused function
    73:    Id Tid() const { return Id(tid_.GetId()); }
  W037 Member hides inherited name
    77:    static ptrdiff_t CellDiff();
C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.cpp
  W006 reinterpret_cast
    112:    auto fake = reinterpret_cast< const Alarm* >(&local);
* W106 Function does not invoke Debug::ft
    197: AlarmStatus Alarm::Status() const
  W110 Override of Base.Display not found
    43: struct AlarmDynamic : public Permanent
C:/Users/Greg/Documents/rsc/rsc/nb/Alarm.h
* W042 Member could be private
    59:    static const size_t MaxNameSize;
    63:    static const size_t MaxExplSize;
* W053 Data could be const
    136:    RegCell aid_;
  W082 Adjacent arguments have the same type
    71:    Alarm(c_string name, c_string expl, secs_t delay);
* W090 Function could be const
    120:    void SetStatus(AlarmStatus status);
* W127 Data could be free
    59:    static const size_t MaxNameSize; // Alarm.cpp
    63:    static const size_t MaxExplSize; // Alarm.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
    108:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
    108:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    43:    return (void*) ((const_ptr_t) ptr2 - diff);
    50:    return (void*) ((const_ptr_t) ptr1 + diff);
  W119 Argument passed by value is modified
    30/1: size_t find_first_one(uword n)
    55/1: size_t log2(size_t n, bool up)
    122/1: size_t round_to_2_exp_n(size_t n, size_t e, bool up)
C:/Users/Greg/Documents/rsc/rsc/nb/Algorithms.h
  W082 Adjacent arguments have the same type
    51:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    55:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
    63:    size_t round_to_2_exp_n(size_t n, size_t e, bool up);
C:/Users/Greg/Documents/rsc/rsc/nb/Array.h
* W032 Unused function
    144:    const T& Back() const
    152:    T& Back()
    160:    const T& At(size_t index) const
    168:    T& At(size_t index)
    192:    const T* Data() const
* W099 Line contains adjacent spaces
    208:    inline static fn_name Array_ctor()    { return "Array.ctor"; }
    209:    inline static fn_name Array_dtor()    { return "Array.dtor"; }
    210:    inline static fn_name Array_Init()    { return "Array.Init"; }
C:/Users/Greg/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    95:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    158:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    67:    objects.push_back(const_cast< Base* >(this));
* W106 Function does not invoke Debug::ft
    90: void Base::Nullify(size_t n)
    154: Base::vptr_t Base::Vptr() const
  W119 Argument passed by value is modified
    90/1: void Base::Nullify(size_t n)
C:/Users/Greg/Documents/rsc/rsc/nb/Base.h
* W043 Member could be protected
    75:    virtual void Display(std::ostream& stream,
    98:    void LogSubtended(std::ostream& stream,
  W075 Virtual function is public
    75:    virtual void Display(std::ostream& stream,
    93:    virtual void GetSubtended(std::vector< Base* >& objects) const;
    104:    virtual void ClaimBlocks();
    122:    virtual void Cleanup() { }
    129:    virtual void Startup(RestartLevel level) { }
    137:    virtual void Shutdown(RestartLevel level) { }
    141:    virtual MemoryType MemType() const { return MemPermanent; }
C:/Users/Greg/Documents/rsc/rsc/nb/CallbackRequest.h
  W075 Virtual function is public
    44:    virtual void Callback() { }
* W090 Function could be const
    44:    virtual void Callback() { }
C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.cpp
* W106 Function does not invoke Debug::ft
    88: void CfgBitParm::Explain(string& expl) const
C:/Users/Greg/Documents/rsc/rsc/nb/CfgBitParm.h
* W042 Member could be private
    52:    virtual bool CurrValue() const = 0;
    56:    virtual bool NextValue() const = 0;
    70:    bool SetNext(c_string input) override;
  W082 Adjacent arguments have the same type
    48:    CfgBitParm(c_string key, c_string def, c_string expl);
  W141 Function could be moved to a subclass
    56:    virtual bool NextValue() const = 0; // CfgBoolParm
C:/Users/Greg/Documents/rsc/rsc/nb/CfgBoolParm.h
* W042 Member could be private
    68:    bool SetNextValue(bool value) override;
* W060 Base class constructor is public
    39:    CfgBoolParm(c_string key, c_string def, c_string expl);
  W075 Virtual function is public
    47:    bool CurrValue() const override { return curr_; }
  W082 Adjacent arguments have the same type
    39:    CfgBoolParm(c_string key, c_string def, c_string expl);
C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.cpp
* W106 Function does not invoke Debug::ft
    55: bool CfgFlagParm::CurrValue() const
    74: bool CfgFlagParm::NextValue() const
C:/Users/Greg/Documents/rsc/rsc/nb/CfgFlagParm.h
* W042 Member could be private
    48:    bool CurrValue() const override;
    69:    bool SetNextValue(bool value) override;
  W075 Virtual function is public
    48:    bool CurrValue() const override;
  W082 Adjacent arguments have the same type
    39:    CfgFlagParm(c_string key, c_string def,
C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.cpp
* W106 Function does not invoke Debug::ft
    68: void CfgIntParm::Explain(string& expl) const
C:/Users/Greg/Documents/rsc/rsc/nb/CfgIntParm.h
* W042 Member could be private
    84:    bool SetNext(c_string input) override;
* W053 Data could be const
    96:    word min_;
    100:    word max_;
* W060 Base class constructor is public
    39:    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
  W082 Adjacent arguments have the same type
    39:    CfgIntParm(c_string key, c_string def, word min, word max, c_string expl);
C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    135:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/CfgParm.h
* W042 Member could be private
    68:    c_string Key() const;
    100:    virtual std::string GetCurr() const = 0;
* W053 Data could be const
    158:    Q1Link link_;
  W075 Virtual function is public
    72:    virtual void Explain(std::string& expl) const { expl = expl_; }
* W077 Virtual function has no overrides
    114:    virtual std::string GetInput() const;
  W082 Adjacent arguments have the same type
    94:    CfgParm(c_string key, c_string def, c_string expl);
C:/Users/Greg/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
* W106 Function does not invoke Debug::ft
    349: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/Greg/Documents/rsc/rsc/nb/CfgParmRegistry.h
* W042 Member could be private
    60:    CfgTuple* FindTuple(const std::string& key) const;
C:/Users/Greg/Documents/rsc/rsc/nb/CfgStrParm.cpp
* W106 Function does not invoke Debug::ft
    60: void CfgStrParm::Explain(string& expl) const
C:/Users/Greg/Documents/rsc/rsc/nb/CfgStrParm.h
* W032 Unused function
    61:    c_string NextValue() const { return next_.c_str(); }
* W060 Base class constructor is public
    40:    CfgStrParm(c_string key, c_string def, c_string expl);
  W082 Adjacent arguments have the same type
    40:    CfgStrParm(c_string key, c_string def, c_string expl);
C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/CfgTuple.h
* W053 Data could be const
    122:    Q1Link link_;
* W092 Function could be free
    92:    static const std::string& ValidValueChars(); // CfgParmRegistry.cpp
    97:    static const std::string& ValidBlankChars(); // CfgParmRegistry.cpp
* W127 Data could be free
    60:    static const char CommentChar; // CfgParmRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CinThread.cpp
* W106 Function does not invoke Debug::ft
    65: void CinThread::ClearClient(const Thread* client)
  W107 Function does not invoke Debug::ft as first statement
    103:       Debug::ft(CinThread_Enter);
C:/Users/Greg/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    227:    return (Object*) addr;
  W006 reinterpret_cast
    93:    auto fake = reinterpret_cast< const Class* >(&local);
  W110 Override of Base.Display not found
    48: struct ClassDynamic : public Permanent
C:/Users/Greg/Documents/rsc/rsc/nb/Class.h
* W032 Unused function
    71:    virtual void Initialize();
    80:    virtual Object* Create();
    84:    virtual Object* GetQuasiSingleton();
    88:    virtual void FreeQuasiSingleton(Object* obj);
    143:    bool SetVptr(const Object& obj);
    150:    bool SetTemplate(Object& obj);
    158:    bool SetQuasiSingleton(Object& obj);
* W042 Member could be private
    75:    virtual MemoryType ObjType() const = 0;
    137:    virtual Object* New(size_t size);
  W075 Virtual function is public
    71:    virtual void Initialize();
    75:    virtual MemoryType ObjType() const = 0;
    80:    virtual Object* Create();
    84:    virtual Object* GetQuasiSingleton();
    88:    virtual void FreeQuasiSingleton(Object* obj);
* W077 Virtual function has no overrides
    71:    virtual void Initialize();
    75:    virtual MemoryType ObjType() const = 0;
    80:    virtual Object* Create();
    84:    virtual Object* GetQuasiSingleton();
    88:    virtual void FreeQuasiSingleton(Object* obj);
* W090 Function could be const
    137:    virtual Object* New(size_t size);
C:/Users/Greg/Documents/rsc/rsc/nb/ClassRegistry.cpp
* W106 Function does not invoke Debug::ft
    89: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/Greg/Documents/rsc/rsc/nb/CliAppData.h
* W065 Base class virtual destructor is not public
    82:    virtual ~CliAppData();
  W075 Virtual function is public
    63:    virtual void EventOccurred(Event event);
C:/Users/Greg/Documents/rsc/rsc/nb/CliBoolParm.h
* W127 Data could be free
    60:    static fixed_string AnyBoolParm; // CliBoolParm.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.cpp
* W053 Data could be const
    61:    istreamPtr file_;
* W106 Function does not invoke Debug::ft
    596: bool CliBuffer::ReadingFromFile() const
  W119 Argument passed by value is modified
    192/3:    (const CliThread& cli, const string& expl, std::streamsize p)
C:/Users/Greg/Documents/rsc/rsc/nb/CliBuffer.h
* W042 Member could be private
    53:    static const char EscapeChar;
    58:    static const char StringChar;
    62:    static const char BreakChar;
    66:    static const char CommentChar;
    70:    static const char OptSkipChar;
    78:    static const char SymbolChar;
    130:    bool ReadingFromFile() const;
* W127 Data could be free
    53:    static const char EscapeChar; // CliBuffer.cpp
    58:    static const char StringChar; // CliBuffer.cpp
    62:    static const char BreakChar; // CliBuffer.cpp
    66:    static const char CommentChar; // CliBuffer.cpp
    70:    static const char OptSkipChar; // CliBuffer.cpp
    78:    static const char SymbolChar; // CliBuffer.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CliCharParm.h
* W060 Base class constructor is public
    40:    CliCharParm(c_string help, c_string chars,
  W082 Adjacent arguments have the same type
    40:    CliCharParm(c_string help, c_string chars,
* W127 Data could be free
    66:    static const char CharSeparator; // CliCharParm.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CliCommand.h
* W042 Member could be private
    46:    static const char CommandSeparator;
* W043 Member could be protected
    51:    static fixed_string UnexpectedIndex;
  W075 Virtual function is public
    60:    virtual word ExplainCommand(std::ostream& stream, bool verbose) const;
    93:    Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const override;
  W082 Adjacent arguments have the same type
    103:    CliCommand(c_string comm, c_string help, uint32_t size = 32);
* W127 Data could be free
    46:    static const char CommandSeparator; // CliThread.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    73:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    173:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    73:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    173:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/Greg/Documents/rsc/rsc/nb/CliCommandSet.h
* W043 Member could be protected
    44:    bool BindCommand(CliCommand& comm);
  W082 Adjacent arguments have the same type
    59:    CliCommandSet(c_string comm, c_string help, uint32_t size = 32);
C:/Users/Greg/Documents/rsc/rsc/nb/CliCookie.cpp
* W106 Function does not invoke Debug::ft
    118: uint32_t CliCookie::Index(uint32_t depth) const
C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    102:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/CliIncrement.h
* W053 Data could be const
    110:    RegCell iid_;
  W075 Virtual function is public
    75:    virtual void Enter();
    80:    virtual void Exit();
* W077 Virtual function has no overrides
    80:    virtual void Exit();
  W082 Adjacent arguments have the same type
    102:    CliIncrement(c_string name, c_string help, uint32_t size = 32);
C:/Users/Greg/Documents/rsc/rsc/nb/CliIntParm.h
* W042 Member could be private
    39:    static fixed_string AnyIntParm;
* W053 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
* W060 Base class constructor is public
    49:    CliIntParm(c_string help, word min, word max,
  W082 Adjacent arguments have the same type
    49:    CliIntParm(c_string help, word min, word max,
* W127 Data could be free
    39:    static fixed_string AnyIntParm; // CliIntParm.cpp
    75:    static const char RangeSeparator; // CliIntParm.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    113:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/CliParm.h
* W043 Member could be protected
    131:    static fixed_string AnyStringParm;
    166:    bool GetBoolParm(bool& b, CliThread& cli) const;
    176:    bool GetCharParm(char& c, CliThread& cli) const;
    186:    bool GetPtrParm(void*& p, CliThread& cli) const;
    212:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    234:    bool GetFileName(std::string& s, CliThread& cli) const;
    246:    bool GetIdentifier(std::string& s, CliThread& cli,
    261:    bool IsOptional() const { return opt_; }
  W075 Virtual function is public
    143:    virtual CliParm* AccessParm(CliCookie& cookie, uint32_t depth) const;
    151:    virtual void Explain(std::ostream& stream, col_t indent) const;
    161:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    171:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    181:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    191:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    219:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    229:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    239:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    252:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W082 Adjacent arguments have the same type
    246:    bool GetIdentifier(std::string& s, CliThread& cli,
    252:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
C:/Users/Greg/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    91:          p = (void*) n;
C:/Users/Greg/Documents/rsc/rsc/nb/CliStack.h
* W042 Member could be private
    68:    const CliCommand* FindCommand
* W117 Line can merge with the next line and be under the length limit
    68:    const CliCommand* FindCommand
C:/Users/Greg/Documents/rsc/rsc/nb/CliText.cpp
  W119 Argument passed by value is modified
    39/2: CliText::CliText(c_string help, c_string text, bool opt, uint32_t size) :
C:/Users/Greg/Documents/rsc/rsc/nb/CliText.h
* W042 Member could be private
    61:    c_string HelpText() const;
* W043 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
* W060 Base class constructor is public
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W075 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W082 Adjacent arguments have the same type
    49:    CliText(c_string help, c_string text, bool opt = false, uint32_t size = 32);
  W120 Function returns non-const reference or pointer to member data
    82:    Registry< CliParm >& Parms() { return parms_; }
C:/Users/Greg/Documents/rsc/rsc/nb/CliTextParm.cpp
  W119 Argument passed by value is modified
    142/2: void CliTextParm::Explain(ostream& stream, col_t indent) const
C:/Users/Greg/Documents/rsc/rsc/nb/CliTextParm.h
* W060 Base class constructor is public
    49:    explicit CliTextParm(c_string help, bool opt = false,
C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.cpp
  W119 Argument passed by value is modified
    753/2:    (const string& expl, size_t begin, size_t end, col_t indent) const
C:/Users/Greg/Documents/rsc/rsc/nb/CliThread.h
* W032 Unused function
    142:    word Result() const { return result_; }
  W050 Data is not private
    211:    std::unique_ptr< CliBuffer > ibuf;
    215:    ostringstreamPtr obuf;
  W082 Adjacent arguments have the same type
    99:    char CharPrompt(const std::string& prompt,
    106:    word IntPrompt(const std::string& prompt, word min, word max);
    251:    void Report1
  W120 Function returns non-const reference or pointer to member data
    190:    CliCookie& Cookie() { return cookie_; }
* W127 Data could be free
    277:    static const char CliPrompt; // CliThread.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    87:       auto req = static_cast< StreamRequest* >(msg);
C:/Users/Greg/Documents/rsc/rsc/nb/CoutThread.h
* W092 Function could be free
    48:    static void Spool(c_string s, bool eol = false); // CoutThread.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.cpp
  W006 reinterpret_cast
    74:    auto fake = reinterpret_cast< const Daemon* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/Daemon.h
* W042 Member could be private
    97:    id_t Did() const { return did_.GetId(); }
* W053 Data could be const
    179:    RegCell did_;
    183:    size_t size_;
* W077 Virtual function has no overrides
    148:    virtual void Recover() { }
C:/Users/Greg/Documents/rsc/rsc/nb/Debug.cpp
* W106 Function does not invoke Debug::ft
    57: void Debug::Assert(bool condition, debug64_t errval)
    73: void Debug::ft(fn_name_arg func)
    81: void Debug::ftnt(fn_name_arg func)
* W130 Redundant scope
    91:    Debug::ft("Debug.GetSwFlags");
    101:    Debug::ft("Debug.noop");
    108:    Debug::ft("Debug.Progress");
    118:    Debug::ft("Debug.ResetSwFlags");
    127:    Debug::ftnt("Debug.SetSwFlag");
    146:    Debug::ftnt("Debug.SwFlagOn");
    163:    Debug::ftnt(Debug_SwLog);
    167:    Debug::ftnt(Debug_SwLog);
C:/Users/Greg/Documents/rsc/rsc/nb/Debug.h
  W026 Unused argument
    123/1:    static void noop(debug64_t info = 0);
* W092 Function could be free
    111:    static void SetSwFlag(FlagId fid, bool value); // NtIncrement.cpp
    115:    static void ResetSwFlags(); // NtIncrement.cpp
    119:    static Flags GetSwFlags(); // NtIncrement.cpp
    123:    static void noop(debug64_t info = 0); // CxxExecute.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Duration.h
* W099 Line contains adjacent spaces
    191: int64_t  operator/(const Duration& lhs, const Duration& rhs);
C:/Users/Greg/Documents/rsc/rsc/nb/Element.cpp
* W106 Function does not invoke Debug::ft
    202: bool Element::RunningInLab()
C:/Users/Greg/Documents/rsc/rsc/nb/Element.h
* W092 Function could be free
    50:    static bool IsUnnamed(); // ModuleRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Exception.cpp
  W107 Function does not invoke Debug::ft as first statement
    42:    Debug::ft("Exception.ctor");  //@
C:/Users/Greg/Documents/rsc/rsc/nb/Exception.h
* W065 Base class virtual destructor is not public
    71:    virtual ~Exception();
  W075 Virtual function is public
    51:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    212:       auto req = static_cast< FileRequest* >(msg);
C:/Users/Greg/Documents/rsc/rsc/nb/FileThread.h
  W082 Adjacent arguments have the same type
    63:    static void Spool(const std::string& name,
* W092 Function could be free
    45:    static ostringstreamPtr CreateStream(); // CliThread.cpp
    58:    static void Spool(const std::string& name, ostringstreamPtr& stream, // FileThread.cpp
    63:    static void Spool(const std::string& name, // FileThread.cpp
    72:    static void Truncate(const std::string& name); // NbIncrement.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.cpp
  W004 C-style cast
    161:       auto base = (const Base*) obj;
  W119 Argument passed by value is modified
    75/4:    const string& prefix, const byte_t* bytes, size_t count)
    311/2: size_t strSkipSpaces(const std::string& str, size_t index)
C:/Users/Greg/Documents/rsc/rsc/nb/Formatters.h
  W082 Adjacent arguments have the same type
    99:    int strCompare
    111:    std::string strCenter(const std::string& s, size_t breadth, size_t blanks);
C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W007 Cast down the inheritance hierarchy
    567:       auto curr = static_cast< FunctionTrace* >(rec);
    581:       auto curr = static_cast< FunctionTrace* >(rec);
    600:       auto curr = static_cast< FunctionTrace* >(rec);
    628:       auto curr = static_cast< FunctionTrace* >(rec);
    675:       auto curr = static_cast< FunctionTrace* >(rec);
    795:       auto curr = static_cast< FunctionTrace* >(rec);
    817:       auto curr = static_cast< FunctionTrace* >(rec);
    835:       auto curr = static_cast< FunctionTrace* >(rec);
    908:       auto curr = static_cast< FunctionTrace* >(rec);
* W032 Unused function
    167:    PerThreadInfo()
* W106 Function does not invoke Debug::ft
    189: CtorChain::CtorChain(FunctionTrace* inner) :
    206: bool CtorChain::AddToPreviousChain(FunctionTrace* ctor)
    259: CtorChain::Action CtorChain::CalcAction
    327: TraceRecord* CtorChain::CheckForEndOfChains(const FunctionTrace* curr)
    346: bool CtorChain::CheckForInitializer(const FunctionTrace* curr)
    389: bool CtorChain::FunctionEndsChain(const FunctionTrace* curr) const
    407: TraceRecord* CtorChain::HandleCtor(FunctionTrace* ctor)
    456: void CtorChain::HandleFunction(FunctionTrace* func)
    483: void CtorChain::MoveOuterAboveInit()
    497: void CtorChain::MoveOuterAboveInner() const
    510: void CtorChain::SetOuter(FunctionTrace* outer)
C:/Users/Greg/Documents/rsc/rsc/nb/FunctionTrace.h
* W043 Member could be protected
    44:    FunctionTrace();
* W060 Base class constructor is public
    44:    FunctionTrace();
C:/Users/Greg/Documents/rsc/rsc/nb/Heap.cpp
* W106 Function does not invoke Debug::ft
    145: void Heap::Freeing(void* addr, size_t size)
    161: bool Heap::IsFixedSize() const
    195: void Heap::Requested(size_t size, void* addr)
C:/Users/Greg/Documents/rsc/rsc/nb/Heap.h
* W042 Member could be private
    124:    bool IsFixedSize() const;
  W075 Virtual function is public
    55:    virtual void* Addr() const = 0;
    59:    virtual size_t Size() const = 0;
    63:    virtual MemoryType Type() const = 0;
    67:    virtual void* Alloc(size_t size) = 0;
    71:    virtual void Free(void* addr) = 0;
    76:    virtual size_t BlockToSize(const void* addr) const = 0;
    81:    virtual bool Validate(const void* addr) const = 0;
    85:    virtual bool CanBeProtected() const { return true; }
    92:    virtual int SetPermissions(MemoryProtection attrs);
C:/Users/Greg/Documents/rsc/rsc/nb/InitFlags.cpp
* W106 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::SuspendRoot()
    55: bool InitFlags::TraceInit()
C:/Users/Greg/Documents/rsc/rsc/nb/InitThread.h
* W127 Data could be free
    75:    static const Flags RecreateMask; // Daemon.cpp
    76:    static const Flags ScheduleMask; // Thread.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Log.cpp
  W006 reinterpret_cast
    133:    auto fake = reinterpret_cast< const Log* >(&local);
* W106 Function does not invoke Debug::ft
    139: size_t Log::Count()
  W110 Override of Base.Display not found
    56: struct LogDynamic : public Permanent
C:/Users/Greg/Documents/rsc/rsc/nb/Log.h
* W042 Member could be private
    66:    static const size_t MaxExplSize;
    123:    static Log* Find(c_string groupName, LogId id, LogGroup*& group);
* W053 Data could be const
    189:    RegCell lid_;
* W090 Function could be const
    118:    void SetInterval(uint8_t interval);
* W092 Function could be free
    128:    static Log* Find(c_string log); // Log.cpp
    136:    static size_t Count(); // NbIncrement.cpp
* W127 Data could be free
    66:    static const size_t MaxExplSize; // Log.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/LogBuffer.cpp
  W004 C-style cast
    313:    auto after = (ptr_t) next_ + size;
    326:       if(wrap && (after > (const_ptr_t) first)) return nullptr;
    333:       if(wrap || (after > (const_ptr_t) first)) return nullptr;
    507:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    507:       used = (const_ptr_t) next_ - (const_ptr_t) first;
    509:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
    509:       used = size_ - ((const_ptr_t) first - (const_ptr_t) next_);
  W006 reinterpret_cast
    125:    SetNext(reinterpret_cast< Entry* >(buff_));
    340:       where = reinterpret_cast< Entry* >(buff_);
    348:    SetNext(reinterpret_cast< Entry* >(after));
    385:          SetNext(reinterpret_cast< Entry* >(buff_));
  W009 Pointer arithmetic
    313:    auto after = (ptr_t) next_ + size;
    314:    auto wrap = after >= (buff_ + size_);
    341:       after = buff_ + size;
* W106 Function does not invoke Debug::ft
    500: void LogBuffer::UpdateMax()
* W117 Line can merge with the next line and be under the length limit
    192:       stream << fileName_ << SPACE
  W119 Argument passed by value is modified
    98/1: LogBuffer::LogBuffer(size_t size) :
C:/Users/Greg/Documents/rsc/rsc/nb/LogBufferRegistry.h
* W042 Member could be private
    61:    static const size_t LogBufferSize;
* W127 Data could be free
    61:    static const size_t LogBufferSize; // LogBufferRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.cpp
  W006 reinterpret_cast
    120:    auto fake = reinterpret_cast< const LogGroup* >(&local);
* W106 Function does not invoke Debug::ft
    179: void LogGroup::SetSuppressed(bool suppressed)
C:/Users/Greg/Documents/rsc/rsc/nb/LogGroup.h
* W042 Member could be private
    63:    static const size_t MaxExplSize;
    80:    id_t Gid() const { return gid_.GetId(); }
    84:    bool Suppressed() const { return suppressed_; }
* W053 Data could be const
    141:    RegCell gid_;
* W127 Data could be free
    63:    static const size_t MaxExplSize; // LogGroup.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/LogGroupRegistry.cpp
* W106 Function does not invoke Debug::ft
    190: LogGroup* LogGroupRegistry::Group(id_t gid) const
C:/Users/Greg/Documents/rsc/rsc/nb/LogGroupRegistry.h
* W032 Unused function
    62:    Log* FindLog(const std::string& name, LogId id) const;
C:/Users/Greg/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    87:       (static_cast< CfgIntParm* >(reg->FindParm("NoSpoolingMessageCount")));
C:/Users/Greg/Documents/rsc/rsc/nb/LogThread.h
* W092 Function could be free
    68:    static void Spool(ostringstreamPtr& stream, const Log* log); // Log.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/MainArgs.cpp
* W106 Function does not invoke Debug::ft
    142: size_t MainArgs::Size()
C:/Users/Greg/Documents/rsc/rsc/nb/MainArgs.h
* W092 Function could be free
    61:    static void PushBack(const std::string& arg); // main.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Memory.cpp
  W005 Functional cast
    234:       auto type = MemoryType(m);
* W106 Function does not invoke Debug::ft
    196: static Heap* EnsureHeap(MemoryType type)
    213: Heap* Memory::AccessHeap(MemoryType type)
    230: MemoryType Memory::AddrToType(const void* addr)
    247: size_t Memory::Align(size_t size, size_t log2align)
    427: bool Memory::Protect(MemoryType type)
    508: bool Memory::Unprotect(MemoryType type)
    539: size_t Memory::Words(size_t size)
* W111 Override of Object.Patch not found
    61: class ProtectedHeap : public NbHeap
C:/Users/Greg/Documents/rsc/rsc/nb/Memory.h
* W032 Unused function
    50:    size_t Words(size_t size);
    58:    void Set(void* dest, byte_t value, size_t size);
    78:    void* Realloc(void* addr, size_t size, MemoryType type);
C:/Users/Greg/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    88:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/Greg/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/Module.h
* W032 Unused function
    96:    ModuleId Mid() const { return mid_.GetId(); }
* W053 Data could be const
    134:    RegCell mid_;
C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.cpp
* W106 Function does not invoke Debug::ft
    61: static const FactionFlags& AllFactions()
    103: static const FactionFlags& ShutdownFactions()
    195: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/Greg/Documents/rsc/rsc/nb/ModuleRegistry.h
* W092 Function could be free
    90:    void SetLevel(RestartLevel level); // InitThread.cpp
    94:    static RestartLevel NextLevel(); // ModuleRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/MsgBuffer.cpp
* W106 Function does not invoke Debug::ft
    68: TraceStatus MsgBuffer::GetStatus() const
C:/Users/Greg/Documents/rsc/rsc/nb/MsgBuffer.h
* W043 Member could be protected
    45:    MsgBuffer(const MsgBuffer& that);
  W075 Virtual function is public
    58:    virtual TraceStatus GetStatus() const;
C:/Users/Greg/Documents/rsc/rsc/nb/MutexGuard.cpp
  W107 Function does not invoke Debug::ft as first statement
    35:    Debug::ft("MutexGuard.ctor");
    55:       Debug::ftnt("MutexGuard.Release");
C:/Users/Greg/Documents/rsc/rsc/nb/MutexRegistry.h
* W042 Member could be private
    56:    SysMutex* Find(const std::string& name) const;
C:/Users/Greg/Documents/rsc/rsc/nb/NbAppIds.h
* W028 Unused data
    73: constexpr FlagId FirstAppDebugFlag = 11;
C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.cpp
* W106 Function does not invoke Debug::ft
    125: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
* W117 Line can merge with the next line and be under the length limit
    388:    BindText(*new CliText
    392:    BindText(*new CliText
    394:    BindText(*new CliText
C:/Users/Greg/Documents/rsc/rsc/nb/NbCliParms.h
  W082 Adjacent arguments have the same type
    123: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
    129: bool ValidateOptions
C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.cpp
  W004 C-style cast
    285:    heap_ = (HeapPriv*) SysMemory::Alloc(nullptr, size_);
    326:    heap_->state = (uint8_t*) (heapAddr + infoSize);
    358:          ReleaseBlock((HeapBlock*) addr, level);
    369:       ReserveBlock((HeapBlock*) addr);
    451:       auto child = (HeapBlock*) (uintptr_t(block) + LevelToSize(level + 1));
    496:    auto block = (const HeapBlock*) addr;
    621:                   if(block < (HeapBlock*) heap_)
    623:                   else if(block < (HeapBlock*) heap_->minAddr)
    692:    FreeBlock((HeapBlock*) addr, level);
    740:    return (HeapBlock*) (heap_->leftAddr + (offset << Log2Size(level)));
    820:       auto size = BlockToSize((const HeapBlock*) addr);
    823:       auto index = BlockToIndex((const HeapBlock*) addr, level);
    875:       if((HeapBlock*) block->link.prev->next != block)
    877:       if((HeapBlock*) block->link.next->prev != block)
  W005 Functional cast
    727:    return BlockState(state);
  W026 Unused argument
    75/3:       const std::string& prefix, const Flags& options) const;
* W053 Data could be const
    54:    Q2Link link;
* W099 Line contains adjacent spaces
    613:                case Split:     c = 'S'; break;
    614:                case Merged:    c = 'm'; break;
* W106 Function does not invoke Debug::ft
    126: static NbHeap::index_t IndexToChild(NbHeap::index_t index)
    135: static NbHeap::index_t IndexToParent(NbHeap::index_t index)
    144: static NbHeap::index_t IndexToSibling(NbHeap::index_t index)
    155: static size_t Log2Size(NbHeap::level_t level)
    164: static size_t LevelToSize(NbHeap::level_t level)
    173: static NbHeap::level_t SizeToLevel(size_t size)
    392: bool NbHeap::AddrIsValid(const void* addr, bool header) const
    433: HeapBlock* NbHeap::AllocBlock(level_t level, size_t size)
    465: NbHeap::index_t NbHeap::BlockToIndex
    532: NbHeap::BlockState NbHeap::Corrupt(int reason, bool restart) const
    544: HeapBlock* NbHeap::Dequeue(level_t level)
    645: void NbHeap::EnqBlock(HeapBlock* block, index_t index, level_t level)
    654: HeapBlock* NbHeap::Enqueue(HeapBlock* block, level_t level)
    697: void NbHeap::FreeBlock(HeapBlock* block, level_t level)
    716: NbHeap::BlockState NbHeap::GetState(index_t index) const
    732: HeapBlock* NbHeap::IndexToBlock(index_t index, level_t level) const
    752: void NbHeap::ReleaseBlock(HeapBlock* block, level_t level)
    768: void NbHeap::ReserveBlock(const HeapBlock* block)
    781: void NbHeap::SetState(index_t index, BlockState state)
    797: void NbHeap::SplitAncestors(index_t block)
    845: NbHeap::BlockState NbHeap::ValidateBlock
  W119 Argument passed by value is modified
    243/2: NbHeap::NbHeap(MemoryType type, size_t size) : Heap(),
    414/1: void* NbHeap::Alloc(size_t size)
    697/1: void NbHeap::FreeBlock(HeapBlock* block, level_t level)
    797/1: void NbHeap::SplitAncestors(index_t block)
C:/Users/Greg/Documents/rsc/rsc/nb/NbHeap.h
* W090 Function could be const
    143:    void SetState(index_t index, BlockState state);
C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    590:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    938:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1087:          auto type = MemoryType(memtype);
    1101:          auto type = MemoryType(memtype);
    1131:          auto type = MemoryType(m);
    1142:          *cli.obuf << setw(13) << MemoryType(m) << ": " << status << CRLF;
    1489:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    3096:       auto heap = Memory::AccessHeap(MemoryType(m));
  W102 Line length exceeds the standard maximum
    3073: "Alloc  Low kB     kB       Bytes                            Memory        Prot\n"
    3074: "Fails   Avail  Avail      In Use     Allocs      Frees        Type  RWX  Chngs";
* W117 Line can merge with the next line and be under the length limit
    1021:    BindText(*new CliText
    2499:    BindText(*new CliText
    3078: fixed_string PoolsHeader =
C:/Users/Greg/Documents/rsc/rsc/nb/NbIncrement.h
* W028 Unused data
    195:    static const id_t LastNbIndex = 3;
* W060 Base class constructor is public
    41:    StatusCommand();
    56:    LogsAction();
    76:    explicit LogsCommand(bool bind = true);
    93:    SetWhatParm();
    107:    explicit SetCommand(bool bind = true);
    124:    IncludeWhatParm();
    138:    explicit IncludeCommand(bool bind = true);
    155:    ExcludeWhatParm();
    168:    explicit ExcludeCommand(bool bind = true);
    199:    explicit QueryCommand(bool bind = true);
    216:    SaveWhatParm();
    228:    explicit SaveCommand(bool bind = true);
    245:    ClearWhatParm();
    263:    explicit ClearCommand(bool bind = true);
C:/Users/Greg/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    230:             stream << Faction(f) << CRLF;
* W106 Function does not invoke Debug::ft
    190: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/Greg/Documents/rsc/rsc/nb/NbTracer.h
  W110 Override of Base.Display not found
    63: class NbTracer : public Permanent
C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.cpp
* W106 Function does not invoke Debug::ft
    75: char BlockingReasonChar(BlockingReason reason)
    98: char FactionChar(Faction faction)
C:/Users/Greg/Documents/rsc/rsc/nb/NbTypes.h
* W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
* W033 Unused typedef
    226: using PersistentStr =
C:/Users/Greg/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    114:    auto obj = reinterpret_cast< ObjectStruct* >(this);
* W106 Function does not invoke Debug::ft
    59: Object::ClassId Object::GetClassId() const
    70: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    95: Object::ObjectId Object::GetObjectId() const
C:/Users/Greg/Documents/rsc/rsc/nb/Object.h
* W032 Unused function
    92:    ClassId GetClassId() const;
    104:    ObjectId GetObjectId() const;
    110:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    131:    void MorphTo(const Class& target);
* W042 Member could be private
    98:    virtual InstanceId GetInstanceId() const;
* W043 Member could be protected
    59:    virtual void Patch(sel_t selector, void* arguments) { }
* W053 Data could be const
    136:    uintptr_t patchArea_;
  W075 Virtual function is public
    59:    virtual void Patch(sel_t selector, void* arguments) { }
    79:    virtual Class* GetClass() const;
    87:    virtual void PostInitialize() { }
    98:    virtual InstanceId GetInstanceId() const;
* W077 Virtual function has no overrides
    79:    virtual Class* GetClass() const;
    87:    virtual void PostInitialize() { }
    98:    virtual InstanceId GetInstanceId() const;
* W088 Argument could be const
    59/2:    virtual void Patch(sel_t selector, void* arguments) { }
* W090 Function could be const
    59:    virtual void Patch(sel_t selector, void* arguments) { }
* W092 Function could be free
    110:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid); // Object.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    87:    return (ObjectBlock*) getptr1(obj, BlockHeaderSize);
    312:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, mem_, std::nothrow);
    336:          auto b = (ObjectBlock*) &seg[j];
    386:             auto b = (ObjectBlock*) &seg[j];
    422:             auto curr = (Pooled*) getptr1(item, diff);
    858:       return (ObjectBlock*) &blocks_[0][0];
    926:       return (ObjectBlock*) &blocks_[i][j];
    951:             auto b = (ObjectBlock*) &seg[j];
    982:    auto block = (const_ptr_t) ObjToBlock(obj);
    983:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    987:       auto b0 = (const_ptr_t) &blocks_[i][0];
    1050:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    558:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
* W099 Line contains adjacent spaces
    169:    CounterPtr      allocCount_;
    170:    CounterPtr      freeCount_;
    171:    CounterPtr      failCount_;
    172:    CounterPtr      auditCount_;
    173:    CounterPtr      expansions_;
* W106 Function does not invoke Debug::ft
    84: static ObjectBlock* ObjToBlock(const Pooled* obj)
    352: size_t ObjectPool::AllocCount() const
    519: size_t ObjectPool::AvailCount() const
    526: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    742: void ObjectPool::EnqBlock(Pooled* obj, bool deleted)
    837: size_t ObjectPool::Expansions() const
    844: size_t ObjectPool::FailCount() const
    885: size_t ObjectPool::FreeCount() const
    892: bool ObjectPool::IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const
    904: size_t ObjectPool::InUseCount() const
    911: size_t ObjectPool::LowAvailCount() const
    918: ObjectBlock* ObjectPool::Next(PooledObjectId& bid) const
    937: Pooled* ObjectPool::NextUsed(PooledObjectId& bid) const
    1009: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    1018: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  W110 Override of Base.Display not found
    96: class ObjectPoolSizeCfg : public CfgIntParm
    162: class ObjectPoolStats : public Dynamic
    204: struct ObjectPoolDynamic : public Persistent
  W119 Argument passed by value is modified
    526/1: bool ObjectPool::BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const
    540/1: Pooled* ObjectPool::BidToObj(PooledObjectId bid) const
    564/1: bool ObjectPool::Corrupt(size_t n)
C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    97:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W075 Virtual function is public
    102:    virtual Pooled* DeqBlock(size_t size);
    107:    virtual void EnqBlock(Pooled* obj, bool deleted);
    175:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
* W077 Virtual function has no overrides
    102:    virtual Pooled* DeqBlock(size_t size);
    107:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W082 Adjacent arguments have the same type
    238:    bool BidToIndices(PooledObjectId bid, size_t& i, size_t& j) const;
    243:    bool IndicesToBid(size_t i, size_t j, PooledObjectId& bid) const;
* W090 Function could be const
    185:    bool Corrupt(size_t n);
    251:    void UpdateAlarm();
C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
* W106 Function does not invoke Debug::ft
    280: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/Greg/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
* W042 Member could be private
    65:    bool NullifyObjectData() const { return nullifyObjectDataCfg_->CurrValue(); }
C:/Users/Greg/Documents/rsc/rsc/nb/PermanentHeap.cpp
* W106 Function does not invoke Debug::ft
    43: PermanentHeap* PermanentHeap::Instance()
C:/Users/Greg/Documents/rsc/rsc/nb/PermanentHeap.h
* W092 Function could be free
    41:    static PermanentHeap* Instance(); // Memory.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    136:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    114:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
* W032 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    71:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
* W106 Function does not invoke Debug::ft
    124: Flags PS_Break()
    129: Flags PS_Delayed()
    134: Flags PS_Final()
    139: Flags PS_Interrupt()
    144: Flags PS_Native()
    149: Flags PS_NoError()
    154: Flags PS_NoLog()
C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignal.h
* W032 Unused function
    148: Flags PS_Delayed();
* W053 Data could be const
    135:    RegCell sid_;
  W082 Adjacent arguments have the same type
    105:    PosixSignal(signal_t value, c_string name,
* W127 Data could be free
    51:    static const signal_t MaxId; // PosixSignalRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
* W106 Function does not invoke Debug::ft
    58: Flags PosixSignalRegistry::Attrs(signal_t value) const
    89: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    101: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/Greg/Documents/rsc/rsc/nb/Q1Link.cpp
  W107 Function does not invoke Debug::ft as first statement
    49:    Debug::ftnt(Q1Link_dtor);
C:/Users/Greg/Documents/rsc/rsc/nb/Q1Link.h
* W032 Unused function
    65:    bool IsQueued() const { return next != nullptr; }
C:/Users/Greg/Documents/rsc/rsc/nb/Q1Way.h
  W004 C-style cast
    143:       auto ante = (Q1Link*)
    166:       return (T*) getptr1(item, diff_);  // location of item's vptr
    212:       return (T*) getptr1(item, diff_);     // location of item's vptr
    233:          item = (Q1Link*)
    247:       elem = (T*) getptr1(item, diff_);     // location of item's vptr
    260:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    332:          tail_.next = (Q1Link*) BAD_POINTER;  // corrupt queue header
    340:       auto item = (Q1Link*)                   // start at the current item
    342:       item->next = (Q1Link*) BAD_POINTER;     // corrupt ELEM's next pointer
    360:       return (Q1Link*) getptr2(&elem, diff_);
* W088 Argument could be const
    90/1:    bool Enq(T& elem)
    114/1:    bool Henq(T& elem)
    136/1:    bool Insert(T* prev, T& elem)
    171/1:    bool Exq(T& elem)
    328/1:    void Corrupt(T* elem)
* W099 Line contains adjacent spaces
    389:    inline static fn_name Q1Way_dtor()    { return "Q1Way.dtor"; }
    390:    inline static fn_name Q1Way_Init()    { return "Q1Way.Init"; }
    391:    inline static fn_name Q1Way_Enq()     { return "Q1Way.Enq"; }
    392:    inline static fn_name Q1Way_Henq()    { return "Q1Way.Henq"; }
    393:    inline static fn_name Q1Way_Insert()  { return "Q1Way.Insert"; }
    394:    inline static fn_name Q1Way_Deq()     { return "Q1Way.Deq"; }
    395:    inline static fn_name Q1Way_Exq()     { return "Q1Way.Exq"; }
    396:    inline static fn_name Q1Way_Next()    { return "Q1Way.Next"; }
    397:    inline static fn_name Q1Way_Size()    { return "Q1Way.Size"; }
    398:    inline static fn_name Q1Way_Purge()   { return "Q1Way.Purge"; }
    400:    inline static fn_name Q1Way_Item()    { return "Q1Way.Item"; }
C:/Users/Greg/Documents/rsc/rsc/nb/Q2Link.cpp
* W106 Function does not invoke Debug::ft
    40: Q2Link::~Q2Link()
C:/Users/Greg/Documents/rsc/rsc/nb/Q2Link.h
* W032 Unused function
    66:    bool IsQueued() const { return next != nullptr; }
C:/Users/Greg/Documents/rsc/rsc/nb/Q2Way.h
  W004 C-style cast
    145:       return (T*) getptr1(item, diff_);    // location of item's vptr
    174:       return (T*) getptr1(item, diff_);     // location of item's vptr
    191:          item = (Q2Link*)
    197:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    208:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    218:       return (T*) getptr1(item, diff_);     // location of item's vptr
    235:          item = (Q2Link*)
    241:          elem = (T*) getptr1(item, diff_);  // location of item's vptr
    252:       return (T*) getptr1(item, diff_);       // location of next item's vptr
    336:       return (Q2Link*) getptr2(&elem, diff_);
* W032 Unused function
    298:    void Display(std::ostream& stream,
* W088 Argument could be const
    150/1:    bool Exq(T& elem)
* W090 Function could be const
    150:    bool Exq(T& elem)
* W099 Line contains adjacent spaces
    366:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    367:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    368:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    369:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    370:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    371:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    372:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    373:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    374:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    376:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/Greg/Documents/rsc/rsc/nb/RegCell.cpp
* W106 Function does not invoke Debug::ft
    38: RegCell::~RegCell()
    50: void RegCell::SetId(id_t cid)
C:/Users/Greg/Documents/rsc/rsc/nb/Registry.h
  W004 C-style cast
    117:       registry_ = (T**) Memory::Alloc(size, mem);
    507:                auto cell = (RegCell*) getptr2(item, diff_);
    565:       return (RegCell*) getptr2(&item, diff_);
    579:       auto table = (T**) Memory::Alloc(size, mem_);
* W042 Member could be private
    494:    void Purge()
* W088 Argument could be const
    278/1:    bool Erase(T& item)
* W099 Line contains adjacent spaces
    626:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    627:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    628:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    630:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    631:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    632:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    633:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    634:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    635:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    636:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/Greg/Documents/rsc/rsc/nb/Restart.cpp
* W106 Function does not invoke Debug::ft
    38: bool Restart::ClearsMemory(MemoryType type)
    69: RestartLevel Restart::LevelToClear(MemoryType type)
C:/Users/Greg/Documents/rsc/rsc/nb/Singleton.h
  W004 C-style cast
    85:       reg->BindInstance((const Base**) &Instance_, type);
    104:       reg->UnbindInstance((const Base**) &Instance_);
* W099 Line contains adjacent spaces
    129:    inline static fn_name Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/Greg/Documents/rsc/rsc/nb/Singletons.cpp
* W053 Data could be const
    41:    MemoryType type;    // the type of memory that the singleton uses
* W106 Function does not invoke Debug::ft
    126: Singletons* Singletons::Instance()
C:/Users/Greg/Documents/rsc/rsc/nb/SoftwareException.h
* W043 Member could be protected
    41:    SoftwareException
* W060 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
  W082 Adjacent arguments have the same type
    41:    SoftwareException
* W117 Line can merge with the next line and be under the length limit
    41:    SoftwareException
C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const Statistic* >(&local);
* W106 Function does not invoke Debug::ft
    112: uint64_t Statistic::Overall() const
    243: uint64_t HighWatermark::Overall() const
    315: uint64_t LowWatermark::Overall() const
C:/Users/Greg/Documents/rsc/rsc/nb/Statistics.h
* W042 Member could be private
    56:    static const size_t MaxExplSize;
* W043 Member could be protected
    72:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
  W050 Data is not private
    95:    std::atomic_size_t curr_;
    99:    std::atomic_size_t prev_;
    103:    std::atomic_uint64_t total_;
    107:    size_t divisor_;
* W053 Data could be const
    123:    RegCell sid_;
* W060 Base class constructor is public
    139:    explicit Counter(const std::string& expl, size_t divisor = 1);
  W075 Virtual function is public
    68:    virtual uint64_t Overall() const;
    72:    virtual void DisplayStat(std::ostream& stream, const Flags& options) const;
* W127 Data could be free
    56:    static const size_t MaxExplSize; // Statistics.cpp
    91:    static const char NotUpdated; // Statistics.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsGroup.h
* W042 Member could be private
    54:    static const size_t MaxExplSize;
    58:    static const size_t ReportWidth;
    66:    id_t Gid() const { return gid_.GetId(); }
* W053 Data could be const
    101:    RegCell gid_;
  W075 Virtual function is public
    74:    virtual void DisplayStats
* W127 Data could be free
    54:    static const size_t MaxExplSize; // StatisticsGroup.cpp
    58:    static const size_t ReportWidth; // StatisticsRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
* W106 Function does not invoke Debug::ft
    126: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsRegistry.h
* W090 Function could be const
    72:    void StartInterval(bool first);
C:/Users/Greg/Documents/rsc/rsc/nb/StatisticsThread.h
* W053 Data could be const
    54:    static secs_t LongIntervalSecs;
    59:    static secs_t ShortIntervalSecs;
    66:    static size_t WakeupsBetweenReports;
    70:    static Duration SleepInterval;
* W127 Data could be free
    54:    static secs_t LongIntervalSecs; // StatisticsThread.cpp
    59:    static secs_t ShortIntervalSecs; // StatisticsThread.cpp
    66:    static size_t WakeupsBetweenReports; // StatisticsThread.cpp
    70:    static Duration SleepInterval; // StatisticsThread.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/StreamRequest.h
* W043 Member could be protected
    59:    StreamRequest(const StreamRequest& that);
* W060 Base class constructor is public
    54:    StreamRequest();
C:/Users/Greg/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    96:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/Symbol.h
* W053 Data could be const
    112:    Q1Link link_;
C:/Users/Greg/Documents/rsc/rsc/nb/SymbolRegistry.h
  W082 Adjacent arguments have the same type
    59:    bool BindSymbol
C:/Users/Greg/Documents/rsc/rsc/nb/SysConsole.cpp
* W106 Function does not invoke Debug::ft
    33: std::istream& SysConsole::In()
    40: ostream& SysConsole::Out()
C:/Users/Greg/Documents/rsc/rsc/nb/SysDecls.h
  W044 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.h
* W032 Unused function
    80:    std::string Normalize(const std::string& path);
    95:    void GetCurrDir(std::string& dirName);
  W075 Virtual function is public
    47:    virtual void GetName(std::string& fileName) const = 0;
    51:    virtual bool IsSubdir() const = 0;
    55:    virtual bool AtEnd() const = 0;
    60:    virtual bool Advance() = 0;
  W082 Adjacent arguments have the same type
    107:    bool FindFiles(const char* dirName,
C:/Users/Greg/Documents/rsc/rsc/nb/SysFile.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 60:    _finddata_t attributes_;
  W062 Member not included in member initialization list
    41:    FileWalker(const char* dirName, const char* fileSpec);
    60:    _finddata_t attributes_;
* W106 Function does not invoke Debug::ft
    96: bool FileWalker::AtEnd() const
    103: void FileWalker::GetName(string& fileName) const
    112: bool FileWalker::IsSubdir() const
  W110 Override of Base.Display not found
    38: class FileWalker : public FileList
C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.h
* W092 Function could be free
    48:    static void ListHeaps(std::set< void* >& heaps, std::ostringstream& expl); // Memory.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    214:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
* W106 Function does not invoke Debug::ft
    105: void* SysHeap::Addr() const
    137: bool SysHeap::CanBeProtected() const { return false; }
    172: void SysHeap::ListHeaps(std::set< void* >& heaps, std::ostringstream& expl)
C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.h
  W027 Unused class
    43: class SysLock
* W032 Unused function
    48:    SysLock();
    65:    void Acquire();
    69:    void Release();
    73:    SysThreadId Owner() const { return owner_; }
    77:    void Display(std::ostream& stream,
C:/Users/Greg/Documents/rsc/rsc/nb/SysLock.win.cpp
* W106 Function does not invoke Debug::ft
    34: SysLock::SysLock() :
    46: SysLock::~SysLock()
    64: void SysLock::Acquire()
    96: void SysLock::Release()
C:/Users/Greg/Documents/rsc/rsc/nb/SysMemory.h
* W032 Unused function
    48:    bool Lock(void* addr, size_t size);
    53:    bool Unlock(void* addr, size_t size);
C:/Users/Greg/Documents/rsc/rsc/nb/SysMemory.win.cpp
* W106 Function does not invoke Debug::ft
    50: static DWORD GetMemoryProtection(MemoryProtection attrs)
  W119 Argument passed by value is modified
    72/1: void* SysMemory::Alloc(void* addr, size_t size, MemoryProtection attrs)
C:/Users/Greg/Documents/rsc/rsc/nb/SysMutex.cpp
  W006 reinterpret_cast
    41:    auto fake = reinterpret_cast< const SysMutex* >(&local);
* W106 Function does not invoke Debug::ft
    62: Thread* SysMutex::Owner() const
C:/Users/Greg/Documents/rsc/rsc/nb/SysMutex.h
* W032 Unused function
    116:    Thread* Owner() const;
* W053 Data could be const
    141:    RegCell mid_;
C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.h
  W082 Adjacent arguments have the same type
    115:    static SysThread_t Create
* W088 Argument could be const
    116/2:       (ThreadEntry entry, Thread* client, size_t stackSize, SysThreadId& nid);
* W090 Function could be const
    170:    DelayRc Suspend(SysSentry_t& sentry, const Duration& timeout);
* W092 Function could be free
    122:    static SysThread_t Wrap(); // SysThread.cpp
    126:    static void Delete(SysThread_t& thread); // SysThread.cpp
    131:    static SysSentry_t CreateSentry(); // SysThread.cpp
    135:    static void DeleteSentry(SysSentry_t& sentry); // SysThread.cpp
    174:    bool Resume(SysSentry_t& sentry); // SysThread.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    159:       (_beginthreadex_proc_type) entry, (void*) client, 0, &nid);
    159:       (_beginthreadex_proc_type) entry, (void*) client, 0, &nid);
    160:    auto handle = (HANDLE) result;
    314:    _set_se_translator((_se_translator_function) SE_Handler);
* W106 Function does not invoke Debug::ft
    50: static signal_t AccessViolationType(const _EXCEPTION_POINTERS* ex)
    222: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    262: SysThreadId SysThread::RunningThreadId()
  W107 Function does not invoke Debug::ft as first statement
    74:    Debug::ft("NodeBase.SE_Handler");
C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.h
  W026 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/Greg/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    155:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPermanent, std::nothrow);
* W015 #include not sorted in standard order
    31: #include <windows.h>
  W044 Typedef of pointer type
    53: typedef void* StackFrames[MaxFrames];
  W082 Adjacent arguments have the same type
    91:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
* W106 Function does not invoke Debug::ft
    121: fn_depth StackInfo::GetFrames(StackFramesPtr& frames)
    137: void StackInfo::Shutdown()
    146: DWORD StackInfo::Startup()
    257: fn_depth SysThreadStack::FuncDepth()
C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.cpp
* W106 Function does not invoke Debug::ft
    47: SysTickTimer* SysTickTimer::Instance()
C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.h
* W032 Unused function
    83:    bool TickTimingAvailable() const { return available_; }
  W110 Override of Base.Display not found
    38: class SysTickTimer : public Immutable
C:/Users/Greg/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 41:    LARGE_INTEGER frequency;
  i 63:       LARGE_INTEGER now;
  i 69:       _timeb now;
* W106 Function does not invoke Debug::ft
    59: TimePoint SysTickTimer::Now() const
C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    358:          Truncate(TimeField(int(field) + 1));
    531:          return OutOfRange(TimeField(f));
* W106 Function does not invoke Debug::ft
    179: int16_t SysTime::DayOfWeek() const
    189: int16_t SysTime::DayOfYear() const
    205: const int16_t* SysTime::DaysPerMonth(int16_t year)
    213: size_t SysTime::DaysSinceT0() const
    243: bool SysTime::IsLeapYear(int16_t year)
    261: int64_t SysTime::MsecsSinceT0() const
  W119 Argument passed by value is modified
    106/1: void SysTime::AddDays(size_t days)
    139/1: void SysTime::AddMsecs(msecs_t msecs)
    397/1: void SysTime::SubDays(size_t days)
    430/1: void SysTime::SubMsecs(msecs_t msecs)
C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.h
* W032 Unused function
    77:    int16_t Get(TimeField field) const { return time_[field]; }
* W042 Member could be private
    81:    int16_t DayOfWeek() const;
    136:    c_string strMonth() const;
  W082 Adjacent arguments have the same type
    72:    SysTime(int16_t year, int16_t month, int16_t day,
* W092 Function could be free
    158:    static const int16_t* DaysPerMonth(int16_t year); // SysTime.cpp
* W127 Data could be free
    162:    static const int16_t YearOfT0; // SysTime.cpp
    166:    static const int16_t WeekDayOfT0; // SysTime.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/SysTime.win.cpp
  W056 Implicit constructor invoked: POD members not initialized
  i 42:    _timeb timebuff;
  i 43:    tm timeofday;
C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    34:    auto bytes = reinterpret_cast< uint8_t* >(&value);
* W106 Function does not invoke Debug::ft
    31: static uintptr_t BadPointer()
C:/Users/Greg/Documents/rsc/rsc/nb/SysTypes.h
* W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
    63: constexpr size_t GBs = 1024 * 1024 * 1024;
* W030 Unused enumerator
    188:    MemInaccessible = 0,      // ---
    189:    MemExecuteOnly = 1,       // --x
    191:    MemReadExecute = 5,       // r-x
    193:    MemReadWriteExecute = 7,  // rwx
  W044 Typedef of pointer type
    95: typedef char* ptr_t;
    96: typedef const char* const_ptr_t;
    113: typedef const char* c_string;
    114: typedef const char* const fixed_string;
    119: typedef const char* const fn_name;      // for defining a function name
    120: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/Greg/Documents/rsc/rsc/nb/ThisThread.cpp
* W106 Function does not invoke Debug::ft
    32: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    39: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    46: void ThisThread::IncludeInTrace()
    53: DelayRc ThisThread::Pause(const Duration& timeout)
    60: void ThisThread::PauseOver(word limit)
    67: word ThisThread::RtcPercentUsed()
    74: ThreadId ThisThread::RunningThreadId()
    81: TraceRc ThisThread::StartTracing(const string& opts)
    88: void ThisThread::StopTracing()
C:/Users/Greg/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1240:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W009 Pointer arithmetic
    2957:    ptrdiff_t stacksize = &local - priv_->stackBase_;
* W028 Unused data
    125: const SysTickTimer* TickTimer = SysTickTimer::Instance();
* W099 Line contains adjacent spaces
    274:    CounterPtr       traps_;
    275:    CounterPtr       exceeds_;
    276:    CounterPtr       yields_;
    277:    CounterPtr       interrupts_;
    281:    AccumulatorPtr   totTime_;
* W106 Function does not invoke Debug::ft
    106: static std::atomic_flag& AccessFtLock()
    454: ContextSwitch* ContextSwitches::AddSwitch()
    1060: static bool ClearActiveThread(Thread* active)
    1191: Thread* Thread::ActiveThread()
    1203: SysMutex* Thread::BlockingMutex() const
    1210: TraceStatus Thread::CalcStatus(bool dynamic) const
    1228: bool Thread::CanBeScheduled() const
    1745: Thread* Thread::FindRunningThread()
    1771: void Thread::FunctionInvoked(fn_name_arg func)
    1817: void Thread::FunctionInvoked(fn_name_arg func, const std::nothrow_t&)
    1837: BlockingReason Thread::GetBlockingReason() const
    1844: signal_t Thread::GetSignal() const
    1851: TraceStatus Thread::GetStatus() const
    2012: bool Thread::IsLocked() const
    2019: bool Thread::IsScheduled() const
    2026: bool Thread::IsTraceable() const
    2082: Thread* Thread::LockedThread()
    2142: TraceRc Thread::LogContextSwitches(bool on)
    2320: uint8_t Thread::MutexCount() const
    2327: SysThreadId Thread::NativeThreadId() const
    2346: DelayRc Thread::Pause(Duration time)
    2388: double Thread::PercentIdle()
    2671: void Thread::ResetDebugFlags()
    2764: Thread* Thread::RunningThread()
    2792: Thread* Thread::RunningThread(const std::nothrow_t&)
    2848: void Thread::SetStatus(TraceStatus status)
    2946: void Thread::StackCheck()
    3236: TraceRc Thread::StartTracing(const string& opts)
    3268: void Thread::StopTracing()
    3437: bool Thread::TraceRunningThread(Thread*& thr)
    3465: bool Thread::TraceRunningThread(Thread*& thr, const std::nothrow_t&)
    3492: void Thread::TrapCheck()
    3683: void Thread::UpdateMutex(SysMutex* mutex)
    3690: void Thread::UpdateMutexCount(bool acquired)
  W107 Function does not invoke Debug::ft as first statement
    1684:    Debug::ft("Thread.ExitIfSafe");
    2559:    Debug::ft("Thread.Ready");
    2918:    Debug::ft("Thread.SignalHandler");
    3017:          Debug::ft(Thread_Start);
    3511:       Debug::ft(Thread_TrapHandler);  //@
  W110 Override of Base.Display not found
    268: class ThreadStats : public Dynamic
    355: class ContextSwitches : public Permanent
* W111 Override of Object.Patch not found
    355: class ContextSwitches : public Permanent
    750: class ThreadPriv : public Permanent
  W119 Argument passed by value is modified
    1060/1: static bool ClearActiveThread(Thread* active)
    1858/1: bool Thread::HandleSignal(signal_t sig, uint32_t code)
    2346/1: DelayRc Thread::Pause(Duration time)
    3420/1: void Thread::Trace(Thread* thr,
C:/Users/Greg/Documents/rsc/rsc/nb/Thread.h
  W026 Unused argument
    324/2:       (BlockingReason why, fn_name_arg func) { return true; }
    333/1:    virtual void ScheduledIn(fn_name_arg func) { }
* W032 Unused function
    124:    static std::atomic_uint32_t* Vector();
    128:    static bool TestFlag(FlagId fid);
    132:    static void ResetFlag(FlagId fid);
    155:    Faction GetFaction() const { return faction_; }
    159:    bool ChangeFaction(Faction faction);
    488:    SysMutex* BlockingMutex() const;
    496:    uint8_t MutexCount() const;
* W042 Member could be private
    136:    static void ResetFlags();
    151:    SysThreadId NativeThreadId() const;
* W065 Base class virtual destructor is not public
    259:    virtual ~Thread();
  W075 Virtual function is public
    176:    virtual TraceStatus CalcStatus(bool dynamic) const;
    230:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
* W077 Virtual function has no overrides
    230:    virtual void DisplayStats(std::ostream& stream, const Flags& options) const;
    272:    virtual bool EnqMsg(MsgBuffer& msg);
    278:    virtual MsgBuffer* DeqMsg(const Duration& timeout);
  W082 Adjacent arguments have the same type
    631:    void DisplaySummary(std::ostream& stream,
* W090 Function could be const
    120:    bool Interrupt(const Flags& mask = NoFlags);
    163:    void SetStatus(TraceStatus status);
    266:    void SetInitialized();
    418:    void Reset(FlagId fid);
    422:    void Ready();
    426:    void Preempt();
    445:    void Proceed();
    484:    void UpdateMutex(SysMutex* mutex);
    492:    void UpdateMutexCount(bool acquired);
    544:    bool LogTrap(const Exception* ex,
    592:    void SetTrap(bool on);
    600:    void StackCheck();
    604:    void SetSignal(signal_t sig);
* W092 Function could be free
    221:    static double PercentIdle(); // NbIncrement.cpp
    624:    static void EnableFactions(const FactionFlags& enabled); // ModuleRegistry.cpp
    640:    static TraceRc LogContextSwitches(bool on); // NbIncrement.cpp
    648:    static void DisplayContextSwitches(std::ostream& stream); // NbIncrement.cpp
  W121 Static member function has indirect argument for its class
    587/1:    static void Trace(Thread* thr, fn_name_arg func,
C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.cpp
* W106 Function does not invoke Debug::ft
    206: static ThreadAdmin* AccessAdminData()
    292: bool ThreadAdmin::BreakEnabled()
    368: void ThreadAdmin::Incr(Register r)
    455: bool ThreadAdmin::ReinitOnSchedTimeout()
    463: word ThreadAdmin::RtcInterval()
    471: word ThreadAdmin::RtcLimit()
    479: Duration ThreadAdmin::RtcTimeout()
    488: Duration ThreadAdmin::SchedTimeout()
    508: word ThreadAdmin::StackCheckInterval()
    516: word ThreadAdmin::StackUsageLimit()
    548: word ThreadAdmin::TrapCount()
    560: word ThreadAdmin::TrapInterval()
    568: word ThreadAdmin::TrapLimit()
    576: bool ThreadAdmin::TrapOnRtcTimeout()
  W110 Override of Base.Display not found
    55: class ThreadsStats : public Dynamic
C:/Users/Greg/Documents/rsc/rsc/nb/ThreadAdmin.h
* W099 Line contains adjacent spaces
    182:    CfgIntParmPtr  initTimeoutMsecs_;
    183:    CfgIntParmPtr  schedTimeoutMsecs_;
    185:    CfgIntParmPtr  rtcTimeoutMsecs_;
    187:    CfgIntParmPtr  rtcLimit_;
    188:    CfgIntParmPtr  rtcInterval_;
    190:    CfgIntParmPtr  trapLimit_;
    191:    CfgIntParmPtr  trapInterval_;
    193:    CfgIntParmPtr  stackUsageLimit_;
    194:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/Greg/Documents/rsc/rsc/nb/ThreadRegistry.cpp
* W106 Function does not invoke Debug::ft
    48: static bool IsSortedByThreadId(const Thread* thr1, const Thread* thr2)
    267: Thread* ThreadRegistry::FindThread(SysThreadId nid) const
    310: Thread* ThreadRegistry::GetThread(ThreadId tid) const
    323: std::vector< Thread* > ThreadRegistry::GetThreads() const
    361: bool ThreadRegistry::IsDeleted() const
    511: size_t ThreadRegistry::Size()
C:/Users/Greg/Documents/rsc/rsc/nb/TimePoint.h
* W032 Unused function
    45:    explicit TimePoint(const SysTime& time);
* W092 Function could be free
    82:    static TimePoint Never(); // TimePoint.cpp
C:/Users/Greg/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nb/Tool.h
  W075 Virtual function is public
    64:    virtual c_string Name() const = 0;
    68:    virtual c_string Expl() const = 0;
    74:    virtual std::string Status() const;
C:/Users/Greg/Documents/rsc/rsc/nb/ToolRegistry.cpp
* W106 Function does not invoke Debug::ft
    117: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/Greg/Documents/rsc/rsc/nb/ToolTypes.h
* W030 Unused enumerator
    66:    TraceFailed,        // operation failed for some other reason
C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    214:    buff_ = (TraceRecord**)
    218:    funcs_ = (FunctionTrace*)
  W005 Functional cast
    591:    stream << indent << "buffsize : " << int(std::log2(size_));
  W007 Cast down the inheritance hierarchy
    445:          auto ft = static_cast< FunctionTrace* >(rec);
    476:          auto ft = static_cast< FunctionTrace* >(rec);
* W106 Function does not invoke Debug::ft
    110: TraceBuffer::TraceBuffer() :
    146: TraceBuffer::~TraceBuffer()
    166: void* TraceBuffer::AddFunction()
    234: uint32_t TraceBuffer::AllocSlot()
    384: bool TraceBuffer::Empty() const
    402: bool TraceBuffer::Insert(TraceRecord* record)
    434: fn_depth TraceBuffer::LastDtorDepth(SysThreadId nid) const
    466: const FunctionTrace* TraceBuffer::LastFunction(SysThreadId nid) const
    486: void TraceBuffer::Lock()
    493: void TraceBuffer::MoveAbove(TraceRecord* second, const TraceRecord* first) const
    513: void TraceBuffer::Next(TraceRecord*& curr, const Flags& mask) const
    624: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    786: void TraceBuffer::Unlock()
* W117 Line can merge with the next line and be under the length limit
    557:          (curr->slot_ != TraceRecord::InvalidSlot) &&
  W119 Argument passed by value is modified
    186/1: bool TraceBuffer::AllocBuffers(size_t n)
    365/1: TraceRc TraceBuffer::DisplayTrace(ostream* stream, const string& opts)
C:/Users/Greg/Documents/rsc/rsc/nb/TraceBuffer.h
  W026 Unused argument
    152/1:    TraceRc StartTracing(const std::string& opts);
* W032 Unused function
    182:    const SysTime& StartTimeFull() const { return startTime_; }
* W092 Function could be free
    105:    void QueryTools(std::ostream& stream) const; // NbIncrement.cpp
  W110 Override of Base.Display not found
    64: class TraceBuffer : public Permanent
C:/Users/Greg/Documents/rsc/rsc/nb/TraceRecord.h
* W042 Member could be private
    54:    static const uint32_t InvalidSlot;
  W050 Data is not private
    125:    Id rid_ : 8;
  W075 Virtual function is public
    83:    virtual bool Display(std::ostream& stream, const std::string& opts);
* W090 Function could be const
    105:    virtual void ClaimBlocks() { }
C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    93:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemporary);
  W007 Cast down the inheritance hierarchy
    203:             auto ft = static_cast<FunctionTrace*>(rec);
* W022 Add using statement
    0:  // namespace NodeBase
  W082 Adjacent arguments have the same type
    60: static void CheckHigh(FunctionStats*& high,
* W106 Function does not invoke Debug::ft
    60: static void CheckHigh(FunctionStats*& high,
C:/Users/Greg/Documents/rsc/rsc/nt/FunctionProfiler.h
* W020 Using statement in header
    37: using namespace NodeBase;
* W090 Function could be const
    84:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W110 Override of Base.Display not found
    48: class FunctionProfiler : public Temporary
C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    76:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    47: int FunctionStats::Compare(const FunctionStats& that) const
    65: void FunctionStats::IncrCalls(const Duration& net)
C:/Users/Greg/Documents/rsc/rsc/nt/FunctionStats.h
* W020 Using statement in header
    31: using namespace NodeBase;
* W053 Data could be const
    91:    Q2Link link_;
C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3208:    pool->time_[id1].Truncate(TimeField(field - 1));
    3237:    pool->time_[id1].Round(TimeField(field - 1), interval);
    4020:    auto test = RecoveryThread::Test(index);
  W006 reinterpret_cast
    1494:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    1988:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2499:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
* W053 Data could be const
    1360:    Q1Link link_;
    1846:    Q2Link link_;
  W082 Adjacent arguments have the same type
    201:    static word Sort(const string& input, const string& output, string& expl);
* W106 Function does not invoke Debug::ft
    1002: static word CheckHeap(bool shouldExist, const CliThread& cli, Heap*& heap)
    1473: Q1WayItem::~Q1WayItem()
    1504: Q1WayPool::Q1WayPool()
    1533: void Q1WayPool::Reallocate()
    1967: Q2WayItem::~Q2WayItem()
    1998: Q2WayPool::Q2WayPool()
    2027: void Q2WayPool::Reallocate()
    2489: RegistryItem::~RegistryItem()
    2517: RegistryPool::RegistryPool()
  W107 Function does not invoke Debug::ft as first statement
    3678:       Debug::ft(RecoveryThread_Enter);
  W110 Override of Base.Display not found
    884: class TestHeap : public NbHeap
    1239: class LbcPool : public Temporary
    2881: class SysTimePool : public Temporary
C:/Users/Greg/Documents/rsc/rsc/nt/NtIncrement.h
* W020 Using statement in header
    32: using namespace NodeBase;
* W028 Unused data
    80:    static const id_t LastNtIndex = FuncTraceScope;
* W060 Base class constructor is public
    44:    CorruptWhatParm();
    56:    explicit CorruptCommand(bool bind = true);
    98:    NtSaveWhatParm();
    110:    explicit NtSaveCommand(bool bind = true);
    123:    TestsAction();
    144:    explicit TestsCommand(bool bind = true);
C:/Users/Greg/Documents/rsc/rsc/nt/NtModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/nt/NtModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    62:    return static_cast< NtTestData* >(data);
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/nt/NtTestData.h
* W020 Using statement in header
    31: using namespace NodeBase;
* W090 Function could be const
    81:    void Reset();
C:/Users/Greg/Documents/rsc/rsc/nt/TestDatabase.cpp
* W106 Function does not invoke Debug::ft
    148: TestDatabase::State TestDatabase::GetState(const string& testname)
C:/Users/Greg/Documents/rsc/rsc/nt/TestDatabase.h
  W110 Override of Base.Display not found
    41: class TestDatabase : public NodeBase::Temporary
C:/Users/Greg/Documents/rsc/rsc/nw/ByteBuffer.h
  W056 Implicit constructor invoked: POD members not initialized
    63: class TinyBuffer : public ByteBuffer
    74: class SmallBuffer : public ByteBuffer
    85: class MediumBuffer : public ByteBuffer
    96: class LargeBuffer : public ByteBuffer
    107: class HugeBuffer : public ByteBuffer
  W075 Virtual function is public
    44:    virtual NodeBase::byte_t* Bytes() = 0;
    48:    virtual size_t Size() const = 0;
  W110 Override of Base.Display not found
    63: class TinyBuffer : public ByteBuffer
    74: class SmallBuffer : public ByteBuffer
    85: class MediumBuffer : public ByteBuffer
    96: class LargeBuffer : public ByteBuffer
    107: class HugeBuffer : public ByteBuffer
* W111 Override of Object.Patch not found
    35: class ByteBuffer : public NodeBase::Pooled
    63: class TinyBuffer : public ByteBuffer
    74: class SmallBuffer : public ByteBuffer
    85: class MediumBuffer : public ByteBuffer
    96: class LargeBuffer : public ByteBuffer
    107: class HugeBuffer : public ByteBuffer
C:/Users/Greg/Documents/rsc/rsc/nw/InputHandler.h
  W026 Unused argument
    138/3:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
    143/1:    virtual void SocketFailed(SysSocket* socket) const { }
* W043 Member could be protected
    71:    IpPort* Port() const { return port_; }
  W075 Virtual function is public
    101:    virtual IpBuffer* AllocBuff(const NodeBase::byte_t* source, size_t size,
    109:    virtual void NetworkToHost(IpBuffer& buff, NodeBase::byte_t* dest,
    128:    virtual void ReceiveBuff
    137:    virtual NodeBase::byte_t* HostToNetwork
    143:    virtual void SocketFailed(SysSocket* socket) const { }
* W088 Argument could be const
    138/1:       (IpBuffer& buff, NodeBase::byte_t* src, size_t size) const;
C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    79:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDynamic);
  W009 Pointer arithmetic
    189:       source += rcvd;
  W119 Argument passed by value is modified
    143/2:    (const IpPort& port, const byte_t* source, size_t size) const
    143/3:    (const IpPort& port, const byte_t* source, size_t size) const
C:/Users/Greg/Documents/rsc/rsc/nw/IoThread.h
* W042 Member could be private
    87:    bool ExitOnRestart(NodeBase::RestartLevel level) const override;
  W050 Data is not private
    91:    const ipport_t port_;
    96:    IpPort* ipPort_;
    100:    SysIpL2Addr self_;
    104:    size_t recvs_;
    108:    SysIpL3Addr txAddr_;
    113:    SysIpL3Addr rxAddr_;
    117:    NodeBase::TimePoint time_;
    121:    NodeBase::byte_t* buffer_;
C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    158:    bytes_ = (byte_t*) newbytes;
  W009 Pointer arithmetic
    134:       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
    134:       Memory::Copy((bytes_ + hdrSize_ + paySize), source, size);
    229:       bytes = bytes_ + hdrSize_;
    253:    bytes += hdrSize_;
* W106 Function does not invoke Debug::ft
    185: TraceStatus IpBuffer::GetStatus() const
C:/Users/Greg/Documents/rsc/rsc/nw/IpBuffer.h
  W009 Pointer arithmetic
    106:    NodeBase::byte_t* PayloadPtr() const { return bytes_ + hdrSize_; }
* W060 Base class constructor is public
    55:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
  W075 Virtual function is public
    119:    virtual size_t PayloadSize() const;
    138:    virtual bool AddBytes
  W082 Adjacent arguments have the same type
    55:    IpBuffer(NodeBase::MsgDirection dir, size_t header, size_t payload);
* W127 Data could be free
    50:    static const size_t MaxBuffSize; // IpBuffer.cpp
C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    299:    auto fake = reinterpret_cast< const IpPort* >(&local);
* W099 Line contains adjacent spaces
    60:    CounterPtr       recvs_;
    61:    AccumulatorPtr   bytesRcvd_;
    64:    CounterPtr       discards_;
    65:    CounterPtr       rejects_;
    66:    CounterPtr       sends_;
    67:    AccumulatorPtr   bytesSent_;
    69:    CounterPtr       overflows_;
* W106 Function does not invoke Debug::ft
    213: size_t IpPort::Discards() const
  W110 Override of Base.Display not found
    54: class IpPortStats : public Dynamic
C:/Users/Greg/Documents/rsc/rsc/nw/IpPort.h
* W042 Member could be private
    185:    virtual IoThread* CreateIoThread();
* W053 Data could be const
    203:    NodeBase::Q1Link link_;
  W075 Virtual function is public
    102:    virtual SysTcpSocket* CreateAppSocket();
    147:    virtual void DisplayStats
* W077 Virtual function has no overrides
    147:    virtual void DisplayStats
* W090 Function could be const
    185:    virtual IoThread* CreateIoThread();
C:/Users/Greg/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W005 Functional cast
    51:    ipport_t GetPort() const { return ipport_t(CurrValue()); }
  W082 Adjacent arguments have the same type
    42:    IpPortCfgParm(NodeBase::c_string key, NodeBase::c_string def,
C:/Users/Greg/Documents/rsc/rsc/nw/IpPortRegistry.cpp
* W106 Function does not invoke Debug::ft
    286: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
    501: bool IpPortRegistry::UseIPv6()
  W110 Override of Base.Display not found
    56: class LocalAddrCfg : public CfgStrParm
C:/Users/Greg/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    72:    auto fake = reinterpret_cast< const IpService* >(&local);
C:/Users/Greg/Documents/rsc/rsc/nw/IpService.h
* W042 Member could be private
    69:    virtual ipport_t Port() const = 0;
* W043 Member could be protected
    110:    NodeBase::id_t Sid() const { return sid_.GetId(); }
* W053 Data could be const
    153:    NodeBase::RegCell sid_;
  W075 Virtual function is public
    60:    virtual NodeBase::c_string Name() const = 0;
    64:    virtual IpProtocol Protocol() const = 0;
    69:    virtual ipport_t Port() const = 0;
    73:    virtual NodeBase::Faction GetFaction() const = 0;
    77:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    81:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
    88:    virtual NodeBase::CliText* CreateText() const = 0;
    94:    virtual bool HasSharedSocket() const = 0;
    102:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
* W077 Virtual function has no overrides
    77:    virtual size_t RxSize() const { return IoThread::MaxRxBuffSize; }
    81:    virtual size_t TxSize() const { return IoThread::MaxTxBuffSize; }
* W090 Function could be const
    149:    virtual IpPort* CreatePort(ipport_t pid) = 0;
* W127 Data could be free
    56:    static const NodeBase::id_t MaxId; // IpServiceRegistry.cpp
C:/Users/Greg/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
* W106 Function does not invoke Debug::ft
    77: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/Greg/Documents/rsc/rsc/nw/IpServiceRegistry.h
* W032 Unused function
    56:    IpService* GetService(const std::string& name) const;
C:/Users/Greg/Documents/rsc/rsc/nw/LocalAddrTest.cpp
  W006 reinterpret_cast
    212:          auto payload = reinterpret_cast< SysIpL3Addr* >(buff->PayloadPtr());
* W022 Add using statement
    0:  // namespace NodeBase
  W107 Function does not invoke Debug::ft as first statement
    184:       Debug::ft("SendLocalThread.Enter");
C:/Users/Greg/Documents/rsc/rsc/nw/LocalAddrTest.h
* W020 Using statement in header
    32: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/nw/NwCliParms.h
* W060 Base class constructor is public
    67:    IpAddrParm(NodeBase::c_string help, NodeBase::c_string text);
C:/Users/Greg/Documents/rsc/rsc/nw/NwDaemons.cpp
  W007 Cast down the inheritance hierarchy
    121:    auto daemon = static_cast< TcpIoDaemon* >(reg->FindDaemon(name.c_str()));
    183:    auto daemon = static_cast< UdpIoDaemon* >(reg->FindDaemon(name.c_str()));
C:/Users/Greg/Documents/rsc/rsc/nw/NwDaemons.h
* W092 Function could be free
    49:    static TcpIoDaemon* GetDaemon(const TcpIpService* service, ipport_t port); // TcpIpPort.cpp
    92:    static UdpIoDaemon* GetDaemon(const UdpIpService* service, ipport_t port); // UdpIpPort.cpp
C:/Users/Greg/Documents/rsc/rsc/nw/NwIncrement.h
* W060 Base class constructor is public
    39:    NwClearWhatParm();
    54:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    97:    NwIncludeWhatParm();
    110:    explicit NwIncludeCommand(bool bind = true);
    127:    explicit NwQueryCommand(bool bind = true);
    142:    NwStatusCommand() = default;
C:/Users/Greg/Documents/rsc/rsc/nw/NwLogs.cpp
* W106 Function does not invoke Debug::ft
    143: static void UpdateAlarm
  W107 Function does not invoke Debug::ft as first statement
    99:    Debug::ft("NetworkBase.NetworkIsUp");
  W119 Argument passed by value is modified
    106/1: void OutputNwLog(LogId id, c_string func, nwerr_t errval, c_string extra)
C:/Users/Greg/Documents/rsc/rsc/nw/NwTracer.h
* W042 Member could be private
    63:    bool PeersEmpty() const;
    67:    bool PortsEmpty() const;
  W110 Override of Base.Display not found
    40: class NwTracer : public NodeBase::Permanent
C:/Users/Greg/Documents/rsc/rsc/nw/NwTypes.h
* W053 Data could be const
    60:       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
* W099 Line contains adjacent spaces
    60:       uint8_t  u8[16];  // bytes: [12-15] overlay IPv4Addr
C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.cpp
  W005 Functional cast
    64:    byte = uint8_t(value);
    101:    quartet = uint16_t(value);
* W106 Function does not invoke Debug::ft
    358: const SysIpL2Addr& SysIpL2Addr::NullIpAddr()
C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.h
* W032 Unused function
    113:    static const SysIpL2Addr& NullIpAddr();
    117:    const IPv6Addr& Addr() { return addr_; }
* W043 Member could be protected
    57:    SysIpL2Addr(const SysIpL2Addr& that) = default;
* W060 Base class constructor is public
    42:    SysIpL2Addr();
    49:    SysIpL2Addr(const std::string& text);
* W092 Function could be free
    113:    static const SysIpL2Addr& NullIpAddr(); // SysIpL2Addr.cpp
C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W004 C-style cast
    66:                auto netaddr = (sockaddr_in*) curr->ai_addr;
    74:                auto netaddr = (sockaddr_in6*) curr->ai_addr;
  W056 Implicit constructor invoked: POD members not initialized
  i 50:       addrinfo hints;
* W106 Function does not invoke Debug::ft
    127: bool SysIpL2Addr::SupportsIPv6()
C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.cpp
  W005 Functional cast
    64:    port = ipport_t(value);
C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W037 Member hides inherited name
    105:    void HostToNetwork(IPv4Addr& netaddr, ipport_t& netport) const;
    110:    void HostToNetwork(uint16_t netaddr[8], ipport_t& netport) const;
    115:    void NetworkToHost(IPv4Addr netaddr, ipport_t netport);
    120:    void NetworkToHost(const uint16_t netaddr[8], ipport_t netport);
    160:    std::string to_str(bool verbose) const;
    164:    void Nullify();
* W042 Member could be private
    164:    void Nullify();
* W060 Base class constructor is public
    41:    SysIpL3Addr();
    46:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    53:    SysIpL3Addr(IPv4Addr netaddr, ipport_t netport,
    60:    SysIpL3Addr(const uint16_t netaddr[8], ipport_t netport,
    69:    explicit SysIpL3Addr(const std::string& text);
    79:    SysIpL3Addr
  W082 Adjacent arguments have the same type
    79:    SysIpL3Addr
C:/Users/Greg/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    65:          auto netaddr = (sockaddr_in*) info->ai_addr;
    88:          auto netaddr = (sockaddr_in6*) info->ai_addr;
    139:       addrinfo = (sockaddr*) &ipv4addr;
    148:       addrinfo = (sockaddr*) &ipv6addr;
  W056 Implicit constructor invoked: POD members not initialized
  i 51:    addrinfo hints;
  i 132:    sockaddr_in ipv4addr;
  i 133:    sockaddr_in6 ipv6addr;
C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.cpp
* W106 Function does not invoke Debug::ft
    150: bool SysSocket::SetTracing(bool tracing)
    180: bool SysSocket::TraceEnabled()
C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.h
* W032 Unused function
    50: uint64_t htonll(uint64_t hostllong);
    53: uint64_t ntohll(uint32_t netllong);
* W043 Member could be protected
    107:    bool IsValid() const;
    128:    virtual AllocRc SetService(const IpService* service, bool shared);
    145:    void OutputLog(NodeBase::LogId id,
* W065 Base class virtual destructor is not public
    214:    virtual ~SysSocket();
  W075 Virtual function is public
    99:    virtual IpProtocol Protocol() const { return IpAny; }
    128:    virtual AllocRc SetService(const IpService* service, bool shared);
    134:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
* W092 Function could be free
    156:    static NodeBase::c_string AlarmName(nwerr_t errval); // NwLogs.cpp
    161:    static bool StartLayer(); // NwModule.cpp
    166:    static void StopLayer(); // NwModule.cpp
C:/Users/Greg/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    109:          (const char*)&dual, sizeof(dual)) == SOCKET_ERROR)
    135:       addr = (sockaddr*) &ipv4addr;
    145:       addr = (sockaddr*) &ipv6addr;
    276:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    283:       (char*) &max, &maxsize) == SOCKET_ERROR)
    295:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    302:       (char*) &max, &maxsize) == SOCKET_ERROR)
* W015 #include not sorted in standard order
    28: #include <winsock2.h>
  W056 Implicit constructor invoked: POD members not initialized
  i 127:    sockaddr_in ipv4addr;
  i 128:    sockaddr_in6 ipv6addr;
  i 322:    WSAData wsaData;
* W106 Function does not invoke Debug::ft
    43: uint32_t htonl(uint32_t hostlong) { return ::htonl(hostlong); }
    45: uint64_t htonll(uint64_t hostllong) { return ::htonll(hostllong); }
    47: uint16_t htons(uint16_t hostshort) { return ::htons(hostshort); }
    49: uint32_t ntohl(uint32_t netlong) { return ::ntohl(netlong); }
    51: uint64_t ntohll(uint32_t netllong) { return ::ntohll(netllong); }
    53: uint16_t ntohs(uint16_t netshort) { return ::ntohs(netshort); }
    228: bool SysSocket::IsValid() const
C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.cpp
  W119 Argument passed by value is modified
    246/1: SysSocket::SendRc SysTcpSocket::QueueBuff(IpBuffer* buff, bool henq)
C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.h
* W032 Unused function
    142:    bool LocAddr(SysIpL3Addr& locAddr);
    197:    IpBuffer* IcMsg() const { return icMsg_; }
* W042 Member could be private
    89:    NodeBase::word Connect(const SysIpL3Addr& remAddr);
    137:    NodeBase::word Send(const NodeBase::byte_t* data, size_t size);
    159:    bool SetClose(bool graceful);
    188:    bool IsOpen() const;
  W075 Virtual function is public
    180:    virtual void Acquire();
    184:    virtual void Release();
* W077 Virtual function has no overrides
    180:    virtual void Acquire();
    184:    virtual void Release();
C:/Users/Greg/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    55:       peer = (sockaddr*) &ipv6peer;
    60:       peer = (sockaddr*) &ipv4peer;
    110:       peer = (sockaddr*)&ipv6peer;
    117:       peer = (sockaddr*)&ipv4peer;
    189:       self = (sockaddr*) &ipv6self;
    194:       self = (sockaddr*) &ipv4self;
    327:       peer = (sockaddr*) &ipv6peer;
    332:       peer = (sockaddr*) &ipv4peer;
    398:       (char*) &linger_opts, sizeof(linger)) != SOCKET_ERROR)
    424:       (const char*) &alive, sizeof(alive)) == SOCKET_ERROR)
    434:       (char*) &val, &valsize) == SOCKET_ERROR)
  W006 reinterpret_cast
    300:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), size, 0);
    371:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), size, 0);
  W007 Cast down the inheritance hierarchy
    421:    bool alive = static_cast< const TcpIpService* >(service)->Keepalive();
  W056 Implicit constructor invoked: POD members not initialized
  i 46:    sockaddr_in ipv4peer;
  i 47:    sockaddr_in6 ipv6peer;
  i 97:    sockaddr_in ipv4peer;
  i 98:    sockaddr_in6 ipv6peer;
  i 180:    sockaddr_in ipv4self;
  i 181:    sockaddr_in6 ipv6self;
  i 318:    sockaddr_in ipv4peer;
  i 319:    sockaddr_in6 ipv6peer;
  i 393:    linger linger_opts;
  W119 Argument passed by value is modified
    154/1: word SysTcpSocket::Listen(size_t backlog)
C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.h
* W042 Member could be private
    73:    NodeBase::word SendTo
C:/Users/Greg/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    52:          (char*) &max, &maxsize) == SOCKET_ERROR)
    93:       peer = (sockaddr*) &ipv6peer;
    98:       peer = (sockaddr*) &ipv4peer;
    162:       peer = (sockaddr*) &ipv6peer;
    169:       peer = (sockaddr*) &ipv4peer;
  W006 reinterpret_cast
    103:       reinterpret_cast< char* >(buff), size, 0, peer, &peersize);
    174:       reinterpret_cast< const char* >(data), size, 0, peer, peersize);
  W056 Implicit constructor invoked: POD members not initialized
  i 84:    sockaddr_in ipv4peer;
  i 85:    sockaddr_in6 ipv6peer;
  i 149:    sockaddr_in ipv4peer;
  i 150:    sockaddr_in6 ipv6peer;
C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    213:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    223:    auto svc = static_cast< const TcpIpService* >(ipPort_->GetService());
    308:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    470:    auto sock = static_cast< SysTcpSocket* >(socket);
* W106 Function does not invoke Debug::ft
    490: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/Greg/Documents/rsc/rsc/nw/TcpIoThread.h
* W042 Member could be private
    75:    void Unblock() override;
C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    61:    auto thread = static_cast< TcpIoThread* >(GetThread());
    67:       thread = static_cast< TcpIoThread* >(CreateIoThread());
    73:    auto svc = static_cast< const TcpIpService* >(GetService());
    93:    auto svc = static_cast< const TcpIpService* >(GetService());
C:/Users/Greg/Documents/rsc/rsc/nw/TcpIpService.h
* W042 Member could be private
    86:    IpPort* CreatePort(ipport_t pid) override;
  W075 Virtual function is public
    40:    virtual bool AcceptsConns() const { return true; }
    45:    virtual size_t MaxConns() const = 0;
    50:    virtual size_t MaxBacklog() const = 0;
    54:    virtual bool Keepalive() const { return false; }
C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    94:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    98:       auto svc = static_cast< const UdpIpService* >(ipPort_->GetService());
    199:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
C:/Users/Greg/Documents/rsc/rsc/nw/UdpIoThread.h
* W042 Member could be private
    58:    void Unblock() override;
* W090 Function could be const
    62:    void ReleaseResources();
C:/Users/Greg/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto svc = static_cast< const UdpIpService* >(GetService());
C:/Users/Greg/Documents/rsc/rsc/nw/UdpIpService.h
* W042 Member could be private
    59:    IpPort* CreatePort(ipport_t pid) override;
C:/Users/Greg/Documents/rsc/rsc/on/OnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/on/OnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PbModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/pb/PbModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsBicFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    80: CliText* PotsBicFeature::Attrs() const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsBicFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsBocFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    69: CliText* PotsBocFeature::Attrs() const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsBocFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    76: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfbFeature.h
* W020 Using statement in header
    30: using namespace CallBase;
    31: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    86: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfnFeature.h
* W020 Using statement in header
    31: using namespace CallBase;
    32: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    76: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCfuFeature.h
* W020 Using statement in header
    30: using namespace CallBase;
    31: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCircuit.h
* W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
    42: using namespace NodeBase;
    43: using namespace SessionBase;
* W032 Unused function
    93:    bool IsRinging() const { return ringing_; }
    97:    bool CanFlash() const { return flash_; }
    102:    Cause::Ind GetCause() const { return cause_; }
* W042 Member could be private
    134:    void ResetCircuit();
  W056 Implicit constructor invoked: POD members not initialized
    170:    struct SignalEntry
  i 234:    SignalEntry trace_[TraceSize];
* W092 Function could be free
    138:    static void DisplayStateCounts // AnIncrement.cpp
    147:    static void ResetStateCounts(RestartLevel level); // PotsProfileRegistry.cpp
* W127 Data could be free
    181:    static const SignalEntry NilSignalEntry; // PotsCircuit.cpp
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCliParms.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCliParms.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    64: CliText* PotsCwtFeature::Attrs() const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCwtFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    65: CliText* PotsCxfFeature::Attrs() const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsCxfFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    72:    Id Fid() const { return Id(fid_.GetId()); }
* W020 Using statement in header
    39: using namespace NodeBase;
  W026 Unused argument
    95/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
* W042 Member could be private
    72:    Id Fid() const { return Id(fid_.GetId()); }
    80:    c_string FullName() const { return name_; }
    84:    bool CanBeDeactivated() const { return deactivation_; }
  W075 Virtual function is public
    94:    virtual PotsFeatureProfile* Subscribe
  W082 Adjacent arguments have the same type
    107:    PotsFeature(Id fid, bool deactivation, c_string abbr, c_string name);
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    94:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureProfile.h
* W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    63/1:    virtual bool Deactivate(PotsProfile& profile);
    87/1:    virtual bool Unsubscribe(PotsProfile& profile);
* W042 Member could be private
    67:    PotsFeature::Id Fid() const { return fid_; }
* W053 Data could be const
    99:    Q1Link link_;
* W065 Base class virtual destructor is not public
    80:    virtual ~PotsFeatureProfile();
  W075 Virtual function is public
    58:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    63:    virtual bool Deactivate(PotsProfile& profile);
* W077 Virtual function has no overrides
    87:    virtual bool Unsubscribe(PotsProfile& profile);
* W088 Argument could be const
    58/1:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
* W020 Using statement in header
    36: using namespace NodeBase;
* W090 Function could be const
    66:    void Audit();
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    105: void DnRouteFeatureProfile::SetActive(bool on)
    113: void DnRouteFeatureProfile::SetDN(Address::DN dn)
C:/Users/Greg/Documents/rsc/rsc/pb/PotsFeatures.h
* W020 Using statement in header
    29: using namespace CallBase;
    30: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    81: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/Greg/Documents/rsc/rsc/pb/PotsHtlFeature.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
* W053 Data could be const
    59:    Address::DN dn_;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    398:       auto mep = static_cast< MediaEndpt* >(obj);
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsMessages.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    84:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfile.h
* W020 Using statement in header
    36: using namespace NodeBase;
    37: using namespace CallBase;
    38: using namespace SessionBase;
* W090 Function could be const
    108:    void SetState(const ProtocolSM* psm, State state);
    118:    bool SetObjAddr(const MsgPort& port);
  W110 Override of Base.Display not found
    81:    struct PotsProfileDynamic : public Persistent
C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    107: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsProfileRegistry.h
* W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    453:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    635:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    748:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    830:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    466:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    523:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    647:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    671:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    759:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    841:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    463:    id_t             index;
    464:    word             sid, ind;
    466:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    522:    TestRc            rc;
    523:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    525:    id_t              index;
    526:    word              sid, ind;
    645:    word           port;
    647:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    670:    TestRc          rc;
    671:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    672:    word            port;
    758:    TestRc        rc;
    759:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    761:    bool          ring = false;
    762:    auto          exists = false;
    840:    TestRc        rc;
    841:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    843:    string        scan;
    844:    auto          digits = false;
    845:    auto          flash = false;
    846:    auto          exists = false;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsProtocol.h
* W020 Using statement in header
    46: using namespace NodeBase;
    47: using namespace SessionBase;
    48: using namespace MediaBase;
    49: using namespace CallBase;
* W028 Unused data
    106:    static const Id LastId    = NextId + 9;  // range constant
    134:    static const Id LastId   = NextId + 7;  // range constant
* W032 Unused function
    288:    MediaInfo* AddMedia(const MediaInfo& media);
  W038 Class could be namespace
    214: class Facility
* W043 Member could be protected
    264:    explicit PotsMessage(SbIpBufferPtr& buff);
* W060 Base class constructor is public
    264:    explicit PotsMessage(SbIpBufferPtr& buff);
    268:    PotsMessage(ProtocolSM* psm, size_t size);
C:/Users/Greg/Documents/rsc/rsc/pb/PotsSusFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    62: CliText* PotsSusFeature::Attrs() const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsSusFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    81: CliText* PotsTwcFeature::Attrs() const
C:/Users/Greg/Documents/rsc/rsc/pb/PotsTwcFeature.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    85: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/Greg/Documents/rsc/rsc/pb/PotsWmlFeature.h
* W020 Using statement in header
    31: using namespace CallBase;
    32: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/rn/RnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/rn/RnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/rsc/main.cpp
* W015 #include not sorted in standard order
    63: #include "SysTypes.h"
* W032 Unused function
    102: main_t main(int argc, char* argv[])
C:/Users/Greg/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
* W106 Function does not invoke Debug::ft
    86: void AnalyzeSapEvent::Capture
C:/Users/Greg/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
* W106 Function does not invoke Debug::ft
    82: void AnalyzeSnpEvent::Capture
C:/Users/Greg/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    577:    auto fake = reinterpret_cast< const Context* >(&local);
    867:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    757:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    862:          auto pptr = static_cast< TlvMessage* >
* W106 Function does not invoke Debug::ft
    335: void Context::Dump() const
    932: bool Context::TraceOn()
    942: bool Context::TraceOn(TransTrace*& trans)
  W107 Function does not invoke Debug::ft as first statement
    689:    Debug::ft(Context_ProcessWork);
  W119 Argument passed by value is modified
    385/3: void Context::Enqueue(Q2Way< Context >& whichq, MsgPriority prio, bool henq)
    683/1: void Context::ProcessWork(InvokerThread* inv)
C:/Users/Greg/Documents/rsc/rsc/sb/Context.h
* W032 Unused function
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset);
    125:    static void Dump(NodeBase::fn_name_arg func,
  W037 Member hides inherited name
    166:    static ptrdiff_t LinkDiff();
* W042 Member could be private
    158:    bool StopTimer(const Base& owner, TimerId tid);
    192:    virtual void EndOfTransaction() { }
* W053 Data could be const
    309:    NodeBase::Q2Link link_;
    333:    NodeBase::Faction faction_;
  W056 Implicit constructor invoked: POD members not initialized
    220:    struct MessageEntry
  i 357:    MessageEntry trace_[TraceSize];
* W065 Base class virtual destructor is not public
    188:    virtual ~Context();
  W075 Virtual function is public
    98:    virtual ContextType Type() const = 0;
    102:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    106:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    110:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    114:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W082 Adjacent arguments have the same type
    132:    void TraceMsg(ProtocolId prid, SignalId sid, NodeBase::MsgDirection dir);
* W088 Argument could be const
    288/1:    bool ProcessMsg(NodeBase::Q1Way< Message >& msgq, const InvokerThread* inv);
* W090 Function could be const
    158:    bool StopTimer(const Base& owner, TimerId tid);
    192:    virtual void EndOfTransaction() { }
* W092 Function could be free
    84:    static RootServiceSM* ContextRoot(); // Event.cpp
    120:    static void Kill(NodeBase::debug64_t errval, NodeBase::debug64_t offset); // Context.cpp
    125:    static void Dump(NodeBase::fn_name_arg func, // Context.cpp
* W127 Data could be free
    361:    static const MessageEntry NilMessageEntry; // Context.cpp
  W141 Function could be moved to a subclass
    192:    virtual void EndOfTransaction() { } // MsgContext
C:/Users/Greg/Documents/rsc/rsc/sb/Event.cpp
* W106 Function does not invoke Debug::ft
    137: void Event::Capture
C:/Users/Greg/Documents/rsc/rsc/sb/Event.h
* W042 Member could be private
    130:    virtual bool Save();
    134:    virtual Event* Restore(EventHandler::Rc& rc);
    138:    virtual void Free();
* W043 Member could be protected
    96:    enum Location
* W092 Function could be free
    70:    static bool AppCanHandle(Id eid) // State.cpp
C:/Users/Greg/Documents/rsc/rsc/sb/EventHandler.h
  W075 Virtual function is public
    123:    virtual Rc ProcessEvent
* W092 Function could be free
    92:    static bool AppCanRegister(Id ehid) // Service.cpp
    100:    static bool AppCanUse(Id ehid) // State.cpp
* W111 Override of Object.Patch not found
    48: class EventHandler : public NodeBase::Immutable
C:/Users/Greg/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    201:    auto fake = reinterpret_cast< const Factory* >(&local);
* W099 Line contains adjacent spaces
    53:    CounterPtr       icMsgsIntra_;
    54:    CounterPtr       icMsgsInter_;
    56:    CounterPtr       ogMsgsIntra_;
    57:    CounterPtr       ogMsgsInter_;
    59:    CounterPtr       contexts_;
    60:    CounterPtr       msgsDeleted_;
    61:    CounterPtr       ctxsDeleted_;
* W106 Function does not invoke Debug::ft
    216: size_t Factory::DiscardedContextCount() const
    223: size_t Factory::DiscardedMessageCount() const
  W110 Override of Base.Display not found
    45: class FactoryStats : public Dynamic
C:/Users/Greg/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    91:    Id Fid() const { return Id(fid_.GetId()); }
  W026 Unused argument
    131/1:    virtual Message* AllocOgMsg(SignalId sid) const;
    151/1:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    151/2:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
* W030 Unused enumerator
    85:       PortAllocFailed,      // failed to create PSM for context
* W032 Unused function
    231:    void SetFaction(NodeBase::Faction faction) { faction_ = faction; }
* W042 Member could be private
    151:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    235:    virtual Context* AllocContext() const;
  W075 Virtual function is public
    125:    virtual NodeBase::CliText* CreateText() const;
    131:    virtual Message* AllocOgMsg(SignalId sid) const;
    138:    virtual bool InjectMsg(Message& msg) const;
    144:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    151:    virtual bool ScreenFirstMsg(const Message& msg, MsgPriority& prio) const;
    161:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    183:    virtual void DisplayStats
* W077 Virtual function has no overrides
    183:    virtual void DisplayStats
  W082 Adjacent arguments have the same type
    168:    void RecordMsg(bool incoming, bool inter, size_t size) const;
* W088 Argument could be const
    161/1:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
* W090 Function could be const
    161:    virtual bool ScreenIcMsgs(NodeBase::Q1Way< Message >& msgq);
    257:    virtual Rc ReceiveMsg
  W141 Function could be moved to a subclass
    235:    virtual Context* AllocContext() const; // PsmFactory
C:/Users/Greg/Documents/rsc/rsc/sb/FactoryRegistry.cpp
* W106 Function does not invoke Debug::ft
    147: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/Greg/Documents/rsc/rsc/sb/GlobalAddress.h
* W032 Unused function
    47:    GlobalAddress(const NetworkBase::SysIpL3Addr& l3Addr, FactoryId fid);
    66:    GlobalAddress(GlobalAddress&& that) = default;
  W082 Adjacent arguments have the same type
    51:    GlobalAddress
C:/Users/Greg/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
* W106 Function does not invoke Debug::ft
    84: void InitiationReqEvent::Capture
C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    217:    auto fake = reinterpret_cast< const Initiator* >(&local);
C:/Users/Greg/Documents/rsc/rsc/sb/Initiator.h
* W053 Data could be const
    137:    NodeBase::Q1Link link_;
* W065 Base class virtual destructor is not public
    99:    virtual ~Initiator();
  W082 Adjacent arguments have the same type
    94:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
* W088 Argument could be const
    108/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    283:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    240:    invokersCfg_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    567:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
* W099 Line contains adjacent spaces
    119:    CounterPtr       requeues_;
    120:    CounterPtr       trojans_;
    121:    CounterPtr       lockouts_;
* W106 Function does not invoke Debug::ft
    738: void InvokerPool::RecordDelay(MsgPriority prio, const Duration& delay) const
    790: size_t InvokerPool::WorkQCurrLength(MsgPriority prio) const
    798: Duration InvokerPool::WorkQMaxDelay(MsgPriority prio) const
    806: size_t InvokerPool::WorkQMaxLength(MsgPriority prio) const
  W110 Override of Base.Display not found
    110: class InvokerPoolStats : public Dynamic
    151: class InvokerWork : public Dynamic
C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    72:       { return NodeBase::Faction(faction_.GetId()); }
  W075 Virtual function is public
    90:    virtual void DisplayStats
* W077 Virtual function has no overrides
    90:    virtual void DisplayStats
* W090 Function could be const
    149:    void KickThread();
    153:    Context* FindWork();
    172:    void Requeue(Context& ctx);
    180:    void ScheduledOut();
C:/Users/Greg/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    87:       auto p = reg->Pool(Faction(id));
* W106 Function does not invoke Debug::ft
    169: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    128:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
* W106 Function does not invoke Debug::ft
    117: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/Greg/Documents/rsc/rsc/sb/InvokerThread.h
* W042 Member could be private
    57:    static NodeBase::word RtcYieldPercent() { return RtcYieldPercent_; }
* W053 Data could be const
    132:    NodeBase::RegCell iid_;
    158:    static NodeBase::word RtcYieldPercent_;
C:/Users/Greg/Documents/rsc/rsc/sb/LocalAddress.h
* W032 Unused function
    55:    LocalAddress(LocalAddress&& that) = default;
C:/Users/Greg/Documents/rsc/rsc/sb/Message.cpp
* W106 Function does not invoke Debug::ft
    236: MsgDirection Message::Dir() const
    323: ProtocolId Message::GetProtocol() const
    354: SignalId Message::GetSignal() const
    409: MsgHeader* Message::Header() const
  W119 Argument passed by value is modified
    589/1: bool Message::Retrieve(ProtocolSM* psm)
    656/1: bool Message::Send(Route route)
  W125 Non-const cast is not a downcast
    954:          auto bt = dynamic_cast< const BuffTrace* >(bt_);
C:/Users/Greg/Documents/rsc/rsc/sb/Message.h
* W029 Unused enum
    72:    enum Location
* W030 Unused enumerator
    88:       IllegalSignal,   // illegal signal found              0000  sid
    89:       IllegalParm,     // illegal parameter found          index  pid
    90:       IncompleteParm,  // parameter too short              index  pid
    91:       MissingParm,     // mandatory parameter missing       0000  pid
    92:       Overflow,        // last parameter extends past end  index  pid
    93:       Trampled         // last parameter trampled fence    index  pid
* W032 Unused function
    181:    Message* FindSignal(SignalId sid) const;
* W042 Member could be private
    329:    virtual void Handled(bool retain);
    333:    virtual bool SendFailure(NodeBase::debug64_t errval);
* W043 Member could be protected
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    241:    NodeBase::MsgDirection Dir() const;
  W075 Virtual function is public
    132:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    262:    virtual bool Send(Route route);
    266:    virtual bool Restore();
* W077 Virtual function has no overrides
    152:    virtual void Save();
    157:    virtual void Unsave();
    165:    virtual bool Retrieve(ProtocolSM* psm);
    172:    virtual bool Relay(ProtocolSM& ogPsm);
    176:    virtual bool SendToSelf();
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    266:    virtual bool Restore();
    316:    virtual void Refresh();
    329:    virtual void Handled(bool retain);
    333:    virtual bool SendFailure(NodeBase::debug64_t errval);
    341:    virtual void ClearContext() const;
* W088 Argument could be const
    132/1:    virtual InspectRc InspectMsg(NodeBase::debug64_t& errval) const;
* W090 Function could be const
    110:    void SetSignal(SignalId sid);
    114:    void SetJoin(bool join);
    225:    void SetProtocol(ProtocolId prid);
    229:    void SetPriority(MsgPriority prio);
    233:    virtual void SetReceiver(const GlobalAddress& receiver);
    237:    virtual void SetSender(const GlobalAddress& sender);
    358:    void SetRxAddr(const LocalAddress& rxaddr);
C:/Users/Greg/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    75:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
C:/Users/Greg/Documents/rsc/rsc/sb/MsgHeader.h
* W099 Line contains adjacent spaces
    42:    LocalAddress   txAddr;         // source address
    43:    LocalAddress   rxAddr;         // destination address
    44:    MsgPriority    priority : 2;   // message's priority
    45:    bool           initial  : 1;   // true for initial message
    46:    bool           final    : 1;   // true for final message
    47:    bool           join     : 1;   // true to create PSM and join root SSM
    48:    bool           self     : 1;   // true for message to self
    49:    bool           injected : 1;   // true if sent by InjectCommand
    50:    bool           kill     : 1;   // true to kill context on arrival
    51:    uint8_t        spare    : 6;   // reserved for future use
    52:    Message::Route route    : 2;   // the route that the message took
    53:    ProtocolId     protocol : 16;  // message's protocol
    54:    SignalId       signal   : 16;  // message's signal
    55:    uint16_t       length   : 16;  // total bytes in all parameters
C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    74:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    146:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    204:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    259:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    334:    return const_cast< MsgPort* >(this);
C:/Users/Greg/Documents/rsc/rsc/sb/MsgPort.h
* W042 Member could be private
    53:    MsgPort(const Message& msg, Context& ctx);
* W092 Function could be free
    168:    static MsgPort* FindPeer(const GlobalAddress& remAddr); // PsmFactory.cpp
C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    108:    auto fake = reinterpret_cast< const Parameter* >(&local);
* W106 Function does not invoke Debug::ft
    198: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/Greg/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    85:    Id Pid() const { return Id(pid_.GetId()); }
* W030 Unused enumerator
    121:       StreamContainsIllegalParm,
* W032 Unused function
    89:    ProtocolId Prid() const { return prid_; }
  W075 Virtual function is public
    99:    virtual void DisplayMsg(std::ostream& stream, const std::string& prefix,
    108:    virtual NodeBase::CliParm* CreateCliParm(Usage use) const;
    137:    virtual TestRc InjectMsg
    150:    virtual TestRc VerifyMsg
* W092 Function could be free
    155:    static NodeBase::c_string ExplainRc(TestRc rc); // StIncrement.cpp
C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const Protocol* >(&local);
* W106 Function does not invoke Debug::ft
    129: Parameter* Protocol::FirstParm() const
    142: Signal* Protocol::FirstSignal() const
    155: Parameter* Protocol::GetParameter(ParameterId pid) const
    167: Signal* Protocol::GetSignal(SignalId sid) const
    179: void Protocol::NextParm(Parameter*& parm) const
    192: void Protocol::NextSignal(Signal*& sig) const
C:/Users/Greg/Documents/rsc/rsc/sb/Protocol.h
  W075 Virtual function is public
    82:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    114:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolLayer.h
  W026 Unused argument
    150/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
* W032 Unused function
    68:    bool IsLowermost() const { return lower_ == nullptr; }
* W042 Member could be private
    89:    virtual FactoryId GetFactory() const = 0;
* W043 Member could be protected
    64:    bool IsUppermost() const { return upper_ == nullptr; }
* W065 Base class virtual destructor is not public
    126:    virtual ~ProtocolLayer();
  W075 Virtual function is public
    52:    virtual MsgPort* Port() const = 0;
    56:    virtual ProtocolSM* UppermostPsm() const = 0;
    89:    virtual FactoryId GetFactory() const = 0;
    93:    virtual Message::Route Route() const = 0;
    102:    virtual NetworkBase::SysTcpSocket* CreateAppSocket();
* W090 Function could be const
    167:    virtual Message* UnwrapMsg(Message& msg);
    174:    virtual Message* WrapMsg(Message& msg);
C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
* W106 Function does not invoke Debug::ft
    78: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    404:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    638:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
C:/Users/Greg/Documents/rsc/rsc/sb/ProtocolSM.h
  W026 Unused argument
    288/1:    virtual void MsgHandled(Message& msg) { }
    294/1:    virtual void RestoreIcMsg(Message& msg) { }
    300/1:    virtual void RefreshMsg(Message& msg) { }
* W030 Unused enumerator
    96:       SignalUnknown,     // signal not recognized
    98:       ParameterUnknown,  // parameter not recognized
    99:       ParameterInvalid,  // parameter not valid for this signal
* W032 Unused function
    137:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    168:    bool DropPeer(const GlobalAddress& peerPrevRemAddr);
* W042 Member could be private
    145:    ProtocolId GetProtocol() const;
    253:    bool SendMsg(Message& msg) override;
* W043 Member could be protected
    76:    enum IncomingRc
    85:    enum OutgoingRc
    131:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
* W077 Virtual function has no overrides
    239:    virtual void SetState(StateId stid);
    283:    virtual Priority GetPriority() const { return NormalPriority; }
    288:    virtual void MsgHandled(Message& msg) { }
    294:    virtual void RestoreIcMsg(Message& msg) { }
    300:    virtual void RefreshMsg(Message& msg) { }
* W090 Function could be const
    118:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/Greg/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    47:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
C:/Users/Greg/Documents/rsc/rsc/sb/RootServiceSM.h
  W026 Unused argument
    50/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W075 Virtual function is public
    50:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/Greg/Documents/rsc/rsc/sb/SbDaemons.cpp
  W007 Cast down the inheritance hierarchy
    119:    auto daemon = static_cast< InvokerDaemon* >(reg->FindDaemon(name.c_str()));
C:/Users/Greg/Documents/rsc/rsc/sb/SbDaemons.h
* W092 Function could be free
    43:    static InvokerDaemon* GetDaemon(NodeBase::Faction faction, size_t size); // InvokerPool.cpp
C:/Users/Greg/Documents/rsc/rsc/sb/SbEvents.h
* W032 Unused function
    91:    StateId CurrState() const { return currState_; }
    131:    Message* SavedMsg() const { return savedMsg_; }
    227:    StateId CurrState() const { return currState_; }
    231:    StateId NextState() const { return nextState_; }
    372:    bool IsInitiation() const { return initiation_; }
    383:    Message* GetMessage() const { return message_; }
C:/Users/Greg/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    50:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    120:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    134:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    696:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    654:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    761:       auto msg = static_cast< Message* >(obj);
    846:       auto port = static_cast< MsgPort* >(obj);
    1052:       auto psm = static_cast< ProtocolSM* >(obj);
    1276:       auto ssm = static_cast< ServiceSM* >(obj);
    1483:       auto tmr = static_cast< Timer* >(obj);
C:/Users/Greg/Documents/rsc/rsc/sb/SbIncrement.h
* W028 Unused data
    55:    static const NodeBase::id_t LastSbIndex    = LastNwIndex + 9;
    85:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const NodeBase::id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/Greg/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    75:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    103:    SbIpBufferPtr sbbuff(static_cast< SbIpBuffer* >(buff.release()));
C:/Users/Greg/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    61:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    72:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
C:/Users/Greg/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    62:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    204:       auto port = static_cast< MsgPort* >(obj);
    261:    auto psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
    278:       psm = static_cast< ProtocolSM* >(NextUsed(PsmToAudit_));
* W106 Function does not invoke Debug::ft
    370: void TimerPool::IncrTimeouts() const
C:/Users/Greg/Documents/rsc/rsc/sb/SbPools.h
  W110 Override of Base.Display not found
    167: class TimerPool : public NodeBase::ObjectPool
C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    99:    width -= col_t(label.size());
    188:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    193:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  W007 Cast down the inheritance hierarchy
    398:          bt = static_cast< BuffTrace* >(rec);
    851:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    854:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    881:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W082 Adjacent arguments have the same type
    65: static void DisplayEvent(ostream& stream, ServiceId sid, EventId eid)
  W119 Argument passed by value is modified
    382/1:    (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip)
C:/Users/Greg/Documents/rsc/rsc/sb/SbTrace.h
* W042 Member could be private
    520:    const StateId stid_;
  W050 Data is not private
    482:    ServiceId owner_;
    486:    const EventId eid_;
    516:    const ServiceId sid_;
    520:    const StateId stid_;
    524:    const EventHandler::Rc rc_;
* W060 Base class constructor is public
    462:    EventTrace(Id rid, const Event& evt);
    503:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W082 Adjacent arguments have the same type
    174:    static BuffTrace* NextIcMsg
  W121 Static member function has indirect argument for its class
    175/1:       (BuffTrace* bt, FactoryId fid, SignalId sid, SkipInfo& skip);
C:/Users/Greg/Documents/rsc/rsc/sb/SbTracer.h
  W082 Adjacent arguments have the same type
    136:    NodeBase::TraceRc SelectSignal
    190:       SignalFilter(ProtocolId p, SignalId s, NodeBase::TraceStatus ts);
  W110 Override of Base.Display not found
    113: class SbTracer : public NodeBase::Permanent
C:/Users/Greg/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    287:    auto fake = reinterpret_cast< const Service* >(&local);
* W106 Function does not invoke Debug::ft
    377: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/Greg/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    65:    Id Sid() const { return Id(sid_.GetId()); }
* W032 Unused function
    131:    bool Disable();
    135:    bool Enable();
* W042 Member could be private
    65:    Id Sid() const { return Id(sid_.GetId()); }
    79:    static bool IsValidPortId(PortId pid)
    121:    bool IsModifiable() const { return modifiable_; }
    125:    bool IsModifier() const { return modifier_; }
* W043 Member could be protected
    87:    virtual NodeBase::c_string PortName(PortId pid) const;
  W075 Virtual function is public
    87:    virtual NodeBase::c_string PortName(PortId pid) const;
    117:    virtual ServiceSM* AllocModifier() const;
  W082 Adjacent arguments have the same type
    181:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
* W092 Function could be free
    79:    static bool IsValidPortId(PortId pid) // State.cpp
C:/Users/Greg/Documents/rsc/rsc/sb/ServiceRegistry.cpp
* W106 Function does not invoke Debug::ft
    78: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    448:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    452:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    453:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    504:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    510:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    511:          modifierInit = static_cast< AnalyzeSapEvent* >
    764:             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
    767:             else if(static_cast< AnalyzeSapEvent* >(nextEvent)
    865:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    869:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    931:             auto sibling = static_cast< InitiationReqEvent* >
    972:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
* W106 Function does not invoke Debug::ft
    313: Service* ServiceSM::GetService() const
* W117 Line can merge with the next line and be under the length limit
    765:                   ->CurrInitiator() != nullptr)
    768:                   ->CurrSsm() != nullptr)
  W119 Argument passed by value is modified
    392/1: EventHandler::Rc ServiceSM::ProcessEvent(Event* currEvent, Event*& nextEvent)
    832/2:    (const Trigger* trigger, const Initiator* modifier, Event& sapEvent,
    900/2:    (const Trigger* trigger, const Initiator* modifier, Event& snpEvent)
C:/Users/Greg/Documents/rsc/rsc/sb/ServiceSM.h
  W026 Unused argument
    79/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    187/1:       (Event& currEvent, Event*& nextEvent);
    187/2:       (Event& currEvent, Event*& nextEvent);
* W032 Unused function
    132:    bool HasTriggered(TriggerId tid) const;
* W042 Member could be private
    95:    StateId NextState() const { return nextState_; }
* W065 Base class virtual destructor is not public
    167:    virtual ~ServiceSM();
  W075 Virtual function is public
    67:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    73:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    79:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    100:    virtual void SetNextState(StateId stid);
    107:    virtual void PsmDeleted(ProtocolSM& exPsm);
    121:    virtual void SetNextSap(TriggerId sap);
    127:    virtual void SetNextSnp(TriggerId snp);
    139:    virtual void MorphToService(ServiceId sid);
* W077 Virtual function has no overrides
    139:    virtual void MorphToService(ServiceId sid);
* W088 Argument could be const
    107/1:    virtual void PsmDeleted(ProtocolSM& exPsm);
* W090 Function could be const
    186:    virtual EventHandler::Rc ProcessInitNack
    235:    EventHandler::Rc ProcessSsmqSap
    246:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/Greg/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    81:    auto fake = reinterpret_cast< const Signal* >(&local);
C:/Users/Greg/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    81:    Id Sid() const { return Id(sid_.GetId()); }
* W032 Unused function
    85:    ProtocolId Prid() const { return prid_; }
  W075 Virtual function is public
    92:    virtual NodeBase::CliText* CreateText() const;
C:/Users/Greg/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    81:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
C:/Users/Greg/Documents/rsc/rsc/sb/SsmFactory.h
  W026 Unused argument
    48/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W075 Virtual function is public
    42:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    48:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W082 Adjacent arguments have the same type
    56:    SsmFactory(Id fid, ProtocolId prid, NodeBase::c_string name);
C:/Users/Greg/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    204:    auto fake = reinterpret_cast< const State* >(&local);
* W106 Function does not invoke Debug::ft
    133: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    168: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    251: EventHandlerId State::GetHandler(EventId eid) const
    259: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/Greg/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    60:    Id Stid() const { return Id(stid_.GetId()); }
* W032 Unused function
    64:    ServiceId Sid() const { return sid_; }
C:/Users/Greg/Documents/rsc/rsc/sb/TextTlvMessage.h
  W027 Unused class
    37: class TextTlvMessage : public TlvMessage
* W032 Unused function
    58:    explicit TextTlvMessage(SbIpBufferPtr& text);
    62:    TextTlvMessage(ProtocolSM* psm, size_t size);
    68:    bool Receive();
* W077 Virtual function has no overrides
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
* W090 Function could be const
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
C:/Users/Greg/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    189:    auto fake = reinterpret_cast< const Timer* >(&local);
C:/Users/Greg/Documents/rsc/rsc/sb/Timer.h
  W037 Member hides inherited name
    106:    static ptrdiff_t LinkDiff();
* W053 Data could be const
    134:    TimerId tid_;
    146:    NodeBase::Q2Link link_;
C:/Users/Greg/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    106:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
C:/Users/Greg/Documents/rsc/rsc/sb/TimerProtocol.h
* W111 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
C:/Users/Greg/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W119 Argument passed by value is modified
    75/1: Timer::QId TimerRegistry::CalcQId(secs_t secs) const
C:/Users/Greg/Documents/rsc/rsc/sb/TimerThread.cpp
* W106 Function does not invoke Debug::ft
    61: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/Greg/Documents/rsc/rsc/sb/TlvIntParameter.h
  W007 Cast down the inheritance hierarchy
    69:       auto& tlvmsg = static_cast< TlvMessage& >(msg);
    101:       auto& tlvmsg = static_cast< const TlvMessage& >(msg);
C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    166:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    250:    return (Fence*) fence;
    394:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    64:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    458:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W008 Cast removes const qualification
    394:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W009 Pointer arithmetic
    166:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    249:    auto fence = layout->bytes + layout->header.length;
  W119 Argument passed by value is modified
    223/2: TlvParmPtr TlvMessage::CopyParm(const TlvParmLayout& src, ParameterId pid)
C:/Users/Greg/Documents/rsc/rsc/sb/TlvMessage.h
  W006 reinterpret_cast
    79:       return reinterpret_cast< T* >(pptr->bytes);
    93:       auto dest = reinterpret_cast< T* >(pptr->bytes);
    128:       parm = (pptr == nullptr ? nullptr : reinterpret_cast< T* >(pptr->bytes));
    282:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
* W032 Unused function
    58:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    176:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    182:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    196:    TlvParmPtr AddBytes
    203:    TlvParmPtr CopyParm
    265:    NodeBase::byte_t* FindBytes(size_t& size, ParameterId pid) const;
    272:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    287:    size_t ParmOffset(ParmIterator& pit) const;
* W042 Member could be private
    147:       ParmIterator() : mptr(nullptr), pptr(nullptr), pindex(0) { }
    150:       ParmIterator& operator=(const ParmIterator& that) = default;
    165:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    170:    TlvParmPtr NextParm(ParmIterator& pit) const;
    191:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    277:    virtual void AddFence();
    281:    TlvMsgLayout* TlvLayout() const
    292:    Fence* FencePtr() const;
    296:    void CheckFence() const;
* W060 Base class constructor is public
    50:    TlvMessage(ProtocolSM* psm, size_t size);
    58:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  W075 Virtual function is public
    67:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    191:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    208:    virtual void DeleteParm(TlvParmLayout& parm);
* W077 Virtual function has no overrides
    67:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    191:    virtual TlvParmPtr AddParm(ParameterId pid, size_t plen);
    208:    virtual void DeleteParm(TlvParmLayout& parm);
    272:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    277:    virtual void AddFence();
  W082 Adjacent arguments have the same type
    104:    template< class T > T* CopyType
* W088 Argument could be const
    208/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W119 Argument passed by value is modified
    105/3:       (const TlvMessage& icMsg, ParameterId icPid, ParameterId ogPid = 0)
C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    67:    auto& tmsg = static_cast< const TlvMessage& >(msg);
C:/Users/Greg/Documents/rsc/rsc/sb/TlvParameter.h
* W032 Unused function
    71:    static Id ExtractPid(const TlvParmLayout& parm);
  W044 Typedef of pointer type
    58: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    59: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
* W092 Function could be free
    71:    static Id ExtractPid(const TlvParmLayout& parm); // TlvParameter.cpp
C:/Users/Greg/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    66:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
C:/Users/Greg/Documents/rsc/rsc/sb/Trigger.h
* W042 Member could be private
    80:    static bool IsValidId(Id tid)
* W092 Function could be free
    80:    static bool IsValidId(Id tid) // ServiceSM.cpp
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    61:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    96:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    109:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    111:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    128:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    140:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    141:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    156:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    158:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    164:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    185:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    210:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    237:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    251:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    272:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    284:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    296:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    308:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    320:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    322:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    339:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    358:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    370:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    383:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    397:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    398:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    412:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    424:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    426:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    453:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    465:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    466:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    478:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    479:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    497:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    514:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    526:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    528:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    551:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    577:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    589:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    602:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    615:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    617:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    635:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    647:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    663:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    665:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    682:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    707:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    723:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    736:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    752:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    765:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    781:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    783:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    792:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    817:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    818:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    854:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    868:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    882:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    883:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    896:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    897:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    929:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    950:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcHandlers.h
* W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcService.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    75:       auto& ppsm = static_cast< PotsCallPsm& >(psm);
    80:       auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    88:       SetNPsm(static_cast< CipPsm& >(psm));
    92:       SetUPsm(static_cast< MediaPsm& >(psm));
    128:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    378: PotsProfile* PotsBcSsm::Profile() const
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBcStates.cpp
* W022 Add using statement
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    80:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBicService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    80:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsBocService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    49:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
    116:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    194:       auto pmsg = static_cast< const PotsMessage* >(msg);
    196:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    200:       auto ppsm = static_cast< const PotsCallPsm* >(port.Upper());
    201:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    89:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    90:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    87:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    108:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
* W022 Add using statement
    0:  // namespace MediaBase
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallIpService.cpp
* W022 Add using statement
    0:  // namespace NetworkBase
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    96:       return static_cast< PotsCallPsm* >(psm);
    162:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    197:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    186:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    244:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    265:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    278:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCcwService.h
* W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    55:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfbService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    55:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfnService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    53:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    55:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfuService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    264:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    269:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    271:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    290:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    291:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    335:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    360:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    437:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    439:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    452:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    474:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    488:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    494:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    500:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    529:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    532:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    587:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    594:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    608:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    616:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    632:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCfxService.h
* W020 Using statement in header
    42: using namespace NodeBase;
    43: using namespace SessionBase;
    44: using namespace CallBase;
  W026 Unused argument
    61/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1381:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    468:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1094:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1131:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1201:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1226:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1238:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1298:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1340:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1860:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1861:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1888:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    1900:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1902:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    1909:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    2003:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2005:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2006:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    2007:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2100:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2112:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2124:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2136:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2150:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2162:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2174:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2186:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2198:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2199:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2211:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2212:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2224:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2244:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
  W026 Unused argument
    455/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
* W053 Data could be const
    190:    Cause::Ind cause_;
* W117 Line can merge with the next line and be under the length limit
    611:    BindEventHandler
    625:    BindEventHandler
    629:    BindEventHandler
    631:    BindEventHandler
    633:    BindEventHandler
    637:    BindEventHandler
    645:    BindEventHandler
    647:    BindEventHandler
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    297:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    569:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    574:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    575:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    590:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    598:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    629:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    657:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    743:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    745:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    838:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    860:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    880:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    882:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    888:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    911:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    934:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    935:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    953:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    954:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    958:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    977:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    979:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    983:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1024:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1025:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1027:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1072:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W042 Member could be private
    263:    void StartTimer(TimerId tid, secs_t duration);
* W053 Data could be const
    154:    Facility::Ind ind_;
  W075 Virtual function is public
    268:    void Cancel() override;
* W117 Line can merge with the next line and be under the length limit
    426:    BindEventHandler
    459:    BindEventHandler
    461:    BindEventHandler
    473:    BindEventHandler
C:/Users/Greg/Documents/rsc/rsc/sn/PotsCwtService.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    115:    auto& pssm = static_cast< BcSsm& >(*Parent());
    117:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    81:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    154:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    160:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsHtlService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    183:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    229:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    232:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    332:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    385:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    685:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    688:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    753:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    815:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    911:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    912:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    932:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    957:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    958:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    979:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W117 Line can merge with the next line and be under the length limit
    612:    BindEventHandler
    626:    BindEventHandler
C:/Users/Greg/Documents/rsc/rsc/sn/PotsMultiplexer.h
* W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
    47: using namespace NodeBase;
    48: using namespace SessionBase;
  W026 Unused argument
    158/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
* W032 Unused function
    77:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
* W042 Member could be private
    160:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    56:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    57:    auto msg = static_cast< CipMessage* >(ame.Msg());
    59:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    91:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    105:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    107:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    132:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    133:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    135:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    171:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    181:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    202:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    217:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    236:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    237:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    239:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    282:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    300:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    301:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    303:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    346:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    347:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    349:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    398:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    413:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    428:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    443:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    458:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    489:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    490:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    517:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    533:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    534:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    561:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    579:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    580:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W099 Line contains adjacent spaces
    132:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    133:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    134:    auto          sid = msg->GetSignal();
    135:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    137:    CauseInfo*    cci;
    236:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    237:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    238:    auto          sid = msg->GetSignal();
    239:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    241:    CauseInfo*    cci;
    300:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    301:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    302:    auto          sid = msg->GetSignal();
    303:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    305:    CauseInfo*    cci;
    346:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    347:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    348:    auto          sid = msg->GetSignal();
    349:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    351:    CauseInfo*    cci;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxyHandlers.h
* W020 Using statement in header
    28: using namespace NodeBase;
    29: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxySessions.cpp
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsProxySessions.h
* W020 Using statement in header
    28: using namespace CallBase;
    29: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsSessions.h
* W020 Using statement in header
    45: using namespace CallBase;
    46: using namespace NetworkBase;
    47: using namespace NodeBase;
    48: using namespace SessionBase;
* W042 Member could be private
    414:    ProtocolSM* TimerPsm(TimerId tid) const;
  W110 Override of Base.Display not found
    56: class PotsCallIpService : public UdpIpService
C:/Users/Greg/Documents/rsc/rsc/sn/PotsStatistics.cpp
* W022 Add using statement
    0:  // namespace CallBase::Cause
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsStatistics.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    79:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsSusService.h
* W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
* W022 Add using statement
    0:  // namespace CallBase::Cause
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    118: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    199: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
* W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
* W042 Member could be private
    58:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    80:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    189:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    236:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    275:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    301:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
* W022 Add using statement
    0:  // namespace CallBase
    0:  // namespace MediaBase
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsTreatments.h
* W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
* W042 Member could be private
    96:    PotsTreatment* NextTreatment(const PotsTreatment& treatment) const;
* W053 Data could be const
    168:    PotsTreatmentQueue::QId qid_;
    172:    Q1Link link_;
    201:    Tone::Id tone_;
    205:    secs_t duration_;
  W075 Virtual function is public
    149:    virtual EventHandler::Rc ApplyTreatment
C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    193:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    195:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    391:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    415:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    417:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    422:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    489:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    492:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    552:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    570:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    593:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    598:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    600:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    619:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    620:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/sn/PotsWmlService.h
* W020 Using statement in header
    29: using namespace NodeBase;
    30: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/sn/SnIncrement.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/sn/SnIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/sn/SnModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/sn/SnModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const MscAddress* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    73: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/Greg/Documents/rsc/rsc/st/MscAddress.h
* W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
* W053 Data could be const
    128:    Q1Link link_;
C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    139:          tt = static_cast< const TransTrace* >(rec);
    147:          auto mt = static_cast< const MsgTrace* >(rec);
    674:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    691:             trans = static_cast< const TransTrace* >(rec);
    703:             return static_cast< const MsgTrace* >(rec);
    718:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    739:             trans = static_cast< const TransTrace* >(rec);
    746:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    899:          tt = static_cast< const TransTrace* >(rec);
    935:             mt = static_cast< const MsgTrace* >(rec);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
  W119 Argument passed by value is modified
    1024/1:    (const MscContext* active, const MsgTrace& mt, const TransTrace* tt)
C:/Users/Greg/Documents/rsc/rsc/st/MscBuilder.h
* W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
C:/Users/Greg/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    91:    auto fake = reinterpret_cast< const MscContext* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W106 Function does not invoke Debug::ft
    80: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/Greg/Documents/rsc/rsc/st/MscContext.h
* W020 Using statement in header
    33: using namespace NodeBase;
    34: using namespace SessionBase;
* W053 Data could be const
    145:    Q1Link link_;
C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    87:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
* W022 Add using statement
    0:  // namespace NodeBase
* W106 Function does not invoke Debug::ft
    53: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/Greg/Documents/rsc/rsc/st/MscContextPair.h
* W020 Using statement in header
    34: using namespace NodeBase;
* W053 Data could be const
    85:    Q1Link link_;
C:/Users/Greg/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    112:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/st/StIncrement.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/st/StModule.cpp
* W022 Add using statement
    0:  // namespace NodeBase
C:/Users/Greg/Documents/rsc/rsc/st/StModule.h
* W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/Greg/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    63:    return static_cast< StTestData* >(data);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
C:/Users/Greg/Documents/rsc/rsc/st/StTestData.h
* W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W082 Adjacent arguments have the same type
    78:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    480:    auto tpsm = static_cast< TestPsm* >(Psm());
    495:    auto tssm = static_cast< TestSsm* >(RootSsm());
    543:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    785:       SetTestPsm(static_cast< TestPsm* >(&psm));
    890:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    891:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    924:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    933:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    944:    auto& tssm = static_cast< TestSsm& >(ssm);
    960:    auto& tssm = static_cast< TestSsm& >(ssm);
    975:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    976:    auto& tssm = static_cast< TestSsm& >(ssm);
* W022 Add using statement
    0:  // namespace NodeBase
    0:  // namespace SessionBase
* W117 Line can merge with the next line and be under the length limit
    706:    BindMsgAnalyzer
    710:    BindEventHandler
    712:    BindEventHandler
    722:    BindMsgAnalyzer
    726:    BindEventHandler
    728:    BindEventHandler
C:/Users/Greg/Documents/rsc/rsc/st/TestSessions.h
* W020 Using statement in header
    43: using namespace NodeBase;
    44: using namespace SessionBase;
* W042 Member could be private
    265:    void UpdateTestPsm();
    348:    TestPsm* GetTestPsm() const { return testPsm_; }
  W082 Adjacent arguments have the same type
    354:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
* W090 Function could be const
    265:    void UpdateTestPsm();
* W092 Function could be free
    113:    static TestPsm* Find(const MsgPort& port); // TestSessions.cpp
