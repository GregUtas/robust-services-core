LINE COUNTS
 source code   62394
       blank   35460
          //   14966
  license //    8567
separator //    6884
   tagged //     204
     text //   16455
          /*       0
           {   12218
           }   10613
          };    1608
   Debug::ft    3933
     fn_name    3915
    ...split      94
    #include    5205
    #<other>    1001
       using     693
       TOTAL  184210

WARNING COUNTS
  W004    76  C-style cast
  W005    48  Functional cast
  W006    81  reinterpret_cast
  W007   518  Cast down the inheritance hierarchy
  W008    42  Cast removes const qualification
  W009     3  Pointer arithmetic
  W015     3  #include not sorted in standard order
  W017     1  Add #include directive
  W018     5  Remove #include directive
  W019    70  Header relies on using statement via #include
  W020   146  Using statement in header
  W022   381  Add using statement
  W026    29  Unused argument
  W027    10  Unused class
  W028    19  Unused data
  W029     1  Unused enum
  W030    20  Unused enumerator
  W033   129  Unused function
  W034     3  Unused typedef
  W037     5  No referent for friend declaration
  W039     9  Member hides inherited name
  W040     1  Class could be namespace
  W044   142  Member could be private
  W045    60  Member could be protected
  W046    11  Typedef of pointer type
  W049    29  Data is init-only
  W050     1  Data is write-only
  W052    24  Data is not private
  W055    77  Data could be const
  W056    16  Data could be const pointer
  W058    23  Default constructor invoked: POD members not initialized
  W059     1  Default constructor invoked
  W060    19  Default copy constructor invoked
  W061    15  Default assignment operator invoked
  W062    65  Base class constructor is public
  W063     1  Single-argument constructor is not explicit
  W064     1  Member not included in member initialization list
  W067    27  Base class virtual destructor is not public
  W077   368  Virtual function is public
  W079   100  Virtual function has no overrides
  W084    84  Adjacent arguments have the same type
  W090    32  Argument could be const
  W092    71  Function could be const
  W094   143  Function could be free
  W101   283  Line contains adjacent spaces
  W104     1  Line length exceeds the standard maximum
  W105     3  Function not sorted in standard order
  W108   467  Function does not invoke Debug::ft
  W109    17  Function does not invoke Debug::ft as first statement
  W112    30  Override of Base.Display not found
  W113    26  Override of Object.Patch not found
========================================================================================================================
WARNINGS SORTED BY TYPE/FILE/LINE
W004 C-style cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(502):    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1076):    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(535):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(567):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(444):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1185):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(333):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1220):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1415):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(155):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(451):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(547):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(967):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1044):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(77):    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(220):    if(addr != nullptr) return (Object*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp(98):          p = (void*) n;
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(391):          auto src = (ptr_t) this;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(225):    auto seg = (Segment*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(282):    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(333):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(384):    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(238):       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(261):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(313):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(350):             auto curr = (Pooled*) getptr1(item, diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(714):       return (ObjectBlock*) &blocks_[0][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(784):       return (ObjectBlock*) &blocks_[i][j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(809):             auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(841):    auto block = (const_ptr_t) ObjToBlock(obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(846):       auto b0 = (const_ptr_t) &blocks_[i][0];
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(889):    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(919):          auto b = (ObjectBlock*) &seg[j];
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(142):    auto obj = (Pooled*) addr;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp(162):    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(144):       (DWORD*) &nid);                  // updates thread's identifier
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(345):    _set_se_translator((_se_translator_function) SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(163):    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(125):    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(235):    auto addr = (TraceRecord*) &buff_[end_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(428):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(446):             record = (TraceRecord*) buff_;  // case (b)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(450):          record = (TraceRecord*) next;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(459):       next = (uword*) record + incr;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(485):       auto record = (TraceRecord*) &buff_[start_];
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(592):    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(58):    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(77):    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(71):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(90):    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(131):       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(58):          auto netaddr = (sockaddr_in*) info->ai_addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(114):       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(87):    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(206):       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(213):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(223):       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(230):       (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(43):    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(71):    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(116):    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(224):    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(47):          (char*) &max, &maxsize) == SOCKET_ERROR)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(76):       max, 0, (sockaddr*) &peer, &peersize);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(114):       len, 0, (sockaddr*) &peer, peersize);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(752):    ((ProtocolSM*) p)->Kill();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(775):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(176):    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(285):    return (Fence*) fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(443):    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
W005 Functional cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(111): ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(275): ipport_t CipUdpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(378): ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(139):       auto rc = AddDigit(Digit(ds.digits_[i]));
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(171):    if(i < Size()) return Digit(digits_[i]);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1730):       *cli.obuf << ": " << Warning(item->warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(179):       *stream << setw(12) << LineType(t)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(191):          *stream << setw(6) << WarningCode(Warning(w)) << setw(6)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(192):             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(260):       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(312):          oper = Cxx::Operator(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(363):       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(369):       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(374):       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(739):    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1392):    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(823):          stream << uint64_t(num_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(148):          type = LibTokenType(i);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(923):          oper = Cxx::Operator(match->second);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(63):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(106):          return RestartLevel(errval_);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(484):       rc = nbt->SelectFaction(Faction(id), TraceDefault);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(692):       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1089):       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(2452):       auto heap = Memory::Heap(MemoryType(m));
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(207):             stream << Faction(f) << CRLF;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(97):    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(362):          Truncate(TimeField(int(field) + 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(545):          return OutOfRange(TimeField(f));
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(158):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp(38):    size_(int16_t(size)),
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3033):    pool->time_[id1].Truncate(TimeField(field - 1));
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3064):    pool->time_[id1].Round(TimeField(field - 1), interval);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(87):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(70):    Faction GetFaction() const { return Faction(faction_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(92):       auto p = reg->Pool(Faction(id));
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(79):    Id Pid() const { return Id(pid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(701):       auto pool = reg->Pool(Faction(sc));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(143):          stream << strClass(reg->GetService(ServiceId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(148):          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(462):    width -= col_t(label.size());
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(59):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(75):    Id Sid() const { return Id(sid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(54):    Id Stid() const { return Id(stid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(225):       return MsgSize(Memory::Align(size, Log2Align));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(108): ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
W006 reinterpret_cast
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(70):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(71):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(490):    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(97):    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(134):    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(120):    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(528):    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp(64):    auto fake = reinterpret_cast< const CodeDir* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(599):    auto fake = reinterpret_cast< const CodeFile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(281):    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(64):    auto fake = reinterpret_cast< const Circuit* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(118):    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(575):       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(65):    auto fake = reinterpret_cast< const Tone* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(133):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(161):    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp(137):    auto fake = reinterpret_cast< const CfgParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp(90):    auto fake = reinterpret_cast< const CfgTuple* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp(75):    auto fake = reinterpret_cast< const Class* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp(103):    auto fake = reinterpret_cast< const CliIncrement* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp(96):    auto fake = reinterpret_cast< const CliParm* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp(64):    auto fake = reinterpret_cast< const Module* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(141):    auto obj = reinterpret_cast< ObjectStruct* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(477):    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp(116):    auto fake = reinterpret_cast< const Pooled* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(69):    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(89):    auto fake = reinterpret_cast< const Statistic* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(81):    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp(100):    auto fake = reinterpret_cast< const Symbol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(33):    auto bytes = reinterpret_cast< uint8_t* >(&value);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1170):    auto fake = reinterpret_cast< const Thread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp(67):    auto fake = reinterpret_cast< const Tool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(80):    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1179):    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1699):    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2260):    auto fake = reinterpret_cast< const RegistryItem* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3494):    auto p = reinterpret_cast< char* >(BAD_POINTER);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(276):    auto fake = reinterpret_cast< const IpPort* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(69):    auto fake = reinterpret_cast< const IpService* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(206):    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), max, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(251):    auto sent = send(Socket(), reinterpret_cast< const char* >(data), len, 0);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(75):    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(113):    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(88):    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(97):    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(87):    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(578):    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(747):    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(868):    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(956):    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(573):    auto fake = reinterpret_cast< const Context* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(886):             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(202):    auto fake = reinterpret_cast< const Factory* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(210):    auto fake = reinterpret_cast< const Initiator* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(225):    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(124):    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(102):    auto fake = reinterpret_cast< const Parameter* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(92):    auto fake = reinterpret_cast< const Protocol* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(77):    auto header = reinterpret_cast< const MsgHeader* >(source);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(64):       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(283):    auto fake = reinterpret_cast< const Service* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(77):    auto fake = reinterpret_cast< const Signal* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(190):    auto fake = reinterpret_cast< const State* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(191):    auto fake = reinterpret_cast< const Timer* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(119):    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(142):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(154):          auto psm = reinterpret_cast< const Base* >(t->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(66):    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(511):    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(266):       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(69):       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(96):    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(97):    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1465):          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(85):    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(206):    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(89):    auto fake = reinterpret_cast< const MscAddress* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(100):    auto fake = reinterpret_cast< const MscContext* >(&local);
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(92):    auto fake = reinterpret_cast< const MscContextPair* >(&local);
W007 Cast down the inheritance hierarchy
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(139):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(151):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(172):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(182):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(68):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(114):    auto& tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(165):    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(51):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(53):    auto& bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(543):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(573):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(885):       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(919):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1049):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1448):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1453):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(405):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(920):       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(463):    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(472):       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(504):    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(505):    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(624):    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(782):          return static_cast< ProxyBcPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(818):          ppsm = static_cast< ProxyBcPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1044):    auto& tmsg = static_cast< const CipMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1049):    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(85):          auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(218):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(250):                auto type = static_cast< const Typedef* >(*item2);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(273):          auto type = static_cast< const Typedef* >(*item1);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(522):    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2482):    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2620):       auto base = static_cast< const Class* >(*b);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(78):    auto curr = static_cast< CodeFileSet* >(Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(90):       curr = static_cast< CodeFileSet* >(prev->Users(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(110):    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(122):       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(401):    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(433):    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(434):    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(546):       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(578):       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(613):    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(64):    auto that = static_cast< CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(100):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(137):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp(151):    auto that = static_cast< const CodeSet* >(rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(211):          static_cast< const Function* >(item)->IsInline())
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(223):          auto spec = static_cast< ClassInst* >(usingClass)->GetSpec();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1014):    auto area = static_cast< CxxArea* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1017):    if(inst != nullptr) return static_cast< ClassInst* >(inst);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1034):          auto c = static_cast< Class* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1952):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1978):       auto func = static_cast< const Function* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(841):       const { return static_cast< Namespace* >(GetScope()); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(872):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(885):       auto macro = static_cast< Macro* >(ref_);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1294):       auto thisClass = static_cast< Class* >(thisRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1302):             auto thatClass = static_cast< Class* >(thatRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1437):    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1481):    auto ref = static_cast< CxxNamed* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(1623):          static_cast< Class* >(root)->BlockCopied(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(371):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(395):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(449):          item = static_cast< Enum* >(item)->FindEnumerator(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(460):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(465):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(477):             item = static_cast< CxxScoped* >(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(812):    return static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2026):          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2036):       ref = static_cast< Function* >(ref)->FindRootFunc();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1276):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1344):          auto op = static_cast< Operation* >(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1638):       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1684):    auto data = static_cast< FuncData* >(next_.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2563):       if(!static_cast< Function* >(item)->virtual_)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2964):             static_cast< ClassData* >(data)->SetInit(m->get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3175):    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4461):       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4462):       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(93):          auto func = static_cast< Function* >(GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(265):    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(299):    return static_cast< Class* >(name_->GetReferent());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1403):          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1553):          space = static_cast< Namespace* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1566):          cls = static_cast< Class* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1605):             auto tdef = static_cast< Typedef* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1610):             item = static_cast< CxxScoped* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1885):       static_cast< CxxArea* >(scope)->AddFunc(func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(384):    return static_cast< Macro* >(macros.front());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(423):       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(431):       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(439):       if(pos != string::npos) return static_cast< CxxScope* >(*s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(445):       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(410):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(436):          auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(488):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(521):    auto oper = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(550):       auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(591):    auto oper = static_cast< Operation* >(item.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(614):       auto ante = static_cast< Operation* >(prev.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(710):    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1101):       inClass = static_cast< Class* >(inRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1106):       outClass = static_cast< Class* >(outRoot);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1131):    auto call = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1519):       func = static_cast< Function* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1538):       cls = static_cast< Class* >(proc.item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1634):       (arg.item->Root())->FindDtor(Context::Scope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1682):       auto newCall = static_cast< Operation* >(args_.front().get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1702):    auto cls = static_cast< Class* >(spec.item->Root());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1723):       auto ctorCall = static_cast< Operation* >(args_[2].get());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1747):       cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1930):       area = static_cast< Class* >(targ);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(1932):       static_cast< Class* >(targ)->Instantiate();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2270):    auto cls = static_cast< Class* >(root);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2309):       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2332):          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(644):          (const_cast< CxxNamed* >(ref))->OuterSpace();
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1595):          auto def = static_cast< Define* >(item);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1599):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp(95):       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(365):    auto op = static_cast< Operation* >(call.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(617):    auto brace = static_cast< BraceInit* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(690):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(729):    auto c = static_cast< Catch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(826):    static_cast< ClassData* >(data.get())->SetMutable(mute);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(827):    static_cast< ClassData* >(data.get())->SetWidth(width);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(987):    auto cond = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1262):    auto cast = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1369):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1394):    auto delOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1422):    auto d = static_cast< Do* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1621):    auto f = static_cast< For* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1721):       static_cast< FuncData* >(data.get())->SetExpression(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1770):          curr = static_cast< FuncData* >(data.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(1776):          curr = static_cast< FuncData* >(subseq.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2046):             static_cast< If* >(first)->SetElseIf();
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2052):    auto i = static_cast< If* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2214):    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2256):    auto newOp = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2725):    static_cast< Return* >(statement.get())->AddExpr(expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2771):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2918):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(2944):    auto s = static_cast< Switch* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3027):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3063):    auto t = static_cast< Try* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3121):    auto op = static_cast< Operation* >(token.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3331):    auto w = static_cast< While* >(statement.get());
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp(3715):          auto op = static_cast< Operation* >(token)->Op();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(253):    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(94):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(118):       auto mpsm = static_cast< MediaPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(79):    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp(159):    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(84):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(217):       auto req = static_cast< FileRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(91):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(125):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(189):                   auto last = static_cast< const FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(266):       auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(305):          curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(373):       curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(426):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp(491):          auto curr = static_cast< FunctionTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(89):       auto req = static_cast< StreamRequest* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp(66):       auto curr = static_cast< MemoryTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(62):       (static_cast< CfgFileTimeParm* >(reg->FindParm("StatsFileName")));
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(198):             auto ft = static_cast<FunctionTrace*>(rec);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(65):    return static_cast< NtTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(156):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(175):    auto svc = static_cast< TcpIpService* >(ipPort_->GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(266):    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(412):    auto sock = static_cast< SysTcpSocket* >(socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(105):    auto svc = static_cast< TcpIpService* >(GetService());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(106):    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(240):       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(443):       auto mep = static_cast< MediaEndpt* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(593):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(654):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(881):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(969):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(763):                inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(882):             (m)->FindParm(Parameter::Timeout);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(181):    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(533):       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(82):    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(80):    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(154):    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(220):    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(277):       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(434):       auto psm = static_cast< ProtocolSM* >(layer);
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(48):    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(48):    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(124):    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(138):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(819):       auto msg = static_cast< Message* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(906):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1118):       auto psm = static_cast< ProtocolSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1350):       auto ssm = static_cast< ServiceSM* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1563):       auto tmr = static_cast< Timer* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(108):    auto sbbuff = SbIpBufferPtr(static_cast< SbIpBuffer* >(buff.release()));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(59):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(71):       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(223):       auto port = static_cast< MsgPort* >(obj);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(284):    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(301):       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(355):          bt = static_cast< BuffTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(857):       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(860):       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(889):    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(457):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(461):          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(462):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(513):             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(519):          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(521):             (sapEvent)->CurrInitiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(773):             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(775):             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(879):          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(883):             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(946):                (initEvent)->GetModifier();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(986):    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(97):    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(73):    auto& tmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(61):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(64):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(101):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(117):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(119):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(139):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(154):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(155):    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(170):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(172):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(178):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(199):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(226):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(256):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(273):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(297):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(312):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(326):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(341):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(356):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(358):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(377):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(398):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(413):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(429):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(446):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(447):    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(464):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(478):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(480):    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(510):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(525):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(526):    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(541):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(542):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(563):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(582):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(597):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(599):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(624):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(653):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(668):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(684):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(700):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(702):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(723):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(738):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(754):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(756):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(773):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(799):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(818):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(833):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(852):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(867):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(883):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(885):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(894):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(921):    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(922):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(960):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(976):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(992):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(993):    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1008):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1009):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1043):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1064):    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(73):          auto& ppsm = static_cast< PotsCallPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(78):          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(86):       SetNPsm(static_cast< CipPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(90):       SetUPsm(static_cast< MediaPsm& >(psm));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(130):    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(84):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(112):    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(193):       auto pmsg = static_cast< const PotsMessage* >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(195):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(199):       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(200):       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(263):    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(94):    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(115):    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(105):       return static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(177):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(212):    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(206):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(266):       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(289):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(305):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(60):    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(60):    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(58):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(60):    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(293):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(298):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(300):       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(321):    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(322):    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(374):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(401):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(483):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(485):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(498):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(520):          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(534):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(540):       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(546):       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(580):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(583):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(638):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(645):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(660):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(668):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(686):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(447):    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1166):    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1203):          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1273):    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1300):    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1314):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1380):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1424):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1973):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1974):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2004):    auto& mux = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2019):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2021):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2028):          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2125):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2127):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2128):    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2129):    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2224):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2238):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2252):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2266):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2282):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2297):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2311):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2326):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2341):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2342):    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2357):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2358):    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2372):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(2394):    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(290):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(617):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(622):       auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(623):       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(640):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(648):       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(686):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(716):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(811):    auto& init = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(813):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(908):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(930):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(961):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(963):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(969):          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(994):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1019):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1020):    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1040):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1041):    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1045):       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1064):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1066):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1070):       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1110):    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1111):    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1113):    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1159):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(131):    auto& pssm = static_cast< BcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(133):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(85):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(175):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(181):       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(195):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(246):    auto& pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(249):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(361):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(414):    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(747):    auto& npsm = static_cast< PotsMuxPsm& >(psm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(750):    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(823):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(891):    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(998):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(999):    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1021):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1052):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1053):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1076):    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(55):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(56):    auto msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(58):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(91):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(108):    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(110):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(174):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(184):    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(208):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(226):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(246):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(295):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(314):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(359):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(361):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(412):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(430):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(448):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(466):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(484):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(517):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(518):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(548):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(567):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(568):    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(598):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(618):    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(619):    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(83):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(255):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(299):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(329):    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(193):    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(195):    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(438):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(465):    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(467):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(472):    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(544):    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(547):    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(607):       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(627):    auto pssm = static_cast< PotsBcSsm* >(Parent());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(664):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(669):       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(671):       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(692):    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(693):    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(151):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(159):          auto mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(712):    auto rxnet = static_cast< const TransTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(729):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(741):             return static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(758):    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(779):             trans = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(786):             auto rxmsg = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(947):          tt = static_cast< const TransTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(983):             mt = static_cast< const MsgTrace* >(rec);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(140):    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(69):    return static_cast< StTestData* >(data);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(509):    auto tpsm = static_cast< TestPsm* >(Psm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(526):    auto tssm = static_cast< TestSsm* >(RootSsm());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(580):       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(858):       SetTestPsm(static_cast< TestPsm* >(&psm));
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(986):    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(987):    auto tmsg = static_cast< TestMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1025):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1034):    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1045):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1063):    auto& tssm = static_cast< TestSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1082):    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1083):    auto& tssm = static_cast< TestSsm& >(ssm);
W008 Cast removes const qualification
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(535):    LibrarySet* nbSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp(567):    LibrarySet* nsSet = (LibrarySet*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1231):    return const_cast< Class* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1350):    return static_cast< CxxScope* >(const_cast< Class* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1948):       return const_cast< ClassInst* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(144):       override { return const_cast< CxxArea* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(444):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(480):       override { return const_cast< Class* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(878):       override { return const_cast< Namespace* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1029):    return const_cast< DataSpec* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1434):    const_cast< DataSpec* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2614):    return const_cast< TypeName* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(809):       override { return const_cast< QualName* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1185):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(2108):    return FoundFunc(const_cast< Function* >(this), args, match);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3139):    auto prev = const_cast< Function* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3316):       (const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3570):    func->SetTemplate(const_cast< Function* >(this));
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(333):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1132):       const override { return const_cast< Function* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1220):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1415):    return (CxxToken*) this;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1795):    const_cast< Friend* >(this)->FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1814):    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1826):    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(155):    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(451):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(547):    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(967):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1044):    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(298):    CxxToken* prev = const_cast< CxxToken* >(this);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(286):    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(644):          (const_cast< CxxNamed* >(ref))->OuterSpace();
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(1599):             auto code = const_cast< string* >(source_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(40):    return (void*) ((const_ptr_t) ptr1 + diff);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(98):       objects[count++] = const_cast< Base* >(this);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(842):    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(141):       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(142):       (LPVOID) client,                 // argument to entry function
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(356):    return const_cast< MsgPort* >(this);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(698):    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
W009 Pointer arithmetic
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp(33):    return (void*) ((const_ptr_t) ptr2 - diff);
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(205):       source += rcvd;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(261):    bytes += hdrSize_;
W015 #include not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(29): #include <dbghelp.h>
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(26): #include <windows.h>
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(96): #include "AnModule.h"
W017 Add #include directive
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(1): "Debug.h"
W018 Remove #include directive
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(28): #include <vector>
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(27): #include <vector>
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.cpp(25): #include <sstream>
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp(23): #include "SysMemory.h"
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(28): #include "Debug.h"
W019 Header relies on using statement via #include
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(1): 
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(1): 
W020 Using statement in header
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(35): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(35): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(34): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(49): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(53): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(35): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(31): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(37): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(33): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(40): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(29): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(30): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(29): using namespace SessionTools;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(41): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h(36): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(45): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(43): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(30): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(44): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(29): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(46): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(47): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(34): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(40): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(34): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(30): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(28): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(30): using namespace NetworkBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(37): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(35): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(38): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(36): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(28): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(28): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(43): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(45): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(46): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(28): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(28): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(44): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(30): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(31): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(30): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(31): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(32): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(45): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(46): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(47): using namespace MediaBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(48): using namespace CallBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(29): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h(27): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(41): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(42): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(54): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h(55): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(34): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(29): using namespace NodeTools;
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(28): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(32): using namespace NodeBase;
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(33): using namespace SessionBase;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(43): using namespace SessionBase;
W022 Add using statement
  C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeMsgEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ForceTransitionEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace CallBase::Cause
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace CallBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace MediaBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(1): namespace NodeTools
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace NetworkBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace NodeBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(1): namespace SessionBase
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(1): namespace NodeBase
W026 Unused argument
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(320/3):       const CxxNamed* item, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(592/1):    static void Shutdown(NodeBase::RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(596/1):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(83/3):       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1160/3):       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(102/1):    NodeBase::word ResolveUsings(const WarningLog& log, std::string& expl);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(102/2):    NodeBase::word ResolveUsings(const WarningLog& log, std::string& expl);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109/1):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(52/2): void SE_Handler(uint32_t errval, void* ex)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h(38/1):    void Startup(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(354/2):       (BlockingReason why, fn_name_arg func) { return true; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(362/1):    virtual void ScheduledIn(fn_name_arg func) { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(87/1):       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55/1):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89/1):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122/1):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127/1):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(174/1):    virtual ProtocolLayer* AllocLower(const Message* msg);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(300/1):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(306/1):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(312/1):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50/1):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81/2):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/1):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(189/2):       (Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47/1):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h(60/1):    explicit PotsCfxSsm(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(434/2):    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(157/1):    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
W027 Unused class
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(294): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(189): class ProxyBcDisconnecting : public BcDisconnecting
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(41): class MediaFailureEvent : public Event
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(39): class PooledClass : public Class
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(54):    class SigAlrm : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(68):    class SigBus : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(96):    class SigQuit : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(110):    class SigSys : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(124):    class SigVtAlrm : public PosixSignal
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(37): class TextTlvMessage : public TlvMessage
W028 Unused data
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(60):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(216):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(300):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(385):    static const Id NextId          = FirstId + 3;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(535): extern const Flags NoLF_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(536): extern const Flags Last_Mask;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(540): extern const Flags Stats_Mask;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(68): extern fixed_string NotImplementedExpl;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(153):    static const id_t LastNbIndex     = 3;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(82):    static const Bid MaxBid = MaxSegments << ObjectsPerSegmentLog2;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(50): constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(81):    static const id_t LastNtIndex    = FuncTraceScope;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(103):    static const Id LastId    = NextId + 9;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(131):    static const Id LastId   = NextId + 7;  // range constant
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(223):    static const Ind MaxInd         = UINT8_MAX;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(142):    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(57):    static const id_t LastSbIndex    = LastNwIndex + 9;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(86):    static const id_t LastSbIndex   = LastNwIndex + 6;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h(115):    static const id_t LastSbIndex   = LastNwIndex + 5;
W029 Unused enum
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(89):    enum Location
W030 Unused enumerator
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(144):       Multiple   // two statements or more
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(44):    DispOption_N  // number of reasons; can be used to extend this enum
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(74):    IdleFaction,         // idle thread (not used)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(58):       LowPriority,       // preemptable threads
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(147):    DebugLog,    // only useful to software designers
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(91):       NotQueued,     // being built by a factory
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(92):       ContextQ,      // has arrived at a context
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(93):       PsmIncomingQ,  // has arrived at a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(94):       PsmOutgoingQ,  // has been sent by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(95):       PsmPendingQ    // being built by a PSM
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(105):       IllegalSignal,   // illegal signal found              0000  sid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(106):       IllegalParm,     // illegal parameter found          index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(107):       IncompleteParm,  // parameter too short              index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(108):       MissingParm,     // mandatory parameter missing       0000  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(109):       Overflow,        // last parameter extends past end  index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(110):       Trampled         // last parameter trampled fence    index  pid
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(115):       StreamContainsIllegalParm,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(95):       SignalUnknown,     // signal not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(97):       ParameterUnknown,  // parameter not recognized
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(98):       ParameterInvalid,  // parameter not valid for this signal
W033 Unused function
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(65):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(213):    Digit GetDigit(DigitCount i) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(178):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(245):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(316):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(369):    virtual CliText* CreateText() const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(192):    explicit ProxyBcDisconnecting(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(160):    static std::string Demangle(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(50):       bool operator!=(const WarningLog& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h(423):    Numeric(NumericType type, size_t width, bool sign)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(129):    size_t Arrays() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(269):    bool operator!=(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1237):    virtual CxxScope* GetLocale() const override { return name_->GetLocale(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(76):    std::string& Prefix(std::string&& scope);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(58):    StateId GetState() const { return state_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(72):    ProtocolSM* MgwPsm() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(87):    static void* operator new(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(92):    explicit MediaEndpt(MediaPsm& psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(47):    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h(55):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(119):    MediaEndpt* Mep() const { return mep_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(63):    Id Tid() const { return Id(tid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(57):    word GetCurrValue() const { return *curr_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(90):    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(119):    bool SetVptr(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(126):    bool SetTemplate(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(133):    bool SetQuasiSingleton(Object& obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(113):    word Result() const { return result_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(72):    ticks_t TicksPerSec();
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(121):    ticks_t UsecsToTicks(usecs_t usecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h(125):    const SysTime& TimeZero();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(96):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(60):    Exception(const Exception& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(61):    Exception(Exception&& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(54):    FileRequest(const FileRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(66):    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h(39):    size_t find(fn_name_arg func, const char* str);
  C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(79):    static bool Verify(MemoryType type, void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(103):    ModuleId Mid() const { return mid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(95):    ClassId GetClassId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(107):    ObjectId GetObjectId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(121):    static void* operator new(size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(122):    static void* operator new[](size_t size, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(124):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(125):    static void operator delete(void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(126):    static void operator delete[](void* addr, MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(135):    void MorphTo(Class& target);
  C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h(57):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(53):    PooledClass(ClassId cid, size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h(69):    bool SetPool(ObjectPool& pool);
  C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h(56):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h(57):    bool IsQueued() const { return next != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(89):    void GetDir(std::string& dirName);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(101):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(106):    static void operator delete[](void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(71):    bool TickTimingAvailable() const { return available_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(76):    int16_t Get(TimeField field) const { return time_[field]; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h(55):    static void* operator new[](size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(122):    static std::atomic_uint32_t* Vector();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(170):    bool ChangeFaction(Faction faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(169):    const SysTime& StartTimeFull() const { return startTime_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(97):    static void operator delete(void* addr, void* where) { }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(79):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h(50):    IpService* GetService(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(110):    bool operator!=(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(129):    bool LocAddr(SysIpL3Addr& locAddr);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(91):    bool IsRinging() const { return ringing_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(95):    bool CanFlash() const { return flash_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(100):    Cause::Ind GetCause() const { return cause_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(290):    MediaInfo* AddMedia(const MediaInfo& media);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(444):    virtual void InjectFinalMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp(134): main_t main(int argc, char* argv[])
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(272):    size_t MsgCount(bool priority, bool standard) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(219):    void SetFaction(Faction faction) { faction_ = faction; }
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(53):    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(81):    bool operator!=(const GlobalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h(53):    bool operator!=(const LocalAddress& that) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(198):    Message* FindSignal(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(83):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(75):    bool IsLowermost() const { return lower_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(136):    Message* FirstSentMsg() const { return sentMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(194):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(324):    virtual void InjectFinalMsg();
  C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h(84):    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(91):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(104):    Message* SavedMsg() const { return savedMsg_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(213):    StateId CurrState() const { return currState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(217):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(358):    bool IsInitiation() const { return initiation_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h(369):    Message* GetMessage() const { return message_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h(85):    static void operator delete(void* addr, SbPoolUser user);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(125):    bool Disable();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(129):    bool Enable();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(134):    bool HasTriggered(TriggerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(79):    ProtocolId Prid() const { return prid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(58):    ServiceId Sid() const { return sid_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(58):    explicit TextTlvMessage(SbIpBufferPtr& text);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(62):    TextTlvMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(68):    bool Receive();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(167):    size_t AllParms(TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(173):    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(187):    TlvParmPtr AddBytes(const byte_t* src, MsgSize size, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(193):    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(197):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(249):    byte_t* FindBytes(MsgSize& size, ParameterId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(256):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(271):    int ParmOffset(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(70):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h(39):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(76):    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(74):    virtual CliText* CreateText() const override;
W034 Unused typedef
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(176): typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(177): typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
W037 No referent for friend declaration
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(56):       friend class Singleton< SigAlrm >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(70):       friend class Singleton< SigBus >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(98):       friend class Singleton< SigQuit >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(112):       friend class Singleton< SigSys >;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(126):       friend class Singleton< SigVtAlrm >;
W039 Member hides inherited name
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(314):    static const Id NextId = FirstId + 50;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(881):    static const Id NextId                 = FirstUn + 7;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(60):    static const ServicePortId NextPortId = FirstPortId + 1;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(210):    static const Id FirstId = BcEvent::NextId;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(216):    static const Id NextId        = FirstId + 4;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(300):    static const Id NextId              = FirstId + 7;
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(67):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(167):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
W040 Class could be namespace
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(34): class Log
W044 Member could be private
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(145):    typedef uint8_t DigitCount;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(175):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(182):    Rc AddDigit(Digit d);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(201):    DigitCount Size() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(225):    bool operator==(const DigitString& that) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(232):    virtual void EnsureMediaMsg() override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(236):    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(417):    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1150):    CipPsm* AllocNPsm();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(492):    ProxyBcPsm* FirstBroadcast() const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h(46):    void SetService(Address::SC sc, ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(108):    bool IsTemplateHeader() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(212):    int CalcGroup(const Include& incl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(78):       static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(119):    Typedef* FindType(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(164):    Enum* FindEnum(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(168):    Enumerator* FindEnumerator(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(365):    Function* FindFuncByRole(FunctionRole role, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(369):    FunctionDefinition GetFuncDefinition(const Function* func) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(846):    Namespace* FindNamespace(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(280):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(268):    bool operator==(const StackArg& that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(151):    virtual CxxScope* GetLocale() const { return GetScope(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(977):    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1005):    size_t MinArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1010):    size_t MaxArgs() const { return args_.size(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1068):    bool IsInvokedInBase() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(145):    bool IsSubscopeOf(const std::string& fqSuper) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(193):    std::string NextOperator() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(67):    CodeDir* FindDir(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(88):    LibrarySet* FindVar(const std::string& name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(64):    bool IsReadOnly() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(172):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h(52):    bool operator==(const MediaInfo& that) const;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(131):    Tone::Id GetOgTone() const { return ogTone_; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(169):    void SetOgPort(Switch::PortId ogport);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(188):    virtual Event* ReceiveMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(192):    virtual void PrepareOgMsgq() override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(66):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(67):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(65):    virtual bool SetNextValue(bool value) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(81):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(60):    const char* Key() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(75):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(101):    virtual bool SetNext(const std::string& input) override;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(61):    const char* HelpText() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1904):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(70):    typedef uint32_t InstanceId;  // identifies an object within a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(71):    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(191):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h(56):    static bool NullifyObjectData() { return NullifyObjectData_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(66):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(57):    id_t Gid() const { return gid_.GetId(); }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(61):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(77):    StatisticsGroup* GetGroup(id_t gid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(81):    void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(85):    static std::string StatsFileName() { return StatsFileName_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(80):    int16_t DayOfWeek() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(131):    const char* strMonth() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(126):    static bool TestFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(130):    static void ResetFlag(FlagId fid);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(162):    SysThreadId NativeThreadId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(239):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(178):    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(88):    static void operator delete(void* addr) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(92):    static void* operator new(size_t size, void* where);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3278):    typedef id_t Test;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(163):    virtual void ConcludeTest(CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(97):    virtual bool ExitOnRestart(RestartLevel level) const override;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(117):    virtual MsgSize PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(97):    IpPort* Provision(ipport_t pid);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(56):    bool PeersEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(60):    bool PortsEmpty() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(106):    bool operator==(const SysIpL3Addr& that) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(94):    bool IsValid() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(192):    void Close();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(84):    word Connect(const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(124):    word Send(const byte_t* data, size_t len);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(68):    word SendTo(const byte_t* data, size_t len, const SysIpL3Addr& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(71):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(70):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(55):    virtual void Unblock() override;
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h(54):    virtual IpPort* CreatePort(ipport_t pid) override;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(132):    void ResetCircuit();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(63):    Id Fid() const { return Id(fid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(71):    const char* FullName() const { return name_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(75):    bool CanBeDeactivated() const { return deactivation_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(91):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(59):    PotsFeature::Id Fid() const { return fid_; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(63):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(159):    virtual bool Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(163):    virtual Event* Restore(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(167):    virtual void Free();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(92):    static ptrdiff_t CellDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(63):    static word RtcYieldPercent() { return RtcYieldPercent_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(71):    static ptrdiff_t CellDiff2();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(350):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(354):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(71):    Id Prid() const { return Id(prid_.GetId()); }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(67):    typedef uint8_t Priority;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(250):    virtual bool SendMsg(Message& msg) override;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(115):    bool IsModifiable() const { return modifiable_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(119):    bool IsModifier() const { return modifier_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(97):    StateId NextState() const { return nextState_; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(54):    static ptrdiff_t LinkDiff();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(156):    TlvParmPtr FirstParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(161):    TlvParmPtr NextParm(ParmIterator& pit) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(243):    typedef uint16_t Fence;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(261):    virtual void AddFence();
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(265):    TlvMsgLayout* TlvLayout() const
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(276):    Fence* FencePtr() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(280):    void CheckFence() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(252):    void StartTimer(TimerId tid, secs_t duration);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h(159):    void SetProfile(PotsProfile* prof) { prof_ = prof; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(419):    ProtocolSM* TimerPsm(TimerId tid) const;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h(45):    typedef uint8_t Id;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h(57):    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(264):    void UpdateTestPsm();
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(340):    TestPsm* GetTestPsm() const { return testPsm_; }
W045 Member could be protected
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(124):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(114):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(79):    const ClassPtrVector* Classes() const { return &classes_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(87):    const EnumPtrVector* Enums() const { return &enums_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(91):    const ForwardPtrVector* Forws() const { return &forws_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(733):    const std::string& GetText() const { return text_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(168):    bool IsInternal() const { return loc_.internal; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(233):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(242):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(316):    void Accessed() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(326):    void DisplayReferent(std::ostream& stream, bool fq) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(330):    std::string strLocation() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(335):    void strName(std::ostream& stream, bool fq, const QualName* name) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(907):    Cxx::ItemType GetUserType() const { return user_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(911):    TemplateRole GetTemplateRole() const { return role_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(297):    bool IsExtern() const { return extern_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(301):    bool IsConstexpr() const { return constexpr_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(305):    bool WasInited() const { return GetDecl()->inited_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(51):    CodeFile* GetImplFile() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(86):    CxxScoped* FindInheritedName() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(91):    void DisplayFiles(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(102):    void LogSubtended(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(157):    bool GetBoolParm(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(167):    bool GetCharParm(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(177):    bool GetPtrParm(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(203):    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(237):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(248):    const char* Help() const { return help_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(252):    bool IsOptional() const { return opt_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(65):    const Registry< CliParm >& Parms() const { return parms_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(48):    typedef uint8_t sel_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(69):    typedef id_t ClassId;         // identifies a Class
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(48):    ticks_t GetTicks() const { return ticks_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(52):    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h(56):    SysThreadId Nid() const { return nid_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(70):    void Nullify() { owner_ = NIL_ID; }
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(64):    IpPort* Port() const { return port_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(69):    IoThread* GetThread() const { return thread_; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(99):    bool IsOpen() const;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(266):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(149):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(258):    MsgDirection Dir() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(71):    bool IsUppermost() const { return upper_ == nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(96):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(75):    enum IncomingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(84):    enum OutgoingRc
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(130):    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(63):    typedef ServicePortId PortId;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
W046 Typedef of pointer type
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(46): typedef void* SysHeap_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(47): typedef void* SysThread_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(49): typedef void* SysMutex_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h(50): typedef void* SysSentry_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(86): typedef char* ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(87): typedef const char* const_ptr_t;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(103): typedef const char* const fixed_string;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(108): typedef const char* const fn_name;      // for defining a function name
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h(109): typedef const char* const fn_name_arg;  // when fn_name is an argument
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(57): typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(58): typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
W049 Data is init-only
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(60):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(430):    static bool Initialized;
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(149):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(92):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp(133):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(227):       FunctionGuard guard(FunctionGuard::MakePreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp(287):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp(307):    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp(156):    FunctionGuard
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1708):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(64):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(130):    static T* Instance_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(482):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(676):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(711):    MutexGuard guard(&lock_);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(258):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(66):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(62):    static bool Registered;
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp(455):    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(62):    static bool Registered;
W050 Data is write-only
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(225):    LibraryVarSet* varSet_;
W052 Data is not private
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(305):    size_t refs_ : 16;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(277):    CxxToken* item;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(179):    std::unique_ptr< CliBuffer > ibuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(183):    ostringstreamPtr obuf;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(89):    std::atomic_uint32_t curr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(93):    std::atomic_uint32_t prev_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(97):    std::atomic_uint64_t total_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(101):    uint32_t divisor_;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(134):    Id rid_ : 8;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(101):    const ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(106):    IpPort* ipPort_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(110):    size_t rxSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(114):    size_t txSize_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(118):    SysIpL2Addr host_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(122):    size_t recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(126):    SysIpL3Addr txAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(130):    SysIpL3Addr rxAddr_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(134):    ticks_t ticks0_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(138):    byte_t* buffer_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(492):    ServiceId owner_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(496):    const EventId eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(531):    const ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(535):    const StateId stid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(539):    const EventHandler::Rc rc_;
W055 Data could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(172):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(338):    Progress::Ind progress_;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(354):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(42):       size_t line;           // line where warning occurred
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(43):       Warning warning;       // type of warning
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(44):       size_t offset;         // warning-specific; displayed if non-zero
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(45):       std::string info;      // warning-specific
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(301):    CxxToken* via_;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(85):    bool const_ : 1;       // type is const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(86):    bool constptr_ : 1;    // pointer is const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(89):    TagCount refs_ : 8;    // number of references
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1256):    bool added_ : 1;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(220):    NodeBase::Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(90):    RegCell port_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(77):    FlagId fid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(93):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(97):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(155):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(117):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(93):    Id id_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(105):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(79):    word min_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(83):    word max_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(87):    bool hex_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(140):    uintptr_t patchArea_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(114):    signal_t value_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(126):    uint8_t severity_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(130):    Flags attrs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(134):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(118):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(122):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(100):    RegCell gid_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(104):    DynString expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(53):    static secs_t LongIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(58):    static secs_t ShortIntervalSecs;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(65):    static size_t WakeupsBetweenReports;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h(70):    static ticks_t PrevToCurrTicks;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(96):    DynString name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(108):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(105):    char abbr_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(109):    bool safe_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(105):    size_t size_;
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h(84):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1043):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1555):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(181):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(185):    ipport_t port_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(149):    RegCell sid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(93):    PotsFeature::Id fid_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(97):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h(58):    Address::DN dn_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(312):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(336):    Faction faction_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(214):    Id eid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(267):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(120):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(124):    ServiceId aid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(128):    TriggerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(136):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(134):    RegCell iid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h(160):    static word RtcYieldPercent_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(187):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(371):    FactoryId fid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(118):    ProtocolId prid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(117):    ServiceId sid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(136):    TimerId tid_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h(148):    Q2Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(118):    Id tid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(185):    Cause::Ind cause_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(147):    Facility::Ind ind_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(161):    PotsTreatmentQueue::QId qid_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(165):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(194):    Tone::Id tone_;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(198):    secs_t duration_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h(128):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h(144):    Q1Link link_;
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h(85):    Q1Link link_;
W056 Data could be const pointer
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(41):       const CodeFile* file;  // file where warning occurred
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(143):    const char* default_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(147):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(69):    const char* chars_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(109):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(113):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(331):    const char* help_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(339):    const char* tag_;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(110):    const char* text_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(118):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(122):    const char* expl_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(189):    IpService* service_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(220):    PotsProfile* profile_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(133):    const char* abbr_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(137):    const char* name_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(271):    const char* name_;
W058 Default constructor invoked: POD members not initialized
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(58):    _finddata_t attributes_;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(44):    LARGE_INTEGER frequency;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(75):       LARGE_INTEGER now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(81):       _timeb now;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(42):    _timeb timebuff;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp(43):    tm timeofday;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(52):    in_addr result;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(48):    addrinfo hints;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp(105):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(52):    sockaddr_in addr;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp(261):    WSAData wsaData;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(40):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(65):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(113):    sockaddr_in host;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(221):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(66):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp(98):    sockaddr_in peer;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h(232):    SignalEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(360):    MessageEntry trace_[TraceSize];
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(193):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(316):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(336):    ParmIterator pit;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp(397):    ParmIterator locpit;
W059 Default constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp(147):    auto list = std::unique_ptr< pollfd[] >(new pollfd[count]);
W060 Default copy constructor invoked
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(155):    arg_(arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1975):    attrs_(Numeric::Nil)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(370):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(409):       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp(54):    objAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(41): GlobalAddress::GlobalAddress() : sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(52):    sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(66):    sbAddr_(NilLocalAddress)
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(80):    sbAddr_(sbAddr)
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(43):    txAddr(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp(44):    rxAddr(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(56):    locAddr_(msg.GetReceiver()),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(57):    remAddr_(msg.GetSender()),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(71):    locAddr_(GlobalAddress::NilAddr),
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(72):    remAddr_(GlobalAddress::NilAddr),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(597):    locAddr_(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp(598):    remAddr_(NilLocalAddress),
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(41):    locAddr_(mt.LocAddr()),
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(42):    remAddr_(NilLocalAddress),
W061 Default assignment operator invoked
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(147):       addr = GlobalAddress(peer, PotsCallIpPort, PotsCallFactoryId);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp(202):       addr = GlobalAddress(peer, PotsShelfIpPort, PotsShelfFactoryId);
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp(35): const GlobalAddress GlobalAddress::NilAddr = GlobalAddress();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(204):    peerPort->remAddr_ = peerPrevRemAddr;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(205):    remAddr_ = GlobalAddress::NilAddr;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(317):    peerPrevRemAddr = peerPort->remAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(318):    locAddr_ = GlobalAddress(peerPort->locAddr_, locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(319):    remAddr_ = peerPort->locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(320):    peerPort->remAddr_ = locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(377):       remAddr_ = msg.GetSender();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(382):          locAddr_ = GlobalAddress(msg.RxIpAddr(), locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(421):       locAddr_ = GlobalAddress(txaddr, locAddr_.sbAddr_);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(422):       remAddr_ = msg.GetReceiver();
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp(481):       peer->remAddr_ = locAddr_;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp(419):       addr = GlobalAddress(addr, dest->EnsurePort()->LocAddr().SbAddr());
W062 Base class constructor is public
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(251):    Class(QualNamePtr& name, Cxx::ClassTag tag);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h(39):    explicit CliBoolParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h(38):    explicit CliPtrParm(const char* help,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h(49):    explicit CliTextParm(const char* help, bool opt = false,
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(41):    MsgBuffer();
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(45):    MsgBuffer(const MsgBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(41):    StatusCommand();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(55):    SetWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(68):    explicit SetCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(84):    IncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(98):    explicit IncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(114):    ExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(127):    explicit ExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(157):    explicit QueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(173):    SaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(185):    explicit SaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(201):    ClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(219):    explicit ClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(41):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h(43):    SoftwareException
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(134):    explicit Counter(const std::string& expl, uint32_t divisor = 1);
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(52):    StreamRequest();
  C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h(57):    StreamRequest(const StreamRequest& that);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(45):    CorruptWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(57):    explicit CorruptCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(99):    NtSaveWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(111):    explicit NtSaveCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(125):    SizesCommand();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(140):    TestcaseAction();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(159):    explicit TestcaseCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(51):    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(55):    IpBuffer(const IpBuffer& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(41):    NwClearWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(56):    explicit NwClearCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(69):    NwExcludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(82):    explicit NwExcludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(95):    NwIncludeWhatParm();
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(108):    explicit NwIncludeCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(123):    explicit NwQueryCommand(bool bind = true);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(136):    NwStatusCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(42):    SysIpL2Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(46):    explicit SysIpL2Addr(ipv4addr_t v4Addr);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(51):    explicit SysIpL2Addr(const std::string& text);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(55):    SysIpL2Addr(const SysIpL2Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(40):    SysIpL3Addr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(45):    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(51):    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(64):    SysIpL3Addr(const SysIpL3Addr& that);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h(40):    PbSizesCommand() { }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(266):    explicit PotsMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h(270):    PotsMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(468):    EventTrace(Id rid, const Event& evt);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(513):    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(50):    explicit TlvMessage(SbIpBufferPtr& buff);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(54):    TlvMessage(ProtocolSM* psm, MsgSize size);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(62):    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(67):    TlvMessage(const Message& msg, ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h(40):    StSizesCommand() { }
W063 Single-argument constructor is not explicit
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(167):    DigitString(Address::DN dn);
W064 Member not included in member initialization list
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(58):    _finddata_t attributes_;
W067 Base class virtual destructor is not public
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(188):    virtual ~LibrarySet();
  C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h(80):    virtual ~Tone();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(107):    virtual ~Class();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(85):    virtual ~CliAppData();
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(65):    virtual ~Exception() noexcept;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(146):    virtual ~Module();
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(218):    virtual ~ObjectPool();
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(105):    virtual ~PosixSignal();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(281):    virtual ~Thread();
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(92):    virtual ~Tool();
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(131):    virtual ~IpService();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(178):    virtual ~SysSocket();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(108):    virtual ~PotsFeature();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(76):    virtual ~PotsFeatureProfile();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(189):    virtual ~Context();
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(126):    virtual ~EventHandler();
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(203):    virtual ~Factory();
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(93):    virtual ~Initiator();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(117):    virtual ~InvokerPool();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(173):    virtual ~Parameter();
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(136):    virtual ~Protocol();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(150):    virtual ~ProtocolLayer();
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(179):    virtual ~Service();
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(169):    virtual ~ServiceSM();
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(109):    virtual ~Signal();
  C:/Users/gregu/Documents/rsc/rsc/sb/State.h(91):    virtual ~State();
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(99):    virtual ~Trigger();
W077 Virtual function is public
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1074):    virtual EventHandler::Rc AnalyzeNPsmTimeout
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1097):    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1211):    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(469):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(509):    virtual void SetUPsm(MediaPsm& psm) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(128):    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(135):    virtual Function* MatchFunc(const Function* curr, bool base) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(276):    virtual ClassInst* EnsureInstance(const TypeName* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(284):    virtual Class* BaseClass()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(289):    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(306):    virtual Class* GetClassTemplate() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(321):    virtual bool DerivesFrom(const Class* cls) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(435):    virtual bool AddAnonymousUnion(const ClassPtr& cls) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(452):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(460):    virtual Class* DirectClass() const override { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(865):    virtual CxxScoped* FindItem(const std::string& name) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(115):    virtual void SetScope(CxxScope* scope) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(240):    virtual CxxToken* GetValue() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(245):    virtual bool IsDefined() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(251):    virtual void SetExpr(ExprPtr& rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(280):    virtual CxxToken* RootType() const override { return GetValue(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(415):    virtual bool AddElif(Elif* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(419):    virtual bool AddElse(const Else* e) { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(428):    virtual bool HasCompiledCode() const { return compile_; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h(469):    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(64):    virtual bool Display(std::ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(76):    virtual bool Display(std::ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(92):    virtual bool Display(std::ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(108):    virtual bool Display(std::ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(128):    virtual bool Display(std::ostream& stream, bool diff) override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(114):    virtual void SetLoc(CodeFile* file, size_t pos);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(127):    virtual void CopyContext(const CxxNamed* that);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(141):    virtual size_t GetRange(size_t& begin, size_t& end) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(146):    virtual CxxScope* GetScope() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(151):    virtual CxxScope* GetLocale() const { return GetScope(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(159):    virtual bool IsStatic() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(164):    virtual bool IsDeclaredInFunction() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(174):    virtual void SetTemplateParms(TemplateParmsPtr& parms);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(179):    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(187):    virtual CxxScope* GetTemplate() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(193):    virtual std::string QualifiedName(bool scopes, bool templates)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(199):    virtual std::string ScopedName(bool templates) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(204):    virtual void GetScopedNames(stringVector& names) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(211):    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(217):    virtual CxxArea* GetArea() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(222):    virtual Function* GetFunction() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(226):    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(233):    virtual CodeFile* GetDeclFile() const { return GetFile(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(237):    virtual NodeBase::id_t GetDeclFid() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(242):    virtual CodeFile* GetDefnFile() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(259):    virtual bool EnterScope() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(269):    virtual bool IsImplemented() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(275):    virtual CxxNamed* DirectType() const { return Referent(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(279):    virtual void FindReferent();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(285):    virtual void SetReferent(CxxNamed* item, const SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(289):    virtual void SetAsReferent(const CxxNamed* user) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(294):    virtual bool Instantiate() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(298):    virtual bool IsInTemplateInstance() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(305):    virtual StackArg NameToArg(Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(311):    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(616):    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(625):    virtual void SetScope(CxxScope* scope) override { locale_ = scope; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(840):    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(844):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(849):    virtual void SetScope(CxxScope* scope) override { first_->SetScope(scope); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(903):    virtual void SetUserType(Cxx::ItemType user);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(915):    virtual Function* GetFuncSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(926):    virtual TypeSpec* Clone() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(930):    virtual void AddArray(ArraySpecPtr& array) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(934):    virtual void SetConst(bool readonly) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(938):    virtual void SetConstPtr(bool constptr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(942):    virtual void SetPtrs(TagCount ptrs) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(946):    virtual void SetRefs(TagCount refs) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(950):    virtual void SetArrayPos(int8_t pos) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(954):    virtual void SetPtrDetached(bool on) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(958):    virtual void SetRefDetached(bool on) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(964):    virtual TagCount Ptrs(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(970):    virtual TagCount Refs() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(975):    virtual TagCount Arrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(979):    virtual bool HasArrayDefn() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(983):    virtual void EnteringScope(const CxxScope* scope) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(987):    virtual void EnterArrays() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(991):    virtual TypeTags GetTags() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(996):    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1001):    virtual void DisplayTags(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1005):    virtual void DisplayArrays(std::ostream& stream) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1011):    virtual void AdjustPtrs(TagCount count) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1016):    virtual void RemoveRefs() = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1021):    virtual TagCount PtrCount(bool arrays) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1025):    virtual TagCount RefCount() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1029):    virtual TagCount ArrayCount() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1034):    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1038):    virtual StackArg ResultType() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1042):    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1053):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1059):    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1064):    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1068):    virtual bool ItemIsTemplateArg(const CxxScoped* item) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1074):    virtual void Instantiating() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(77):    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(82):    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(90):    virtual void AccessibilityOf
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(322):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1098):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1102):    virtual void CheckIfHiding() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1106):    virtual void CheckIfUsed(Warning warning) const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1225):    virtual void WasCalled() override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(68):    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(77):    virtual void RecordAccess(Cxx::Access access) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(95):    virtual void AddFiles(SetOfIds& imSet) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(99):    virtual bool IsUnused() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(159):    virtual void SetAccess(Cxx::Access access) override { access_ = access; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(163):    virtual void SetScope(CxxScope* scope) override { scope_ = scope; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(460):    virtual void CheckAccessControl() const override;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(844):    virtual bool ResolveTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1227):    virtual bool ResolveTypedef(Typedef* type, size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(79):    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(85):    virtual const std::string* Name() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(89):    virtual QualName* GetQualName() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(94):    virtual std::string TypeString(bool arg) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(99):    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(103):    virtual bool IsConst() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(107):    virtual bool IsConstPtr() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(112):    virtual bool IsAuto() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(117):    virtual bool IsIndirect() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(121):    virtual bool IsInitializing() const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(130):    virtual CxxToken* AutoType() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(135):    virtual Namespace* GetSpace() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(140):    virtual Class* GetClass() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(145):    virtual Class* Declarer() const { return GetClass(); }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(151):    virtual TypeName* GetTemplateArgs() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(156):    virtual Numeric GetNumeric() const { return Numeric::Nil; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(160):    virtual void GetConvertibleTypes(StackArgVector& types) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(165):    virtual CxxNamed* Referent() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(171):    virtual void EnterBlock();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(176):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(182):    virtual bool AppendUnary() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(186):    virtual CxxToken* Back() { return this; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(191):    virtual bool WasRead() { return false; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(203):    virtual bool WasWritten(const StackArg* arg, bool passed);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(208):    virtual bool SetNonConst() { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(213):    virtual void WasMutated(const StackArg* arg) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(219):    virtual void RecordUsage() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(224):    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(228):    virtual void Check() const { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(232):    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(236):    virtual bool InLine() const { return true; }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(241):    virtual void Print
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(247):    virtual void Shrink() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(72):    virtual LibSetType GetType() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(78):    virtual NodeBase::word Check(std::ostream* stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(84):    virtual NodeBase::word Count(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(90):    virtual NodeBase::word Countlines(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(95):    virtual NodeBase::word Fix
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(101):    virtual NodeBase::word Format(std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(107):    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(115):    virtual NodeBase::word Parse
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(122):    virtual NodeBase::word Scan(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(129):    virtual NodeBase::word Show(std::string& result) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(135):    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(141):    virtual NodeBase::word Trim(std::ostream& stream, std::string& expl) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(150):    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(151):    virtual LibrarySet* Assign(LibrarySet* rhs);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(152):    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(153):    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(154):    virtual LibrarySet* Union(const LibrarySet* rhs) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(155):    virtual LibrarySet* Directories() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(156):    virtual LibrarySet* Files() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(157):    virtual LibrarySet* FileName(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(158):    virtual LibrarySet* FileType(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(159):    virtual LibrarySet* MatchString(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(160):    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(161):    virtual LibrarySet* Implements() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(162):    virtual LibrarySet* UsedBy(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(163):    virtual LibrarySet* Users(bool self) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(164):    virtual LibrarySet* AffectedBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(165):    virtual LibrarySet* Affecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(166):    virtual LibrarySet* CommonAffecters() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(167):    virtual LibrarySet* NeededBy() const;
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(168):    virtual LibrarySet* Needers() const;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(64):    virtual std::string Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h(68):    virtual bool Supports(ProtocolId prid) const { return false; }
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(78):    virtual void Display(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(97):    virtual void GetSubtended(Base* objects[], size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(109):    virtual void Claim() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(114):    virtual void ClaimBlocks();
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(132):    virtual void Cleanup() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(140):    virtual void Startup(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(148):    virtual void Shutdown(RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(152):    virtual MemoryType MemType() const { return MemPerm; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(64):    virtual void Explain(std::string& expl) const { expl = expl_; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h(66):    virtual void EventOccurred(Event evt);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(71):    virtual Rc GetTextParmRc
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(65):    virtual void Enter();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(70):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(134):    virtual CliParm* AccessParm(CliCookie& cookie, size_t depth) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(142):    virtual void Explain(std::ostream& stream, col_t indent) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(152):    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(162):    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(172):    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(182):    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(210):    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(220):    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(230):    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(243):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(69):    virtual bool BindParm(CliParm& parm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h(45):    virtual void Display(std::ostream& stream, const std::string& prefix) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h(62):    virtual TraceStatus GetStatus() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(57):    virtual void Patch(sel_t selector, void* arguments) { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(108):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(113):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(177):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(58):    virtual uint64_t Overall() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h(62):    virtual void DisplayStat(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h(69):    virtual void DisplayStats(std::ostream& stream, id_t id) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(46):    virtual void GetName(std::string& fileName) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(50):    virtual bool IsSubdir() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(54):    virtual bool AtEnd() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h(59):    virtual bool Advance() = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(187):    virtual TraceStatus CalcStatus(bool dynamic) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(211):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(56):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(60):    virtual const char* Expl() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h(66):    virtual std::string Status() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(78):    virtual bool Display(std::ostream& stream, bool diff);
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(93):    virtual IpBuffer* AllocBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h(109):    virtual void ReceiveBuff
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(61):    virtual bool InsertSocket(SysSocket* socket);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(117):    virtual MsgSize PayloadSize() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(136):    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(90):    virtual SysSocket* CreateAppSocket(size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(125):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(53):    virtual const char* Name() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(57):    virtual IpProtocol Protocol() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(62):    virtual ipport_t Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(66):    virtual Faction GetFaction() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(70):    virtual size_t RxSize() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(74):    virtual size_t TxSize() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(79):    virtual CliText* CreateText() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual SysSocket* CreateAppSocket() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(93):    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(79):    virtual std::string to_str() const;
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(78):    virtual IpProtocol Protocol() const { return IpAny; }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(82):    virtual void Acquire() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(86):    virtual void Release() { }
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(116):    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(39):    virtual size_t MaxConns() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h(44):    virtual size_t MaxBacklog() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(86):    virtual PotsFeatureProfile* Subscribe
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(50):    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(55):    virtual bool Deactivate(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(101):    virtual ContextType Type() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(105):    virtual RootServiceSM* RootSsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(109):    virtual ProtocolSM* FirstPsm() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(113):    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(117):    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(114):    virtual bool SaveContext();
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(125):    virtual Event* RestoreContext(EventHandler::Rc& rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(131):    virtual void FreeContext(bool freeMsg);
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(117):    virtual Rc ProcessEvent
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(121):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(127):    virtual Message* AllocOgMsg(SignalId sid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(134):    virtual bool InjectMsg(Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(140):    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(88):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(149):    virtual InspectRc InspectMsg(debug32_t& errval) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(169):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(174):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(182):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(189):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(193):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(279):    virtual bool Send(Route route);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(283):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(93):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(102):    virtual CliParm* CreateCliParm(Usage use) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(131):    virtual TestRc InjectMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(144):    virtual TestRc VerifyMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(80):    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h(112):    virtual void DisplayMsg(std::ostream& stream,
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(59):    virtual MsgPort* Port() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(63):    virtual ProtocolSM* UppermostPsm() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(96):    virtual FactoryId GetFactory() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(100):    virtual Message::Route Route() const = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(109):    virtual SysSocket* CreateAppSocket();
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(119):    virtual ProtocolLayer* JoinPeer
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h(126):    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h(50):    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h(42):    virtual bool RejectIngressWork() const override;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(81):    virtual const char* PortName(PortId pid) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(111):    virtual ServiceSM* AllocModifier() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(69):    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(75):    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(81):    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(102):    virtual void SetNextState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(109):    virtual void PsmDeleted(ProtocolSM& exPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(123):    virtual void SetNextSap(TriggerId sap);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(129):    virtual void SetNextSnp(TriggerId snp);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(86):    virtual CliText* CreateText() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(41):    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(47):    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(197):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(201):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp(257):    virtual void Cancel() override;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h(137):    virtual EventHandler::Rc ApplyTreatment
W079 Virtual function has no overrides
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1008):    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1009):    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1010):    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1011):    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1012):    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1013):    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1014):    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1015):    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1016):    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1017):    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1018):    virtual EventHandler::Rc RaiseRemoteProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1020):    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1021):    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1022):    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1023):    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1024):    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1025):    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1026):    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1027):    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1028):    virtual EventHandler::Rc RaiseLocalProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1030):    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1031):    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1032):    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1033):    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1034):    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1035):    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1036):    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1043):    virtual EventHandler::Rc RaiseLocalRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1045):    virtual EventHandler::Rc RaiseRemoteRelease
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1047):    virtual EventHandler::Rc RaiseReleaseCall
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1049):    virtual EventHandler::Rc RaiseApplyTreatment
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1056):    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1061):    virtual EventHandler::Rc RequestService(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1068):    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1081):    virtual EventHandler::Rc HandleLocalAlerting();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1086):    virtual EventHandler::Rc HandleLocalAnswer();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1090):    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1103):    virtual CipMessage* BuildCipIam();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(469):    virtual EventHandler::Rc RaiseReleaseUser
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(471):    virtual EventHandler::Rc RaiseProxyProgress
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(473):    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h(474):    virtual EventHandler::Rc RaiseProxyRelease
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(62):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(78):    virtual void Deallocate();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(104):    virtual void EndOfTransaction();
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h(109):    virtual void ProcessIcMsg(Message& msg);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(67):    virtual void SetOgPsm(MediaPsm* ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(72):    virtual void SetOgTone(Tone::Id ogTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h(77):    virtual void SetIcTone(Tone::Id icTone);
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h(47):    virtual bool SetMgwPsm(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.h(156):    virtual const char* ClassName() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(57):    virtual void Initialize();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(62):    virtual Object* Create();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(66):    virtual Object* GetQuasiSingleton();
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(70):    virtual void FreeQuasiSingleton(Object* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(70):    virtual void Exit();
  C:/Users/gregu/Documents/rsc/rsc/nb/Module.h(111):    virtual ModuleId* Dependencies(size_t& count) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(82):    virtual Class* GetClass() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(90):    virtual void PostInitialize() { }
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(101):    virtual InstanceId GetInstanceId() const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(108):    virtual Pooled* DeqBlock(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(113):    virtual void EnqBlock(Pooled* obj, bool deleted);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(211):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(293):    virtual bool EnqMsg(MsgBuffer& msg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(299):    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h(163):    virtual void ConcludeTest(CliThread& cli) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(93):    virtual bool ConditionalPause(word percent);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(136):    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(125):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h(85):    virtual SysSocket* CreateAppSocket() const { return nullptr; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h(89):    virtual bool Unsubscribe(PotsProfile& profile);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(172):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(88):    virtual void DisplayStats(std::ostream& stream) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(169):    virtual void Save();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(174):    virtual void Unsave();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(182):    virtual bool Retrieve(ProtocolSM* psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(189):    virtual bool Relay(ProtocolSM& ogPsm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(193):    virtual bool SendToSelf();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(283):    virtual bool Restore();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(337):    virtual void Refresh();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(350):    virtual void Handled(bool retain);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(354):    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(362):    virtual void ClearContext() const;
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(240):    virtual void SetState(StateId stid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(295):    virtual Priority GetPriority() const { return NormalPriority; }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(300):    virtual void MsgHandled(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(306):    virtual void RestoreIcMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(312):    virtual void RefreshMsg(Message& msg) { }
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(141):    virtual void MorphToService(ServiceId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(76):    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(182):    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(197):    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(201):    virtual void DeleteParm(TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(256):    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(261):    virtual void AddFence();
W084 Adjacent arguments have the same type
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1215):    BcFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(85):    NodeBase::word Erase
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(143):    bool FindFiles
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h(292):    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(235):    TypeMatch CalcMatchWith(const StackArg& that, const std::string& thisType,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(286):    TypeMatch MatchWith(const StackArg& that, const std::string& thisType,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(546):    TypeMatch MatchTemplate(const TypeName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(774):    TypeMatch MatchTemplate(const QualName* that,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1053):    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(322):    virtual void Promote
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1305):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h(1150):    Using(QualNamePtr& name, bool space, bool added = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(41): size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp(58): size_t RfindScopeOperator(const string& name, size_t begin, size_t end);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(95):    size_t CompareScopes
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h(134):    size_t Replace(std::string& code,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(626):    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(184):    NodeBase::word InsertNamespaceForward(Iter& iter,
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(201):    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(62):    NodeBase::word Import
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(477):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(522):    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(33):    void SetDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(42):    void SetIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h(51):    void SetUnion
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(50):    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
  C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h(54):    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(48):    CfgBitParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h(38):    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h(39):    CfgFlagParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h(39):    CfgIntParm(const char* key, const char* def, word* field,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h(90):    CfgParm(const char* key, const char* def, const char* expl);
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(39):    CfgStrParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(92):    CfgFileTimeParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h(39):    CliCharParm(const char* help, const char* chars,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(100):    CliCommand(const char* comm, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(58):    CliCommandSet(const char* comm, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h(92):    CliIncrement(const char* name, const char* help, size_t size = 32);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h(49):    CliIntParm(const char* help, word min, word max,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(237):    bool GetIdentifier(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(243):    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h(48):    CliText(const char* help, const char* text,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(91):    char CharPrompt(const std::string& prompt,
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h(209):    void Report1
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(72):    static void SwErr
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void Progress(const std::string& s, bool eol, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(57):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(76):    std::string strIndex(int n, int width = 0, bool colon = true);
  C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h(96):    std::string strCenter(const std::string& s, int breadth, int blanks);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h(120): CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(238):    bool BidToIndices(Bid bid, size_t& i, size_t& j) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(243):    bool IndicesToBid(size_t i, size_t j, Bid& bid) const;
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h(99):    PosixSignal(signal_t value, const char* name,
  C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h(53):    bool BindSymbol
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(105):    static SysThread_t Create(const ThreadEntry entry,
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(72):    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(71):    SysTime(int16_t year, int16_t month, int16_t day,
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(561):    void DisplaySummary
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h(77):    IoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(51):    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h(48):    IpPortCfgParm(const char* key, const char* def,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h(59):    SysIpL3Addr
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(167):    SysSocket(ipport_t port, IpProtocol proto,
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(69):    SysTcpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h(101):    static word Poll(SysTcpSocket* sockets[], size_t count, msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(51):    SysUdpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h(49):    TcpIoThread(Faction faction, ipport_t port,
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(43):    UdpIoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h(103):    PotsFeature(PotsFeature::Id fid, bool deactivation,
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(133):    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(157):    void RecordMsg(bool incoming, bool inter, size_t size) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h(57):    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(88):    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(169):    static BuffTrace* NextIcMsg
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(129):    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(181):       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(174):    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h(55):    SsmFactory(Id fid, ProtocolId prid, const char* name);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(113):    template< typename T > T* CopyType
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(70):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(346):    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
W090 Argument could be const
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(324/1):    bool GetStatements(BlockPtr& block, bool braced);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(413/1):    bool GetFuncSpecial(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(426/1):    bool GetCtorInit(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(445/1):    bool GetArguments(FunctionPtr& func);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(478/1):       (QualNamePtr& name, Cxx::Type type, int size, int sign);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(537/1):    bool GetNum(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(538/1):    bool GetChar(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(539/1):    bool GetStr(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(549/1):    bool GetCast(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(550/1):    bool GetPrecedence(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(557/1):    bool HandleTilde(ExprPtr& expr, size_t start);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(561/1):    bool GetSubscript(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(570/1):    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(571/1):    bool GetConditional(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(572/1):    bool GetDefined(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(573/1):    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(574/1):    bool GetNew(ExprPtr& expr, Cxx::Operator op);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(575/1):    bool GetSizeOf(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(576/1):    bool GetThrow(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(577/1):    bool GetTypeId(ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(79/1):    bool Enq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(100/1):    bool Henq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(122/1):    bool Insert(T* prev, T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(157/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(321/1):    void Corrupt(T* elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135/1):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(266/1):    bool Erase(T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(106/4):       const Thread* client, size_t stackSize, SysThreadId& nid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(291/1):    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150/1):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h(107/2):       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(201/1):    virtual void DeleteParm(TlvParmLayout& parm);
W092 Function could be const
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(81):    msecs_t Originate();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1109):    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h(1166):    CipMessage* BuildCipRel(Cause::Ind cause);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(934):    virtual void SetConst(bool readonly) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(938):    virtual void SetConstPtr(bool constptr) = 0;
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h(1154):    bool ResolveTemplateArgument();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(122):    void InsertClass(Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(123):    void InsertData(Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(124):    void InsertEtor(Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(125):    void InsertEnum(Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(126):    void InsertForw(Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(127):    void InsertFriend(Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(128):    void InsertFunc(Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(129):    void InsertMacro(Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(130):    void InsertSpace(Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(131):    void InsertTerm(Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(132):    void InsertType(Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(137):    void EraseClass(const Class* cls);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(138):    void EraseData(const Data* data);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(139):    void EraseEtor(const Enumerator* etor);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(140):    void EraseEnum(const Enum* item);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(141):    void EraseForw(const Forward* forw);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(142):    void EraseFriend(const Friend* frnd);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(143):    void EraseFunc(const Function* func);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(144):    void EraseMacro(const Macro* macro);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(145):    void EraseSpace(const Namespace* space);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(146):    void EraseTerm(const Terminal* term);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(147):    void EraseType(const Typedef* type);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(148):    void EraseLocal(const CxxScoped* name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(152):    void EraseLocals();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(176):    virtual void ExitBlock() { }
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(72):    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
  C:/Users/gregu/Documents/rsc/rsc/ct/Library.h(104):    NodeBase::word Assign(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(124):    bool Replace(size_t index, const T& item)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h(94):    void AddMainArg(const std::string& arg);
  C:/Users/gregu/Documents/rsc/rsc/nb/Class.h(113):    virtual Object* New(size_t size);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(135):    bool Exq(T& elem)
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h(115):    void StartInterval(bool first);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(55):    bool Validate(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(141):    DelayRc Delay(msecs_t msecs);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(147):    bool Interrupt();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(118):    bool Interrupt(const Flags& mask = Flags());
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(509):    void SetTrap(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(517):    void StackCheck();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(529):    void SetSignal(signal_t sig);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h(112):    void AssociateIds(const Thread& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h(114):    virtual void ClaimBlocks() { }
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(77):    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h(162):    virtual IoThread* CreateIoThread();
  C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h(75):    void ReleaseResources();
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h(57):    void Audit();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(159):    bool StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h(150):    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(148):    void KickThread();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(152):    Context* FindWork();
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(176):    void Requeue(Context& ctx);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(184):    void ScheduledOut();
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(127):    void SetSignal(SignalId sid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(131):    void SetJoin(bool join);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(242):    void SetProtocol(ProtocolId prid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(246):    void SetPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(250):    virtual void SetReceiver(const GlobalAddress& receiver);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(254):    virtual void SetSender(const GlobalAddress& sender);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(379):    void SetRxAddr(const LocalAddress& rxaddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h(117):    void StopTimer(const Base& owner, TimerId tid);
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(188):    virtual EventHandler::Rc ProcessInitNack
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(238):    EventHandler::Rc ProcessSsmqSap
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h(249):    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(77):    virtual SbIpBufferPtr Parse() = 0;
  C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h(84):    virtual SbIpBufferPtr Build() = 0;
  C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h(264):    void UpdateTestPsm();
W094 Function could be free
  C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(168):    static const char* strState(State state);
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h(87):    static void DisplayStateCounts
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(100):    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(116):    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(120):    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(124):    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h(175):    static bool IsValidDigit(Digit d)
  C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(143):    bool FindFiles
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h(86):    static bool IsCodeFile(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h(247):    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp(114):    static LibrarySet* Evaluate(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(78):       static bool IsSortedByFile
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(83):       static bool IsSortedByWarning
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h(96):       static std::string WarningCode(Warning warning);
  C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h(56):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(186):    static Function* FoundFunc
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h(589):    static size_t CreateCodeError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(297):    static void ContextFunctionIsNonConst();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(596):    static void Startup(NodeBase::RestartLevel level) { }
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h(665):    static std::string Location();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1305):    static TypeMatch MatchTemplate
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h(1318):    static Function* InstantiateError
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(280):    static void ShrinkExpression(const ExprPtr& expr);
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(478):    static TypeSpecPtr CreateRef();
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h(615):    static void PushType(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(143):    static Iter Find(SourceList& list, size_t line);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(148):    static Iter Find(SourceList& list, const std::string& source);
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h(206):    static NodeBase::word Report
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(52):    static const OperatorInfo* GetAttrs(LibTokenType type);
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(62):    static bool IsOperator(const std::string& s);
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h(172):    static bool IsValidIdentifier(const std::string& id);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(192):    static NodeBase::word Counted(std::string& result, const size_t* count);
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h(197):    static NodeBase::word Shown(std::string& result);
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(477):    static bool SetCompoundType
  C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h(652):    static std::string Indent();
  C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h(65):    static bool IsValidPort(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(76):    static fixed_string ValidTrueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h(81):    static fixed_string ValidFalseChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(77):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(82):    static const std::string& ValidValueChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h(87):    static const std::string& ValidBlankChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h(132):    static Rc Exhausted(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h(63):    static void DescendTo(CliCookie& cookie, size_t index);
  C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h(322):    static Rc Mismatch(const CliThread& cli, const std::string& type);
  C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h(47):    static void Spool(const char* s, bool eol = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(81):    static void Assert(bool condition, debug32_t errval = 0)
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(92):    static void Progress(const std::string& s, bool eol, bool force = false);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(96):    static void noop();
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h(140):    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
  C:/Users/gregu/Documents/rsc/rsc/nb/Element.h(46):    static std::string strTimePlace();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(44):    static ostringstreamPtr CreateStream();
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(57):    static void Spool(const std::string& name,
  C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h(62):    static void Truncate(const std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(40):    static ostringstreamPtr Create(fixed_string title);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(45):    static void Spool(ostringstreamPtr& log);
  C:/Users/gregu/Documents/rsc/rsc/nb/Log.h(49):    static std::string FileName();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(151):    static size_t Size();
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(44):    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(48):    static size_t Words(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(52):    static void Copy(void* dest, const void* source, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(56):    static void Set(void* dest, byte_t value, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(74):    static void* Realloc(void* addr, size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(83):    static MemoryType Type(const void* addr);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(91):    static void Shutdown(RestartLevel level);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(99):    static SysHeap* EnsureHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h(103):    static SysHeap* AccessHeap(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h(57):    static const char* TypeString(MemoryType type);
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h(87):    static RestartLevel NextLevel();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(757):    static word DisplayHelpFile(const CliThread& cli, const string& name);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp(1904):    static void SendAckToOutputFile(const CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h(60):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(73):    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(77):    static bool ThreadsEmpty();
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.h(113):    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h(257):    static ObjectBlock* ObjToBlock(const Pooled* obj);
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(41):    static PermanentHeap* Instance();
  C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h(80):    static void Initiate(reinit_t reason, debug32_t errval);
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(52):    static const std::string& ValidNameChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h(57):    static const std::string& InvalidInitialChars();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h(87):    static void DisplayHeaps(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h(37):    static void CreateNativeSignals();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(52):    static SysThreadId RunningThreadId();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(112):    static SysThread_t Wrap();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(116):    static void Delete(SysThread_t& thread);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(121):    static SysSentry_t CreateSentry();
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h(125):    static void DeleteSentry(SysSentry_t& sentry);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(88):    static bool IsLeapYear(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h(153):    static const int16_t* DaysPerMonth(int16_t year);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(88):    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(106):    static void PauseOver(word limit);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(220):    static double PercentIdle();
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(224):    static TraceRc LogContextSwitches(bool on);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(228):    static void DisplayContextSwitches(std::ostream& stream);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h(439):    static SysThread::Priority FactionToPriority(Faction& faction);
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(90):    static int WarpFactor();
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(83):    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3300):    static void UseBadPointer();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3301):    static void LoopForever();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h(45):    static NtTestData* Access(CliThread& cli);
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h(166):    static size_t BuffSize(size_t nBytes);
  C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(67):    static SysIpL2Addr LoopbackAddr();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h(83):    static bool HostName(std::string& name);
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(130):    static bool StartLayer();
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h(134):    static void StopLayer();
  C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(122):    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.h(127):    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(56):    static bool IsValidId(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.h(72):    static bool AppCanHandle(Id eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(86):    static bool AppCanRegister(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(94):    static bool AppCanUse(Id ehid)
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(188):    static bool GenerateLog(Factory::Rc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h(200):    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.h(291):    static const char* strPriority(Priority prio);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h(58):    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h(185):    static MsgPort* FindPeer(const GlobalAddress& remAddr);
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h(149):    static const char* ExplainRc(TestRc rc);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h(62):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(243):    static std::string OutputId(const std::string& label, id_t id);
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h(484):    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.h(73):    static bool IsValidPortId(PortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h(60):    static bool IsValidId(Id sid)
  C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h(86):    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(223):    static MsgSize Pad(MsgSize size)
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(300):    inline static fn_name TlvMessage_FindType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(302):    inline static fn_name TlvMessage_AddType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(304):    inline static fn_name TlvMessage_CopyType()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h(306):    inline static fn_name TlvMessage_VerifyParm()
  C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h(70):    static Id ExtractPid(const TlvParmLayout& parm);
  C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h(74):    static bool IsValidId(Id tid)
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp(454):    static EventHandler::Rc SendFacilityNack
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(135):    static void SendRelease(const Message& msg1);
  C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StModule.h(58):    static bool Register();
  C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h(47):    static StTestData* Access(CliThread& cli);
W101 Line contains adjacent spaces
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(79):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(80):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(81):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(82):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(84):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(136):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(137):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(138):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(139):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(181):    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(182):    auto       msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(183):    auto       sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(184):    auto&      bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(215):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(216):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(217):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(218):    auto&         bcssm = static_cast< BcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp(220):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(540):    id_t        idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(541):    word        fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(543):    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(572):    TestRc       rc;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(573):    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(575):    id_t         idx;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(576):    word         fid, rid;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(918):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(919):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(920):    auto          sig = tmsg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(921):    TimeoutInfo*  toi = nullptr;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(923):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(924):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1048):    auto          state = GetState();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1049):    auto&         tmsg = static_cast< TlvMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1050):    auto          sig = msg.GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1052):    auto          err = true;
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(1053):    debug64_t     error;
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(423):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(424):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(425):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(426):    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp(428):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(98):    CxxWord("-",   "-",    "D",  F),  // AUTO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(99):    CxxWord("-",   "-",    "b",  T),  // BREAK
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(100):    CxxWord("-",   "-",    "c",  T),  // CASE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(101):    CxxWord("C",   "C",    "-",  T),  // CLASS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(102):    CxxWord("DP",  "DP",   "D",  F),  // CONST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(103):    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(104):    CxxWord("-",   "-",    "n",  T),  // CONTINUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(105):    CxxWord("-",   "-",    "o",  T),  // DEFAULT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(106):    CxxWord("-",   "-",    "d",  T),  // DO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(107):    CxxWord("E",   "E",    "E",  T),  // ENUM
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(108):    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(109):    CxxWord("DP",  "-",    "-",  T),  // EXTERN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(110):    CxxWord("-",   "-",    "f",  T),  // FOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(111):    CxxWord("-",   "F",    "-",  T),  // FRIEND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(112):    CxxWord("H",   "H",    "H",  F),  // HASH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(113):    CxxWord("-",   "-",    "i",  T),  // IF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(114):    CxxWord("P",   "P",    "-",  T),  // INLINE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(115):    CxxWord("-",   "D",    "-",  F),  // MUTABLE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(116):    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(117):    CxxWord("-",   "P",    "-",  F),  // OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(118):    CxxWord("-",   "A",    "-",  T),  // PRIVATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(119):    CxxWord("-",   "A",    "-",  T),  // PROTECTED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(120):    CxxWord("-",   "A",    "-",  T),  // PUBLIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(121):    CxxWord("-",   "-",    "r",  T),  // RETURN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(122):    CxxWord("D",   "DP",   "D",  F),  // STATIC
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(123):    CxxWord("C",   "C",    "-",  T),  // STRUCT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(124):    CxxWord("-",   "-",    "s",  T),  // SWITCH
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(125):    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(126):    CxxWord("-",   "-",    "t",  T),  // TRY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(127):    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(128):    CxxWord("C",   "C",    "-",  T),  // UNION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(129):    CxxWord("U",   "U",    "U",  T),  // USING
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(130):    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(131):    CxxWord("-",   "-",    "w",  T),  // WHILE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(132):    CxxWord("-",   "P",    "-",  F),  // NVDTOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(133):    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(155):    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(156):    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(157):    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(158):    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(159):    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(160):    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(161):    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(162):    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(163):    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(164):    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(165):    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(167):    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(168):    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(169):    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(170):    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(171):    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(172):    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(173):    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(174):    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(175):    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(176):    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(177):    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(178):    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(179):    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(180):    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(181):    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(182):    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(183):    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(184):    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(185):    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(186):    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(187):    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(188):    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(189):    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(190):    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(191):    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(192):    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(193):    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(194):    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(195):    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(196):    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(197):    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(198):    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(199):    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(200):    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(201):    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(202):    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(203):    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(204):    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(205):    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(206):    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(207):    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(208):    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(209):    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(210):    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(211):    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(212):    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(213):    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(214):    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(215):    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(216):    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(217):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(218):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(219):    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
  C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp(220):    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(94):    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(95):    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(96):    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(97):    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(98):    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(99):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(100):    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(101):    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(102):    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(253):    inline static fn_name Array_ctor()     { return "Array.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(254):    inline static fn_name Array_dtor()     { return "Array.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(255):    inline static fn_name Array_Init()     { return "Array.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(256):    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(258):    inline static fn_name Array_Erase()    { return "Array.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(259):    inline static fn_name Array_Replace()  { return "Array.Replace"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Array.h(260):    inline static fn_name Array_Extend()   { return "Array.Extend"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(174): typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h(175): typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(95):    CounterPtr      allocCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(96):    CounterPtr      freeCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(97):    CounterPtr      failCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(98):    CounterPtr      auditCount_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(387):    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(388):    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(389):    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(390):    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(391):    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(393):    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(394):    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(395):    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(396):    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(397):    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h(398):    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(360):    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(361):    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(362):    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(363):    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(364):    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(365):    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(366):    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(367):    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(368):    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(369):    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h(371):    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(625):    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(626):    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(627):    inline static fn_name Registry_Init()   { return "Registry.Init"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(629):    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(630):    inline static fn_name Registry_Next()   { return "Registry.Next"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(631):    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(632):    inline static fn_name Registry_Size()   { return "Registry.Size"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(633):    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(634):    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h(635):    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h(126):       Singleton_Destroy()  { return "Singleton.Destroy"; }
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp(39): fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(264):    CounterPtr       traps_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(265):    CounterPtr       yields_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(266):    CounterPtr       exceeds_;
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(270):    AccumulatorPtr   totUsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(176):    CfgIntParmPtr  initTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(177):    CfgIntParmPtr  schedTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(179):    CfgIntParmPtr  rtcTimeoutMsecs_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(181):    CfgIntParmPtr  rtcLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(182):    CfgIntParmPtr  rtcInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(184):    CfgIntParmPtr  trapLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(185):    CfgIntParmPtr  trapInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(187):    CfgIntParmPtr  stackUsageLimit_;
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h(188):    CfgIntParmPtr  stackCheckInterval_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(55):    CounterPtr       recvs_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(56):    AccumulatorPtr   bytesRcvd_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(59):    CounterPtr       discards_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(60):    CounterPtr       rejects_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(61):    CounterPtr       sends_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(62):    AccumulatorPtr   bytesSent_;
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(64):    CounterPtr       overflows_;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(590):    id_t             index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(591):    word             sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(593):    auto&            pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(653):    TestRc            rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(654):    auto&             pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(656):    id_t              index;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(657):    word              sid, ind;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(759):    word           port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(761):    auto&          pmsg = static_cast< PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(786):    TestRc          rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(787):    auto&           pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(788):    word            port;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(880):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(881):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(883):    bool          ring = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(884):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(968):    TestRc        rc;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(969):    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(971):    string        scan;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(972):    auto          digits = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(973):    auto          flash = false;
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(974):    auto          exists = false;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(49):    CounterPtr       icMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(50):    CounterPtr       icMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(52):    CounterPtr       ogMsgsIntra_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(53):    CounterPtr       ogMsgsInter_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(55):    CounterPtr       contexts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(56):    CounterPtr       msgsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(57):    CounterPtr       ctxsDeleted_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(64):    CounterPtr       requeues_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(65):    CounterPtr       trojans_;
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(66):    CounterPtr       lockouts_;
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(45):    LocalAddress      txAddr;         // source address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(46):    LocalAddress      rxAddr;         // destination address
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(48):    bool              initial  : 1;   // true for initial message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(49):    bool              final    : 1;   // true for final message
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(50):    bool              join     : 1;   // true to create PSM and join root SSM
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(51):    bool              self     : 1;   // true for message to self
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(52):    bool              injected : 1;   // true if sent by InjectCommand
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(53):    bool              kill     : 1;   // true to kill context on arrival
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(54):    uint8_t           spare    : 6;   // reserved for future use
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(55):    Message::Route    route    : 2;   // the route that the message took
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(56):    ProtocolId        protocol : 16;  // message's protocol
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(57):    SignalId          signal   : 16;  // message's signal
  C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h(58):    MsgSize           length   : 16;  // total bytes in all parameters
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(134):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(135):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(136):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(137):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(139):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(245):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(246):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(247):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(248):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(250):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(313):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(314):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(315):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(316):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(318):    CauseInfo*    cci;
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(358):    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(359):    auto          msg = static_cast< CipMessage* >(ame.Msg());
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(360):    auto          sid = msg->GetSignal();
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(361):    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp(363):    CauseInfo*    cci;
W104 Line length exceeds the standard maximum
  C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp(300):    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
W105 Function not sorted in standard order
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(305): bool IsUnusedItemWarning(Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp(68): ostream& operator<<(std::ostream& stream, TraceStatus status)
W108 Function does not invoke Debug::ft
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(98): Faction PotsShelfIpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(111): ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(115): size_t PotsShelfIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp(119): size_t PotsShelfIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(1380): void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp(123): CliParm* CauseParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp(109): CliParm* ProgressParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(265): Faction CipUdpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(275): ipport_t CipUdpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(279): size_t CipUdpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(283): size_t CipUdpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(360): Faction CipTcpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(364): size_t CipTcpService::MaxBacklog() const { return 200; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(368): size_t CipTcpService::MaxConns() const { return TcpIoThread::MaxConns; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(378): ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(382): size_t CipTcpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(386): size_t CipTcpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(432): CliText* CipIamSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(446): CliText* CipCpgSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(460): CliText* CipAnmSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(474): CliText* CipRelSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(518): CliParm* CipRouteParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(622): CliParm* CipCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(646): CliParm* CipCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(672): CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp(698): CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp(169): Digit DigitString::GetDigit(DigitCount i) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1897): void CodeFile::GetLineCounts() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(1913): LineType CodeFile::GetLineType(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2068): void CodeFile::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2076): void CodeFile::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2084): bool CodeFile::InsertDirective(DirectivePtr& dir)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2093): void CodeFile::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2101): void CodeFile::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2109): void CodeFile::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2117): void CodeFile::InsertInclude(IncludePtr& incl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2146): void CodeFile::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2154): void CodeFile::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp(2162): void CodeFile::InsertUsing(Using* use)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp(305): bool IsUnusedItemWarning(Warning warning)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(97): word CodeInfo::FindWarning(const WarningLog& log)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(272): void CodeInfo::GetWarnings(const CodeFile* file, WarningLogVector& warnings)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(285): bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp(303): bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(376): void Class::AddItem(CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1228): Class* Class::GetClassTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1260): Cxx::Access Class::GetCurrAccess() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1332): size_t Class::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1347): CxxScope* Class::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(1718): Class* Class::OuterClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp(2449): const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(48): void AlignLeft(ostream& stream, const string& prefix)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(151): CxxToken* Define::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp(822): CxxScope* MacroName::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(190): const Parser* Context::GetParser()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(240): bool Context::OptionIsOn(char opt)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(247): bool Context::ParsingTemplateInstance()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(315): void Context::SetPos(size_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(395): void Context::Trace(CxxTrace::Action act)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(403): void Context::Trace(CxxTrace::Action act, const StackArg& arg)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(411): void Context::Trace(CxxTrace::Action act, word err, const string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(419): void Context::Trace(CxxTrace::Action act, const CodeFile& file)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(427): void Context::Trace(CxxTrace::Action act, const CxxToken* token)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(625): OptionalCode* ParseFrame::Optional() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp(812): CxxScope* ParseFrame::Scope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(177): CxxArea* CxxNamed::GetArea() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(186): Class* CxxNamed::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(195): id_t CxxNamed::GetDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(204): size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(213): void CxxNamed::GetScopedNames(stringVector& names) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(220): Namespace* CxxNamed::GetSpace() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(229): bool CxxNamed::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(584): void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1020): TypeTags DataSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1027): TypeSpec* DataSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1156): bool DataSpec::IsAutoDecl() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1873): TypeName* QualName::At(size_t n) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(1982): TypeName* QualName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2062): TypeName* QualName::Last() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2309): size_t QualName::Size() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2587): CxxNamed* TypeName::DirectType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2611): TypeName* TypeName::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp(2779): void TypeName::PushBack(TypeNamePtr& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(114): bool Block::CrlfOver(Form form) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(233): CxxToken* Block::FirstStatement() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(241): Function* Block::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(281): bool Block::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(806): id_t CxxScope::GetDistinctDeclFid() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1159): CodeFile* Data::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1166): const Data* Data::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1175): CodeFile* Data::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1222): TypeName* Data::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1372): bool Data::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1380): bool Data::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(1493): bool Data::WasRead()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3213): FunctionRole Function::FuncRole() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3249): FunctionType Function::FuncType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3259): CodeFile* Function::GetDeclFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3266): const Function* Function::GetDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3275): CodeFile* Function::GetDefnFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3284): size_t Function::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3300): CxxScope* Function::GetScope() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3312): CxxScope* Function::GetTemplate() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3324): TemplateType Function::GetTemplateType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(3803): bool Function::IsInTemplateInstance() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4483): void FuncSpec::AddArray(ArraySpecPtr& array)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4490): void FuncSpec::AdjustPtrs(TagCount count)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4504): TagCount FuncSpec::ArrayCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4511): TagCount FuncSpec::Arrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4518): void FuncSpec::Check() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4525): TypeSpec* FuncSpec::Clone() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4547): void FuncSpec::EnterArrays() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4566): void FuncSpec::FindReferent()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4574): TypeTags FuncSpec::GetTags() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4581): TypeName* FuncSpec::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4588): TypeSpec* FuncSpec::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4595): bool FuncSpec::HasArrayDefn() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4602): void FuncSpec::Instantiating() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4610): bool FuncSpec::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4617): bool FuncSpec::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4624): bool FuncSpec::ItemIsTemplateArg(const CxxScoped* item) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4632): bool FuncSpec::MatchesExactly(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4640): TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4650): TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4672): TagCount FuncSpec::PtrCount(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4679): TagCount FuncSpec::Ptrs(bool arrays) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4686): TagCount FuncSpec::RefCount() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4693): TagCount FuncSpec::Refs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4700): void FuncSpec::RemoveRefs()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4707): StackArg FuncSpec::ResultType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4714): void FuncSpec::SetArrayPos(int8_t pos)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4722): void FuncSpec::SetConst(bool readonly)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4730): void FuncSpec::SetConstPtr(bool constptr)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4738): void FuncSpec::SetPtrDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4746): void FuncSpec::SetPtrs(TagCount ptrs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4754): void FuncSpec::SetRefDetached(bool on)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4762): void FuncSpec::SetReferent(CxxNamed* item, const SymbolView* view) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp(4770): void FuncSpec::SetRefs(TagCount refs)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(297): Class* BaseDecl::GetClass() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(398): void CxxScoped::AddFiles(SetOfIds& imSet) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(533): CodeFile* CxxScoped::GetImplFile() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(542): size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(553): bool CxxScoped::IsAuto() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(562): bool CxxScoped::IsConst() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(571): bool CxxScoped::IsConstPtr() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(580): bool CxxScoped::IsDeclaredInFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(588): bool CxxScoped::IsDefinedIn(const CxxArea* area) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(601): bool CxxScoped::IsIndirect() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1152): void Enumerator::RecordAccess(Cxx::Access access) const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1216): CxxToken* Forward::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1411): CxxToken* Friend::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1677): Function* Friend::GetFunction() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1686): QualName* Friend::GetQualName() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(1695): CxxNamed* Friend::GetReferent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp(2178): TypeName* Typedef::GetTemplateArgs() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(284): void CxxStatement::EnterBlock()
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(364): bool Do::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(574): bool For::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(680): bool If::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp(1082): bool While::InLine() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(91): template< typename T > void Erase(const CxxScoped* item,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(189): template< typename T > void ListSymbols(const string& name,
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(226): void CxxSymbols::EraseClass(const Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(233): void CxxSymbols::EraseData(const Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(240): void CxxSymbols::EraseEnum(const Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(247): void CxxSymbols::EraseEtor(const Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(254): void CxxSymbols::EraseForw(const Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(261): void CxxSymbols::EraseFriend(const Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(268): void CxxSymbols::EraseFunc(const Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(297): void CxxSymbols::EraseMacro(const Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(304): void CxxSymbols::EraseSpace(const Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(311): void CxxSymbols::EraseTerm(const Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(318): void CxxSymbols::EraseType(const Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(666): void CxxSymbols::InsertClass(Class* cls)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(673): void CxxSymbols::InsertData(Data* data)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(680): void CxxSymbols::InsertEnum(Enum* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(687): void CxxSymbols::InsertEtor(Enumerator* etor)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(694): void CxxSymbols::InsertForw(Forward* forw)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(701): void CxxSymbols::InsertFriend(Friend* frnd)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(708): void CxxSymbols::InsertFunc(Function* func)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(742): void CxxSymbols::InsertMacro(Macro* macro)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(749): void CxxSymbols::InsertSpace(Namespace* space)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(756): void CxxSymbols::InsertTerm(Terminal* term)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp(763): void CxxSymbols::InsertType(Typedef* type)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(343): void CxxUsageSets::AddBase(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(351): void CxxUsageSets::AddDirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(359): void CxxUsageSets::AddForward(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(370): void CxxUsageSets::AddIndirect(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(378): void CxxUsageSets::AddUser(const CxxNamed* item)
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(724): Numeric FloatLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(785): Numeric IntLiteral::GetNumeric() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(890): CxxToken* Literal::AutoType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(915): CxxToken* Literal::RootType() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(931): Cxx::ItemType Literal::Type() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2645): TypeSpec* StrLiteral::GetTypeSpec() const
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp(2652): CxxNamed* StrLiteral::Referent() const
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(333): Editor::Iter Editor::Find(SourceList& list, size_t line)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(345): Editor::Iter Editor::Find(SourceList& list, const string& source)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(552): bool Editor::IsSorted1(const SourceLine& line1, const SourceLine& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(559): bool Editor::IsSorted2(const string& line1, const string& line2)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(612): void Editor::PushBack(SourceList& list, const string& source)
  C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp(620): word Editor::PushInclude(string& source, string& expl)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(134): const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp(142): bool OperatorInfo::GetType(const string& op, LibTokenType& type)
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(618): size_t Lexer::GetLineNum(size_t pos) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(642): size_t Lexer::GetLineStart(size_t line) const
  C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp(715): bool Lexer::GetNthLine(size_t n, string& s) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp(103): word LibraryErrSet::Error(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(76): LibrarySet* LibrarySet::AffectedBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(83): LibrarySet* LibrarySet::Affecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(90): LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(108): LibrarySet* LibrarySet::CommonAffecters() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(155): LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(162): LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(169): LibrarySet* LibrarySet::Directories() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(188): LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(195): LibrarySet* LibrarySet::Files() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(202): LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(231): LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(250): LibrarySet* LibrarySet::Implements() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(257): LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(264): bool LibrarySet::IsReadOnly() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(271): bool LibrarySet::IsTemporary() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(298): LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(305): LibrarySet* LibrarySet::NeededBy() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(312): LibrarySet* LibrarySet::Needers() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(321): word LibrarySet::NotImplemented(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(347): LibrarySet* LibrarySet::OpError() const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(463): LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(470): LibrarySet* LibrarySet::UsedBy(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp(477): LibrarySet* LibrarySet::Users(bool self) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp(107): CliParm* MediaParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp(259): MediaPsm* MediaPsm::GetOgPsm() const
  C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp(89): Circuit* Switch::GetCircuit(PortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp(79): Tone* ToneRegistry::GetTone(Tone::Id tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(128): void Base::Nullify(size_t n)
  C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp(157): Base::vptr_t Base::Vptr() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp(52): void CfgBitParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp(70): bool CfgFlagParm::GetCurrValue() const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp(72): void CfgIntParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp(274): void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp(68): void CfgStrParm::Explain(string& expl) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp(79): Class* ClassRegistry::Lookup(ClassId cid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp(136): size_t CliCookie::Index(size_t depth) const
  C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp(368): CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(134): void Debug::Reset()
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(40): int FunctionName::compare(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(47): size_t FunctionName::find(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp(55): size_t FunctionName::rfind(fn_name_arg func, const char* str)
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(28): bool InitFlags::AllowBreak()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(39): bool InitFlags::CauseTimeout()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(48): bool InitFlags::ImmediateTrace()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(57): bool InitFlags::TraceInit()
  C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp(68): bool InitFlags::TraceWork()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(154): size_t SegmentHeader::Size()
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(171): SysHeap* Memory::AccessHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(189): size_t Memory::Align(size_t size, size_t log2align)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(255): SysHeap* Memory::EnsureHeap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(309): const SysHeap* Memory::Heap(MemoryType type)
  C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp(403): size_t Memory::Words(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp(152): Module* ModuleRegistry::GetModule(ModuleId mid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp(74): TraceStatus MsgBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp(114): word ExplainTraceRc(const CliThread& cli, TraceRc rc)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp(172): TraceStatus NbTracer::FactionStatus(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(45): char BlockingReasonChar(BlockingReason reason)
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp(76): char FactionChar(Faction faction)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(71): Object::ClassId Object::GetClassId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(82): bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp(109): Object::ObjectId Object::GetObjectId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(277): size_t ObjectPool::AllocCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(443): bool ObjectPool::BidToIndices(Bid bid, size_t& i, size_t& j) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(698): size_t ObjectPool::FailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(743): size_t ObjectPool::FreeCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(750): bool ObjectPool::IndicesToBid(size_t i, size_t j, Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(762): size_t ObjectPool::InUseCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(769): size_t ObjectPool::LowAvailCount() const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(776): ObjectBlock* ObjectPool::Next(Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(795): Pooled* ObjectPool::NextUsed(Bid& bid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(868): ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(877): PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(886): ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp(289): ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp(48): PermanentHeap* PermanentHeap::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(124): Flags PS_Break()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(129): Flags PS_Delayed()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(134): Flags PS_Exit()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(139): Flags PS_Final()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(144): Flags PS_Interrupt()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(149): Flags PS_Native()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(154): Flags PS_NoError()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(159): Flags PS_NoLog()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp(164): Flags PS_NoRecover()
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(57): Flags PosixSignalRegistry::Attrs(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(90): PosixSignal* PosixSignalRegistry::Find(signal_t value) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(102): PosixSignal* PosixSignalRegistry::Find(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp(153): signal_t PosixSignalRegistry::Value(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp(39): Q2Link::~Q2Link()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(37): RegCell::~RegCell()
  C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp(49): void RegCell::SetId(id_t cid)
  C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp(125): Singletons* Singletons::Instance()
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(117): uint64_t Statistic::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(258): uint64_t HighWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp(334): uint64_t LowWatermark::Overall() const
  C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp(147): StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(32): std::istream& SysConsole::In()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp(39): ostream& SysConsole::Out()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(100): bool FileWalker::AtEnd() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(107): void FileWalker::GetName(std::string& fileName) const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp(116): bool FileWalker::IsSubdir() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp(48): Thread* SysMutex::Owner() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(269): void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(296): SysThreadId SysThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(121): DWORD64 StackInfo::GetFrame(fn_depth depth)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(137): fn_depth StackInfo::GetFrames()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(145): void StackInfo::Shutdown()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(154): DWORD StackInfo::Startup()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp(265): fn_depth SysThreadStack::FuncDepth()
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp(71): ticks_t SysTickTimer::TicksNow() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(181): int16_t SysTime::DayOfWeek() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(191): int16_t SysTime::DayOfYear() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(207): const int16_t* SysTime::DaysPerMonth(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(215): size_t SysTime::DaysSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(245): bool SysTime::IsLeapYear(int16_t year)
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp(265): int64_t SysTime::MsecsSinceT0() const
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp(30): uintptr_t BadPointer()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(29): bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(36): void ThisThread::ExitBlockingOperation(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(43): void ThisThread::MakePreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(50): void ThisThread::MakeUnpreemptable()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(57): void ThisThread::MemProtect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(64): void ThisThread::MemUnprotect()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(71): DelayRc ThisThread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(78): void ThisThread::PauseOver(word limit)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(85): word ThisThread::RtcPercentUsed()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(92): ThreadId ThisThread::RunningThreadId()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(99): TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp(106): void ThisThread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(438): ContextSwitch* ContextSwitches::AddSwitch()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1151): TraceStatus Thread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1532): main_t Thread::EnterThread(void* arg)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1736): void Thread::FunctionInvoked(fn_name_arg func)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1833): bool Thread::HasExited() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1896): bool Thread::IsLocked() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1903): Thread* Thread::LockedThread()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1970): TraceRc Thread::LogContextSwitches(bool on)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2095): SysThreadId Thread::NativeThreadId() const
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2123): DelayRc Thread::Pause(msecs_t msecs)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2163): double Thread::PercentIdle()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2522): bool Thread::RunningLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2673): void Thread::StackCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2945): TraceRc Thread::StartTracing(bool immediate, bool autostop)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2981): void Thread::StopTracing()
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3044): void Thread::Trace
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3061): bool Thread::TraceRunningThread(Thread*& thr)
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3096): void Thread::TrapCheck()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(287): bool ThreadAdmin::BreakEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(385): void ThreadAdmin::Incr(Register r)
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(493): word ThreadAdmin::TrapCount()
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(209): ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp(218): Thread* ThreadRegistry::GetThread(ThreadId tid) const
  C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp(117): Tool* ToolRegistry::GetTool(FlagId id) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(111): TraceBuffer::TraceBuffer() :
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(139): TraceBuffer::~TraceBuffer()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(153): void* TraceBuffer::AddRecord(size_t nBytes)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(351): bool TraceBuffer::Empty() const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(382): bool TraceBuffer::IsLocked()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(391): void TraceBuffer::Lock()
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(411): void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(472): void TraceBuffer::PurgeRecords(size_t end)
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(540): void TraceBuffer::RecordInvocation(fn_name_arg func) const
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp(743): void TraceBuffer::Unlock()
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp(97): void FunctionProfiler::CheckHigh(FunctionStats*& high,
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(51): int FunctionStats::Compare(const FunctionStats& that) const
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp(69): void FunctionStats::IncrCalls(usecs_t net)
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1158): Q1WayItem::~Q1WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1192): Q1WayPool::Q1WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1221): void Q1WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1678): Q2WayItem::~Q2WayItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1712): Q2WayPool::Q2WayPool()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(1741): void Q2WayPool::Reallocate()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2242): RegistryItem::~RegistryItem()
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2273): RegistryPool::RegistryPool()
  C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp(205): TraceStatus IpBuffer::GetStatus() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(205): size_t IpPort::Discards() const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(283): IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp(78): IpService* IpServiceRegistry::GetService(const string& name) const
  C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp(110): SysIpL2Addr SysIpL2Addr::LoopbackAddr()
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(149): bool SysSocket::SetTracing(bool tracing)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(157): bool SysSocket::Trace(TraceStatus status)
  C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp(168): bool SysSocket::TraceEnabled()
  C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp(428): SysTcpSocket* TcpIoThread::Listener() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp(97): CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp(82): CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp(79): CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp(97): CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp(79): CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp(513): void PotsCircuit::Trace(const SignalEntry& entry)
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp(76): CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp(69): CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp(148): PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp(84): CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp(113): PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(356): CliText* PotsAlertingSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(370): CliText* PotsDigitsSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(384): CliText* PotsFacilitySignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(398): CliText* PotsFlashSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(412): CliText* PotsLockoutSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(426): CliText* PotsOffhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(440): CliText* PotsOnhookSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(454): CliText* PotsProgressSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(468): CliText* PotsReleaseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(482): CliText* PotsSuperviseSignal::CreateText() const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(525): CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(567): CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(737): CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(858): CliParm* PotsRingParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp(946): CliParm* PotsScanParameter::CreateCliParm(Usage use) const
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp(74): CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp(85): CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp(96): CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp(91): void AnalyzeSapEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp(87): void AnalyzeSnpEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(329): void Context::Dump() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(953): bool Context::TraceOn()
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(963): bool Context::TraceOn(TransTrace*& trans)
  C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp(138): void Event::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(219): size_t Factory::DiscardedContextCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(226): size_t Factory::DiscardedMessageCount() const
  C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp(151): Factory* FactoryRegistry::GetFactory(FactoryId fid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp(89): void InitiationReqEvent::Capture
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(698): void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(802): size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(810): msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(818): size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp(178): InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp(113): TraceStatus InvokerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(244): MsgDirection Message::Dir() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(331): ProtocolId Message::GetProtocol() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(366): SignalId Message::GetSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp(422): MsgHeader* Message::Header() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp(194): Parameter::Usage Parameter::GetUsage(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(135): Parameter* Protocol::FirstParm() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(148): Signal* Protocol::FirstSignal() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(161): Parameter* Protocol::GetParameter(ParameterId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(173): Signal* Protocol::GetSignal(SignalId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(185): void Protocol::NextParm(Parameter*& parm) const
  C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp(198): void Protocol::NextSignal(Signal*& sig) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp(79): Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp(406): void TimerPool::IncrTimeouts() const
  C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp(371): Trigger* Service::GetTrigger(TriggerId tid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp(79): Service* ServiceRegistry::GetService(ServiceId sid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp(312): Service* ServiceSM::GetService() const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(125): bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(157): bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(237): EventHandlerId State::GetHandler(EventId eid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp(245): EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp(60): TraceStatus TimerThread::CalcStatus(bool dynamic) const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp(385): PotsProfile* PotsBcSsm::Profile() const
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(98): Faction PotsCallIpService::GetFaction() const { return PayloadFaction; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(108): ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(112): size_t PotsCallIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp(116): size_t PotsCallIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(119): void PotsTreatmentRegistry::SetCauseToTreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp(201): PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
  C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp(77): bool MscAddress::ExternalFid(FactoryId& fid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp(89): bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
  C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp(56): void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
W109 Function does not invoke Debug::ft as first statement
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(106):       Debug::ft(CinThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp(151):    Debug::ft(CinThread_GetLine);
  C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp(63):    Debug::ft(Debug_GenerateSwLog);
  C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp(45):    Debug::ft(Exception_ctor1);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(38):    Debug::ft(MutexGuard_ctor);
  C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp(51):       Debug::ft(MutexGuard_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp(49):    Debug::ft(Q1Link_dtor);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp(107):    Debug::ft(SysMutex_Acquire);
  C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp(57):    Debug::ft(NodeBase_SE_Handler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(1656):    Debug::ft(Thread_ExitIfSafe);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2467):    Debug::ft(Thread_ResumeLocked);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2645):    Debug::ft(Thread_SignalHandler);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(2717):          Debug::ft(Thread_Start);
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(3230):       Debug::ft(Thread_Unlock);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3374):       Debug::ft(RecoveryTestThread_Enter);
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(3456):       Debug::ft(RecoveryTestThread_LoopForever);
  C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp(695):    Debug::ft(Context_ProcessWork);
W112 Override of Base.Display not found
  C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h(43): class PotsShelfIpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp(224): class TrafficCallPool : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(294): class CipUdpService : public UdpIpService
  C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h(335): class CipTcpService : public TcpIpService
  C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h(43): class CodeCoverage : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h(85): class CxxSymbols: public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h(44): class Interpreter : public NodeBase::Temporary
  C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h(87): class CfgFileTimeParm : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(75): class ObjectPoolSizeCfg : public CfgIntParm
  C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp(88): class ObjectPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(258): class ThreadStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp(51): class ThreadsStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h(63): class TraceBuffer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h(49): class FunctionProfiler : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(905): class LbcPool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp(2664): class SysTimePool : public Temporary
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp(49): class IpPortStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp(47): class HostAddrCfg : public CfgStrParm
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(42): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h(36): class SysUdpSocket : public SysSocket
  C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp(43): class FactoryStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(57): class InvokerPoolStats : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp(71): class InvokerWork : public Dynamic
  C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h(194): class TimerPool : public ObjectPool
  C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h(115): class SbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h(52): class PotsCallIpService : public UdpIpService
W113 Override of Object.Patch not found
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(38): class StatusCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(59): class SetCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(88): class IncludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(118): class ExcludeCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(147): class QueryCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(177): class SaveCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h(205): class ClearCommand : public CliCommand
  C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h(63): class NbTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h(36): class PermanentHeap : public SysHeap
  C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h(41): class SysTickTimer : public Immutable
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(351): class ContextSwitches : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(606): class Orphans : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp(740): class ThreadPriv : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(45): class NwClearCommand : public ClearCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(73): class NwExcludeCommand : public ExcludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(99): class NwIncludeCommand : public IncludeCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(118): class NwQueryCommand : public QueryCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h(133): class NwStatusCommand : public StatusCommand
  C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h(42): class NwTracer : public Permanent
  C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h(50): class EventHandler : public Protected
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(40): class SbAnalyzeMessage : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(54): class SbAnalyzeSap : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(68): class SbAnalyzeSnp : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(82): class SbForceTransition : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h(96): class SbInitiationReq : public EventHandler
  C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h(88): class TimeoutParameter : public TlvParameter
========================================================================================================================
WARNINGS SORTED BY FILE/TYPE/LINE
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnIncrement.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/an/AnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelf.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    34: using namespace SessionBase;
    35: using namespace MediaBase;
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W033 Unused function
    65:    virtual CliText* CreateText() const override;
  W112 Override of Base.Display not found
    43: class PotsShelfIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfFactory.cpp
  W007 Cast down the inheritance hierarchy
    139:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    151:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    172:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
    182:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfHandler.cpp
  W006 reinterpret_cast
    70:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    71:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    68:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/an/PotsShelfIpService.cpp
  W005 Functional cast
    111: ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    98: Faction PotsShelfIpService::GetFaction() const { return PayloadFaction; }
    111: ipport_t PotsShelfIpService::Port() const { return ipport_t(port_); }
    115: size_t PotsShelfIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    119: size_t PotsShelfIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.cpp
  W004 C-style cast
    502:    Singleton< TrafficCallPool >::Instance()->Enq((TrafficCall*) addr);
    1076:    timewheel_ = (Q1Way< TrafficCall >*) Memory::Alloc(size, MemDyn);
  W006 reinterpret_cast
    490:    auto fake = reinterpret_cast< const TrafficCall* >(&local);
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W055 Data could be const
    172:    Q1Link link_;
  W092 Function could be const
    81:    msecs_t Originate();
  W094 Function could be free
    168:    static const char* strState(State state);
  W108 Function does not invoke Debug::ft
    1380: void PotsTrafficThread::RecordHoldingTime(secs_t secs)
  W112 Override of Base.Display not found
    224: class TrafficCallPool : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/an/PotsTrafficThread.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace CallBase;
  W094 Function could be free
    87:    static void DisplayStateCounts
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.cpp
  W006 reinterpret_cast
    97:    reinterpret_cast< const DigitString* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    114:    auto& tlvmsg = static_cast< TlvMessage& >(msg);
    165:    auto& tlvmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcAddress.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    34: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    213:    Digit GetDigit(DigitCount i) const;
  W044 Member could be private
    145:    typedef uint8_t DigitCount;
    175:    static bool IsValidDigit(Digit d)
    182:    Rc AddDigit(Digit d);
    201:    DigitCount Size() const;
    225:    bool operator==(const DigitString& that) const;
  W045 Member could be protected
    124:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
  W063 Single-argument constructor is not explicit
    167:    DigitString(Address::DN dn);
  W094 Function could be free
    100:    static bool IsValidDN(DN dn) { return ((dn >= FirstDN) && (dn <= LastDN)); }
    116:    static bool IsValidSC(SC sc) { return ((sc >= FirstSC) && (sc <= LastSC)); }
    120:    static uint32_t DNToIndex(Address::DN dn) { return dn - FirstDN + 1; }
    124:    static Address::DN IndexToDN(uint32_t i) { return i + FirstDN - 1; }
    175:    static bool IsValidDigit(Digit d)
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.cpp
  W006 reinterpret_cast
    134:    reinterpret_cast< const CauseInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    123: CliParm* CauseParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcCause.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcEvents.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    51:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    53:    auto& bcssm = static_cast< BcSsm& >(ssm);
    79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W101 Line contains adjacent spaces
    79:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    80:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    81:    auto          sid = msg->GetSignal();
    82:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    84:    CauseInfo*    cci;
    136:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    137:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    138:    auto       sid = msg->GetSignal();
    139:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    181:    auto&      ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    182:    auto       msg = static_cast< CipMessage* >(ame.Msg());
    183:    auto       sid = msg->GetSignal();
    184:    auto&      bcssm = static_cast< BcSsm& >(ssm);
    215:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    216:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    217:    auto          sid = msg->GetSignal();
    218:    auto&         bcssm = static_cast< BcSsm& >(ssm);
    220:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.cpp
  W006 reinterpret_cast
    120:    reinterpret_cast< const ProgressInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    109: CliParm* ProgressParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProgress.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.cpp
  W005 Functional cast
    275: ipport_t CipUdpService::Port() const { return ipport_t(port_); }
    378: ipport_t CipTcpService::Port() const { return ipport_t(port_); }
  W006 reinterpret_cast
    528:    reinterpret_cast< const RouteResult* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    543:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    573:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    885:       if(m->GetSignal() == sid) return static_cast< CipMessage* >(m);
    919:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1049:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1448:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1453:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W101 Line contains adjacent spaces
    540:    id_t        idx;
    541:    word        fid, rid;
    543:    auto&       tlvmsg = static_cast< TlvMessage& >(msg);
    572:    TestRc       rc;
    573:    auto&        tlvmsg = static_cast< const TlvMessage& >(msg);
    575:    id_t         idx;
    576:    word         fid, rid;
    918:    auto          state = GetState();
    919:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    920:    auto          sig = tmsg.GetSignal();
    921:    TimeoutInfo*  toi = nullptr;
    923:    auto          err = true;
    924:    debug64_t     error;
    1048:    auto          state = GetState();
    1049:    auto&         tmsg = static_cast< TlvMessage& >(msg);
    1050:    auto          sig = msg.GetSignal();
    1052:    auto          err = true;
    1053:    debug64_t     error;
  W108 Function does not invoke Debug::ft
    265: Faction CipUdpService::GetFaction() const { return PayloadFaction; }
    275: ipport_t CipUdpService::Port() const { return ipport_t(port_); }
    279: size_t CipUdpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    283: size_t CipUdpService::TxSize() const { return IoThread::MaxTxBuffSize; }
    360: Faction CipTcpService::GetFaction() const { return PayloadFaction; }
    364: size_t CipTcpService::MaxBacklog() const { return 200; }
    368: size_t CipTcpService::MaxConns() const { return TcpIoThread::MaxConns; }
    378: ipport_t CipTcpService::Port() const { return ipport_t(port_); }
    382: size_t CipTcpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    386: size_t CipTcpService::TxSize() const { return IoThread::MaxTxBuffSize; }
    432: CliText* CipIamSignal::CreateText() const
    446: CliText* CipCpgSignal::CreateText() const
    460: CliText* CipAnmSignal::CreateText() const
    474: CliText* CipRelSignal::CreateText() const
    518: CliParm* CipRouteParameter::CreateCliParm(Usage use) const
    622: CliParm* CipCallingParameter::CreateCliParm(Usage use) const
    646: CliParm* CipCalledParameter::CreateCliParm(Usage use) const
    672: CliParm* CipOriginalCallingParameter::CreateCliParm(Usage use) const
    698: CliParm* CipOriginalCalledParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/cb/BcProtocol.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    49: using namespace MediaBase;
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W027 Unused class
    294: class CipUdpService : public UdpIpService
  W033 Unused function
    178:    MediaInfo* AddMedia(const MediaInfo& media);
    245:    virtual void InjectFinalMsg() override;
    316:    virtual CliText* CreateText() const override;
    369:    virtual CliText* CreateText() const override;
  W044 Member could be private
    232:    virtual void EnsureMediaMsg() override;
    236:    virtual IncomingRc ProcessIcMsg(Message& msg, Event*& event) override;
    417:    virtual Message* AllocIcMsg(SbIpBufferPtr& buff) const override;
  W112 Override of Base.Display not found
    294: class CipUdpService : public UdpIpService
    335: class CipTcpService : public TcpIpService
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcRouting.h
  W020 Using statement in header
    31: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/cb/BcService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcSessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    53: using namespace MediaBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W039 Member hides inherited name
    314:    static const Id NextId = FirstId + 50;
    881:    static const Id NextId                 = FirstUn + 7;
  W044 Member could be private
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1150:    CipPsm* AllocNPsm();
  W045 Member could be protected
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
  W055 Data could be const
    338:    Progress::Ind progress_;
    354:    Cause::Ind cause_;
  W077 Virtual function is public
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1074:    virtual EventHandler::Rc AnalyzeNPsmTimeout
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1097:    virtual EventHandler::Rc ClearCall(Cause::Ind cause);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1211:    virtual Cause::Ind VerifyRoute(RouteResult::Id rid) const;
  W079 Virtual function has no overrides
    1008:    virtual EventHandler::Rc RaiseAuthorizeOrigination(Event*& nextEvent);
    1009:    virtual EventHandler::Rc RaiseCollectInformation(Event*& nextEvent);
    1010:    virtual EventHandler::Rc RaiseLocalInformation(Event*& nextEvent);
    1011:    virtual EventHandler::Rc RaiseCollectionTimeout(Event*& nextEvent);
    1012:    virtual EventHandler::Rc RaiseAnalyzeInformation(Event*& nextEvent);
    1013:    virtual EventHandler::Rc RaiseInvalidInformation(Event*& nextEvent);
    1014:    virtual EventHandler::Rc RaiseSelectRoute(Event*& nextEvent);
    1015:    virtual EventHandler::Rc RaiseAuthorizeCallSetup(Event*& nextEvent);
    1016:    virtual EventHandler::Rc RaiseSendCall(Event*& nextEvent);
    1017:    virtual EventHandler::Rc RaiseRemoteBusy(Event*& nextEvent);
    1018:    virtual EventHandler::Rc RaiseRemoteProgress
    1020:    virtual EventHandler::Rc RaiseRemoteAlerting(Event*& nextEvent);
    1021:    virtual EventHandler::Rc RaiseRemoteNoAnswer(Event*& nextEvent);
    1022:    virtual EventHandler::Rc RaiseRemoteAnswer(Event*& nextEvent);
    1023:    virtual EventHandler::Rc RaiseAuthorizeTermination(Event*& nextEvent);
    1024:    virtual EventHandler::Rc RaiseSelectFacility(Event*& nextEvent);
    1025:    virtual EventHandler::Rc RaisePresentCall(Event*& nextEvent);
    1026:    virtual EventHandler::Rc RaiseLocalBusy(Event*& nextEvent);
    1027:    virtual EventHandler::Rc RaiseFacilityFailure(Event*& nextEvent);
    1028:    virtual EventHandler::Rc RaiseLocalProgress
    1030:    virtual EventHandler::Rc RaiseLocalAlerting(Event*& nextEvent);
    1031:    virtual EventHandler::Rc RaiseLocalAnswer(Event*& nextEvent);
    1032:    virtual EventHandler::Rc RaiseLocalNoAnswer(Event*& nextEvent);
    1033:    virtual EventHandler::Rc RaiseLocalSuspend(Event*& nextEvent);
    1034:    virtual EventHandler::Rc RaiseLocalResume(Event*& nextEvent);
    1035:    virtual EventHandler::Rc RaiseRemoteSuspend(Event*& nextEvent);
    1036:    virtual EventHandler::Rc RaiseRemoteResume(Event*& nextEvent);
    1043:    virtual EventHandler::Rc RaiseLocalRelease
    1045:    virtual EventHandler::Rc RaiseRemoteRelease
    1047:    virtual EventHandler::Rc RaiseReleaseCall
    1049:    virtual EventHandler::Rc RaiseApplyTreatment
    1056:    virtual EventHandler::Rc AnalyzeInformation(Event*& nextEvent);
    1061:    virtual EventHandler::Rc RequestService(Event*& nextEvent);
    1068:    virtual EventHandler::Rc SelectRoute(Event*& nextEvent);
    1081:    virtual EventHandler::Rc HandleLocalAlerting();
    1086:    virtual EventHandler::Rc HandleLocalAnswer();
    1090:    virtual EventHandler::Rc HandleRemoteRelease(Event& currEvent);
    1103:    virtual CipMessage* BuildCipIam();
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
  W084 Adjacent arguments have the same type
    1215:    BcFactory(Id fid, ProtocolId prid, const char* name);
  W092 Function could be const
    1109:    virtual CipMessage* BuildCipCpg(Progress::Ind progress);
    1166:    CipMessage* BuildCipRel(Cause::Ind cause);
C:/Users/gregu/Documents/rsc/rsc/cb/BcSsm.cpp
  W007 Cast down the inheritance hierarchy
    405:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    920:       auto fac = static_cast< BcFactory* >(reg->GetFactory(route_.selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W104 Line length exceeds the standard maximum
    300:    for(auto s = BcState::AuthorizingOrigination; s <= BcState::OrigAlerting; ++s)
C:/Users/gregu/Documents/rsc/rsc/cb/BcStates.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/BcTriggers.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cb/CbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/cb/DigitString.cpp
  W005 Functional cast
    139:       auto rc = AddDigit(Digit(ds.digits_[i]));
    171:    if(i < Size()) return Digit(digits_[i]);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    169: Digit DigitString::GetDigit(DigitCount i) const
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.cpp
  W007 Cast down the inheritance hierarchy
    423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    463:    auto& ppe = static_cast< ProxyBcProgressEvent& >(currEvent);
    472:       auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    504:    auto& pssm = static_cast< ProxyBcSsm& >(ssm);
    505:    auto ppsm = static_cast< ProxyBcPsm* >(Context::ContextPsm());
    624:    auto pssm = static_cast< ProxyBcSsm* >(RootSsm());
    782:          return static_cast< ProxyBcPsm* >(p);
    818:          ppsm = static_cast< ProxyBcPsm* >(psm);
    1044:    auto& tmsg = static_cast< const CipMessage& >(msg);
    1049:    auto fac = static_cast< SsmFactory* >(reg->GetFactory(rte->selector));
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W101 Line contains adjacent spaces
    423:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    424:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    425:    auto          sid = msg->GetSignal();
    426:    auto&         pssm = static_cast< ProxyBcSsm& >(ssm);
    428:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/cb/ProxyBcSessions.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W027 Unused class
    189: class ProxyBcDisconnecting : public BcDisconnecting
  W028 Unused data
    60:    static const ServicePortId NextPortId = FirstPortId + 1;
    216:    static const Id NextId        = FirstId + 4;
    300:    static const Id NextId              = FirstId + 7;
    385:    static const Id NextId          = FirstId + 3;
  W033 Unused function
    192:    explicit ProxyBcDisconnecting(ServiceId sid);
  W039 Member hides inherited name
    60:    static const ServicePortId NextPortId = FirstPortId + 1;
    210:    static const Id FirstId = BcEvent::NextId;
    216:    static const Id NextId        = FirstId + 4;
    300:    static const Id NextId              = FirstId + 7;
  W044 Member could be private
    492:    ProxyBcPsm* FirstBroadcast() const;
  W077 Virtual function is public
    469:    virtual EventHandler::Rc RaiseReleaseUser
    471:    virtual EventHandler::Rc RaiseProxyProgress
    473:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    474:    virtual EventHandler::Rc RaiseProxyRelease
    509:    virtual void SetUPsm(MediaPsm& psm) override;
  W079 Virtual function has no overrides
    469:    virtual EventHandler::Rc RaiseReleaseUser
    471:    virtual EventHandler::Rc RaiseProxyProgress
    473:    virtual EventHandler::Rc RaiseProxyAnswer(Event*& nextEvent);
    474:    virtual EventHandler::Rc RaiseProxyRelease
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cb/ServiceCodeRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace SessionBase;
  W044 Member could be private
    46:    void SetService(Address::SC sc, ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/cb/TestCallFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/cn/CnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/CodeCoverage.h
  W033 Unused function
    160:    static std::string Demangle(const std::string& s);
  W084 Adjacent arguments have the same type
    85:    NodeBase::word Erase
    143:    bool FindFiles
  W094 Function could be free
    143:    bool FindFiles
  W112 Override of Base.Display not found
    43: class CodeCoverage : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const CodeDir* >(&local);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeDir.h
  W094 Function could be free
    86:    static bool IsCodeFile(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.cpp
  W005 Functional cast
    1730:       *cli.obuf << ": " << Warning(item->warning);
  W006 reinterpret_cast
    599:    auto fake = reinterpret_cast< const CodeFile* >(&local);
  W007 Cast down the inheritance hierarchy
    85:          auto base = static_cast< const Class* >(*b);
    218:       auto base = static_cast< const Class* >(*b);
    250:                auto type = static_cast< const Typedef* >(*item2);
    273:          auto type = static_cast< const Typedef* >(*item1);
    522:    affecterIds_ = static_cast< CodeFileSet* >(asSet)->Set();
    2482:    auto& affecterIds = static_cast< CodeFileSet* >(affecterSet)->Set();
    2620:       auto base = static_cast< const Class* >(*b);
  W108 Function does not invoke Debug::ft
    1897: void CodeFile::GetLineCounts() const
    1913: LineType CodeFile::GetLineType(size_t n) const
    2068: void CodeFile::InsertClass(Class* cls)
    2076: void CodeFile::InsertData(Data* data)
    2084: bool CodeFile::InsertDirective(DirectivePtr& dir)
    2093: void CodeFile::InsertEnum(Enum* item)
    2101: void CodeFile::InsertForw(Forward* forw)
    2109: void CodeFile::InsertFunc(Function* func)
    2117: void CodeFile::InsertInclude(IncludePtr& incl)
    2146: void CodeFile::InsertMacro(Macro* macro)
    2154: void CodeFile::InsertType(Typedef* type)
    2162: void CodeFile::InsertUsing(Using* use)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFile.h
  W026 Unused argument
    320/3:       const CxxNamed* item, const CxxScope* scope) const;
  W044 Member could be private
    108:    bool IsTemplateHeader() const;
    212:    int CalcGroup(const Include& incl) const;
  W094 Function could be free
    247:    static void GenerateReport(std::ostream* stream, const SetOfIds& set);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeFileSet.cpp
  W004 C-style cast
    535:    LibrarySet* nbSet = (LibrarySet*) this;
    567:    LibrarySet* nsSet = (LibrarySet*) this;
  W007 Cast down the inheritance hierarchy
    78:    auto curr = static_cast< CodeFileSet* >(Users(true));
    90:       curr = static_cast< CodeFileSet* >(prev->Users(true));
    110:    auto curr = static_cast< CodeFileSet* >(UsedBy(true));
    122:       curr = static_cast< CodeFileSet* >(prev->UsedBy(true));
    401:    auto& dirSet = static_cast< const CodeDirSet* >(that)->Set();
    433:    auto abSet = static_cast< CodeFileSet* >(this->AffectedBy());
    434:    auto asSet = static_cast< CodeFileSet* >(this->Affecters());
    546:       currCount = static_cast< CodeFileSet* >(nbSet)->Set().size();
    578:       currCount = static_cast< CodeFileSet* >(nsSet)->Set().size();
    613:    auto order = static_cast< CodeFileSet* >(affects)->SortInBuildOrder();
  W008 Cast removes const qualification
    535:    LibrarySet* nbSet = (LibrarySet*) this;
    567:    LibrarySet* nsSet = (LibrarySet*) this;
C:/Users/gregu/Documents/rsc/rsc/ct/CodeIncrement.cpp
  W045 Member could be protected
    114:    static LibrarySet* Evaluate(const CliThread& cli);
  W094 Function could be free
    114:    static LibrarySet* Evaluate(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeSet.cpp
  W007 Cast down the inheritance hierarchy
    64:    auto that = static_cast< CodeSet* >(rhs);
    100:    auto that = static_cast< const CodeSet* >(rhs);
    137:    auto that = static_cast< const CodeSet* >(rhs);
    151:    auto that = static_cast< const CodeSet* >(rhs);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.cpp
  W105 Function not sorted in standard order
    305: bool IsUnusedItemWarning(Warning warning)
  W108 Function does not invoke Debug::ft
    305: bool IsUnusedItemWarning(Warning warning)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeTypes.h
  W018 Remove #include directive
    28: #include <vector>
  W020 Using statement in header
    31: using namespace NodeBase;
  W028 Unused data
    535: extern const Flags NoLF_Mask;
    536: extern const Flags Last_Mask;
    540: extern const Flags Stats_Mask;
  W084 Adjacent arguments have the same type
    292:    SymbolView(Accessibility a, TypeMatch m, bool u, bool f, bool r, Distance d);
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.cpp
  W005 Functional cast
    179:       *stream << setw(12) << LineType(t)
    191:          *stream << setw(6) << WarningCode(Warning(w)) << setw(6)
    192:             << WarningCounts_[w] << spaces(2) << Warning(w) << CRLF;
  W108 Function does not invoke Debug::ft
    97: word CodeInfo::FindWarning(const WarningLog& log)
    272: void CodeInfo::GetWarnings(const CodeFile* file, WarningLogVector& warnings)
    285: bool CodeInfo::IsSortedByFile(const WarningLog& log1, const WarningLog& log2)
    303: bool CodeInfo::IsSortedByWarning(const WarningLog& log1, const WarningLog& log2)
C:/Users/gregu/Documents/rsc/rsc/ct/CodeWarning.h
  W033 Unused function
    50:       bool operator!=(const WarningLog& that) const;
  W044 Member could be private
    78:       static bool IsSortedByFile
  W055 Data could be const
    42:       size_t line;           // line where warning occurred
    43:       Warning warning;       // type of warning
    44:       size_t offset;         // warning-specific; displayed if non-zero
    45:       std::string info;      // warning-specific
  W056 Data could be const pointer
    41:       const CodeFile* file;  // file where warning occurred
  W094 Function could be free
    78:       static bool IsSortedByFile
    83:       static bool IsSortedByWarning
    96:       static std::string WarningCode(Warning warning);
C:/Users/gregu/Documents/rsc/rsc/ct/CtModule.h
  W049 Data is init-only
    60:    static bool Registered;
  W094 Function could be free
    56:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.cpp
  W005 Functional cast
    260:       if(Attrs[i].symbol.compare(sym) == 0) return Cxx::Operator(i);
    312:          oper = Cxx::Operator(i);
    363:       Attrs[ValidIntDigits[i]].intValue = int8_t(i);
    369:       Attrs[ValidHexDigits[i]].hexValue = int8_t(h);
    374:       Attrs[ValidOctDigits[i]].octValue = int8_t(i);
  W101 Line contains adjacent spaces
    98:    CxxWord("-",   "-",    "D",  F),  // AUTO
    99:    CxxWord("-",   "-",    "b",  T),  // BREAK
    100:    CxxWord("-",   "-",    "c",  T),  // CASE
    101:    CxxWord("C",   "C",    "-",  T),  // CLASS
    102:    CxxWord("DP",  "DP",   "D",  F),  // CONST
    103:    CxxWord("DP",  "DP",   "D",  F),  // CONSTEXPR
    104:    CxxWord("-",   "-",    "n",  T),  // CONTINUE
    105:    CxxWord("-",   "-",    "o",  T),  // DEFAULT
    106:    CxxWord("-",   "-",    "d",  T),  // DO
    107:    CxxWord("E",   "E",    "E",  T),  // ENUM
    108:    CxxWord("-",   "P",    "-",  F),  // EXPLICIT
    109:    CxxWord("DP",  "-",    "-",  T),  // EXTERN
    110:    CxxWord("-",   "-",    "f",  T),  // FOR
    111:    CxxWord("-",   "F",    "-",  T),  // FRIEND
    112:    CxxWord("H",   "H",    "H",  F),  // HASH
    113:    CxxWord("-",   "-",    "i",  T),  // IF
    114:    CxxWord("P",   "P",    "-",  T),  // INLINE
    115:    CxxWord("-",   "D",    "-",  F),  // MUTABLE
    116:    CxxWord("N",   "-",    "-",  T),  // NAMESPACE
    117:    CxxWord("-",   "P",    "-",  F),  // OPERATOR
    118:    CxxWord("-",   "A",    "-",  T),  // PRIVATE
    119:    CxxWord("-",   "A",    "-",  T),  // PROTECTED
    120:    CxxWord("-",   "A",    "-",  T),  // PUBLIC
    121:    CxxWord("-",   "-",    "r",  T),  // RETURN
    122:    CxxWord("D",   "DP",   "D",  F),  // STATIC
    123:    CxxWord("C",   "C",    "-",  T),  // STRUCT
    124:    CxxWord("-",   "-",    "s",  T),  // SWITCH
    125:    CxxWord("DCP", "DCFP", "-",  F),  // TEMPLATE
    126:    CxxWord("-",   "-",    "t",  T),  // TRY
    127:    CxxWord("T",   "T",    "T",  T),  // TYPEDEF
    128:    CxxWord("C",   "C",    "-",  T),  // UNION
    129:    CxxWord("U",   "U",    "U",  T),  // USING
    130:    CxxWord("-",   "P",    "-",  F),  // VIRTUAL
    131:    CxxWord("-",   "-",    "w",  T),  // WHILE
    132:    CxxWord("-",   "P",    "-",  F),  // NVDTOR
    133:    CxxWord("DP",  "DP",   "xD", F)   // NIL_KEYWORD
    155:    CxxOp(           SCOPE_STR, 2, 18, F, F, F),  // SCOPE_RESOLUTION
    156:    CxxOp(                 ".", 2, 17, F, F, F),  // REFERENCE_SELECT
    157:    CxxOp(                "->", 2, 17, T, F, F),  // POINTER_SELECT
    158:    CxxOp(                 "[", 2, 17, T, F, F),  // ARRAY_SUBSCRIPT
    159:    CxxOp(                 "(", 0, 17, F, F, F),  // FUNCTION_CALL
    160:    CxxOp(                "++", 1, 17, T, F, F),  // POSTFIX_INCREMENT
    161:    CxxOp(                "--", 1, 17, T, F, F),  // POSTFIX_DECREMENT
    162:    CxxOp(         DEFINED_STR, 1, 17, F, F, F),  // DEFINED
    163:    CxxOp(          TYPEID_STR, 1, 17, F, F, F),  // TYPE_NAME
    164:    CxxOp(      CONST_CAST_STR, 2, 17, F, F, F),  // CONST_CAST
    165:    CxxOp(    DYNAMIC_CAST_STR, 2, 17, F, F, F),  // DYNAMIC_CAST
    167:    CxxOp(     STATIC_CAST_STR, 2, 17, F, F, F),  // STATIC_CAST
    168:    CxxOp(          SIZEOF_STR, 1, 16, F, T, F),  // SIZEOF_TYPE
    169:    CxxOp(                "++", 1, 16, T, T, F),  // PREFIX_INCREMENT
    170:    CxxOp(                "--", 1, 16, T, T, F),  // PREFIX_DECREMENT
    171:    CxxOp(                 "~", 1, 16, T, T, F),  // ONES_COMPLEMENT
    172:    CxxOp(                 "!", 1, 16, T, T, F),  // LOGICAL_NOT
    173:    CxxOp(                 "+", 1, 16, T, T, F),  // UNARY_PLUS
    174:    CxxOp(                 "-", 1, 16, T, T, F),  // UNARY_MINUS
    175:    CxxOp(                 "&", 1, 16, T, T, F),  // ADDRESS_OF
    176:    CxxOp(                 "*", 1, 16, T, T, F),  // INDIRECTION
    177:    CxxOp(             NEW_STR, 0, 16, T, T, F),  // OBJECT_CREATE
    178:    CxxOp(       NEW_ARRAY_STR, 0, 16, T, T, F),  // OBJECT_CREATE_ARRAY
    179:    CxxOp(          DELETE_STR, 1, 16, T, T, F),  // OBJECT_DELETE
    180:    CxxOp(    DELETE_ARRAY_STR, 1, 16, T, T, F),  // OBJECT_DELETE_ARRAY
    181:    CxxOp(                 "(", 2, 16, T, T, F),  // CAST
    182:    CxxOp(                ".*", 2, 15, F, F, F),  // REFERENCE_SELECT_MEMBER
    183:    CxxOp(               "->*", 2, 15, T, F, F),  // POINTER_SELECT_MEMBER
    184:    CxxOp(                 "*", 2, 14, T, F, T),  // MULTIPLY
    185:    CxxOp(                 "/", 2, 14, T, F, F),  // DIVIDE
    186:    CxxOp(                 "%", 2, 14, T, F, F),  // MODULO
    187:    CxxOp(                 "+", 2, 13, T, F, T),  // ADD
    188:    CxxOp(                 "-", 2, 13, T, F, F),  // SUBTRACT
    189:    CxxOp(                "<<", 2, 12, T, F, F),  // LEFT_SHIFT
    190:    CxxOp(                ">>", 2, 12, T, F, F),  // RIGHT_SHIFT
    191:    CxxOp(                 "<", 2, 11, T, F, T),  // LESS
    192:    CxxOp(                "<=", 2, 11, T, F, T),  // LESS_OR_EQUAL
    193:    CxxOp(                 ">", 2, 11, T, F, T),  // GREATER
    194:    CxxOp(                ">=", 2, 11, T, F, T),  // GREATER_OR_EQUAL
    195:    CxxOp(                "==", 2, 10, T, F, T),  // EQUALITY
    196:    CxxOp(                "!=", 2, 10, T, F, T),  // INEQUALITY
    197:    CxxOp(                 "&", 2,  9, T, F, T),  // BITWISE_AND
    198:    CxxOp(                 "^", 2,  8, T, F, T),  // BITWISE_XOR
    199:    CxxOp(                 "|", 2,  7, T, F, T),  // BITWISE_OR
    200:    CxxOp(                "&&", 2,  6, T, F, T),  // LOGICAL_AND
    201:    CxxOp(                "||", 2,  5, T, F, T),  // LOGICAL_OR
    202:    CxxOp(                 "?", 3,  4, F, F, F),  // CONDITIONAL
    203:    CxxOp(                 "=", 2,  3, T, T, F),  // ASSIGN
    204:    CxxOp(                "*=", 2,  3, T, T, F),  // MULTIPLY_ASSIGN
    205:    CxxOp(                "/=", 2,  3, T, T, F),  // DIVIDE_ASSIGN
    206:    CxxOp(                "%=", 2,  3, T, T, F),  // MODULO_ASSIGN
    207:    CxxOp(                "+=", 2,  3, T, T, F),  // ADD_ASSIGN
    208:    CxxOp(                "-=", 2,  3, T, T, F),  // SUBTRACT_ASSIGN
    209:    CxxOp(               "<<=", 2,  3, T, T, F),  // LEFT_SHIFT_ASSIGN
    210:    CxxOp(               ">>=", 2,  3, T, T, F),  // RIGHT_SHIFT_ASSIGN
    211:    CxxOp(                "&=", 2,  3, T, T, F),  // BITWISE_AND_ASSIGN
    212:    CxxOp(                "^=", 2,  3, T, T, F),  // BITWISE_XOR_ASSIGN
    213:    CxxOp(                "|=", 2,  3, T, T, F),  // BITWISE_OR_ASSIGN
    214:    CxxOp(           THROW_STR, 0,  2, F, T, F),  // THROW
    215:    CxxOp(                 ",", 2,  1, F, F, F),  // STATEMENT_SEPARATOR
    216:    CxxOp(                 "$", 0,  0, F, F, F),  // START_OF_EXPRESSION
    217:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // FALSE
    218:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // TRUE
    219:    CxxOp(           ERROR_STR, 0,  0, F, F, F),  // NULLPTR
    220:    CxxOp(           ERROR_STR, 0,  0, F, F, F)   // NIL_OPERATOR
C:/Users/gregu/Documents/rsc/rsc/ct/Cxx.h
  W033 Unused function
    423:    Numeric(NumericType type, size_t width, bool sign)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.cpp
  W007 Cast down the inheritance hierarchy
    211:          static_cast< const Function* >(item)->IsInline())
    223:          auto spec = static_cast< ClassInst* >(usingClass)->GetSpec();
    1014:    auto area = static_cast< CxxArea* >(GetScope());
    1017:    if(inst != nullptr) return static_cast< ClassInst* >(inst);
    1034:          auto c = static_cast< Class* >(*s);
    1952:       auto func = static_cast< const Function* >(item);
    1978:       auto func = static_cast< const Function* >(item);
  W008 Cast removes const qualification
    1231:    return const_cast< Class* >(this);
    1350:    return static_cast< CxxScope* >(const_cast< Class* >(this));
    1948:       return const_cast< ClassInst* >(this);
  W108 Function does not invoke Debug::ft
    376: void Class::AddItem(CxxNamed* item)
    1228: Class* Class::GetClassTemplate() const
    1260: Cxx::Access Class::GetCurrAccess() const
    1332: size_t Class::GetRange(size_t& begin, size_t& end) const
    1347: CxxScope* Class::GetTemplate() const
    1718: Class* Class::OuterClass() const
    2449: const FunctionPtrVector* CxxArea::FuncVector(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxArea.h
  W004 C-style cast
    444:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W007 Cast down the inheritance hierarchy
    841:       const { return static_cast< Namespace* >(GetScope()); }
  W008 Cast removes const qualification
    144:       override { return const_cast< CxxArea* >(this); }
    444:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    480:       override { return const_cast< Class* >(this); }
    878:       override { return const_cast< Namespace* >(this); }
  W044 Member could be private
    119:    Typedef* FindType(const std::string& name) const;
    164:    Enum* FindEnum(const std::string& name) const;
    168:    Enumerator* FindEnumerator(const std::string& name) const;
    365:    Function* FindFuncByRole(FunctionRole role, bool base) const;
    369:    FunctionDefinition GetFuncDefinition(const Function* func) const;
    846:    Namespace* FindNamespace(const std::string& name) const;
  W045 Member could be protected
    79:    const ClassPtrVector* Classes() const { return &classes_; }
    87:    const EnumPtrVector* Enums() const { return &enums_; }
    91:    const ForwardPtrVector* Forws() const { return &forws_; }
  W062 Base class constructor is public
    251:    Class(QualNamePtr& name, Cxx::ClassTag tag);
  W077 Virtual function is public
    128:    virtual Function* FindFunc(const std::string& name, StackArgVector* args,
    135:    virtual Function* MatchFunc(const Function* curr, bool base) const;
    276:    virtual ClassInst* EnsureInstance(const TypeName* type);
    284:    virtual Class* BaseClass()
    289:    virtual BaseDecl* GetBaseDecl() const { return base_.get(); }
    306:    virtual Class* GetClassTemplate() const;
    321:    virtual bool DerivesFrom(const Class* cls) const;
    435:    virtual bool AddAnonymousUnion(const ClassPtr& cls) override;
    452:    virtual void CheckIfUsed(Warning warning) const override;
    460:    virtual Class* DirectClass() const override { return GetClass(); }
    865:    virtual CxxScoped* FindItem(const std::string& name) const override;
  W094 Function could be free
    186:    static Function* FoundFunc
    589:    static size_t CreateCodeError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.cpp
  W007 Cast down the inheritance hierarchy
    872:       auto macro = static_cast< Macro* >(ref_);
    885:       auto macro = static_cast< Macro* >(ref_);
  W108 Function does not invoke Debug::ft
    48: void AlignLeft(ostream& stream, const string& prefix)
    151: CxxToken* Define::AutoType() const
    822: CxxScope* MacroName::GetScope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxDirective.h
  W044 Member could be private
    240:    virtual CxxToken* GetValue() const = 0;
    280:    virtual CxxToken* RootType() const override { return GetValue(); }
  W045 Member could be protected
    733:    const std::string& GetText() const { return text_; }
  W052 Data is not private
    305:    size_t refs_ : 16;
  W077 Virtual function is public
    115:    virtual void SetScope(CxxScope* scope) override;
    240:    virtual CxxToken* GetValue() const = 0;
    245:    virtual bool IsDefined() const { return true; }
    251:    virtual void SetExpr(ExprPtr& rhs);
    280:    virtual CxxToken* RootType() const override { return GetValue(); }
    415:    virtual bool AddElif(Elif* e) { return false; }
    419:    virtual bool AddElse(const Else* e) { return false; }
    428:    virtual bool HasCompiledCode() const { return compile_; }
    469:    virtual void AddCondition(ExprPtr& c) override { condition_ = std::move(c); }
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.cpp
  W007 Cast down the inheritance hierarchy
    1294:       auto thisClass = static_cast< Class* >(thisRoot);
    1302:             auto thatClass = static_cast< Class* >(thatRoot);
    1437:    if(AutoType_.SetAutoTypeOn(*static_cast< FuncData* >(item)))
    1481:    auto ref = static_cast< CxxNamed* >(item);
    1623:          static_cast< Class* >(root)->BlockCopied(this);
  W060 Default copy constructor invoked
    155:    arg_(arg)
  W077 Virtual function is public
    64:    virtual bool Display(std::ostream& stream, bool diff) override;
    76:    virtual bool Display(std::ostream& stream, bool diff) override;
    92:    virtual bool Display(std::ostream& stream, bool diff) override;
    108:    virtual bool Display(std::ostream& stream, bool diff) override;
    128:    virtual bool Display(std::ostream& stream, bool diff) override;
  W108 Function does not invoke Debug::ft
    190: const Parser* Context::GetParser()
    240: bool Context::OptionIsOn(char opt)
    247: bool Context::ParsingTemplateInstance()
    315: void Context::SetPos(size_t pos)
    395: void Context::Trace(CxxTrace::Action act)
    403: void Context::Trace(CxxTrace::Action act, const StackArg& arg)
    411: void Context::Trace(CxxTrace::Action act, word err, const string& expl)
    419: void Context::Trace(CxxTrace::Action act, const CodeFile& file)
    427: void Context::Trace(CxxTrace::Action act, const CxxToken* token)
    625: OptionalCode* ParseFrame::Optional() const
    812: CxxScope* ParseFrame::Scope() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxExecute.h
  W026 Unused argument
    592/1:    static void Shutdown(NodeBase::RestartLevel level);
    596/1:    static void Startup(NodeBase::RestartLevel level) { }
  W033 Unused function
    129:    size_t Arrays() const;
    269:    bool operator!=(const StackArg& that) const;
  W044 Member could be private
    268:    bool operator==(const StackArg& that) const;
  W052 Data is not private
    277:    CxxToken* item;
  W055 Data could be const
    301:    CxxToken* via_;
  W084 Adjacent arguments have the same type
    235:    TypeMatch CalcMatchWith(const StackArg& that, const std::string& thisType,
    286:    TypeMatch MatchWith(const StackArg& that, const std::string& thisType,
  W094 Function could be free
    297:    static void ContextFunctionIsNonConst();
    596:    static void Startup(NodeBase::RestartLevel level) { }
    665:    static std::string Location();
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.cpp
  W005 Functional cast
    739:    if(arrays_ != nullptr) count += TagCount(arrays_->size());
    1392:    if(arrays_ != nullptr) count += TagCount(arrays_->size());
  W007 Cast down the inheritance hierarchy
    371:          space = static_cast< Namespace* >(item);
    395:          cls = static_cast< Class* >(item);
    449:          item = static_cast< Enum* >(item)->FindEnumerator(name);
    460:             auto tdef = static_cast< Typedef* >(item);
    465:             item = static_cast< CxxScoped* >(root);
    477:             item = static_cast< CxxScoped* >(ref);
    812:    return static_cast< Class* >(root);
    2026:          ref = static_cast< ClassInst* >(cls)->FindTemplateAnalog(ref);
    2036:       ref = static_cast< Function* >(ref)->FindRootFunc();
  W008 Cast removes const qualification
    1029:    return const_cast< DataSpec* >(this);
    1434:    const_cast< DataSpec* >(this)->FindReferent();
    2614:    return const_cast< TypeName* >(this);
  W108 Function does not invoke Debug::ft
    177: CxxArea* CxxNamed::GetArea() const
    186: Class* CxxNamed::GetClass() const
    195: id_t CxxNamed::GetDeclFid() const
    204: size_t CxxNamed::GetRange(size_t& begin, size_t& end) const
    213: void CxxNamed::GetScopedNames(stringVector& names) const
    220: Namespace* CxxNamed::GetSpace() const
    229: bool CxxNamed::IsInTemplateInstance() const
    584: void CxxNamed::strName(ostream& stream, bool fq, const QualName* name) const
    1020: TypeTags DataSpec::GetTags() const
    1027: TypeSpec* DataSpec::GetTypeSpec() const
    1156: bool DataSpec::IsAutoDecl() const
    1873: TypeName* QualName::At(size_t n) const
    1982: TypeName* QualName::GetTemplateArgs() const
    2062: TypeName* QualName::Last() const
    2309: size_t QualName::Size() const
    2587: CxxNamed* TypeName::DirectType() const
    2611: TypeName* TypeName::GetTemplateArgs() const
    2779: void TypeName::PushBack(TypeNamePtr& type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxNamed.h
  W004 C-style cast
    1185:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    809:       override { return const_cast< QualName* >(this); }
    1185:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W033 Unused function
    1237:    virtual CxxScope* GetLocale() const override { return name_->GetLocale(); }
  W044 Member could be private
    151:    virtual CxxScope* GetLocale() const { return GetScope(); }
  W045 Member could be protected
    168:    bool IsInternal() const { return loc_.internal; }
    233:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    242:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    316:    void Accessed() const;
    326:    void DisplayReferent(std::ostream& stream, bool fq) const;
    330:    std::string strLocation() const;
    335:    void strName(std::ostream& stream, bool fq, const QualName* name) const;
    907:    Cxx::ItemType GetUserType() const { return user_; }
    911:    TemplateRole GetTemplateRole() const { return role_; }
  W055 Data could be const
    85:    bool const_ : 1;       // type is const
    86:    bool constptr_ : 1;    // pointer is const
    89:    TagCount refs_ : 8;    // number of references
  W077 Virtual function is public
    114:    virtual void SetLoc(CodeFile* file, size_t pos);
    127:    virtual void CopyContext(const CxxNamed* that);
    141:    virtual size_t GetRange(size_t& begin, size_t& end) const;
    146:    virtual CxxScope* GetScope() const { return nullptr; }
    151:    virtual CxxScope* GetLocale() const { return GetScope(); }
    159:    virtual bool IsStatic() const { return true; }
    164:    virtual bool IsDeclaredInFunction() const { return false; }
    174:    virtual void SetTemplateParms(TemplateParmsPtr& parms);
    179:    virtual const TemplateParms* GetTemplateParms() const { return nullptr; }
    187:    virtual CxxScope* GetTemplate() const { return nullptr; }
    193:    virtual std::string QualifiedName(bool scopes, bool templates)
    199:    virtual std::string ScopedName(bool templates) const;
    204:    virtual void GetScopedNames(stringVector& names) const;
    211:    virtual bool IsSuperscopeOf(const std::string& fqSub, bool tmplt) const
    217:    virtual CxxArea* GetArea() const;
    222:    virtual Function* GetFunction() const { return nullptr; }
    226:    virtual Cxx::Access GetAccess() const { return Cxx::Public; }
    233:    virtual CodeFile* GetDeclFile() const { return GetFile(); }
    237:    virtual NodeBase::id_t GetDeclFid() const;
    242:    virtual CodeFile* GetDefnFile() const { return nullptr; }
    259:    virtual bool EnterScope() { return true; }
    269:    virtual bool IsImplemented() const { return true; }
    275:    virtual CxxNamed* DirectType() const { return Referent(); }
    279:    virtual void FindReferent();
    285:    virtual void SetReferent(CxxNamed* item, const SymbolView* view) const;
    289:    virtual void SetAsReferent(const CxxNamed* user) { }
    294:    virtual bool Instantiate() { return false; }
    298:    virtual bool IsInTemplateInstance() const;
    305:    virtual StackArg NameToArg(Cxx::Operator op);
    311:    virtual StackArg MemberToArg(StackArg& via, Cxx::Operator op);
    616:    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
    625:    virtual void SetScope(CxxScope* scope) override { locale_ = scope; }
    840:    virtual bool ResolveTypedef(Typedef* type, size_t n) const override;
    844:    virtual bool ResolveTemplate
    849:    virtual void SetScope(CxxScope* scope) override { first_->SetScope(scope); }
    903:    virtual void SetUserType(Cxx::ItemType user);
    915:    virtual Function* GetFuncSpec() const { return nullptr; }
    926:    virtual TypeSpec* Clone() const = 0;
    930:    virtual void AddArray(ArraySpecPtr& array) = 0;
    934:    virtual void SetConst(bool readonly) = 0;
    938:    virtual void SetConstPtr(bool constptr) = 0;
    942:    virtual void SetPtrs(TagCount ptrs) = 0;
    946:    virtual void SetRefs(TagCount refs) = 0;
    950:    virtual void SetArrayPos(int8_t pos) = 0;
    954:    virtual void SetPtrDetached(bool on) = 0;
    958:    virtual void SetRefDetached(bool on) = 0;
    964:    virtual TagCount Ptrs(bool arrays) const = 0;
    970:    virtual TagCount Refs() const = 0;
    975:    virtual TagCount Arrays() const = 0;
    979:    virtual bool HasArrayDefn() const = 0;
    983:    virtual void EnteringScope(const CxxScope* scope) = 0;
    987:    virtual void EnterArrays() const = 0;
    991:    virtual TypeTags GetTags() const = 0;
    996:    virtual std::string TypeTagsString(const TypeTags& tags) const = 0;
    1001:    virtual void DisplayTags(std::ostream& stream) const = 0;
    1005:    virtual void DisplayArrays(std::ostream& stream) const = 0;
    1011:    virtual void AdjustPtrs(TagCount count) = 0;
    1016:    virtual void RemoveRefs() = 0;
    1021:    virtual TagCount PtrCount(bool arrays) const = 0;
    1025:    virtual TagCount RefCount() const = 0;
    1029:    virtual TagCount ArrayCount() const = 0;
    1034:    virtual bool MatchesExactly(const TypeSpec* that) const = 0;
    1038:    virtual StackArg ResultType() const = 0;
    1042:    virtual void SetTemplateRole(TemplateRole role) const { role_ = role; }
    1053:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    1059:    virtual TypeMatch MatchTemplateArg(const TypeSpec* that) const = 0;
    1064:    virtual std::string AlignTemplateArg(const TypeSpec* thatArg) const = 0;
    1068:    virtual bool ItemIsTemplateArg(const CxxScoped* item) const = 0;
    1074:    virtual void Instantiating() const = 0;
  W084 Adjacent arguments have the same type
    546:    TypeMatch MatchTemplate(const TypeName* that,
    774:    TypeMatch MatchTemplate(const QualName* that,
    1053:    virtual TypeMatch MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
  W092 Function could be const
    934:    virtual void SetConst(bool readonly) = 0;
    938:    virtual void SetConstPtr(bool constptr) = 0;
    1154:    bool ResolveTemplateArgument();
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.cpp
  W007 Cast down the inheritance hierarchy
    1276:    auto cls = static_cast< Class* >(root);
    1344:          auto op = static_cast< Operation* >(expr);
    1638:       if(anon) StackArg::SetAutoTypeFor(static_cast< FuncData& >(*next_));
    1684:    auto data = static_cast< FuncData* >(next_.get());
    2563:       if(!static_cast< Function* >(item)->virtual_)
    2964:             static_cast< ClassData* >(data)->SetInit(m->get());
    3175:    return static_cast< Function* >((*cti)->FindInstanceAnalog(this));
    4461:       auto func = static_cast< ClassInst* >(cls)->FindTemplateAnalog(this);
    4462:       if(func != nullptr) ++static_cast< Function* >(func)->calls_;
  W008 Cast removes const qualification
    2108:    return FoundFunc(const_cast< Function* >(this), args, match);
    3139:    auto prev = const_cast< Function* >(this);
    3316:       (const_cast< Function* >(this));
    3570:    func->SetTemplate(const_cast< Function* >(this));
  W108 Function does not invoke Debug::ft
    114: bool Block::CrlfOver(Form form) const
    233: CxxToken* Block::FirstStatement() const
    241: Function* Block::GetFunction() const
    281: bool Block::InLine() const
    806: id_t CxxScope::GetDistinctDeclFid() const
    1159: CodeFile* Data::GetDeclFile() const
    1166: const Data* Data::GetDefn() const
    1175: CodeFile* Data::GetDefnFile() const
    1222: TypeName* Data::GetTemplateArgs() const
    1372: bool Data::IsConst() const
    1380: bool Data::IsConstPtr() const
    1493: bool Data::WasRead()
    3213: FunctionRole Function::FuncRole() const
    3249: FunctionType Function::FuncType() const
    3259: CodeFile* Function::GetDeclFile() const
    3266: const Function* Function::GetDefn() const
    3275: CodeFile* Function::GetDefnFile() const
    3284: size_t Function::GetRange(size_t& begin, size_t& end) const
    3300: CxxScope* Function::GetScope() const
    3312: CxxScope* Function::GetTemplate() const
    3324: TemplateType Function::GetTemplateType() const
    3803: bool Function::IsInTemplateInstance() const
    4483: void FuncSpec::AddArray(ArraySpecPtr& array)
    4490: void FuncSpec::AdjustPtrs(TagCount count)
    4504: TagCount FuncSpec::ArrayCount() const
    4511: TagCount FuncSpec::Arrays() const
    4518: void FuncSpec::Check() const
    4525: TypeSpec* FuncSpec::Clone() const
    4547: void FuncSpec::EnterArrays() const
    4566: void FuncSpec::FindReferent()
    4574: TypeTags FuncSpec::GetTags() const
    4581: TypeName* FuncSpec::GetTemplateArgs() const
    4588: TypeSpec* FuncSpec::GetTypeSpec() const
    4595: bool FuncSpec::HasArrayDefn() const
    4602: void FuncSpec::Instantiating() const
    4610: bool FuncSpec::IsConst() const
    4617: bool FuncSpec::IsConstPtr() const
    4624: bool FuncSpec::ItemIsTemplateArg(const CxxScoped* item) const
    4632: bool FuncSpec::MatchesExactly(const TypeSpec* that) const
    4640: TypeMatch FuncSpec::MatchTemplate(TypeSpec* that, stringVector& tmpltParms,
    4650: TypeMatch FuncSpec::MatchTemplateArg(const TypeSpec* that) const
    4672: TagCount FuncSpec::PtrCount(bool arrays) const
    4679: TagCount FuncSpec::Ptrs(bool arrays) const
    4686: TagCount FuncSpec::RefCount() const
    4693: TagCount FuncSpec::Refs() const
    4700: void FuncSpec::RemoveRefs()
    4707: StackArg FuncSpec::ResultType() const
    4714: void FuncSpec::SetArrayPos(int8_t pos)
    4722: void FuncSpec::SetConst(bool readonly)
    4730: void FuncSpec::SetConstPtr(bool constptr)
    4738: void FuncSpec::SetPtrDetached(bool on)
    4746: void FuncSpec::SetPtrs(TagCount ptrs)
    4754: void FuncSpec::SetRefDetached(bool on)
    4762: void FuncSpec::SetReferent(CxxNamed* item, const SymbolView* view) const
    4770: void FuncSpec::SetRefs(TagCount refs)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScope.h
  W004 C-style cast
    333:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    333:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1132:       const override { return const_cast< Function* >(this); }
  W026 Unused argument
    83/3:       const CxxNamed* item, const CxxScope* scope) const { return nullptr; }
  W030 Unused enumerator
    144:       Multiple   // two statements or more
  W044 Member could be private
    977:    bool IsTemplateInstance() const { return tmplt_ != nullptr; }
    1005:    size_t MinArgs() const;
    1010:    size_t MaxArgs() const { return args_.size(); }
    1068:    bool IsInvokedInBase() const;
  W045 Member could be protected
    297:    bool IsExtern() const { return extern_; }
    301:    bool IsConstexpr() const { return constexpr_; }
    305:    bool WasInited() const { return GetDecl()->inited_; }
  W077 Virtual function is public
    77:    virtual Cxx::Access GetCurrAccess() const { return Cxx::Private; }
    82:    virtual Using* GetUsingFor(const std::string& fqName, size_t prefix,
    90:    virtual void AccessibilityOf
    322:    virtual void Promote
    1098:    virtual void CheckAccessControl() const override;
    1102:    virtual void CheckIfHiding() const override;
    1106:    virtual void CheckIfUsed(Warning warning) const override;
    1225:    virtual void WasCalled() override;
  W084 Adjacent arguments have the same type
    322:    virtual void Promote
    1305:    static TypeMatch MatchTemplate
  W094 Function could be free
    1305:    static TypeMatch MatchTemplate
    1318:    static Function* InstantiateError
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.cpp
  W004 C-style cast
    1220:    return (CxxToken*) this;
    1415:    return (CxxToken*) this;
  W007 Cast down the inheritance hierarchy
    93:          auto func = static_cast< Function* >(GetScope());
    265:    GetClass()->AddSubclass(static_cast< Class* >(Context::Scope()));
    299:    return static_cast< Class* >(name_->GetReferent());
    1403:          auto tf = (*t)->FindFriend(static_cast< const CxxScope* >(ref));
    1553:          space = static_cast< Namespace* >(item);
    1566:          cls = static_cast< Class* >(item);
    1605:             auto tdef = static_cast< Typedef* >(item);
    1610:             item = static_cast< CxxScoped* >(root);
    1885:       static_cast< CxxArea* >(scope)->AddFunc(func);
  W008 Cast removes const qualification
    1220:    return (CxxToken*) this;
    1415:    return (CxxToken*) this;
    1795:    const_cast< Friend* >(this)->FindReferent();
    1814:    const_cast< Friend* >(this)->SetScope(decl->GetSpace());
    1826:    const_cast< Friend* >(this)->SetScope(cls->GetScope());
  W018 Remove #include directive
    27: #include <vector>
  W060 Default copy constructor invoked
    1975:    attrs_(Numeric::Nil)
  W108 Function does not invoke Debug::ft
    297: Class* BaseDecl::GetClass() const
    398: void CxxScoped::AddFiles(SetOfIds& imSet) const
    533: CodeFile* CxxScoped::GetImplFile() const
    542: size_t CxxScoped::GetRange(size_t& begin, size_t& end) const
    553: bool CxxScoped::IsAuto() const
    562: bool CxxScoped::IsConst() const
    571: bool CxxScoped::IsConstPtr() const
    580: bool CxxScoped::IsDeclaredInFunction() const
    588: bool CxxScoped::IsDefinedIn(const CxxArea* area) const
    601: bool CxxScoped::IsIndirect() const
    1152: void Enumerator::RecordAccess(Cxx::Access access) const
    1216: CxxToken* Forward::AutoType() const
    1411: CxxToken* Friend::AutoType() const
    1677: Function* Friend::GetFunction() const
    1686: QualName* Friend::GetQualName() const
    1695: CxxNamed* Friend::GetReferent() const
    2178: TypeName* Typedef::GetTemplateArgs() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxScoped.h
  W004 C-style cast
    155:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    451:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    547:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    967:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1044:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W008 Cast removes const qualification
    155:    virtual CxxNamed* Referent() const override { return (CxxNamed*) this; }
    451:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    547:    virtual CxxToken* AutoType() const override { return (CxxNamed*) enum_; }
    967:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
    1044:    virtual CxxToken* AutoType() const override { return (CxxToken*) this; }
  W026 Unused argument
    1160/3:       (const std::string& fqName, size_t prefix, const CxxScope* scope) const;
  W044 Member could be private
    145:    bool IsSubscopeOf(const std::string& fqSuper) const;
  W045 Member could be protected
    51:    CodeFile* GetImplFile() const;
    86:    CxxScoped* FindInheritedName() const;
    91:    void DisplayFiles(std::ostream& stream) const;
    99:    virtual bool IsUnused() const { return false; }
  W055 Data could be const
    1256:    bool added_ : 1;
  W077 Virtual function is public
    68:    virtual void AccessibilityTo(const CxxScope* scope, SymbolView* view) const;
    77:    virtual void RecordAccess(Cxx::Access access) const;
    95:    virtual void AddFiles(SetOfIds& imSet) const;
    99:    virtual bool IsUnused() const { return false; }
    159:    virtual void SetAccess(Cxx::Access access) override { access_ = access; }
    163:    virtual void SetScope(CxxScope* scope) override { scope_ = scope; }
    460:    virtual void CheckAccessControl() const override;
    844:    virtual bool ResolveTemplate
    1227:    virtual bool ResolveTypedef(Typedef* type, size_t n) const
  W084 Adjacent arguments have the same type
    1150:    Using(QualNamePtr& name, bool space, bool added = false);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxStatement.cpp
  W108 Function does not invoke Debug::ft
    284: void CxxStatement::EnterBlock()
    364: bool Do::InLine() const
    574: bool For::InLine() const
    680: bool If::InLine() const
    1082: bool While::InLine() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.cpp
  W084 Adjacent arguments have the same type
    41: size_t FindTemplateBegin(const string& name, size_t pos, size_t depth);
    58: size_t RfindScopeOperator(const string& name, size_t begin, size_t end);
C:/Users/gregu/Documents/rsc/rsc/ct/CxxString.h
  W033 Unused function
    76:    std::string& Prefix(std::string&& scope);
  W084 Adjacent arguments have the same type
    95:    size_t CompareScopes
    134:    size_t Replace(std::string& code,
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.cpp
  W007 Cast down the inheritance hierarchy
    384:    return static_cast< Macro* >(macros.front());
    423:       if((*s)->ScopedName(false) == name) return static_cast< CxxScope* >(*s);
    431:       if((*c)->ScopedName(false) == name) return static_cast< CxxScope* >(*c);
    439:       if(pos != string::npos) return static_cast< CxxScope* >(*s);
    445:       if(pos != string::npos) return static_cast< CxxScope* >(*c);
  W108 Function does not invoke Debug::ft
    91: template< typename T > void Erase(const CxxScoped* item,
    189: template< typename T > void ListSymbols(const string& name,
    226: void CxxSymbols::EraseClass(const Class* cls)
    233: void CxxSymbols::EraseData(const Data* data)
    240: void CxxSymbols::EraseEnum(const Enum* item)
    247: void CxxSymbols::EraseEtor(const Enumerator* etor)
    254: void CxxSymbols::EraseForw(const Forward* forw)
    261: void CxxSymbols::EraseFriend(const Friend* frnd)
    268: void CxxSymbols::EraseFunc(const Function* func)
    297: void CxxSymbols::EraseMacro(const Macro* macro)
    304: void CxxSymbols::EraseSpace(const Namespace* space)
    311: void CxxSymbols::EraseTerm(const Terminal* term)
    318: void CxxSymbols::EraseType(const Typedef* type)
    666: void CxxSymbols::InsertClass(Class* cls)
    673: void CxxSymbols::InsertData(Data* data)
    680: void CxxSymbols::InsertEnum(Enum* item)
    687: void CxxSymbols::InsertEtor(Enumerator* etor)
    694: void CxxSymbols::InsertForw(Forward* forw)
    701: void CxxSymbols::InsertFriend(Friend* frnd)
    708: void CxxSymbols::InsertFunc(Function* func)
    742: void CxxSymbols::InsertMacro(Macro* macro)
    749: void CxxSymbols::InsertSpace(Namespace* space)
    756: void CxxSymbols::InsertTerm(Terminal* term)
    763: void CxxSymbols::InsertType(Typedef* type)
C:/Users/gregu/Documents/rsc/rsc/ct/CxxSymbols.h
  W092 Function could be const
    122:    void InsertClass(Class* cls);
    123:    void InsertData(Data* data);
    124:    void InsertEtor(Enumerator* etor);
    125:    void InsertEnum(Enum* item);
    126:    void InsertForw(Forward* forw);
    127:    void InsertFriend(Friend* frnd);
    128:    void InsertFunc(Function* func);
    129:    void InsertMacro(Macro* macro);
    130:    void InsertSpace(Namespace* space);
    131:    void InsertTerm(Terminal* term);
    132:    void InsertType(Typedef* type);
    137:    void EraseClass(const Class* cls);
    138:    void EraseData(const Data* data);
    139:    void EraseEtor(const Enumerator* etor);
    140:    void EraseEnum(const Enum* item);
    141:    void EraseForw(const Forward* forw);
    142:    void EraseFriend(const Friend* frnd);
    143:    void EraseFunc(const Function* func);
    144:    void EraseMacro(const Macro* macro);
    145:    void EraseSpace(const Namespace* space);
    146:    void EraseTerm(const Terminal* term);
    147:    void EraseType(const Typedef* type);
    148:    void EraseLocal(const CxxScoped* name);
    152:    void EraseLocals();
  W112 Override of Base.Display not found
    85: class CxxSymbols: public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.cpp
  W005 Functional cast
    823:          stream << uint64_t(num_);
  W007 Cast down the inheritance hierarchy
    410:    auto oper = static_cast< Operation* >(item.get());
    436:          auto ante = static_cast< Operation* >(prev.get());
    488:       auto oper = static_cast< Operation* >(item.get());
    521:    auto oper = static_cast< Operation* >(prev.get());
    550:       auto oper = static_cast< Operation* >(item.get());
    591:    auto oper = static_cast< Operation* >(item.get());
    614:       auto ante = static_cast< Operation* >(prev.get());
    710:    Context::PushOp(static_cast< Operation* >(StartOfExpr.get()));
    1101:       inClass = static_cast< Class* >(inRoot);
    1106:       outClass = static_cast< Class* >(outRoot);
    1131:    auto call = static_cast< Operation* >(args_.front().get());
    1519:       func = static_cast< Function* >(proc.item);
    1538:       cls = static_cast< Class* >(proc.item);
    1634:       (arg.item->Root())->FindDtor(Context::Scope());
    1682:       auto newCall = static_cast< Operation* >(args_.front().get());
    1702:    auto cls = static_cast< Class* >(spec.item->Root());
    1723:       auto ctorCall = static_cast< Operation* >(args_[2].get());
    1747:       cls = static_cast< Class* >(root);
    1930:       area = static_cast< Class* >(targ);
    1932:       static_cast< Class* >(targ)->Instantiate();
    2270:    auto cls = static_cast< Class* >(root);
    2309:       static_cast< QualName* >(arg2.item)->MemberAccessed(cls, mem);
    2332:          mem = static_cast< Function* >(mem)->InstantiateFunction(tmplt);
  W008 Cast removes const qualification
    298:    CxxToken* prev = const_cast< CxxToken* >(this);
  W108 Function does not invoke Debug::ft
    343: void CxxUsageSets::AddBase(const CxxNamed* item)
    351: void CxxUsageSets::AddDirect(const CxxNamed* item)
    359: void CxxUsageSets::AddForward(const CxxNamed* item)
    370: void CxxUsageSets::AddIndirect(const CxxNamed* item)
    378: void CxxUsageSets::AddUser(const CxxNamed* item)
    724: Numeric FloatLiteral::GetNumeric() const
    785: Numeric IntLiteral::GetNumeric() const
    890: CxxToken* Literal::AutoType() const
    915: CxxToken* Literal::RootType() const
    931: Cxx::ItemType Literal::Type() const
    2645: TypeSpec* StrLiteral::GetTypeSpec() const
    2652: CxxNamed* StrLiteral::Referent() const
C:/Users/gregu/Documents/rsc/rsc/ct/CxxToken.h
  W008 Cast removes const qualification
    286:    virtual CxxToken* RootType() const { return const_cast< CxxToken* >(this); }
  W060 Default copy constructor invoked
    370:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::INT_LITERAL); }
    409:       : num_(num), tags_(tags) { CxxStats::Incr(CxxStats::FLOAT_LITERAL); }
  W077 Virtual function is public
    79:    virtual Cxx::ItemType Type() const { return Cxx::Undefined; }
    85:    virtual const std::string* Name() const;
    89:    virtual QualName* GetQualName() const { return nullptr; }
    94:    virtual std::string TypeString(bool arg) const
    99:    virtual TypeSpec* GetTypeSpec() const { return nullptr; }
    103:    virtual bool IsConst() const { return false; }
    107:    virtual bool IsConstPtr() const { return false; }
    112:    virtual bool IsAuto() const { return false; }
    117:    virtual bool IsIndirect() const { return false; }
    121:    virtual bool IsInitializing() const { return false; }
    130:    virtual CxxToken* AutoType() const { return nullptr; }
    135:    virtual Namespace* GetSpace() const { return nullptr; }
    140:    virtual Class* GetClass() const { return nullptr; }
    145:    virtual Class* Declarer() const { return GetClass(); }
    151:    virtual TypeName* GetTemplateArgs() const;
    156:    virtual Numeric GetNumeric() const { return Numeric::Nil; }
    160:    virtual void GetConvertibleTypes(StackArgVector& types) { }
    165:    virtual CxxNamed* Referent() const;
    171:    virtual void EnterBlock();
    176:    virtual void ExitBlock() { }
    182:    virtual bool AppendUnary() { return false; }
    186:    virtual CxxToken* Back() { return this; }
    191:    virtual bool WasRead() { return false; }
    203:    virtual bool WasWritten(const StackArg* arg, bool passed);
    208:    virtual bool SetNonConst() { return true; }
    213:    virtual void WasMutated(const StackArg* arg) { }
    219:    virtual void RecordUsage() const { }
    224:    virtual void GetUsages(const CodeFile& file, CxxUsageSets& symbols) const { }
    228:    virtual void Check() const { }
    232:    virtual std::string Trace() const { return NodeBase::EMPTY_STR; }
    236:    virtual bool InLine() const { return true; }
    241:    virtual void Print
    247:    virtual void Shrink() { }
  W084 Adjacent arguments have the same type
    626:    Function* FindNewOrDelete(const StackArg& arg, bool del, bool& pod) const;
  W092 Function could be const
    176:    virtual void ExitBlock() { }
  W094 Function could be free
    280:    static void ShrinkExpression(const ExprPtr& expr);
    478:    static TypeSpecPtr CreateRef();
    615:    static void PushType(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.cpp
  W007 Cast down the inheritance hierarchy
    644:          (const_cast< CxxNamed* >(ref))->OuterSpace();
  W008 Cast removes const qualification
    644:          (const_cast< CxxNamed* >(ref))->OuterSpace();
  W108 Function does not invoke Debug::ft
    333: Editor::Iter Editor::Find(SourceList& list, size_t line)
    345: Editor::Iter Editor::Find(SourceList& list, const string& source)
    552: bool Editor::IsSorted1(const SourceLine& line1, const SourceLine& line2)
    559: bool Editor::IsSorted2(const string& line1, const string& line2)
    612: void Editor::PushBack(SourceList& list, const string& source)
    620: word Editor::PushInclude(string& source, string& expl)
C:/Users/gregu/Documents/rsc/rsc/ct/Editor.h
  W026 Unused argument
    102/1:    NodeBase::word ResolveUsings(const WarningLog& log, std::string& expl);
    102/2:    NodeBase::word ResolveUsings(const WarningLog& log, std::string& expl);
  W084 Adjacent arguments have the same type
    184:    NodeBase::word InsertNamespaceForward(Iter& iter,
  W094 Function could be free
    143:    static Iter Find(SourceList& list, size_t line);
    148:    static Iter Find(SourceList& list, const std::string& source);
    206:    static NodeBase::word Report
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.cpp
  W005 Functional cast
    148:          type = LibTokenType(i);
  W094 Function could be free
    52:    static const OperatorInfo* GetAttrs(LibTokenType type);
  W101 Line contains adjacent spaces
    94:    OperatorInfo(" ",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpNil
    95:    OperatorInfo("(",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpLeftPar
    96:    OperatorInfo(")",  0, ERR_SET,  ERR_SET,  ERR_SET),   // OpRightPar
    97:    OperatorInfo("&",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpIntersection
    98:    OperatorInfo("-",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpDifference
    99:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpUnion
    100:    OperatorInfo("|",  2, ANY_SET,  ANY_SET,  ANY_SET),   // OpAutoUnion
    101:    OperatorInfo("d",  1, DIR_SET,  FILE_SET, ERR_SET),   // OpDirectories
    102:    OperatorInfo("f",  1, FILE_SET, DIR_SET,  ERR_SET),   // OpFiles
  W108 Function does not invoke Debug::ft
    134: const OperatorInfo* OperatorInfo::GetAttrs(LibTokenType type)
    142: bool OperatorInfo::GetType(const string& op, LibTokenType& type)
C:/Users/gregu/Documents/rsc/rsc/ct/Interpreter.h
  W094 Function could be free
    62:    static bool IsOperator(const std::string& s);
  W112 Override of Base.Display not found
    44: class Interpreter : public NodeBase::Temporary
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.cpp
  W005 Functional cast
    923:          oper = Cxx::Operator(match->second);
  W007 Cast down the inheritance hierarchy
    1595:          auto def = static_cast< Define* >(item);
    1599:             auto code = const_cast< string* >(source_);
  W008 Cast removes const qualification
    1599:             auto code = const_cast< string* >(source_);
  W108 Function does not invoke Debug::ft
    618: size_t Lexer::GetLineNum(size_t pos) const
    642: size_t Lexer::GetLineStart(size_t line) const
    715: bool Lexer::GetNthLine(size_t n, string& s) const
C:/Users/gregu/Documents/rsc/rsc/ct/Lexer.h
  W044 Member could be private
    193:    std::string NextOperator() const;
  W049 Data is init-only
    430:    static bool Initialized;
  W084 Adjacent arguments have the same type
    201:    size_t FindClosing(char lhc, char rhc, size_t pos = std::string::npos) const;
  W094 Function could be free
    172:    static bool IsValidIdentifier(const std::string& id);
C:/Users/gregu/Documents/rsc/rsc/ct/Library.cpp
  W007 Cast down the inheritance hierarchy
    95:       (static_cast< CfgStrParm* >(reg->FindParm("SourcePath")));
C:/Users/gregu/Documents/rsc/rsc/ct/Library.h
  W044 Member could be private
    67:    CodeDir* FindDir(const std::string& name) const;
    88:    LibrarySet* FindVar(const std::string& name) const;
  W050 Data is write-only
    225:    LibraryVarSet* varSet_;
  W084 Adjacent arguments have the same type
    62:    NodeBase::word Import
    104:    NodeBase::word Assign(const std::string& name,
  W092 Function could be const
    72:    CodeFile* EnsureFile(const std::string& file, CodeDir* dir = nullptr);
    104:    NodeBase::word Assign(const std::string& name,
C:/Users/gregu/Documents/rsc/rsc/ct/LibraryErrSet.cpp
  W108 Function does not invoke Debug::ft
    103: word LibraryErrSet::Error(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.cpp
  W006 reinterpret_cast
    281:    auto fake = reinterpret_cast< const LibrarySet* >(&local);
  W108 Function does not invoke Debug::ft
    76: LibrarySet* LibrarySet::AffectedBy() const
    83: LibrarySet* LibrarySet::Affecters() const
    90: LibrarySet* LibrarySet::Assign(LibrarySet* rhs)
    108: LibrarySet* LibrarySet::CommonAffecters() const
    155: LibrarySet* LibrarySet::Create(const string& name, SetOfIds* set) const
    162: LibrarySet* LibrarySet::Difference(const LibrarySet* rhs) const
    169: LibrarySet* LibrarySet::Directories() const
    188: LibrarySet* LibrarySet::FileName(const LibrarySet* that) const
    195: LibrarySet* LibrarySet::Files() const
    202: LibrarySet* LibrarySet::FileType(const LibrarySet* that) const
    231: LibrarySet* LibrarySet::FoundIn(const LibrarySet* that) const
    250: LibrarySet* LibrarySet::Implements() const
    257: LibrarySet* LibrarySet::Intersection(const LibrarySet* rhs) const
    264: bool LibrarySet::IsReadOnly() const
    271: bool LibrarySet::IsTemporary() const
    298: LibrarySet* LibrarySet::MatchString(const LibrarySet* that) const
    305: LibrarySet* LibrarySet::NeededBy() const
    312: LibrarySet* LibrarySet::Needers() const
    321: word LibrarySet::NotImplemented(string& expl) const
    347: LibrarySet* LibrarySet::OpError() const
    463: LibrarySet* LibrarySet::Union(const LibrarySet* rhs) const
    470: LibrarySet* LibrarySet::UsedBy(bool self) const
    477: LibrarySet* LibrarySet::Users(bool self) const
C:/Users/gregu/Documents/rsc/rsc/ct/LibrarySet.h
  W044 Member could be private
    64:    bool IsReadOnly() const;
    172:    static ptrdiff_t LinkDiff();
  W045 Member could be protected
    150:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
  W055 Data could be const
    220:    NodeBase::Q2Link link_;
  W067 Base class virtual destructor is not public
    188:    virtual ~LibrarySet();
  W077 Virtual function is public
    72:    virtual LibSetType GetType() const;
    78:    virtual NodeBase::word Check(std::ostream* stream, std::string& expl) const;
    84:    virtual NodeBase::word Count(std::string& result) const;
    90:    virtual NodeBase::word Countlines(std::string& result) const;
    95:    virtual NodeBase::word Fix
    101:    virtual NodeBase::word Format(std::string& expl) const;
    107:    virtual NodeBase::word List(std::ostream& stream, std::string& expl) const;
    115:    virtual NodeBase::word Parse
    122:    virtual NodeBase::word Scan(std::ostream& stream,
    129:    virtual NodeBase::word Show(std::string& result) const;
    135:    virtual NodeBase::word Sort(std::ostream& stream, std::string& expl) const;
    141:    virtual NodeBase::word Trim(std::ostream& stream, std::string& expl) const;
    150:    virtual LibrarySet* Create(const std::string& name, SetOfIds* set) const;
    151:    virtual LibrarySet* Assign(LibrarySet* rhs);
    152:    virtual LibrarySet* Intersection(const LibrarySet* rhs) const;
    153:    virtual LibrarySet* Difference(const LibrarySet* rhs) const;
    154:    virtual LibrarySet* Union(const LibrarySet* rhs) const;
    155:    virtual LibrarySet* Directories() const;
    156:    virtual LibrarySet* Files() const;
    157:    virtual LibrarySet* FileName(const LibrarySet* that) const;
    158:    virtual LibrarySet* FileType(const LibrarySet* that) const;
    159:    virtual LibrarySet* MatchString(const LibrarySet* that) const;
    160:    virtual LibrarySet* FoundIn(const LibrarySet* that) const;
    161:    virtual LibrarySet* Implements() const;
    162:    virtual LibrarySet* UsedBy(bool self) const;
    163:    virtual LibrarySet* Users(bool self) const;
    164:    virtual LibrarySet* AffectedBy() const;
    165:    virtual LibrarySet* Affecters() const;
    166:    virtual LibrarySet* CommonAffecters() const;
    167:    virtual LibrarySet* NeededBy() const;
    168:    virtual LibrarySet* Needers() const;
  W094 Function could be free
    192:    static NodeBase::word Counted(std::string& result, const size_t* count);
    197:    static NodeBase::word Shown(std::string& result);
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.cpp
  W007 Cast down the inheritance hierarchy
    365:    auto op = static_cast< Operation* >(call.get());
    617:    auto brace = static_cast< BraceInit* >(token.get());
    690:    auto cast = static_cast< Operation* >(token.get());
    729:    auto c = static_cast< Catch* >(statement.get());
    826:    static_cast< ClassData* >(data.get())->SetMutable(mute);
    827:    static_cast< ClassData* >(data.get())->SetWidth(width);
    987:    auto cond = static_cast< Operation* >(token.get());
    1262:    auto cast = static_cast< Operation* >(token.get());
    1369:    auto op = static_cast< Operation* >(token.get());
    1394:    auto delOp = static_cast< Operation* >(token.get());
    1422:    auto d = static_cast< Do* >(statement.get());
    1621:    auto f = static_cast< For* >(statement.get());
    1721:       static_cast< FuncData* >(data.get())->SetExpression(expr);
    1770:          curr = static_cast< FuncData* >(data.get());
    1776:          curr = static_cast< FuncData* >(subseq.get());
    2046:             static_cast< If* >(first)->SetElseIf();
    2052:    auto i = static_cast< If* >(statement.get());
    2214:    auto inner = static_cast< Namespace* >(outer)->EnsureNamespace(name);
    2256:    auto newOp = static_cast< Operation* >(token.get());
    2725:    static_cast< Return* >(statement.get())->AddExpr(expr);
    2771:    auto op = static_cast< Operation* >(token.get());
    2918:    auto op = static_cast< Operation* >(token.get());
    2944:    auto s = static_cast< Switch* >(statement.get());
    3027:    auto op = static_cast< Operation* >(token.get());
    3063:    auto t = static_cast< Try* >(statement.get());
    3121:    auto op = static_cast< Operation* >(token.get());
    3331:    auto w = static_cast< While* >(statement.get());
    3715:          auto op = static_cast< Operation* >(token)->Op();
C:/Users/gregu/Documents/rsc/rsc/ct/Parser.h
  W084 Adjacent arguments have the same type
    477:    static bool SetCompoundType
    522:    bool GetParExpr(ExprPtr& expr, bool omit, bool opt = false);
  W090 Argument could be const
    324/1:    bool GetStatements(BlockPtr& block, bool braced);
    413/1:    bool GetFuncSpecial(FunctionPtr& func);
    426/1:    bool GetCtorInit(FunctionPtr& func);
    445/1:    bool GetArguments(FunctionPtr& func);
    478/1:       (QualNamePtr& name, Cxx::Type type, int size, int sign);
    537/1:    bool GetNum(ExprPtr& expr);
    538/1:    bool GetChar(ExprPtr& expr);
    539/1:    bool GetStr(ExprPtr& expr);
    549/1:    bool GetCast(ExprPtr& expr);
    550/1:    bool GetPrecedence(ExprPtr& expr);
    557/1:    bool HandleTilde(ExprPtr& expr, size_t start);
    561/1:    bool GetSubscript(ExprPtr& expr);
    570/1:    bool GetCxxCast(ExprPtr& expr, Cxx::Operator op);
    571/1:    bool GetConditional(ExprPtr& expr);
    572/1:    bool GetDefined(ExprPtr& expr);
    573/1:    bool GetDelete(ExprPtr& expr, Cxx::Operator op);
    574/1:    bool GetNew(ExprPtr& expr, Cxx::Operator op);
    575/1:    bool GetSizeOf(ExprPtr& expr);
    576/1:    bool GetThrow(ExprPtr& expr);
    577/1:    bool GetTypeId(ExprPtr& expr);
  W094 Function could be free
    477:    static bool SetCompoundType
    652:    static std::string Indent();
C:/Users/gregu/Documents/rsc/rsc/ct/SetOperations.h
  W084 Adjacent arguments have the same type
    33:    void SetDifference
    42:    void SetIntersection
    51:    void SetUnion
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const Circuit* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Circuit.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W055 Data could be const
    90:    RegCell port_;
  W077 Virtual function is public
    64:    virtual std::string Name() const = 0;
    68:    virtual bool Supports(ProtocolId prid) const { return false; }
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/MbPools.h
  W020 Using statement in header
    29: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaEndpt.h
  W020 Using statement in header
    34: using namespace NodeBase;
    35: using namespace SessionBase;
  W026 Unused argument
    109/1:    virtual void ProcessIcMsg(Message& msg);
  W033 Unused function
    58:    StateId GetState() const { return state_; }
    62:    virtual void SetState(StateId stid);
    72:    ProtocolSM* MgwPsm() const;
    78:    virtual void Deallocate();
    87:    static void* operator new(size_t size);
    92:    explicit MediaEndpt(MediaPsm& psm);
  W044 Member could be private
    104:    virtual void EndOfTransaction();
  W077 Virtual function is public
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
  W079 Virtual function has no overrides
    62:    virtual void SetState(StateId stid);
    78:    virtual void Deallocate();
    104:    virtual void EndOfTransaction();
    109:    virtual void ProcessIcMsg(Message& msg);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaFailureEvent.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    33: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W027 Unused class
    41: class MediaFailureEvent : public Event
  W033 Unused function
    47:    MediaFailureEvent(ServiceSM& owner, MediaEndpt& mep);
    55:    MediaEndpt* Mep() const { return mep_; }
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.cpp
  W006 reinterpret_cast
    118:    reinterpret_cast< const MediaInfo* >(bytes)->Display(stream, prefix);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    107: CliParm* MediaParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaParameter.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    31: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    52:    bool operator==(const MediaInfo& that) const;
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.cpp
  W006 reinterpret_cast
    575:       auto cxi = reinterpret_cast< MediaInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    253:    if(root->Sid() != TestServiceId) return static_cast< MediaSsm* >(root);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    259: MediaPsm* MediaPsm::GetOgPsm() const
C:/Users/gregu/Documents/rsc/rsc/mb/MediaPsm.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    37: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    119:    MediaEndpt* Mep() const { return mep_; }
  W044 Member could be private
    131:    Tone::Id GetOgTone() const { return ogTone_; }
    169:    void SetOgPort(Switch::PortId ogport);
    188:    virtual Event* ReceiveMsg(Message& msg) override;
    192:    virtual void PrepareOgMsgq() override;
  W077 Virtual function is public
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
  W079 Virtual function has no overrides
    67:    virtual void SetOgPsm(MediaPsm* ogPsm);
    72:    virtual void SetOgTone(Tone::Id ogTone);
    77:    virtual void SetIcTone(Tone::Id icTone);
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.cpp
  W007 Cast down the inheritance hierarchy
    94:       auto mpsm = static_cast< MediaPsm* >(psm);
    118:       auto mpsm = static_cast< MediaPsm* >(psm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/mb/MediaSsm.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W077 Virtual function is public
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
  W079 Virtual function has no overrides
    47:    virtual bool SetMgwPsm(ProtocolSM* psm);
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    89: Circuit* Switch::GetCircuit(PortId pid) const
C:/Users/gregu/Documents/rsc/rsc/mb/Switch.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W094 Function could be free
    65:    static bool IsValidPort(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    79: Tone* ToneRegistry::GetTone(Tone::Id tid) const
C:/Users/gregu/Documents/rsc/rsc/mb/ToneRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.cpp
  W006 reinterpret_cast
    65:    auto fake = reinterpret_cast< const Tone* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/mb/Tones.h
  W005 Functional cast
    63:    Id Tid() const { return Id(tid_.GetId()); }
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    63:    Id Tid() const { return Id(tid_.GetId()); }
  W039 Member hides inherited name
    67:    static ptrdiff_t CellDiff();
  W067 Base class virtual destructor is not public
    80:    virtual ~Tone();
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.cpp
  W004 C-style cast
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
    77:    return ((const_ptr_t) ptr1 - (const_ptr_t) ptr2);
  W008 Cast removes const qualification
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
    40:    return (void*) ((const_ptr_t) ptr1 + diff);
  W009 Pointer arithmetic
    33:    return (void*) ((const_ptr_t) ptr2 - diff);
C:/Users/gregu/Documents/rsc/rsc/nb/Algorithms.h
  W084 Adjacent arguments have the same type
    50:    uint64_t pack3(uint16_t a, uint16_t b, uint16_t c);
    54:    uint64_t pack4(uint16_t a, uint16_t b, uint16_t c, uint16_t d);
C:/Users/gregu/Documents/rsc/rsc/nb/Array.h
  W092 Function could be const
    124:    bool Replace(size_t index, const T& item)
  W101 Line contains adjacent spaces
    253:    inline static fn_name Array_ctor()     { return "Array.ctor"; }
    254:    inline static fn_name Array_dtor()     { return "Array.dtor"; }
    255:    inline static fn_name Array_Init()     { return "Array.Init"; }
    256:    inline static fn_name Array_Reserve()  { return "Array.Reserve"; }
    258:    inline static fn_name Array_Erase()    { return "Array.Erase"; }
    259:    inline static fn_name Array_Replace()  { return "Array.Replace"; }
    260:    inline static fn_name Array_Extend()   { return "Array.Extend"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Base.cpp
  W006 reinterpret_cast
    133:    auto obj = reinterpret_cast< ObjectStruct* >(this);
    161:    auto obj = reinterpret_cast< const ObjectStruct* >(this);
  W008 Cast removes const qualification
    98:       objects[count++] = const_cast< Base* >(this);
  W108 Function does not invoke Debug::ft
    128: void Base::Nullify(size_t n)
    157: Base::vptr_t Base::Vptr() const
C:/Users/gregu/Documents/rsc/rsc/nb/Base.h
  W044 Member could be private
    109:    virtual void Claim() { }
    152:    virtual MemoryType MemType() const { return MemPerm; }
  W045 Member could be protected
    78:    virtual void Display(std::ostream& stream,
    102:    void LogSubtended(std::ostream& stream,
  W077 Virtual function is public
    78:    virtual void Display(std::ostream& stream,
    97:    virtual void GetSubtended(Base* objects[], size_t& count) const;
    109:    virtual void Claim() { }
    114:    virtual void ClaimBlocks();
    132:    virtual void Cleanup() { }
    140:    virtual void Startup(RestartLevel level) { }
    148:    virtual void Shutdown(RestartLevel level) { }
    152:    virtual MemoryType MemType() const { return MemPerm; }
    156:    virtual const char* ClassName() const;
  W079 Virtual function has no overrides
    156:    virtual const char* ClassName() const;
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.cpp
  W108 Function does not invoke Debug::ft
    52: void CfgBitParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBitParm.h
  W044 Member could be private
    66:    virtual bool SetNext(const std::string& input) override;
  W084 Adjacent arguments have the same type
    48:    CfgBitParm(const char* key, const char* def, const char* expl);
  W094 Function could be free
    76:    static fixed_string ValidTrueChars();
    81:    static fixed_string ValidFalseChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CfgBoolParm.h
  W044 Member could be private
    67:    virtual bool SetNextValue(bool value) override;
  W062 Base class constructor is public
    38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
  W084 Adjacent arguments have the same type
    38:    CfgBoolParm(const char* key, const char* def, bool* field, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.cpp
  W108 Function does not invoke Debug::ft
    70: bool CfgFlagParm::GetCurrValue() const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgFlagParm.h
  W044 Member could be private
    65:    virtual bool SetNextValue(bool value) override;
  W055 Data could be const
    77:    FlagId fid_;
  W084 Adjacent arguments have the same type
    39:    CfgFlagParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.cpp
  W108 Function does not invoke Debug::ft
    72: void CfgIntParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgIntParm.h
  W033 Unused function
    57:    word GetCurrValue() const { return *curr_; }
  W044 Member could be private
    81:    virtual bool SetNext(const std::string& input) override;
  W055 Data could be const
    93:    word min_;
    97:    word max_;
  W062 Base class constructor is public
    39:    CfgIntParm(const char* key, const char* def, word* field,
  W084 Adjacent arguments have the same type
    39:    CfgIntParm(const char* key, const char* def, word* field,
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.cpp
  W006 reinterpret_cast
    137:    auto fake = reinterpret_cast< const CfgParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParm.h
  W044 Member could be private
    60:    const char* Key() const;
    75:    static ptrdiff_t LinkDiff();
  W055 Data could be const
    155:    Q1Link link_;
  W056 Data could be const pointer
    143:    const char* default_;
    147:    const char* expl_;
  W077 Virtual function is public
    64:    virtual void Explain(std::string& expl) const { expl = expl_; }
  W084 Adjacent arguments have the same type
    90:    CfgParm(const char* key, const char* def, const char* expl);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.cpp
  W108 Function does not invoke Debug::ft
    274: void CfgParmRegistry::ListParms(ostream& stream, const string& prefix) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgParmRegistry.h
  W033 Unused function
    90:    const std::vector< stringPtr >& GetMainArgs() const { return *mainArgs_; }
  W092 Function could be const
    94:    void AddMainArg(const std::string& arg);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.cpp
  W108 Function does not invoke Debug::ft
    68: void CfgStrParm::Explain(string& expl) const
C:/Users/gregu/Documents/rsc/rsc/nb/CfgStrParm.h
  W044 Member could be private
    101:    virtual bool SetNext(const std::string& input) override;
  W062 Base class constructor is public
    39:    CfgStrParm(const char* key, const char* def,
  W084 Adjacent arguments have the same type
    39:    CfgStrParm(const char* key, const char* def,
    92:    CfgFileTimeParm(const char* key, const char* def,
  W112 Override of Base.Display not found
    87: class CfgFileTimeParm : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.cpp
  W006 reinterpret_cast
    90:    auto fake = reinterpret_cast< const CfgTuple* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CfgTuple.h
  W055 Data could be const
    117:    Q1Link link_;
  W094 Function could be free
    77:    static const std::string& ValidNameChars();
    82:    static const std::string& ValidValueChars();
    87:    static const std::string& ValidBlankChars();
C:/Users/gregu/Documents/rsc/rsc/nb/CinThread.cpp
  W049 Data is init-only
    149:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
  W109 Function does not invoke Debug::ft as first statement
    106:       Debug::ft(CinThread_Enter);
    151:    Debug::ft(CinThread_GetLine);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.cpp
  W004 C-style cast
    220:    if(addr != nullptr) return (Object*) addr;
  W006 reinterpret_cast
    75:    auto fake = reinterpret_cast< const Class* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Class.h
  W033 Unused function
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    70:    virtual void FreeQuasiSingleton(Object* obj);
    119:    bool SetVptr(Object& obj);
    126:    bool SetTemplate(Object& obj);
    133:    bool SetQuasiSingleton(Object& obj);
  W044 Member could be private
    66:    virtual Object* GetQuasiSingleton();
    113:    virtual Object* New(size_t size);
  W067 Base class virtual destructor is not public
    107:    virtual ~Class();
  W077 Virtual function is public
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W079 Virtual function has no overrides
    57:    virtual void Initialize();
    62:    virtual Object* Create();
    66:    virtual Object* GetQuasiSingleton();
    70:    virtual void FreeQuasiSingleton(Object* obj);
  W092 Function could be const
    113:    virtual Object* New(size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ClassRegistry.cpp
  W108 Function does not invoke Debug::ft
    79: Class* ClassRegistry::Lookup(ClassId cid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliAppData.h
  W055 Data could be const
    93:    Id id_;
  W067 Base class virtual destructor is not public
    85:    virtual ~CliAppData();
  W077 Virtual function is public
    66:    virtual void EventOccurred(Event evt);
C:/Users/gregu/Documents/rsc/rsc/nb/CliBoolParm.h
  W062 Base class constructor is public
    39:    explicit CliBoolParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCharParm.h
  W045 Member could be protected
    39:    CliCharParm(const char* help, const char* chars,
  W056 Data could be const pointer
    69:    const char* chars_;
  W062 Base class constructor is public
    39:    CliCharParm(const char* help, const char* chars,
  W084 Adjacent arguments have the same type
    39:    CliCharParm(const char* help, const char* chars,
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommand.h
  W077 Virtual function is public
    71:    virtual Rc GetTextParmRc
  W084 Adjacent arguments have the same type
    100:    CliCommand(const char* comm, const char* help, size_t size = 32);
  W094 Function could be free
    132:    static Rc Exhausted(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.cpp
  W006 reinterpret_cast
    79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
  W007 Cast down the inheritance hierarchy
    79:    auto& commands = reinterpret_cast< Registry< CliCommand >& >(Parms());
    159:    auto& commands = reinterpret_cast< const Registry< CliCommand >& >(Parms());
C:/Users/gregu/Documents/rsc/rsc/nb/CliCommandSet.h
  W084 Adjacent arguments have the same type
    58:    CliCommandSet(const char* comm, const char* help, size_t size = 32);
  W094 Function could be free
    63:    static void DescendTo(CliCookie& cookie, size_t index);
C:/Users/gregu/Documents/rsc/rsc/nb/CliCookie.cpp
  W108 Function does not invoke Debug::ft
    136: size_t CliCookie::Index(size_t depth) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.cpp
  W006 reinterpret_cast
    103:    auto fake = reinterpret_cast< const CliIncrement* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIncrement.h
  W055 Data could be const
    105:    RegCell iid_;
  W056 Data could be const pointer
    109:    const char* name_;
    113:    const char* help_;
  W077 Virtual function is public
    65:    virtual void Enter();
    70:    virtual void Exit();
  W079 Virtual function has no overrides
    70:    virtual void Exit();
  W084 Adjacent arguments have the same type
    92:    CliIncrement(const char* name, const char* help, size_t size = 32);
C:/Users/gregu/Documents/rsc/rsc/nb/CliIntParm.h
  W055 Data could be const
    79:    word min_;
    83:    word max_;
    87:    bool hex_;
  W062 Base class constructor is public
    49:    CliIntParm(const char* help, word min, word max,
  W084 Adjacent arguments have the same type
    49:    CliIntParm(const char* help, word min, word max,
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.cpp
  W006 reinterpret_cast
    96:    auto fake = reinterpret_cast< const CliParm* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/CliParm.h
  W045 Member could be protected
    157:    bool GetBoolParm(bool& b, CliThread& cli) const;
    167:    bool GetCharParm(char& c, CliThread& cli) const;
    177:    bool GetPtrParm(void*& p, CliThread& cli) const;
    203:    bool GetTextParm(id_t& i, std::string& s, CliThread& cli) const;
    237:    bool GetIdentifier(std::string& s, CliThread& cli,
    248:    const char* Help() const { return help_; }
    252:    bool IsOptional() const { return opt_; }
  W056 Data could be const pointer
    331:    const char* help_;
    339:    const char* tag_;
  W077 Virtual function is public
    134:    virtual CliParm* AccessParm(CliCookie& cookie, size_t depth) const;
    142:    virtual void Explain(std::ostream& stream, col_t indent) const;
    152:    virtual Rc GetIntParmRc(word& n, CliThread& cli) const;
    162:    virtual Rc GetBoolParmRc(bool& b, CliThread& cli) const;
    172:    virtual Rc GetCharParmRc(char& c, CliThread& cli) const;
    182:    virtual Rc GetPtrParmRc(void*& p, CliThread& cli) const;
    210:    virtual Rc GetTextParmRc(id_t& i, std::string& s, CliThread& cli) const;
    220:    virtual Rc GetStringRc(std::string& s, CliThread& cli) const;
    230:    virtual Rc GetFileNameRc(std::string& s, CliThread& cli) const;
    243:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W084 Adjacent arguments have the same type
    237:    bool GetIdentifier(std::string& s, CliThread& cli,
    243:    virtual Rc GetIdentifierRc(std::string& s, CliThread& cli,
  W094 Function could be free
    322:    static Rc Mismatch(const CliThread& cli, const std::string& type);
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.cpp
  W004 C-style cast
    98:          p = (void*) n;
C:/Users/gregu/Documents/rsc/rsc/nb/CliPtrParm.h
  W045 Member could be protected
    38:    explicit CliPtrParm(const char* help,
  W062 Base class constructor is public
    38:    explicit CliPtrParm(const char* help,
C:/Users/gregu/Documents/rsc/rsc/nb/CliText.h
  W044 Member could be private
    61:    const char* HelpText() const;
  W045 Member could be protected
    65:    const Registry< CliParm >& Parms() const { return parms_; }
  W056 Data could be const pointer
    110:    const char* text_;
  W062 Base class constructor is public
    48:    CliText(const char* help, const char* text,
  W077 Virtual function is public
    69:    virtual bool BindParm(CliParm& parm);
  W084 Adjacent arguments have the same type
    48:    CliText(const char* help, const char* text,
C:/Users/gregu/Documents/rsc/rsc/nb/CliTextParm.h
  W062 Base class constructor is public
    49:    explicit CliTextParm(const char* help, bool opt = false,
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.cpp
  W108 Function does not invoke Debug::ft
    368: CliAppData* CliThread::GetAppData(CliAppData::Id aid) const
C:/Users/gregu/Documents/rsc/rsc/nb/CliThread.h
  W033 Unused function
    113:    word Result() const { return result_; }
  W052 Data is not private
    179:    std::unique_ptr< CliBuffer > ibuf;
    183:    ostringstreamPtr obuf;
  W084 Adjacent arguments have the same type
    91:    char CharPrompt(const std::string& prompt,
    209:    void Report1
C:/Users/gregu/Documents/rsc/rsc/nb/Clock.h
  W033 Unused function
    72:    ticks_t TicksPerSec();
    121:    ticks_t UsecsToTicks(usecs_t usecs);
    125:    const SysTime& TimeZero();
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.cpp
  W007 Cast down the inheritance hierarchy
    84:       auto req = static_cast< StreamRequest* >(msg);
  W049 Data is init-only
    92:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    133:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/CoutThread.h
  W094 Function could be free
    47:    static void Spool(const char* s, bool eol = false);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.cpp
  W108 Function does not invoke Debug::ft
    134: void Debug::Reset()
  W109 Function does not invoke Debug::ft as first statement
    63:    Debug::ft(Debug_GenerateSwLog);
C:/Users/gregu/Documents/rsc/rsc/nb/Debug.h
  W033 Unused function
    96:    static void noop();
  W084 Adjacent arguments have the same type
    72:    static void SwErr
    92:    static void Progress(const std::string& s, bool eol, bool force = false);
  W094 Function could be free
    81:    static void Assert(bool condition, debug32_t errval = 0)
    92:    static void Progress(const std::string& s, bool eol, bool force = false);
    96:    static void noop();
    140:    static void GenerateSwLog(fn_name_arg func, const std::string& errstr,
C:/Users/gregu/Documents/rsc/rsc/nb/Dynamic.h
  W033 Unused function
    56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Element.h
  W094 Function could be free
    46:    static std::string strTimePlace();
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.cpp
  W109 Function does not invoke Debug::ft as first statement
    45:    Debug::ft(Exception_ctor1);
C:/Users/gregu/Documents/rsc/rsc/nb/Exception.h
  W033 Unused function
    60:    Exception(const Exception& that);
    61:    Exception(Exception&& that);
  W067 Base class virtual destructor is not public
    65:    virtual ~Exception() noexcept;
  W077 Virtual function is public
    45:    virtual void Display(std::ostream& stream, const std::string& prefix) const;
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.cpp
  W007 Cast down the inheritance hierarchy
    217:       auto req = static_cast< FileRequest* >(msg);
  W033 Unused function
    54:    FileRequest(const FileRequest& that);
  W049 Data is init-only
    227:       FunctionGuard guard(FunctionGuard::MakePreemptable);
    287:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/FileThread.h
  W084 Adjacent arguments have the same type
    57:    static void Spool(const std::string& name,
  W094 Function could be free
    44:    static ostringstreamPtr CreateStream();
    57:    static void Spool(const std::string& name,
    62:    static void Truncate(const std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nb/Formatters.h
  W033 Unused function
    66:    std::string strHex(uint16_t n, int width = -1, bool prefix = true);
  W084 Adjacent arguments have the same type
    76:    std::string strIndex(int n, int width = 0, bool colon = true);
    96:    std::string strCenter(const std::string& s, int breadth, int blanks);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.cpp
  W108 Function does not invoke Debug::ft
    40: int FunctionName::compare(fn_name_arg func, const char* str)
    47: size_t FunctionName::find(fn_name_arg func, const char* str)
    55: size_t FunctionName::rfind(fn_name_arg func, const char* str)
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionName.h
  W033 Unused function
    39:    size_t find(fn_name_arg func, const char* str);
C:/Users/gregu/Documents/rsc/rsc/nb/FunctionTrace.cpp
  W004 C-style cast
    391:          auto src = (ptr_t) this;
  W007 Cast down the inheritance hierarchy
    91:       auto curr = static_cast< FunctionTrace* >(rec);
    125:       auto curr = static_cast< FunctionTrace* >(rec);
    189:                   auto last = static_cast< const FunctionTrace* >(rec);
    266:       auto curr = static_cast< FunctionTrace* >(rec);
    305:          curr = static_cast< FunctionTrace* >(rec);
    373:       curr = static_cast< FunctionTrace* >(rec);
    426:          auto curr = static_cast< FunctionTrace* >(rec);
    491:          auto curr = static_cast< FunctionTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/Immutable.h
  W033 Unused function
    55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/InitFlags.cpp
  W108 Function does not invoke Debug::ft
    28: bool InitFlags::AllowBreak()
    39: bool InitFlags::CauseTimeout()
    48: bool InitFlags::ImmediateTrace()
    57: bool InitFlags::TraceInit()
    68: bool InitFlags::TraceWork()
C:/Users/gregu/Documents/rsc/rsc/nb/InitThread.cpp
  W049 Data is init-only
    307:    FunctionGuard guard(FunctionGuard::MakeUnpreemptable);
C:/Users/gregu/Documents/rsc/rsc/nb/Log.h
  W040 Class could be namespace
    34: class Log
  W094 Function could be free
    40:    static ostringstreamPtr Create(fixed_string title);
    45:    static void Spool(ostringstreamPtr& log);
    49:    static std::string FileName();
C:/Users/gregu/Documents/rsc/rsc/nb/LogThread.cpp
  W007 Cast down the inheritance hierarchy
    89:       auto req = static_cast< StreamRequest* >(msg);
  W049 Data is init-only
    156:    FunctionGuard
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.cpp
  W004 C-style cast
    225:    auto seg = (Segment*) addr;
    282:    auto segment = (Segment*) getptr1(addr, SegmentHeader::Size());
    333:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
    384:    auto source = (Segment*) getptr1(addr, SegmentHeader::Size());
  W094 Function could be free
    151:    static size_t Size();
  W108 Function does not invoke Debug::ft
    154: size_t SegmentHeader::Size()
    171: SysHeap* Memory::AccessHeap(MemoryType type)
    189: size_t Memory::Align(size_t size, size_t log2align)
    255: SysHeap* Memory::EnsureHeap(MemoryType type)
    309: const SysHeap* Memory::Heap(MemoryType type)
    403: size_t Memory::Words(size_t nBytes)
C:/Users/gregu/Documents/rsc/rsc/nb/Memory.h
  W033 Unused function
    56:    static void Set(void* dest, byte_t value, size_t nBytes);
    79:    static bool Verify(MemoryType type, void* addr);
  W094 Function could be free
    44:    static size_t Align(size_t size, size_t log2align = BYTES_PER_WORD_LOG2);
    48:    static size_t Words(size_t nBytes);
    52:    static void Copy(void* dest, const void* source, size_t nBytes);
    56:    static void Set(void* dest, byte_t value, size_t nBytes);
    74:    static void* Realloc(void* addr, size_t nBytes);
    83:    static MemoryType Type(const void* addr);
    91:    static void Shutdown(RestartLevel level);
    99:    static SysHeap* EnsureHeap(MemoryType type);
    103:    static SysHeap* AccessHeap(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.cpp
  W007 Cast down the inheritance hierarchy
    66:       auto curr = static_cast< MemoryTrace* >(rec);
C:/Users/gregu/Documents/rsc/rsc/nb/MemoryTrace.h
  W094 Function could be free
    57:    static const char* TypeString(MemoryType type);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.cpp
  W006 reinterpret_cast
    64:    auto fake = reinterpret_cast< const Module* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Module.h
  W033 Unused function
    103:    ModuleId Mid() const { return mid_.GetId(); }
    111:    virtual ModuleId* Dependencies(size_t& count) const;
  W067 Base class virtual destructor is not public
    146:    virtual ~Module();
  W077 Virtual function is public
    111:    virtual ModuleId* Dependencies(size_t& count) const;
  W079 Virtual function has no overrides
    111:    virtual ModuleId* Dependencies(size_t& count) const;
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.cpp
  W005 Functional cast
    106:          return RestartLevel(errval_);
  W108 Function does not invoke Debug::ft
    152: Module* ModuleRegistry::GetModule(ModuleId mid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ModuleRegistry.h
  W094 Function could be free
    87:    static RestartLevel NextLevel();
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.cpp
  W108 Function does not invoke Debug::ft
    74: TraceStatus MsgBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nb/MsgBuffer.h
  W062 Base class constructor is public
    41:    MsgBuffer();
    45:    MsgBuffer(const MsgBuffer& that);
  W077 Virtual function is public
    62:    virtual TraceStatus GetStatus() const;
C:/Users/gregu/Documents/rsc/rsc/nb/MutexGuard.cpp
  W109 Function does not invoke Debug::ft as first statement
    38:    Debug::ft(MutexGuard_ctor);
    51:       Debug::ft(MutexGuard_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.cpp
  W108 Function does not invoke Debug::ft
    114: word ExplainTraceRc(const CliThread& cli, TraceRc rc)
C:/Users/gregu/Documents/rsc/rsc/nb/NbCliParms.h
  W028 Unused data
    68: extern fixed_string NotImplementedExpl;
  W084 Adjacent arguments have the same type
    120: CliParm::Rc GetCBV(const CliCommand& comm, CliThread& cli, bool& c, bool& v);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.cpp
  W005 Functional cast
    484:       rc = nbt->SelectFaction(Faction(id), TraceDefault);
    692:       rc = nbt->SelectFaction(Faction(id), TraceExcluded);
    1089:       rc = nbt->SelectFaction(Faction(id), TraceIncluded);
    2452:       auto heap = Memory::Heap(MemoryType(m));
  W044 Member could be private
    1904:    static void SendAckToOutputFile(const CliThread& cli);
  W049 Data is init-only
    1708:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W094 Function could be free
    757:    static word DisplayHelpFile(const CliThread& cli, const string& name);
    1904:    static void SendAckToOutputFile(const CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nb/NbIncrement.h
  W028 Unused data
    153:    static const id_t LastNbIndex     = 3;
  W062 Base class constructor is public
    41:    StatusCommand();
    55:    SetWhatParm();
    68:    explicit SetCommand(bool bind = true);
    84:    IncludeWhatParm();
    98:    explicit IncludeCommand(bool bind = true);
    114:    ExcludeWhatParm();
    127:    explicit ExcludeCommand(bool bind = true);
    157:    explicit QueryCommand(bool bind = true);
    173:    SaveWhatParm();
    185:    explicit SaveCommand(bool bind = true);
    201:    ClearWhatParm();
    219:    explicit ClearCommand(bool bind = true);
  W113 Override of Object.Patch not found
    38: class StatusCommand : public CliCommand
    59: class SetCommand : public CliCommand
    88: class IncludeCommand : public CliCommand
    118: class ExcludeCommand : public CliCommand
    147: class QueryCommand : public CliCommand
    177: class SaveCommand : public CliCommand
    205: class ClearCommand : public CliCommand
C:/Users/gregu/Documents/rsc/rsc/nb/NbModule.h
  W049 Data is init-only
    64:    static bool Registered;
  W094 Function could be free
    60:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.cpp
  W005 Functional cast
    207:             stream << Faction(f) << CRLF;
  W108 Function does not invoke Debug::ft
    172: TraceStatus NbTracer::FactionStatus(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/nb/NbTracer.h
  W044 Member could be private
    77:    static bool ThreadsEmpty();
  W094 Function could be free
    73:    static TraceRc SelectThread(ThreadId tid, TraceStatus status);
    77:    static bool ThreadsEmpty();
  W112 Override of Base.Display not found
    63: class NbTracer : public Permanent
  W113 Override of Object.Patch not found
    63: class NbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.cpp
  W105 Function not sorted in standard order
    76: char FactionChar(Faction faction)
  W108 Function does not invoke Debug::ft
    45: char BlockingReasonChar(BlockingReason reason)
    76: char FactionChar(Faction faction)
C:/Users/gregu/Documents/rsc/rsc/nb/NbTypes.h
  W030 Unused enumerator
    44:    DispOption_N  // number of reasons; can be used to extend this enum
    74:    IdleFaction,         // idle thread (not used)
  W034 Unused typedef
    175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
    176: typedef std::basic_string<char, CharTraits, PermAllocator<char>> PermString;
    177: typedef std::basic_string<char, CharTraits, ProtAllocator<char>> ProtString;
  W101 Line contains adjacent spaces
    174: typedef std::basic_string<char, CharTraits, DynAllocator<char>>  DynString;
    175: typedef std::basic_string<char, CharTraits, ImmAllocator<char>>  ImmString;
C:/Users/gregu/Documents/rsc/rsc/nb/Object.cpp
  W006 reinterpret_cast
    141:    auto obj = reinterpret_cast< ObjectStruct* >(this);
  W108 Function does not invoke Debug::ft
    71: Object::ClassId Object::GetClassId() const
    82: bool Object::GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid)
    109: Object::ObjectId Object::GetObjectId() const
C:/Users/gregu/Documents/rsc/rsc/nb/Object.h
  W033 Unused function
    95:    ClassId GetClassId() const;
    107:    ObjectId GetObjectId() const;
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
    121:    static void* operator new(size_t size, MemoryType type);
    122:    static void* operator new[](size_t size, MemoryType type);
    124:    static void operator delete[](void* addr);
    125:    static void operator delete(void* addr, MemoryType type);
    126:    static void operator delete[](void* addr, MemoryType type);
    135:    void MorphTo(Class& target);
  W044 Member could be private
    70:    typedef uint32_t InstanceId;  // identifies an object within a Class
    71:    typedef uint32_t ObjectId;    // ClassId (12 bits) + InstanceId (20 bits)
    101:    virtual InstanceId GetInstanceId() const;
  W045 Member could be protected
    48:    typedef uint8_t sel_t;
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    69:    typedef id_t ClassId;         // identifies a Class
  W055 Data could be const
    140:    uintptr_t patchArea_;
  W077 Virtual function is public
    57:    virtual void Patch(sel_t selector, void* arguments) { }
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W079 Virtual function has no overrides
    82:    virtual Class* GetClass() const;
    90:    virtual void PostInitialize() { }
    101:    virtual InstanceId GetInstanceId() const;
  W094 Function could be free
    113:    static bool GetClassInstanceId(ObjectId oid, Class*& cls, InstanceId& iid);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.cpp
  W004 C-style cast
    238:       blocks_[currSegments_] = (uword*) Memory::Alloc(size, type_, false);
    261:          auto b = (ObjectBlock*) &seg[j];
    313:             auto b = (ObjectBlock*) &seg[j];
    350:             auto curr = (Pooled*) getptr1(item, diff);
    714:       return (ObjectBlock*) &blocks_[0][0];
    784:       return (ObjectBlock*) &blocks_[i][j];
    809:             auto b = (ObjectBlock*) &seg[j];
    841:    auto block = (const_ptr_t) ObjToBlock(obj);
    842:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
    846:       auto b0 = (const_ptr_t) &blocks_[i][0];
    889:    return (ObjectBlock*) getptr1(obj, BlockHeader::Size);
    919:          auto b = (ObjectBlock*) &seg[j];
  W006 reinterpret_cast
    477:    auto fake = reinterpret_cast< const ObjectPool* >(&local);
  W008 Cast removes const qualification
    842:    auto maxdiff = (ptrdiff_t) (blockSize_ * (ObjectsPerSegment - 1));
  W101 Line contains adjacent spaces
    95:    CounterPtr      allocCount_;
    96:    CounterPtr      freeCount_;
    97:    CounterPtr      failCount_;
    98:    CounterPtr      auditCount_;
  W108 Function does not invoke Debug::ft
    277: size_t ObjectPool::AllocCount() const
    443: bool ObjectPool::BidToIndices(Bid bid, size_t& i, size_t& j) const
    698: size_t ObjectPool::FailCount() const
    743: size_t ObjectPool::FreeCount() const
    750: bool ObjectPool::IndicesToBid(size_t i, size_t j, Bid& bid) const
    762: size_t ObjectPool::InUseCount() const
    769: size_t ObjectPool::LowAvailCount() const
    776: ObjectBlock* ObjectPool::Next(Bid& bid) const
    795: Pooled* ObjectPool::NextUsed(Bid& bid) const
    868: ObjectPoolId ObjectPool::ObjPid(const Pooled* obj)
    877: PooledObjectSeqNo ObjectPool::ObjSeq(const Pooled* obj)
    886: ObjectBlock* ObjectPool::ObjToBlock(const Pooled* obj)
  W112 Override of Base.Display not found
    75: class ObjectPoolSizeCfg : public CfgIntParm
    88: class ObjectPoolStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPool.h
  W005 Functional cast
    97:    ObjectPoolId Pid() const { return ObjectPoolId(pid_.GetId()); }
  W028 Unused data
    82:    static const Bid MaxBid = MaxSegments << ObjectsPerSegmentLog2;
  W044 Member could be private
    191:    static ptrdiff_t CellDiff();
  W067 Base class virtual destructor is not public
    218:    virtual ~ObjectPool();
  W077 Virtual function is public
    108:    virtual Pooled* DeqBlock(size_t size);
    113:    virtual void EnqBlock(Pooled* obj, bool deleted);
    177:    virtual void DisplayStats(std::ostream& stream) const;
  W079 Virtual function has no overrides
    108:    virtual Pooled* DeqBlock(size_t size);
    113:    virtual void EnqBlock(Pooled* obj, bool deleted);
  W084 Adjacent arguments have the same type
    238:    bool BidToIndices(Bid bid, size_t& i, size_t& j) const;
    243:    bool IndicesToBid(size_t i, size_t j, Bid& bid) const;
  W094 Function could be free
    257:    static ObjectBlock* ObjToBlock(const Pooled* obj);
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.cpp
  W108 Function does not invoke Debug::ft
    289: ObjectPool* ObjectPoolRegistry::Pool(ObjectPoolId pid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ObjectPoolRegistry.h
  W044 Member could be private
    56:    static bool NullifyObjectData() { return NullifyObjectData_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Permanent.h
  W033 Unused function
    57:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.cpp
  W108 Function does not invoke Debug::ft
    48: PermanentHeap* PermanentHeap::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/PermanentHeap.h
  W094 Function could be free
    41:    static PermanentHeap* Instance();
  W113 Override of Object.Patch not found
    36: class PermanentHeap : public SysHeap
C:/Users/gregu/Documents/rsc/rsc/nb/Pooled.cpp
  W004 C-style cast
    142:    auto obj = (Pooled*) addr;
  W006 reinterpret_cast
    116:    auto fake = reinterpret_cast< const Pooled* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/PooledClass.h
  W027 Unused class
    39: class PooledClass : public Class
  W033 Unused function
    53:    PooledClass(ClassId cid, size_t size);
    69:    bool SetPool(ObjectPool& pool);
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const PosixSignal* >(&local);
  W108 Function does not invoke Debug::ft
    124: Flags PS_Break()
    129: Flags PS_Delayed()
    134: Flags PS_Exit()
    139: Flags PS_Final()
    144: Flags PS_Interrupt()
    149: Flags PS_Native()
    154: Flags PS_NoError()
    159: Flags PS_NoLog()
    164: Flags PS_NoRecover()
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignal.h
  W055 Data could be const
    114:    signal_t value_;
    126:    uint8_t severity_;
    130:    Flags attrs_;
    134:    RegCell sid_;
  W056 Data could be const pointer
    118:    const char* name_;
    122:    const char* expl_;
  W067 Base class virtual destructor is not public
    105:    virtual ~PosixSignal();
  W084 Adjacent arguments have the same type
    99:    PosixSignal(signal_t value, const char* name,
C:/Users/gregu/Documents/rsc/rsc/nb/PosixSignalRegistry.cpp
  W108 Function does not invoke Debug::ft
    57: Flags PosixSignalRegistry::Attrs(signal_t value) const
    90: PosixSignal* PosixSignalRegistry::Find(signal_t value) const
    102: PosixSignal* PosixSignalRegistry::Find(const string& name) const
    153: signal_t PosixSignalRegistry::Value(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nb/Protected.h
  W033 Unused function
    56:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.cpp
  W109 Function does not invoke Debug::ft as first statement
    49:    Debug::ft(Q1Link_dtor);
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Link.h
  W033 Unused function
    57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q1Way.h
  W090 Argument could be const
    79/1:    bool Enq(T& elem)
    100/1:    bool Henq(T& elem)
    122/1:    bool Insert(T* prev, T& elem)
    157/1:    bool Exq(T& elem)
    321/1:    void Corrupt(T* elem)
  W101 Line contains adjacent spaces
    387:    inline static fn_name Q1Way_ctor()   { return "Q1Way.ctor"; }
    388:    inline static fn_name Q1Way_dtor()   { return "Q1Way.dtor"; }
    389:    inline static fn_name Q1Way_Init()   { return "Q1Way.Init"; }
    390:    inline static fn_name Q1Way_Enq()    { return "Q1Way.Enq"; }
    391:    inline static fn_name Q1Way_Henq()   { return "Q1Way.Henq"; }
    393:    inline static fn_name Q1Way_Deq()    { return "Q1Way.Deq"; }
    394:    inline static fn_name Q1Way_Exq()    { return "Q1Way.Exq"; }
    395:    inline static fn_name Q1Way_Next()   { return "Q1Way.Next"; }
    396:    inline static fn_name Q1Way_Size()   { return "Q1Way.Size"; }
    397:    inline static fn_name Q1Way_Purge()  { return "Q1Way.Purge"; }
    398:    inline static fn_name Q1Way_Item()   { return "Q1Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.cpp
  W108 Function does not invoke Debug::ft
    39: Q2Link::~Q2Link()
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Link.h
  W033 Unused function
    57:    bool IsQueued() const { return next != nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nb/Q2Way.h
  W090 Argument could be const
    135/1:    bool Exq(T& elem)
  W092 Function could be const
    135:    bool Exq(T& elem)
  W101 Line contains adjacent spaces
    360:    inline static fn_name Q2Way_ctor()  { return "Q2Way.ctor"; }
    361:    inline static fn_name Q2Way_dtor()  { return "Q2Way.dtor"; }
    362:    inline static fn_name Q2Way_Init()  { return "Q2Way.Init"; }
    363:    inline static fn_name Q2Way_Enq()   { return "Q2Way.Enq"; }
    364:    inline static fn_name Q2Way_Henq()  { return "Q2Way.Henq"; }
    365:    inline static fn_name Q2Way_Deq()   { return "Q2Way.Deq"; }
    366:    inline static fn_name Q2Way_Exq()   { return "Q2Way.Exq"; }
    367:    inline static fn_name Q2Way_Next()  { return "Q2Way.Next"; }
    368:    inline static fn_name Q2Way_Prev()  { return "Q2Way.Prev"; }
    369:    inline static fn_name Q2Way_Size()  { return "Q2Way.Size"; }
    371:    inline static fn_name Q2Way_Item()  { return "Q2Way.Item"; }
C:/Users/gregu/Documents/rsc/rsc/nb/RegCell.cpp
  W108 Function does not invoke Debug::ft
    37: RegCell::~RegCell()
    49: void RegCell::SetId(id_t cid)
C:/Users/gregu/Documents/rsc/rsc/nb/Registry.h
  W090 Argument could be const
    266/1:    bool Erase(T& item)
  W101 Line contains adjacent spaces
    625:    inline static fn_name Registry_ctor()   { return "Registry.ctor"; }
    626:    inline static fn_name Registry_dtor()   { return "Registry.dtor"; }
    627:    inline static fn_name Registry_Init()   { return "Registry.Init"; }
    629:    inline static fn_name Registry_Erase()  { return "Registry.Erase"; }
    630:    inline static fn_name Registry_Next()   { return "Registry.Next"; }
    631:    inline static fn_name Registry_Prev()   { return "Registry.Prev"; }
    632:    inline static fn_name Registry_Size()   { return "Registry.Size"; }
    633:    inline static fn_name Registry_Empty()  { return "Registry.Empty"; }
    634:    inline static fn_name Registry_Purge()  { return "Registry.Purge"; }
    635:    inline static fn_name Registry_Cell()   { return "Registry.Cell"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Restart.h
  W094 Function could be free
    80:    static void Initiate(reinit_t reason, debug32_t errval);
C:/Users/gregu/Documents/rsc/rsc/nb/Singleton.h
  W049 Data is init-only
    130:    static T* Instance_;
  W101 Line contains adjacent spaces
    126:       Singleton_Destroy()  { return "Singleton.Destroy"; }
C:/Users/gregu/Documents/rsc/rsc/nb/Singletons.cpp
  W108 Function does not invoke Debug::ft
    125: Singletons* Singletons::Instance()
C:/Users/gregu/Documents/rsc/rsc/nb/SoftwareException.h
  W062 Base class constructor is public
    41:    SoftwareException
    43:    SoftwareException
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast< const Statistic* >(&local);
  W108 Function does not invoke Debug::ft
    117: uint64_t Statistic::Overall() const
    258: uint64_t HighWatermark::Overall() const
    334: uint64_t LowWatermark::Overall() const
C:/Users/gregu/Documents/rsc/rsc/nb/Statistics.h
  W044 Member could be private
    66:    static ptrdiff_t CellDiff();
  W045 Member could be protected
    62:    virtual void DisplayStat(std::ostream& stream) const;
  W052 Data is not private
    89:    std::atomic_uint32_t curr_;
    93:    std::atomic_uint32_t prev_;
    97:    std::atomic_uint64_t total_;
    101:    uint32_t divisor_;
  W055 Data could be const
    118:    RegCell sid_;
    122:    DynString expl_;
  W062 Base class constructor is public
    134:    explicit Counter(const std::string& expl, uint32_t divisor = 1);
  W077 Virtual function is public
    58:    virtual uint64_t Overall() const;
    62:    virtual void DisplayStat(std::ostream& stream) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.cpp
  W006 reinterpret_cast
    81:    auto fake = reinterpret_cast< const StatisticsGroup* >(&local);
  W101 Line contains adjacent spaces
    39: fixed_string StatisticsGroup::ReportHeader =   "      Curr      Prev         All";
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsGroup.h
  W044 Member could be private
    57:    id_t Gid() const { return gid_.GetId(); }
    61:    static ptrdiff_t CellDiff();
  W055 Data could be const
    100:    RegCell gid_;
    104:    DynString expl_;
  W077 Virtual function is public
    69:    virtual void DisplayStats(std::ostream& stream, id_t id) const;
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.cpp
  W007 Cast down the inheritance hierarchy
    62:       (static_cast< CfgFileTimeParm* >(reg->FindParm("StatsFileName")));
  W108 Function does not invoke Debug::ft
    147: StatisticsGroup* StatisticsRegistry::GetGroup(id_t gid) const
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsRegistry.h
  W044 Member could be private
    77:    StatisticsGroup* GetGroup(id_t gid) const;
    81:    void DisplayStats(std::ostream& stream) const;
    85:    static std::string StatsFileName() { return StatsFileName_; }
  W092 Function could be const
    115:    void StartInterval(bool first);
C:/Users/gregu/Documents/rsc/rsc/nb/StatisticsThread.h
  W055 Data could be const
    53:    static secs_t LongIntervalSecs;
    58:    static secs_t ShortIntervalSecs;
    65:    static size_t WakeupsBetweenReports;
    70:    static ticks_t PrevToCurrTicks;
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.cpp
  W018 Remove #include directive
    25: #include <sstream>
C:/Users/gregu/Documents/rsc/rsc/nb/StreamRequest.h
  W045 Member could be protected
    57:    StreamRequest(const StreamRequest& that);
  W062 Base class constructor is public
    52:    StreamRequest();
    57:    StreamRequest(const StreamRequest& that);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const Symbol* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Symbol.h
  W055 Data could be const
    96:    DynString name_;
    108:    Q1Link link_;
  W094 Function could be free
    52:    static const std::string& ValidNameChars();
    57:    static const std::string& InvalidInitialChars();
C:/Users/gregu/Documents/rsc/rsc/nb/SymbolRegistry.h
  W084 Adjacent arguments have the same type
    53:    bool BindSymbol
C:/Users/gregu/Documents/rsc/rsc/nb/SysConsole.cpp
  W108 Function does not invoke Debug::ft
    32: std::istream& SysConsole::In()
    39: ostream& SysConsole::Out()
C:/Users/gregu/Documents/rsc/rsc/nb/SysDecls.h
  W046 Typedef of pointer type
    46: typedef void* SysHeap_t;
    47: typedef void* SysThread_t;
    49: typedef void* SysMutex_t;
    50: typedef void* SysSentry_t;
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.h
  W033 Unused function
    89:    void GetDir(std::string& dirName);
  W077 Virtual function is public
    46:    virtual void GetName(std::string& fileName) const = 0;
    50:    virtual bool IsSubdir() const = 0;
    54:    virtual bool AtEnd() const = 0;
    59:    virtual bool Advance() = 0;
C:/Users/gregu/Documents/rsc/rsc/nb/SysFile.win.cpp
  W058 Default constructor invoked: POD members not initialized
    58:    _finddata_t attributes_;
  W064 Member not included in member initialization list
    58:    _finddata_t attributes_;
  W108 Function does not invoke Debug::ft
    100: bool FileWalker::AtEnd() const
    107: void FileWalker::GetName(std::string& fileName) const
    116: bool FileWalker::IsSubdir() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.h
  W033 Unused function
    101:    static void* operator new[](size_t size);
    106:    static void operator delete[](void* addr);
  W092 Function could be const
    55:    bool Validate(const void* addr);
  W094 Function could be free
    87:    static void DisplayHeaps(std::ostream& stream);
C:/Users/gregu/Documents/rsc/rsc/nb/SysHeap.win.cpp
  W004 C-style cast
    162:    aHeaps = (HANDLE*) HeapAlloc(DefaultProcessHeap, 0, BytesToAllocate);
C:/Users/gregu/Documents/rsc/rsc/nb/SysMemory.win.cpp
  W018 Remove #include directive
    23: #include "SysMemory.h"
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.cpp
  W108 Function does not invoke Debug::ft
    48: Thread* SysMutex::Owner() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysMutex.win.cpp
  W109 Function does not invoke Debug::ft as first statement
    107:    Debug::ft(SysMutex_Acquire);
C:/Users/gregu/Documents/rsc/rsc/nb/SysSignals.h
  W027 Unused class
    54:    class SigAlrm : public PosixSignal
    68:    class SigBus : public PosixSignal
    96:    class SigQuit : public PosixSignal
    110:    class SigSys : public PosixSignal
    124:    class SigVtAlrm : public PosixSignal
  W037 No referent for friend declaration
    56:       friend class Singleton< SigAlrm >;
    70:       friend class Singleton< SigBus >;
    98:       friend class Singleton< SigQuit >;
    112:       friend class Singleton< SigSys >;
    126:       friend class Singleton< SigVtAlrm >;
  W094 Function could be free
    37:    static void CreateNativeSignals();
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.h
  W030 Unused enumerator
    58:       LowPriority,       // preemptable threads
  W084 Adjacent arguments have the same type
    105:    static SysThread_t Create(const ThreadEntry entry,
  W090 Argument could be const
    106/4:       const Thread* client, size_t stackSize, SysThreadId& nid);
  W092 Function could be const
    141:    DelayRc Delay(msecs_t msecs);
    147:    bool Interrupt();
  W094 Function could be free
    52:    static SysThreadId RunningThreadId();
    112:    static SysThread_t Wrap();
    116:    static void Delete(SysThread_t& thread);
    121:    static SysSentry_t CreateSentry();
    125:    static void DeleteSentry(SysSentry_t& sentry);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThread.win.cpp
  W004 C-style cast
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
    144:       (DWORD*) &nid);                  // updates thread's identifier
    345:    _set_se_translator((_se_translator_function) SE_Handler);
  W008 Cast removes const qualification
    141:       (LPTHREAD_START_ROUTINE) entry,  // thread entry function
    142:       (LPVOID) client,                 // argument to entry function
  W026 Unused argument
    52/2: void SE_Handler(uint32_t errval, void* ex)
  W108 Function does not invoke Debug::ft
    269: void SysThread::RegisterForSignal(signal_t sig, sighandler_t handler)
    296: SysThreadId SysThread::RunningThreadId()
  W109 Function does not invoke Debug::ft as first statement
    57:    Debug::ft(NodeBase_SE_Handler);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.h
  W026 Unused argument
    38/1:    void Startup(RestartLevel level);
C:/Users/gregu/Documents/rsc/rsc/nb/SysThreadStack.win.cpp
  W004 C-style cast
    163:    Symbols = (SYMBOL_INFO*) Memory::Alloc(size, MemPerm, false);
  W015 #include not sorted in standard order
    29: #include <dbghelp.h>
  W084 Adjacent arguments have the same type
    72:    static const char* GetFileLoc(DWORD64 frame, DWORD& line, DWORD& disp);
  W108 Function does not invoke Debug::ft
    121: DWORD64 StackInfo::GetFrame(fn_depth depth)
    137: fn_depth StackInfo::GetFrames()
    145: void StackInfo::Shutdown()
    154: DWORD StackInfo::Startup()
    265: fn_depth SysThreadStack::FuncDepth()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.h
  W033 Unused function
    71:    bool TickTimingAvailable() const { return available_; }
  W112 Override of Base.Display not found
    41: class SysTickTimer : public Immutable
  W113 Override of Object.Patch not found
    41: class SysTickTimer : public Immutable
C:/Users/gregu/Documents/rsc/rsc/nb/SysTickTimer.win.cpp
  W058 Default constructor invoked: POD members not initialized
    44:    LARGE_INTEGER frequency;
    75:       LARGE_INTEGER now;
    81:       _timeb now;
  W108 Function does not invoke Debug::ft
    71: ticks_t SysTickTimer::TicksNow() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.cpp
  W005 Functional cast
    362:          Truncate(TimeField(int(field) + 1));
    545:          return OutOfRange(TimeField(f));
  W108 Function does not invoke Debug::ft
    181: int16_t SysTime::DayOfWeek() const
    191: int16_t SysTime::DayOfYear() const
    207: const int16_t* SysTime::DaysPerMonth(int16_t year)
    215: size_t SysTime::DaysSinceT0() const
    245: bool SysTime::IsLeapYear(int16_t year)
    265: int64_t SysTime::MsecsSinceT0() const
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.h
  W033 Unused function
    76:    int16_t Get(TimeField field) const { return time_[field]; }
  W044 Member could be private
    80:    int16_t DayOfWeek() const;
    131:    const char* strMonth() const;
  W084 Adjacent arguments have the same type
    71:    SysTime(int16_t year, int16_t month, int16_t day,
  W094 Function could be free
    88:    static bool IsLeapYear(int16_t year);
    153:    static const int16_t* DaysPerMonth(int16_t year);
C:/Users/gregu/Documents/rsc/rsc/nb/SysTime.win.cpp
  W058 Default constructor invoked: POD members not initialized
    42:    _timeb timebuff;
    43:    tm timeofday;
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.cpp
  W006 reinterpret_cast
    33:    auto bytes = reinterpret_cast< uint8_t* >(&value);
  W108 Function does not invoke Debug::ft
    30: uintptr_t BadPointer()
C:/Users/gregu/Documents/rsc/rsc/nb/SysTypes.h
  W028 Unused data
    50: constexpr uword UWORD_MAX = (sizeof(word) == 8 ? UINT64_MAX : UINT32_MAX);
  W030 Unused enumerator
    147:    DebugLog,    // only useful to software designers
  W046 Typedef of pointer type
    86: typedef char* ptr_t;
    87: typedef const char* const_ptr_t;
    103: typedef const char* const fixed_string;
    108: typedef const char* const fn_name;      // for defining a function name
    109: typedef const char* const fn_name_arg;  // when fn_name is an argument
C:/Users/gregu/Documents/rsc/rsc/nb/Temporary.h
  W033 Unused function
    55:    static void* operator new[](size_t size);
C:/Users/gregu/Documents/rsc/rsc/nb/ThisThread.cpp
  W108 Function does not invoke Debug::ft
    29: bool ThisThread::EnterBlockingOperation(BlockingReason why, fn_name_arg func)
    36: void ThisThread::ExitBlockingOperation(fn_name_arg func)
    43: void ThisThread::MakePreemptable()
    50: void ThisThread::MakeUnpreemptable()
    57: void ThisThread::MemProtect()
    64: void ThisThread::MemUnprotect()
    71: DelayRc ThisThread::Pause(msecs_t msecs)
    78: void ThisThread::PauseOver(word limit)
    85: word ThisThread::RtcPercentUsed()
    92: ThreadId ThisThread::RunningThreadId()
    99: TraceRc ThisThread::StartTracing(bool immediate, bool autostop)
    106: void ThisThread::StopTracing()
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.cpp
  W006 reinterpret_cast
    1170:    auto fake = reinterpret_cast< const Thread* >(&local);
  W049 Data is init-only
    482:    MutexGuard guard(&lock_);
    676:    MutexGuard guard(&lock_);
    711:    MutexGuard guard(&lock_);
  W094 Function could be free
    88:    static void CaptureEvent(fn_name_arg func, Id rid, word info = 0);
  W101 Line contains adjacent spaces
    264:    CounterPtr       traps_;
    265:    CounterPtr       yields_;
    266:    CounterPtr       exceeds_;
    270:    AccumulatorPtr   totUsecs_;
  W108 Function does not invoke Debug::ft
    438: ContextSwitch* ContextSwitches::AddSwitch()
    1151: TraceStatus Thread::CalcStatus(bool dynamic) const
    1532: main_t Thread::EnterThread(void* arg)
    1736: void Thread::FunctionInvoked(fn_name_arg func)
    1833: bool Thread::HasExited() const
    1896: bool Thread::IsLocked() const
    1903: Thread* Thread::LockedThread()
    1970: TraceRc Thread::LogContextSwitches(bool on)
    2095: SysThreadId Thread::NativeThreadId() const
    2123: DelayRc Thread::Pause(msecs_t msecs)
    2163: double Thread::PercentIdle()
    2522: bool Thread::RunningLocked()
    2673: void Thread::StackCheck()
    2945: TraceRc Thread::StartTracing(bool immediate, bool autostop)
    2981: void Thread::StopTracing()
    3044: void Thread::Trace
    3061: bool Thread::TraceRunningThread(Thread*& thr)
    3096: void Thread::TrapCheck()
  W109 Function does not invoke Debug::ft as first statement
    1656:    Debug::ft(Thread_ExitIfSafe);
    2467:    Debug::ft(Thread_ResumeLocked);
    2645:    Debug::ft(Thread_SignalHandler);
    2717:          Debug::ft(Thread_Start);
    3230:       Debug::ft(Thread_Unlock);
  W112 Override of Base.Display not found
    258: class ThreadStats : public Dynamic
    351: class ContextSwitches : public Permanent
    606: class Orphans : public Permanent
  W113 Override of Object.Patch not found
    351: class ContextSwitches : public Permanent
    606: class Orphans : public Permanent
    740: class ThreadPriv : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/Thread.h
  W005 Functional cast
    158:    Id Tid() const { return Id(tid_.GetId()); }
  W026 Unused argument
    354/2:       (BlockingReason why, fn_name_arg func) { return true; }
    362/1:    virtual void ScheduledIn(fn_name_arg func) { }
  W033 Unused function
    122:    static std::atomic_uint32_t* Vector();
    170:    bool ChangeFaction(Faction faction);
  W044 Member could be private
    126:    static bool TestFlag(FlagId fid);
    130:    static void ResetFlag(FlagId fid);
    162:    SysThreadId NativeThreadId() const;
    239:    static ptrdiff_t CellDiff();
  W067 Base class virtual destructor is not public
    281:    virtual ~Thread();
  W077 Virtual function is public
    187:    virtual TraceStatus CalcStatus(bool dynamic) const;
    211:    virtual void DisplayStats(std::ostream& stream) const;
  W079 Virtual function has no overrides
    211:    virtual void DisplayStats(std::ostream& stream) const;
    293:    virtual bool EnqMsg(MsgBuffer& msg);
    299:    virtual MsgBuffer* DeqMsg(msecs_t timeout);
  W084 Adjacent arguments have the same type
    561:    void DisplaySummary
  W092 Function could be const
    118:    bool Interrupt(const Flags& mask = Flags());
    509:    void SetTrap(bool on);
    517:    void StackCheck();
    529:    void SetSignal(signal_t sig);
  W094 Function could be free
    106:    static void PauseOver(word limit);
    220:    static double PercentIdle();
    224:    static TraceRc LogContextSwitches(bool on);
    228:    static void DisplayContextSwitches(std::ostream& stream);
    439:    static SysThread::Priority FactionToPriority(Faction& faction);
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.cpp
  W108 Function does not invoke Debug::ft
    287: bool ThreadAdmin::BreakEnabled()
    385: void ThreadAdmin::Incr(Register r)
    493: word ThreadAdmin::TrapCount()
  W112 Override of Base.Display not found
    51: class ThreadsStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadAdmin.h
  W094 Function could be free
    90:    static int WarpFactor();
  W101 Line contains adjacent spaces
    176:    CfgIntParmPtr  initTimeoutMsecs_;
    177:    CfgIntParmPtr  schedTimeoutMsecs_;
    179:    CfgIntParmPtr  rtcTimeoutMsecs_;
    181:    CfgIntParmPtr  rtcLimit_;
    182:    CfgIntParmPtr  rtcInterval_;
    184:    CfgIntParmPtr  trapLimit_;
    185:    CfgIntParmPtr  trapInterval_;
    187:    CfgIntParmPtr  stackUsageLimit_;
    188:    CfgIntParmPtr  stackCheckInterval_;
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.cpp
  W108 Function does not invoke Debug::ft
    209: ThreadId ThreadRegistry::FindThreadId(SysThreadId nid) const
    218: Thread* ThreadRegistry::GetThread(ThreadId tid) const
C:/Users/gregu/Documents/rsc/rsc/nb/ThreadRegistry.h
  W092 Function could be const
    112:    void AssociateIds(const Thread& thread);
C:/Users/gregu/Documents/rsc/rsc/nb/TimedRecord.h
  W045 Member could be protected
    48:    ticks_t GetTicks() const { return ticks_; }
    52:    void SetTicks(const ticks_t& ticks) { ticks_ = ticks; }
    56:    SysThreadId Nid() const { return nid_; }
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.cpp
  W006 reinterpret_cast
    67:    auto fake = reinterpret_cast< const Tool* >(&local);
C:/Users/gregu/Documents/rsc/rsc/nb/Tool.h
  W055 Data could be const
    105:    char abbr_;
    109:    bool safe_;
  W067 Base class virtual destructor is not public
    92:    virtual ~Tool();
  W077 Virtual function is public
    56:    virtual const char* Name() const = 0;
    60:    virtual const char* Expl() const = 0;
    66:    virtual std::string Status() const;
C:/Users/gregu/Documents/rsc/rsc/nb/ToolRegistry.cpp
  W108 Function does not invoke Debug::ft
    117: Tool* ToolRegistry::GetTool(FlagId id) const
C:/Users/gregu/Documents/rsc/rsc/nb/ToolTypes.cpp
  W105 Function not sorted in standard order
    68: ostream& operator<<(std::ostream& stream, TraceStatus status)
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.cpp
  W004 C-style cast
    125:    buff_ = (uword*) Memory::Alloc(InitialSize << BYTES_PER_WORD_LOG2, MemPerm);
    235:    auto addr = (TraceRecord*) &buff_[end_];
    428:       next = (uword*) record + incr;
    446:             record = (TraceRecord*) buff_;  // case (b)
    450:          record = (TraceRecord*) next;
    459:       next = (uword*) record + incr;
    485:       auto record = (TraceRecord*) &buff_[start_];
    592:    buff_ = (uword*) Memory::Alloc(size << BYTES_PER_WORD_LOG2, MemPerm, false);
  W108 Function does not invoke Debug::ft
    111: TraceBuffer::TraceBuffer() :
    139: TraceBuffer::~TraceBuffer()
    153: void* TraceBuffer::AddRecord(size_t nBytes)
    351: bool TraceBuffer::Empty() const
    382: bool TraceBuffer::IsLocked()
    391: void TraceBuffer::Lock()
    411: void TraceBuffer::Next(TraceRecord*& record, const Flags& mask) const
    472: void TraceBuffer::PurgeRecords(size_t end)
    540: void TraceBuffer::RecordInvocation(fn_name_arg func) const
    743: void TraceBuffer::Unlock()
C:/Users/gregu/Documents/rsc/rsc/nb/TraceBuffer.h
  W033 Unused function
    169:    const SysTime& StartTimeFull() const { return startTime_; }
  W044 Member could be private
    178:    typedef std::map< fn_name_arg, size_t > InvocationsTable;
  W112 Override of Base.Display not found
    63: class TraceBuffer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.cpp
  W005 Functional cast
    38:    size_(int16_t(size)),
C:/Users/gregu/Documents/rsc/rsc/nb/TraceRecord.h
  W033 Unused function
    97:    static void operator delete(void* addr, void* where) { }
  W044 Member could be private
    88:    static void operator delete(void* addr) { }
    92:    static void* operator new(size_t size, void* where);
  W045 Member could be protected
    70:    void Nullify() { owner_ = NIL_ID; }
  W052 Data is not private
    134:    Id rid_ : 8;
  W077 Virtual function is public
    78:    virtual bool Display(std::ostream& stream, bool diff);
  W092 Function could be const
    114:    virtual void ClaimBlocks() { }
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.cpp
  W004 C-style cast
    58:    functionq_ = (Q2Way< FunctionStats >*) Memory::Alloc(size, MemTemp);
  W007 Cast down the inheritance hierarchy
    198:             auto ft = static_cast<FunctionTrace*>(rec);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    97: void FunctionProfiler::CheckHigh(FunctionStats*& high,
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionProfiler.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W055 Data could be const
    105:    size_t size_;
  W084 Adjacent arguments have the same type
    83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W092 Function could be const
    77:    FunctionStats* EnsureRecord(fn_name_arg func, size_t count);
  W094 Function could be free
    83:    static void CheckHigh(FunctionStats*& high, FunctionStats* curr,
  W112 Override of Base.Display not found
    49: class FunctionProfiler : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.cpp
  W006 reinterpret_cast
    80:    auto fake = reinterpret_cast< const FunctionStats* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    51: int FunctionStats::Compare(const FunctionStats& that) const
    69: void FunctionStats::IncrCalls(usecs_t net)
C:/Users/gregu/Documents/rsc/rsc/nt/FunctionStats.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W055 Data could be const
    84:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.cpp
  W005 Functional cast
    3033:    pool->time_[id1].Truncate(TimeField(field - 1));
    3064:    pool->time_[id1].Round(TimeField(field - 1), interval);
  W006 reinterpret_cast
    1179:    auto fake = reinterpret_cast< const Q1WayItem* >(&local);
    1699:    auto fake = reinterpret_cast< const Q2WayItem* >(&local);
    2260:    auto fake = reinterpret_cast< const RegistryItem* >(&local);
    3494:    auto p = reinterpret_cast< char* >(BAD_POINTER);
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    3278:    typedef id_t Test;
  W049 Data is init-only
    258:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
  W055 Data could be const
    1043:    Q1Link link_;
    1555:    Q2Link link_;
  W094 Function could be free
    3300:    static void UseBadPointer();
    3301:    static void LoopForever();
  W108 Function does not invoke Debug::ft
    1158: Q1WayItem::~Q1WayItem()
    1192: Q1WayPool::Q1WayPool()
    1221: void Q1WayPool::Reallocate()
    1678: Q2WayItem::~Q2WayItem()
    1712: Q2WayPool::Q2WayPool()
    1741: void Q2WayPool::Reallocate()
    2242: RegistryItem::~RegistryItem()
    2273: RegistryPool::RegistryPool()
  W109 Function does not invoke Debug::ft as first statement
    3374:       Debug::ft(RecoveryTestThread_Enter);
    3456:       Debug::ft(RecoveryTestThread_LoopForever);
  W112 Override of Base.Display not found
    905: class LbcPool : public Temporary
    2664: class SysTimePool : public Temporary
C:/Users/gregu/Documents/rsc/rsc/nt/NtIncrement.h
  W020 Using statement in header
    33: using namespace NodeBase;
  W028 Unused data
    81:    static const id_t LastNtIndex    = FuncTraceScope;
  W044 Member could be private
    163:    virtual void ConcludeTest(CliThread& cli) const;
  W062 Base class constructor is public
    45:    CorruptWhatParm();
    57:    explicit CorruptCommand(bool bind = true);
    99:    NtSaveWhatParm();
    111:    explicit NtSaveCommand(bool bind = true);
    125:    SizesCommand();
    140:    TestcaseAction();
    159:    explicit TestcaseCommand(bool bind = true);
  W079 Virtual function has no overrides
    163:    virtual void ConcludeTest(CliThread& cli) const;
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.cpp
  W007 Cast down the inheritance hierarchy
    65:    return static_cast< NtTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nt/NtTestData.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W094 Function could be free
    45:    static NtTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/InputHandler.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W045 Member could be protected
    64:    IpPort* Port() const { return port_; }
  W077 Virtual function is public
    93:    virtual IpBuffer* AllocBuff
    109:    virtual void ReceiveBuff
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.cpp
  W004 C-style cast
    77:    buffer_ = (byte_t*) Memory::Alloc(SysSocket::MaxMsgSize, MemDyn);
  W009 Pointer arithmetic
    205:       source += rcvd;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/IoThread.h
  W020 Using statement in header
    33: using namespace NodeBase;
  W044 Member could be private
    97:    virtual bool ExitOnRestart(RestartLevel level) const override;
  W052 Data is not private
    101:    const ipport_t port_;
    106:    IpPort* ipPort_;
    110:    size_t rxSize_;
    114:    size_t txSize_;
    118:    SysIpL2Addr host_;
    122:    size_t recvs_;
    126:    SysIpL3Addr txAddr_;
    130:    SysIpL3Addr rxAddr_;
    134:    ticks_t ticks0_;
    138:    byte_t* buffer_;
  W077 Virtual function is public
    61:    virtual bool InsertSocket(SysSocket* socket);
  W079 Virtual function has no overrides
    93:    virtual bool ConditionalPause(word percent);
  W084 Adjacent arguments have the same type
    77:    IoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.cpp
  W004 C-style cast
    71:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    90:    buff_ = (byte_t*) Memory::Alloc(BuffSize(buffSize_), MemDyn);
    131:       auto buff = (byte_t*) Memory::Realloc(buff_, BuffSize(newSize));
  W009 Pointer arithmetic
    261:    bytes += hdrSize_;
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    205: TraceStatus IpBuffer::GetStatus() const
C:/Users/gregu/Documents/rsc/rsc/nw/IpBuffer.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W044 Member could be private
    117:    virtual MsgSize PayloadSize() const;
  W062 Base class constructor is public
    51:    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
    55:    IpBuffer(const IpBuffer& that);
  W077 Virtual function is public
    117:    virtual MsgSize PayloadSize() const;
    136:    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  W079 Virtual function has no overrides
    136:    virtual bool AddBytes(const byte_t* source, MsgSize size, bool& moved);
  W084 Adjacent arguments have the same type
    51:    IpBuffer(MsgDirection dir, MsgSize header, MsgSize payload);
  W094 Function could be free
    166:    static size_t BuffSize(size_t nBytes);
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.cpp
  W006 reinterpret_cast
    276:    auto fake = reinterpret_cast< const IpPort* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W101 Line contains adjacent spaces
    55:    CounterPtr       recvs_;
    56:    AccumulatorPtr   bytesRcvd_;
    59:    CounterPtr       discards_;
    60:    CounterPtr       rejects_;
    61:    CounterPtr       sends_;
    62:    AccumulatorPtr   bytesSent_;
    64:    CounterPtr       overflows_;
  W108 Function does not invoke Debug::ft
    205: size_t IpPort::Discards() const
  W112 Override of Base.Display not found
    49: class IpPortStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/nw/IpPort.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W045 Member could be protected
    69:    IoThread* GetThread() const { return thread_; }
  W055 Data could be const
    181:    Q1Link link_;
    185:    ipport_t port_;
  W056 Data could be const pointer
    189:    IpService* service_;
  W077 Virtual function is public
    90:    virtual SysSocket* CreateAppSocket(size_t rxSize, size_t txSize);
    125:    virtual void DisplayStats(std::ostream& stream) const;
  W079 Virtual function has no overrides
    125:    virtual void DisplayStats(std::ostream& stream) const;
  W092 Function could be const
    162:    virtual IoThread* CreateIoThread();
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortCfgParm.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W084 Adjacent arguments have the same type
    48:    IpPortCfgParm(const char* key, const char* def,
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    283: IpPort* IpPortRegistry::GetPort(ipport_t port, IpProtocol protocol) const
  W112 Override of Base.Display not found
    47: class HostAddrCfg : public CfgStrParm
C:/Users/gregu/Documents/rsc/rsc/nw/IpPortRegistry.h
  W020 Using statement in header
    32: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.cpp
  W006 reinterpret_cast
    69:    auto fake = reinterpret_cast< const IpService* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/IpService.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W033 Unused function
    79:    virtual CliText* CreateText() const = 0;
  W044 Member could be private
    97:    IpPort* Provision(ipport_t pid);
  W055 Data could be const
    149:    RegCell sid_;
  W067 Base class virtual destructor is not public
    131:    virtual ~IpService();
  W077 Virtual function is public
    53:    virtual const char* Name() const = 0;
    57:    virtual IpProtocol Protocol() const = 0;
    62:    virtual ipport_t Port() const = 0;
    66:    virtual Faction GetFaction() const = 0;
    70:    virtual size_t RxSize() const = 0;
    74:    virtual size_t TxSize() const = 0;
    79:    virtual CliText* CreateText() const = 0;
    85:    virtual SysSocket* CreateAppSocket() const { return nullptr; }
    93:    virtual void GetAppSocketSizes(size_t& rxSize, size_t& txSize) const;
  W079 Virtual function has no overrides
    85:    virtual SysSocket* CreateAppSocket() const { return nullptr; }
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    78: IpService* IpServiceRegistry::GetService(const string& name) const
C:/Users/gregu/Documents/rsc/rsc/nw/IpServiceRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W033 Unused function
    50:    IpService* GetService(const std::string& name) const;
C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwCliParms.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwIncrement.h
  W020 Using statement in header
    30: using namespace NodeBase;
  W062 Base class constructor is public
    41:    NwClearWhatParm();
    56:    explicit NwClearCommand(bool bind = true);
    69:    NwExcludeWhatParm();
    82:    explicit NwExcludeCommand(bool bind = true);
    95:    NwIncludeWhatParm();
    108:    explicit NwIncludeCommand(bool bind = true);
    123:    explicit NwQueryCommand(bool bind = true);
    136:    NwStatusCommand() { }
  W113 Override of Object.Patch not found
    45: class NwClearCommand : public ClearCommand
    73: class NwExcludeCommand : public ExcludeCommand
    99: class NwIncludeCommand : public IncludeCommand
    118: class NwQueryCommand : public QueryCommand
    133: class NwStatusCommand : public StatusCommand
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    66:    static bool Registered;
  W094 Function could be free
    62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwTrace.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/NwTracer.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W044 Member could be private
    56:    bool PeersEmpty() const;
    60:    bool PortsEmpty() const;
  W112 Override of Base.Display not found
    42: class NwTracer : public Permanent
  W113 Override of Object.Patch not found
    42: class NwTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.h
  W020 Using statement in header
    29: using namespace NodeBase;
  W062 Base class constructor is public
    42:    SysIpL2Addr();
    46:    explicit SysIpL2Addr(ipv4addr_t v4Addr);
    51:    explicit SysIpL2Addr(const std::string& text);
    55:    SysIpL2Addr(const SysIpL2Addr& that);
  W077 Virtual function is public
    79:    virtual std::string to_str() const;
  W094 Function could be free
    67:    static SysIpL2Addr LoopbackAddr();
    83:    static bool HostName(std::string& name);
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL2Addr.win.cpp
  W022 Add using statement
    1: namespace NodeBase
  W058 Default constructor invoked: POD members not initialized
    52:    in_addr result;
  W108 Function does not invoke Debug::ft
    110: SysIpL2Addr SysIpL2Addr::LoopbackAddr()
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    110:    bool operator!=(const SysIpL3Addr& that) const;
  W044 Member could be private
    106:    bool operator==(const SysIpL3Addr& that) const;
  W062 Base class constructor is public
    40:    SysIpL3Addr();
    45:    SysIpL3Addr(ipv4addr_t v4Addr, ipport_t port,
    51:    SysIpL3Addr(const SysIpL2Addr& l2Addr, ipport_t port,
    59:    SysIpL3Addr
    64:    SysIpL3Addr(const SysIpL3Addr& that);
  W084 Adjacent arguments have the same type
    59:    SysIpL3Addr
C:/Users/gregu/Documents/rsc/rsc/nw/SysIpL3Addr.win.cpp
  W004 C-style cast
    58:          auto netaddr = (sockaddr_in*) info->ai_addr;
    114:       ((sockaddr*) &addr, sizeof(addr), buff1, 64, buff2, 64, 0) == 0)
  W022 Add using statement
    1: namespace NodeBase
  W058 Default constructor invoked: POD members not initialized
    48:    addrinfo hints;
    105:    sockaddr_in addr;
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    149: bool SysSocket::SetTracing(bool tracing)
    157: bool SysSocket::Trace(TraceStatus status)
    168: bool SysSocket::TraceEnabled()
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.h
  W020 Using statement in header
    33: using namespace NodeBase;
  W044 Member could be private
    94:    bool IsValid() const;
    192:    void Close();
  W045 Member could be protected
    99:    bool IsOpen() const;
  W067 Base class virtual destructor is not public
    178:    virtual ~SysSocket();
  W077 Virtual function is public
    78:    virtual IpProtocol Protocol() const { return IpAny; }
    82:    virtual void Acquire() { }
    86:    virtual void Release() { }
    116:    virtual SendRc SendBuff(IpBuffer& buff) = 0;
  W084 Adjacent arguments have the same type
    167:    SysSocket(ipport_t port, IpProtocol proto,
  W094 Function could be free
    130:    static bool StartLayer();
    134:    static void StopLayer();
C:/Users/gregu/Documents/rsc/rsc/nw/SysSocket.win.cpp
  W004 C-style cast
    87:    if(bind(socket_, (sockaddr*) &addr, sizeof(addr)) == SOCKET_ERROR)
    206:       (const char*) &rxSize, sizeof(rxSize)) == SOCKET_ERROR)
    213:       (char*) &max, &maxsize) == SOCKET_ERROR)
    223:       (const char*) &txSize, sizeof(txSize)) == SOCKET_ERROR)
    230:       (char*) &max, &maxsize) == SOCKET_ERROR)
  W015 #include not sorted in standard order
    26: #include <windows.h>
  W022 Add using statement
    1: namespace NodeBase
  W058 Default constructor invoked: POD members not initialized
    52:    sockaddr_in addr;
    261:    WSAData wsaData;
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    129:    bool LocAddr(SysIpL3Addr& locAddr);
  W044 Member could be private
    84:    word Connect(const SysIpL3Addr& remAddr);
    124:    word Send(const byte_t* data, size_t len);
  W084 Adjacent arguments have the same type
    69:    SysTcpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
    101:    static word Poll(SysTcpSocket* sockets[], size_t count, msecs_t msecs);
C:/Users/gregu/Documents/rsc/rsc/nw/SysTcpSocket.win.cpp
  W004 C-style cast
    43:    auto socket = accept(Socket(), (sockaddr*) &peer, &peersize);
    71:    if(connect(Socket(), (sockaddr*) &peer, sizeof(peer)) == SOCKET_ERROR)
    116:    if(getsockname(Socket(), (sockaddr*) &host, &hostsize) != 0)
    224:    if(getpeername(Socket(), (sockaddr*) &peer, &peersize) == SOCKET_ERROR)
  W006 reinterpret_cast
    206:    auto rcvd = recv(Socket(), reinterpret_cast< char* >(buff), max, 0);
    251:    auto sent = send(Socket(), reinterpret_cast< const char* >(data), len, 0);
  W022 Add using statement
    1: namespace NodeBase
  W058 Default constructor invoked: POD members not initialized
    40:    sockaddr_in peer;
    65:    sockaddr_in peer;
    113:    sockaddr_in host;
    221:    sockaddr_in peer;
  W059 Default constructor invoked
    147:    auto list = std::unique_ptr< pollfd[] >(new pollfd[count]);
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    68:    word SendTo(const byte_t* data, size_t len, const SysIpL3Addr& remAddr);
  W084 Adjacent arguments have the same type
    51:    SysUdpSocket(ipport_t port, size_t rxSize, size_t txSize, AllocRc& rc);
  W112 Override of Base.Display not found
    36: class SysUdpSocket : public SysSocket
C:/Users/gregu/Documents/rsc/rsc/nw/SysUdpSocket.win.cpp
  W004 C-style cast
    47:          (char*) &max, &maxsize) == SOCKET_ERROR)
    76:       max, 0, (sockaddr*) &peer, &peersize);
    114:       len, 0, (sockaddr*) &peer, peersize);
  W006 reinterpret_cast
    75:    auto rcvd = recvfrom(Socket(), reinterpret_cast< char* >(buff),
    113:    auto sent = sendto(Socket(), reinterpret_cast< const char* >(data),
  W022 Add using statement
    1: namespace NodeBase
  W058 Default constructor invoked: POD members not initialized
    66:    sockaddr_in peer;
    98:    sockaddr_in peer;
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    156:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    175:    auto svc = static_cast< TcpIpService* >(ipPort_->GetService());
    266:    auto registrant = static_cast< SysTcpSocket* >(ipPort_->GetSocket());
    412:    auto sock = static_cast< SysTcpSocket* >(socket);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    428: SysTcpSocket* TcpIoThread::Listener() const
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIoThread.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    71:    virtual void Unblock() override;
  W084 Adjacent arguments have the same type
    49:    TcpIoThread(Faction faction, ipport_t port,
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpPort.cpp
  W007 Cast down the inheritance hierarchy
    105:    auto svc = static_cast< TcpIpService* >(GetService());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/TcpIpService.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    70:    virtual IpPort* CreatePort(ipport_t pid) override;
  W077 Virtual function is public
    39:    virtual size_t MaxConns() const = 0;
    44:    virtual size_t MaxBacklog() const = 0;
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.cpp
  W007 Cast down the inheritance hierarchy
    106:    auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
    240:       auto socket = static_cast< SysUdpSocket* >(ipPort_->GetSocket());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIoThread.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    55:    virtual void Unblock() override;
  W084 Adjacent arguments have the same type
    43:    UdpIoThread(Faction faction, ipport_t port, size_t rxSize, size_t txSize);
  W092 Function could be const
    75:    void ReleaseResources();
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpPort.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/nw/UdpIpService.h
  W044 Member could be private
    54:    virtual IpPort* CreatePort(ipport_t pid) override;
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/on/OnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    97: CliText* PotsBicFeature::Attrs() const { return new PotsBicAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBicFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    82: CliText* PotsBocFeature::Attrs() const { return new PotsBocAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsBocFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    79: CliText* PotsCfbFeature::Attrs() const { return new PotsCfbAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfbFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    97: CliText* PotsCfnFeature::Attrs() const { return new PotsCfnAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfnFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    79: CliText* PotsCfuFeature::Attrs() const { return new PotsCfuAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCfuFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    513: void PotsCircuit::Trace(const SignalEntry& entry)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCircuit.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    40: using namespace MediaBase;
    41: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W033 Unused function
    91:    bool IsRinging() const { return ringing_; }
    95:    bool CanFlash() const { return flash_; }
    100:    Cause::Ind GetCause() const { return cause_; }
  W044 Member could be private
    132:    void ResetCircuit();
  W056 Data could be const pointer
    220:    PotsProfile* profile_;
  W058 Default constructor invoked: POD members not initialized
    232:    SignalEntry trace_[TraceSize];
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    76: CliText* PotsCwtFeature::Attrs() const { return new PotsCwtAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCwtFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    69: CliText* PotsCxfFeature::Attrs() const { return new PotsCxfAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsCxfFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.cpp
  W006 reinterpret_cast
    88:    auto fake = reinterpret_cast< const PotsFeature* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeature.h
  W005 Functional cast
    63:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    38: using namespace NodeBase;
  W026 Unused argument
    87/1:       (PotsProfile& profile, CliThread& cli) const = 0;  //d
  W044 Member could be private
    63:    Id Fid() const { return Id(fid_.GetId()); }
    71:    const char* FullName() const { return name_; }
    75:    bool CanBeDeactivated() const { return deactivation_; }
    91:    static ptrdiff_t CellDiff();
  W056 Data could be const pointer
    133:    const char* abbr_;
    137:    const char* name_;
  W067 Base class virtual destructor is not public
    108:    virtual ~PotsFeature();
  W077 Virtual function is public
    86:    virtual PotsFeatureProfile* Subscribe
  W084 Adjacent arguments have the same type
    103:    PotsFeature(PotsFeature::Id fid, bool deactivation,
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.cpp
  W006 reinterpret_cast
    97:    auto fake = reinterpret_cast< const PotsFeatureProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureProfile.h
  W020 Using statement in header
    31: using namespace NodeBase;
  W026 Unused argument
    55/1:    virtual bool Deactivate(PotsProfile& profile);
    89/1:    virtual bool Unsubscribe(PotsProfile& profile);
  W044 Member could be private
    59:    PotsFeature::Id Fid() const { return fid_; }
    63:    static ptrdiff_t LinkDiff();
  W055 Data could be const
    93:    PotsFeature::Id fid_;
    97:    Q1Link link_;
  W067 Base class virtual destructor is not public
    76:    virtual ~PotsFeatureProfile();
  W077 Virtual function is public
    50:    virtual bool Activate(PotsProfile& profile, CliThread& cli);  //d
    55:    virtual bool Deactivate(PotsProfile& profile);
  W079 Virtual function has no overrides
    89:    virtual bool Unsubscribe(PotsProfile& profile);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    148: PotsFeature* PotsFeatureRegistry::Feature(PotsFeature::Id fid) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatureRegistry.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W092 Function could be const
    57:    void Audit();
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsFeatures.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    84: CliText* PotsHtlFeature::Attrs() const { return new PotsHtlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsHtlFeature.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
  W055 Data could be const
    58:    Address::DN dn_;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.cpp
  W007 Cast down the inheritance hierarchy
    443:       auto mep = static_cast< MediaEndpt* >(obj);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsIncrement.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionTools;
  W022 Add using statement
    1: namespace NodeBase
  W062 Base class constructor is public
    40:    PbSizesCommand() { }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsMessages.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W061 Default assignment operator invoked
    147:       addr = GlobalAddress(peer, PotsCallIpPort, PotsCallFactoryId);
    202:       addr = GlobalAddress(peer, PotsShelfIpPort, PotsShelfFactoryId);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.cpp
  W006 reinterpret_cast
    87:    auto fake = reinterpret_cast< const PotsProfile* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W060 Default copy constructor invoked
    54:    objAddr_(NilLocalAddress)
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfile.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    40: using namespace NodeBase;
    41: using namespace CallBase;
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    113: PotsProfile* PotsProfileRegistry::Profile(Address::DN dn) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProfileRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
    36: using namespace CallBase;
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.cpp
  W006 reinterpret_cast
    578:    reinterpret_cast< const PotsFacilityInfo* >(bytes)->Display(stream, prefix);
    747:    reinterpret_cast< const PotsHeaderInfo* >(bytes)->Display(stream, prefix);
    868:    reinterpret_cast< const PotsRingInfo* >(bytes)->Display(stream, prefix);
    956:    reinterpret_cast< const PotsScanInfo* >(bytes)->Display(stream, prefix);
  W007 Cast down the inheritance hierarchy
    593:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    654:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    761:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    787:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    881:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    969:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W101 Line contains adjacent spaces
    590:    id_t             index;
    591:    word             sid, ind;
    593:    auto&            pmsg = static_cast< PotsMessage& >(msg);
    653:    TestRc            rc;
    654:    auto&             pmsg = static_cast< const PotsMessage& >(msg);
    656:    id_t              index;
    657:    word              sid, ind;
    759:    word           port;
    761:    auto&          pmsg = static_cast< PotsMessage& >(msg);
    786:    TestRc          rc;
    787:    auto&           pmsg = static_cast< const PotsMessage& >(msg);
    788:    word            port;
    880:    TestRc        rc;
    881:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    883:    bool          ring = false;
    884:    auto          exists = false;
    968:    TestRc        rc;
    969:    auto&         pmsg = static_cast< const PotsMessage& >(msg);
    971:    string        scan;
    972:    auto          digits = false;
    973:    auto          flash = false;
    974:    auto          exists = false;
  W108 Function does not invoke Debug::ft
    356: CliText* PotsAlertingSignal::CreateText() const
    370: CliText* PotsDigitsSignal::CreateText() const
    384: CliText* PotsFacilitySignal::CreateText() const
    398: CliText* PotsFlashSignal::CreateText() const
    412: CliText* PotsLockoutSignal::CreateText() const
    426: CliText* PotsOffhookSignal::CreateText() const
    440: CliText* PotsOnhookSignal::CreateText() const
    454: CliText* PotsProgressSignal::CreateText() const
    468: CliText* PotsReleaseSignal::CreateText() const
    482: CliText* PotsSuperviseSignal::CreateText() const
    525: CliParm* PotsDigitsParameter::CreateCliParm(Usage use) const
    567: CliParm* PotsFacilityParameter::CreateCliParm(Usage use) const
    737: CliParm* PotsHeaderParameter::CreateCliParm(Usage use) const
    858: CliParm* PotsRingParameter::CreateCliParm(Usage use) const
    946: CliParm* PotsScanParameter::CreateCliParm(Usage use) const
C:/Users/gregu/Documents/rsc/rsc/pb/PotsProtocol.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W028 Unused data
    103:    static const Id LastId    = NextId + 9;  // range constant
    131:    static const Id LastId   = NextId + 7;  // range constant
    223:    static const Ind MaxInd         = UINT8_MAX;
  W033 Unused function
    290:    MediaInfo* AddMedia(const MediaInfo& media);
    444:    virtual void InjectFinalMsg() override;
  W045 Member could be protected
    266:    explicit PotsMessage(SbIpBufferPtr& buff);
  W062 Base class constructor is public
    266:    explicit PotsMessage(SbIpBufferPtr& buff);
    270:    PotsMessage(ProtocolSM* psm, MsgSize size);
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    74: CliText* PotsSusFeature::Attrs() const { return new PotsSusAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsSusFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    85: CliText* PotsTwcFeature::Attrs() const { return new PotsTwcAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsTwcFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    96: CliText* PotsWmlFeature::Attrs() const { return new PotsWmlAttrs; }
C:/Users/gregu/Documents/rsc/rsc/pb/PotsWmlFeature.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/rn/RnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/rsc/main.cpp
  W015 #include not sorted in standard order
    96: #include "AnModule.h"
  W033 Unused function
    134: main_t main(int argc, char* argv[])
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeMsgEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSapEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    91: void AnalyzeSapEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/AnalyzeSnpEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    87: void AnalyzeSnpEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Context.cpp
  W006 reinterpret_cast
    573:    auto fake = reinterpret_cast< const Context* >(&local);
    886:             auto toi = reinterpret_cast< TimeoutInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    763:                inv = static_cast< InvokerThread* >(Thread::RunningThread());
    882:             (m)->FindParm(Parameter::Timeout);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    329: void Context::Dump() const
    953: bool Context::TraceOn()
    963: bool Context::TraceOn(TransTrace*& trans)
  W109 Function does not invoke Debug::ft as first statement
    695:    Debug::ft(Context_ProcessWork);
C:/Users/gregu/Documents/rsc/rsc/sb/Context.h
  W020 Using statement in header
    43: using namespace NodeBase;
  W026 Unused argument
    122/1:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
  W033 Unused function
    117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
    127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
    272:    size_t MsgCount(bool priority, bool standard) const;
  W039 Member hides inherited name
    167:    static ptrdiff_t LinkDiff();
  W055 Data could be const
    312:    Q2Link link_;
    336:    Faction faction_;
  W058 Default constructor invoked: POD members not initialized
    360:    MessageEntry trace_[TraceSize];
  W067 Base class virtual destructor is not public
    189:    virtual ~Context();
  W077 Virtual function is public
    101:    virtual ContextType Type() const = 0;
    105:    virtual RootServiceSM* RootSsm() const { return nullptr; }
    109:    virtual ProtocolSM* FirstPsm() const { return nullptr; }
    113:    virtual void NextPsm(ProtocolSM*& psm) const { psm = nullptr; }
    117:    virtual void NextPort(MsgPort*& port) const { port = nullptr; }
  W084 Adjacent arguments have the same type
    133:    void TraceMsg(ProtocolId prid, SignalId sid, MsgDirection dir);
  W090 Argument could be const
    291/1:    bool ProcessMsg(Q1Way< Message >& msgq, const InvokerThread* inv);
  W092 Function could be const
    159:    bool StopTimer(const Base& owner, TimerId tid);
  W094 Function could be free
    122:    static void Kill(fn_name_arg func, debug64_t errval, debug32_t offset);
    127:    static void Dump(fn_name_arg func, debug64_t errval, debug32_t offset);
C:/Users/gregu/Documents/rsc/rsc/sb/Event.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    138: void Event::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Event.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W044 Member could be private
    114:    virtual bool SaveContext();
    125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    131:    virtual void FreeContext(bool freeMsg);
    159:    virtual bool Save();
    163:    virtual Event* Restore(EventHandler::Rc& rc);
    167:    virtual void Free();
  W055 Data could be const
    214:    Id eid_;
  W077 Virtual function is public
    114:    virtual bool SaveContext();
    125:    virtual Event* RestoreContext(EventHandler::Rc& rc);
    131:    virtual void FreeContext(bool freeMsg);
  W094 Function could be free
    56:    static bool IsValidId(Id eid)
    72:    static bool AppCanHandle(Id eid)
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/EventHandler.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W067 Base class virtual destructor is not public
    126:    virtual ~EventHandler();
  W077 Virtual function is public
    117:    virtual Rc ProcessEvent
  W094 Function could be free
    86:    static bool AppCanRegister(Id ehid)
    94:    static bool AppCanUse(Id ehid)
  W113 Override of Object.Patch not found
    50: class EventHandler : public Protected
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.cpp
  W006 reinterpret_cast
    202:    auto fake = reinterpret_cast< const Factory* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W101 Line contains adjacent spaces
    49:    CounterPtr       icMsgsIntra_;
    50:    CounterPtr       icMsgsInter_;
    52:    CounterPtr       ogMsgsIntra_;
    53:    CounterPtr       ogMsgsInter_;
    55:    CounterPtr       contexts_;
    56:    CounterPtr       msgsDeleted_;
    57:    CounterPtr       ctxsDeleted_;
  W108 Function does not invoke Debug::ft
    219: size_t Factory::DiscardedContextCount() const
    226: size_t Factory::DiscardedMessageCount() const
  W112 Override of Base.Display not found
    43: class FactoryStats : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/Factory.h
  W005 Functional cast
    87:    Id Fid() const { return Id(fid_.GetId()); }
  W020 Using statement in header
    45: using namespace NodeBase;
  W026 Unused argument
    127/1:    virtual Message* AllocOgMsg(SignalId sid) const;
  W033 Unused function
    219:    void SetFaction(Faction faction) { faction_ = faction; }
  W055 Data could be const
    267:    ProtocolId prid_;
  W056 Data could be const pointer
    271:    const char* name_;
  W067 Base class virtual destructor is not public
    203:    virtual ~Factory();
  W077 Virtual function is public
    121:    virtual CliText* CreateText() const;
    127:    virtual Message* AllocOgMsg(SignalId sid) const;
    134:    virtual bool InjectMsg(Message& msg) const;
    140:    virtual Message* ReallocOgMsg(SbIpBufferPtr& buff) const;
    150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
    172:    virtual void DisplayStats(std::ostream& stream) const;
  W079 Virtual function has no overrides
    172:    virtual void DisplayStats(std::ostream& stream) const;
  W084 Adjacent arguments have the same type
    157:    void RecordMsg(bool incoming, bool inter, size_t size) const;
  W090 Argument could be const
    150/1:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
  W092 Function could be const
    150:    virtual bool ScreenIcMsgs(Q1Way< Message >& msgq);
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    151: Factory* FactoryRegistry::GetFactory(FactoryId fid) const
C:/Users/gregu/Documents/rsc/rsc/sb/FactoryRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ForceTransitionEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W060 Default copy constructor invoked
    41: GlobalAddress::GlobalAddress() : sbAddr_(NilLocalAddress)
    52:    sbAddr_(NilLocalAddress)
    66:    sbAddr_(NilLocalAddress)
    80:    sbAddr_(sbAddr)
  W061 Default assignment operator invoked
    35: const GlobalAddress GlobalAddress::NilAddr = GlobalAddress();
C:/Users/gregu/Documents/rsc/rsc/sb/GlobalAddress.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    53:    GlobalAddress(const SysIpL3Addr& l3Addr, FactoryId fid);
    81:    bool operator!=(const GlobalAddress& that) const;
  W084 Adjacent arguments have the same type
    57:    GlobalAddress(const SysIpL2Addr& l2Addr, ipport_t port, FactoryId fid);
C:/Users/gregu/Documents/rsc/rsc/sb/InitiationReqEvent.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    89: void InitiationReqEvent::Capture
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.cpp
  W006 reinterpret_cast
    210:    auto fake = reinterpret_cast< const Initiator* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Initiator.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W055 Data could be const
    120:    ServiceId sid_;
    124:    ServiceId aid_;
    128:    TriggerId tid_;
    136:    Q1Link link_;
  W067 Base class virtual destructor is not public
    93:    virtual ~Initiator();
  W084 Adjacent arguments have the same type
    88:    Initiator(ServiceId sid, ServiceId aid, TriggerId tid, Priority prio);
  W090 Argument could be const
    107/2:       (const ServiceSM& parentSsm, Event& currEvent, Event*& nextEvent) const;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.cpp
  W006 reinterpret_cast
    225:    auto fake = reinterpret_cast< const InvokerPool* >(&local);
  W007 Cast down the inheritance hierarchy
    181:    cfgInvokers_.reset(static_cast< CfgIntParm* >(reg->FindParm(parmKey)));
    533:       auto inv = static_cast< InvokerThread* >(Thread::RunningThread());
  W022 Add using statement
    1: namespace NodeBase
  W101 Line contains adjacent spaces
    64:    CounterPtr       requeues_;
    65:    CounterPtr       trojans_;
    66:    CounterPtr       lockouts_;
  W108 Function does not invoke Debug::ft
    698: void InvokerPool::RecordDelay(Message::Priority prio, msecs_t delay) const
    802: size_t InvokerPool::WorkQCurrLength(Message::Priority prio) const
    810: msecs_t InvokerPool::WorkQMaxDelay(Message::Priority prio) const
    818: size_t InvokerPool::WorkQMaxLength(Message::Priority prio) const
  W112 Override of Base.Display not found
    57: class InvokerPoolStats : public Dynamic
    71: class InvokerWork : public Dynamic
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPool.h
  W005 Functional cast
    70:    Faction GetFaction() const { return Faction(faction_.GetId()); }
  W020 Using statement in header
    44: using namespace NodeBase;
  W044 Member could be private
    92:    static ptrdiff_t CellDiff();
  W067 Base class virtual destructor is not public
    117:    virtual ~InvokerPool();
  W077 Virtual function is public
    88:    virtual void DisplayStats(std::ostream& stream) const;
  W079 Virtual function has no overrides
    88:    virtual void DisplayStats(std::ostream& stream) const;
  W092 Function could be const
    148:    void KickThread();
    152:    Context* FindWork();
    176:    void Requeue(Context& ctx);
    184:    void ScheduledOut();
  W094 Function could be free
    188:    static bool GenerateLog(Factory::Rc rc);
    200:    static TransTrace* TraceRxNet(Message& msg, const Factory& fac);
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.cpp
  W005 Functional cast
    92:       auto p = reg->Pool(Faction(id));
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    178: InvokerPool* InvokerPoolRegistry::Pool(Faction faction) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerPoolRegistry.h
  W020 Using statement in header
    34: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.cpp
  W006 reinterpret_cast
    124:    auto fake = reinterpret_cast< const InvokerThread* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    113: TraceStatus InvokerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/InvokerThread.h
  W020 Using statement in header
    40: using namespace NodeBase;
  W044 Member could be private
    63:    static word RtcYieldPercent() { return RtcYieldPercent_; }
    71:    static ptrdiff_t CellDiff2();
  W055 Data could be const
    134:    RegCell iid_;
    160:    static word RtcYieldPercent_;
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/LocalAddress.h
  W020 Using statement in header
    29: using namespace NodeBase;
  W033 Unused function
    53:    bool operator!=(const LocalAddress& that) const;
C:/Users/gregu/Documents/rsc/rsc/sb/Message.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    244: MsgDirection Message::Dir() const
    331: ProtocolId Message::GetProtocol() const
    366: SignalId Message::GetSignal() const
    422: MsgHeader* Message::Header() const
C:/Users/gregu/Documents/rsc/rsc/sb/Message.h
  W020 Using statement in header
    46: using namespace NetworkBase;
    47: using namespace NodeBase;
  W029 Unused enum
    89:    enum Location
  W030 Unused enumerator
    91:       NotQueued,     // being built by a factory
    92:       ContextQ,      // has arrived at a context
    93:       PsmIncomingQ,  // has arrived at a PSM
    94:       PsmOutgoingQ,  // has been sent by a PSM
    95:       PsmPendingQ    // being built by a PSM
    105:       IllegalSignal,   // illegal signal found              0000  sid
    106:       IllegalParm,     // illegal parameter found          index  pid
    107:       IncompleteParm,  // parameter too short              index  pid
    108:       MissingParm,     // mandatory parameter missing       0000  pid
    109:       Overflow,        // last parameter extends past end  index  pid
    110:       Trampled         // last parameter trampled fence    index  pid
  W033 Unused function
    198:    Message* FindSignal(SignalId sid) const;
  W044 Member could be private
    350:    virtual void Handled(bool retain);
    354:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
  W045 Member could be protected
    149:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    258:    MsgDirection Dir() const;
  W077 Virtual function is public
    149:    virtual InspectRc InspectMsg(debug32_t& errval) const;
    169:    virtual void Save();
    174:    virtual void Unsave();
    182:    virtual bool Retrieve(ProtocolSM* psm);
    189:    virtual bool Relay(ProtocolSM& ogPsm);
    193:    virtual bool SendToSelf();
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    279:    virtual bool Send(Route route);
    283:    virtual bool Restore();
  W079 Virtual function has no overrides
    169:    virtual void Save();
    174:    virtual void Unsave();
    182:    virtual bool Retrieve(ProtocolSM* psm);
    189:    virtual bool Relay(ProtocolSM& ogPsm);
    193:    virtual bool SendToSelf();
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    283:    virtual bool Restore();
    337:    virtual void Refresh();
    350:    virtual void Handled(bool retain);
    354:    virtual bool SendFailure(debug64_t errval, debug32_t offset);
    362:    virtual void ClearContext() const;
  W092 Function could be const
    127:    void SetSignal(SignalId sid);
    131:    void SetJoin(bool join);
    242:    void SetProtocol(ProtocolId prid);
    246:    void SetPriority(Priority prio);
    250:    virtual void SetReceiver(const GlobalAddress& receiver);
    254:    virtual void SetSender(const GlobalAddress& sender);
    379:    void SetRxAddr(const LocalAddress& rxaddr);
  W094 Function could be free
    291:    static const char* strPriority(Priority prio);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.cpp
  W007 Cast down the inheritance hierarchy
    82:    static_cast< MsgFactory* >(fac)->ProcessIcMsg(msg);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgContext.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/MsgFactory.h
  W044 Member could be private
    58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
  W094 Function could be free
    58:    static void CaptureMsg(Context& ctx, const Message& msg, TransTrace* tt);
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.cpp
  W022 Add using statement
    1: namespace NodeBase
  W060 Default copy constructor invoked
    43:    txAddr(NilLocalAddress),
    44:    rxAddr(NilLocalAddress),
C:/Users/gregu/Documents/rsc/rsc/sb/MsgHeader.h
  W020 Using statement in header
    34: using namespace NetworkBase;
    35: using namespace NodeBase;
  W044 Member could be private
    54:    uint8_t           spare    : 6;   // reserved for future use
  W101 Line contains adjacent spaces
    45:    LocalAddress      txAddr;         // source address
    46:    LocalAddress      rxAddr;         // destination address
    48:    bool              initial  : 1;   // true for initial message
    49:    bool              final    : 1;   // true for final message
    50:    bool              join     : 1;   // true to create PSM and join root SSM
    51:    bool              self     : 1;   // true for message to self
    52:    bool              injected : 1;   // true if sent by InjectCommand
    53:    bool              kill     : 1;   // true to kill context on arrival
    54:    uint8_t           spare    : 6;   // reserved for future use
    55:    Message::Route    route    : 2;   // the route that the message took
    56:    ProtocolId        protocol : 16;  // message's protocol
    57:    SignalId          signal   : 16;  // message's signal
    58:    MsgSize           length   : 16;  // total bytes in all parameters
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.cpp
  W007 Cast down the inheritance hierarchy
    80:    locAddr_.sbAddr_.fid = static_cast< ProtocolSM& >(upper).GetFactory();
    154:    return static_cast< PsmFactory* >(fac)->AllocIcPsm(msg, *this);
    220:    auto port = static_cast< MsgPort* >(pool->BidToObj(locAddr.bid));
    277:       static_cast< PsmFactory* >(fac)->PortAllocated(*this, msg);
  W008 Cast removes const qualification
    356:    return const_cast< MsgPort* >(this);
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W060 Default copy constructor invoked
    56:    locAddr_(msg.GetReceiver()),
    57:    remAddr_(msg.GetSender()),
    71:    locAddr_(GlobalAddress::NilAddr),
    72:    remAddr_(GlobalAddress::NilAddr),
  W061 Default assignment operator invoked
    204:    peerPort->remAddr_ = peerPrevRemAddr;
    205:    remAddr_ = GlobalAddress::NilAddr;
    317:    peerPrevRemAddr = peerPort->remAddr_;
    318:    locAddr_ = GlobalAddress(peerPort->locAddr_, locAddr_.sbAddr_);
    319:    remAddr_ = peerPort->locAddr_;
    320:    peerPort->remAddr_ = locAddr_;
    377:       remAddr_ = msg.GetSender();
    382:          locAddr_ = GlobalAddress(msg.RxIpAddr(), locAddr_.sbAddr_);
    421:       locAddr_ = GlobalAddress(txaddr, locAddr_.sbAddr_);
    422:       remAddr_ = msg.GetReceiver();
    481:       peer->remAddr_ = locAddr_;
C:/Users/gregu/Documents/rsc/rsc/sb/MsgPort.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W028 Unused data
    142:    static const PooledObjectId MaxId = 0x40000;  // 2^18 = 256K
  W094 Function could be free
    185:    static MsgPort* FindPeer(const GlobalAddress& remAddr);
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.cpp
  W006 reinterpret_cast
    102:    auto fake = reinterpret_cast< const Parameter* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    194: Parameter::Usage Parameter::GetUsage(SignalId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Parameter.h
  W005 Functional cast
    79:    Id Pid() const { return Id(pid_.GetId()); }
  W020 Using statement in header
    40: using namespace NodeBase;
  W030 Unused enumerator
    115:       StreamContainsIllegalParm,
  W033 Unused function
    83:    ProtocolId Prid() const { return prid_; }
  W055 Data could be const
    187:    ProtocolId prid_;
  W067 Base class virtual destructor is not public
    173:    virtual ~Parameter();
  W077 Virtual function is public
    93:    virtual void DisplayMsg(std::ostream& stream,
    102:    virtual CliParm* CreateCliParm(Usage use) const;
    131:    virtual TestRc InjectMsg
    144:    virtual TestRc VerifyMsg
  W094 Function could be free
    149:    static const char* ExplainRc(TestRc rc);
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const Protocol* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    135: Parameter* Protocol::FirstParm() const
    148: Signal* Protocol::FirstSignal() const
    161: Parameter* Protocol::GetParameter(ParameterId pid) const
    173: Signal* Protocol::GetSignal(SignalId sid) const
    185: void Protocol::NextParm(Parameter*& parm) const
    198: void Protocol::NextSignal(Signal*& sig) const
C:/Users/gregu/Documents/rsc/rsc/sb/Protocol.h
  W005 Functional cast
    71:    Id Prid() const { return Id(prid_.GetId()); }
  W020 Using statement in header
    40: using namespace NodeBase;
  W033 Unused function
    80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
  W044 Member could be private
    71:    Id Prid() const { return Id(prid_.GetId()); }
  W067 Base class virtual destructor is not public
    136:    virtual ~Protocol();
  W077 Virtual function is public
    80:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const = 0;
    112:    virtual void DisplayMsg(std::ostream& stream,
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolLayer.h
  W020 Using statement in header
    34: using namespace NetworkBase;
    35: using namespace NodeBase;
  W026 Unused argument
    174/1:    virtual ProtocolLayer* AllocLower(const Message* msg);
  W033 Unused function
    75:    bool IsLowermost() const { return lower_ == nullptr; }
  W044 Member could be private
    119:    virtual ProtocolLayer* JoinPeer
    126:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
  W045 Member could be protected
    71:    bool IsUppermost() const { return upper_ == nullptr; }
    96:    virtual FactoryId GetFactory() const = 0;
  W067 Base class virtual destructor is not public
    150:    virtual ~ProtocolLayer();
  W077 Virtual function is public
    59:    virtual MsgPort* Port() const = 0;
    63:    virtual ProtocolSM* UppermostPsm() const = 0;
    96:    virtual FactoryId GetFactory() const = 0;
    100:    virtual Message::Route Route() const = 0;
    109:    virtual SysSocket* CreateAppSocket();
    119:    virtual ProtocolLayer* JoinPeer
    126:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    79: Protocol* ProtocolRegistry::GetProtocol(ProtocolId prid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolRegistry.h
  W020 Using statement in header
    35: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.cpp
  W007 Cast down the inheritance hierarchy
    434:       auto psm = static_cast< ProtocolSM* >(layer);
  W008 Cast removes const qualification
    698:    if(upper == nullptr) return const_cast< ProtocolSM* >(this);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/ProtocolSM.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W026 Unused argument
    300/1:    virtual void MsgHandled(Message& msg) { }
    306/1:    virtual void RestoreIcMsg(Message& msg) { }
    312/1:    virtual void RefreshMsg(Message& msg) { }
  W030 Unused enumerator
    95:       SignalUnknown,     // signal not recognized
    97:       ParameterUnknown,  // parameter not recognized
    98:       ParameterInvalid,  // parameter not valid for this signal
  W033 Unused function
    136:    Message* FirstSentMsg() const { return sentMsgq_.First(); }
    194:    virtual bool DropPeer(const GlobalAddress& peerPrevRemAddr) override;
    324:    virtual void InjectFinalMsg();
  W044 Member could be private
    67:    typedef uint8_t Priority;
    250:    virtual bool SendMsg(Message& msg) override;
  W045 Member could be protected
    75:    enum IncomingRc
    84:    enum OutgoingRc
    130:    Message* FirstOgMsg() const { return ogMsgq_.First(); }
  W055 Data could be const
    371:    FactoryId fid_;
  W079 Virtual function has no overrides
    240:    virtual void SetState(StateId stid);
    295:    virtual Priority GetPriority() const { return NormalPriority; }
    300:    virtual void MsgHandled(Message& msg) { }
    306:    virtual void RestoreIcMsg(Message& msg) { }
    312:    virtual void RefreshMsg(Message& msg) { }
  W092 Function could be const
    117:    void StopTimer(const Base& owner, TimerId tid);
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/PsmContext.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    84:    virtual void NextPort(MsgPort*& port) const override { portq_.Next(port); }
C:/Users/gregu/Documents/rsc/rsc/sb/PsmFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.cpp
  W007 Cast down the inheritance hierarchy
    48:    ctx_ = static_cast< SsmContext* >(Context::RunningContext());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/RootServiceSM.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W026 Unused argument
    50/1:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
  W077 Virtual function is public
    50:    virtual Event* RaiseProtocolError(ProtocolSM& psm, ProtocolSM::Error err);
C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbCliParms.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/SbEvents.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    91:    StateId CurrState() const { return currState_; }
    104:    Message* SavedMsg() const { return savedMsg_; }
    213:    StateId CurrState() const { return currState_; }
    217:    StateId NextState() const { return nextState_; }
    358:    bool IsInitiation() const { return initiation_; }
    369:    Message* GetMessage() const { return message_; }
C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.cpp
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbExtInputHandler.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.cpp
  W007 Cast down the inheritance hierarchy
    48:    auto pid = ssm.CalcPort(static_cast< const AnalyzeMsgEvent& >(currEvent));
    124:    auto& fte = static_cast< ForceTransitionEvent& >(currEvent);
    138:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbHandlers.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W113 Override of Object.Patch not found
    40: class SbAnalyzeMessage : public EventHandler
    54: class SbAnalyzeSap : public EventHandler
    68: class SbAnalyzeSnp : public EventHandler
    82: class SbForceTransition : public EventHandler
    96: class SbInitiationReq : public EventHandler
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.cpp
  W004 C-style cast
    752:    ((ProtocolSM*) p)->Kill();
  W005 Functional cast
    701:       auto pool = reg->Pool(Faction(sc));
  W007 Cast down the inheritance hierarchy
    819:       auto msg = static_cast< Message* >(obj);
    906:       auto port = static_cast< MsgPort* >(obj);
    1118:       auto psm = static_cast< ProtocolSM* >(obj);
    1350:       auto ssm = static_cast< ServiceSM* >(obj);
    1563:       auto tmr = static_cast< Timer* >(obj);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbIncrement.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W028 Unused data
    57:    static const id_t LastSbIndex    = LastNwIndex + 9;
    86:    static const id_t LastSbIndex   = LastNwIndex + 6;
    115:    static const id_t LastSbIndex   = LastNwIndex + 5;
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.cpp
  W006 reinterpret_cast
    77:    auto header = reinterpret_cast< const MsgHeader* >(source);
  W007 Cast down the inheritance hierarchy
    108:    auto sbbuff = SbIpBufferPtr(static_cast< SbIpBuffer* >(buff.release()));
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbInputHandler.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.cpp
  W007 Cast down the inheritance hierarchy
    59:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressQueueLength")));
    71:       (static_cast< CfgIntParm* >(reg->FindParm("NoIngressMessageCount")));
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbInvokerPools.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W077 Virtual function is public
    42:    virtual bool RejectIngressWork() const override;
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbIpBuffer.h
  W006 reinterpret_cast
    64:       { return reinterpret_cast< MsgHeader* >(HeaderPtr()); }
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace NetworkBase;
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    85:    static void operator delete(void* addr, SbPoolUser user);
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    66:    static bool Registered;
  W094 Function could be free
    62:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.cpp
  W007 Cast down the inheritance hierarchy
    223:       auto port = static_cast< MsgPort* >(obj);
    284:    auto psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
    301:       psm = static_cast< ProtocolSM* >(NextUsed(psmToAudit_));
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    406: void TimerPool::IncrTimeouts() const
C:/Users/gregu/Documents/rsc/rsc/sb/SbPools.h
  W020 Using statement in header
    35: using namespace NodeBase;
  W112 Override of Base.Display not found
    194: class TimerPool : public ObjectPool
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.cpp
  W005 Functional cast
    143:          stream << strClass(reg->GetService(ServiceId(cid_)), false);
    148:          stream << strClass(reg->GetFactory(FactoryId(cid_)), false);
    462:    width -= col_t(label.size());
  W007 Cast down the inheritance hierarchy
    355:          bt = static_cast< BuffTrace* >(rec);
    857:       curr_ = static_cast< const AnalyzeSapEvent& >(sxp).CurrEvent()->Eid();
    860:       curr_ = static_cast< const AnalyzeSnpEvent& >(sxp).CurrEvent()->Eid();
    889:    mod_((static_cast< const InitiationReqEvent& >(sip)).GetModifier())
  W022 Add using statement
    1: namespace NodeBase
  W060 Default copy constructor invoked
    597:    locAddr_(NilLocalAddress),
    598:    remAddr_(NilLocalAddress),
C:/Users/gregu/Documents/rsc/rsc/sb/SbTrace.h
  W020 Using statement in header
    37: using namespace NodeBase;
  W044 Member could be private
    535:    const StateId stid_;
  W052 Data is not private
    492:    ServiceId owner_;
    496:    const EventId eid_;
    531:    const ServiceId sid_;
    535:    const StateId stid_;
    539:    const EventHandler::Rc rc_;
  W062 Base class constructor is public
    468:    EventTrace(Id rid, const Event& evt);
    513:    HandlerTrace(ServiceId sid, const State& state, const Event& evt,
  W084 Adjacent arguments have the same type
    169:    static BuffTrace* NextIcMsg
    484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
  W094 Function could be free
    243:    static std::string OutputId(const std::string& label, id_t id);
    484:    static void DisplayEvent(std::ostream& stream, ServiceId sid, EventId eid);
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbTracer.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W084 Adjacent arguments have the same type
    129:    TraceRc SelectSignal(ProtocolId prid, SignalId sid, TraceStatus status);
    181:       SignalFilter(ProtocolId p, SignalId s, TraceStatus ts);
  W112 Override of Base.Display not found
    115: class SbTracer : public Permanent
C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SbTypes.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/Service.cpp
  W006 reinterpret_cast
    283:    auto fake = reinterpret_cast< const Service* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    371: Trigger* Service::GetTrigger(TriggerId tid) const
C:/Users/gregu/Documents/rsc/rsc/sb/Service.h
  W005 Functional cast
    59:    Id Sid() const { return Id(sid_.GetId()); }
  W020 Using statement in header
    35: using namespace NodeBase;
  W033 Unused function
    125:    bool Disable();
    129:    bool Enable();
  W044 Member could be private
    73:    static bool IsValidPortId(PortId pid)
    115:    bool IsModifiable() const { return modifiable_; }
    119:    bool IsModifier() const { return modifier_; }
  W045 Member could be protected
    63:    typedef ServicePortId PortId;
    81:    virtual const char* PortName(PortId pid) const;
  W067 Base class virtual destructor is not public
    179:    virtual ~Service();
  W077 Virtual function is public
    81:    virtual const char* PortName(PortId pid) const;
    111:    virtual ServiceSM* AllocModifier() const;
  W084 Adjacent arguments have the same type
    174:    explicit Service(Id sid, bool modifiable = false, bool modifier = false);
  W094 Function could be free
    73:    static bool IsValidPortId(PortId pid)
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    79: Service* ServiceRegistry::GetService(ServiceId sid) const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceRegistry.h
  W020 Using statement in header
    30: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.cpp
  W004 C-style cast
    773:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    775:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
  W007 Cast down the inheritance hierarchy
    457:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    461:          modifierSsm = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrSsm();
    462:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    513:             tid = static_cast< AnalyzeSapEvent* >(sapEvent)->GetTrigger();
    519:          currEvent = static_cast< AnalyzeSapEvent* >(sapEvent)->CurrEvent();
    521:             (sapEvent)->CurrInitiator();
    773:             else if(((AnalyzeSapEvent*) nextEvent)->CurrInitiator() != nullptr)
    775:             else if(((AnalyzeSapEvent*) nextEvent)->CurrSsm() != nullptr)
    879:          initEvent = static_cast< InitiationReqEvent* >(nextEvent);
    883:             initEvent->SetSapEvent(static_cast< AnalyzeSapEvent& >(sapEvent));
    946:                (initEvent)->GetModifier();
    986:    auto& initEvent = static_cast< InitiationReqEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    312: Service* ServiceSM::GetService() const
C:/Users/gregu/Documents/rsc/rsc/sb/ServiceSM.h
  W020 Using statement in header
    38: using namespace NodeBase;
  W026 Unused argument
    81/2:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    189/1:       (Event& currEvent, Event*& nextEvent);
    189/2:       (Event& currEvent, Event*& nextEvent);
  W033 Unused function
    134:    bool HasTriggered(TriggerId tid) const;
  W044 Member could be private
    97:    StateId NextState() const { return nextState_; }
  W067 Base class virtual destructor is not public
    169:    virtual ~ServiceSM();
  W077 Virtual function is public
    69:    virtual ServicePortId CalcPort(const AnalyzeMsgEvent& ame) = 0;
    75:    virtual EventHandler::Rc ProcessSap(Event& currEvent, Event*& nextEvent);
    81:    virtual EventHandler::Rc ProcessSnp(Event& currEvent, Event*& nextEvent);
    102:    virtual void SetNextState(StateId stid);
    109:    virtual void PsmDeleted(ProtocolSM& exPsm);
    123:    virtual void SetNextSap(TriggerId sap);
    129:    virtual void SetNextSnp(TriggerId snp);
    141:    virtual void MorphToService(ServiceId sid);
  W079 Virtual function has no overrides
    141:    virtual void MorphToService(ServiceId sid);
  W092 Function could be const
    188:    virtual EventHandler::Rc ProcessInitNack
    238:    EventHandler::Rc ProcessSsmqSap
    249:    void ProcessSsmqSnp(ServiceSM* modifier, Event& snpEvent);
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.cpp
  W006 reinterpret_cast
    77:    auto fake = reinterpret_cast< const Signal* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Signal.h
  W005 Functional cast
    75:    Id Sid() const { return Id(sid_.GetId()); }
  W020 Using statement in header
    36: using namespace NodeBase;
  W033 Unused function
    79:    ProtocolId Prid() const { return prid_; }
  W055 Data could be const
    118:    ProtocolId prid_;
  W067 Base class virtual destructor is not public
    109:    virtual ~Signal();
  W077 Virtual function is public
    86:    virtual CliText* CreateText() const;
  W094 Function could be free
    60:    static bool IsValidId(Id sid)
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.cpp
  W007 Cast down the inheritance hierarchy
    97:    return static_cast< SsmFactory* >(fac)->AllocRoot(msg, psm);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SsmContext.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W094 Function could be free
    86:    static RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm);
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/SsmFactory.h
  W026 Unused argument
    47/1:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W077 Virtual function is public
    41:    virtual RootServiceSM* AllocRoot(const Message& msg, ProtocolSM& psm) const;
    47:    virtual ProtocolSM* AllocOgPsm(const Message& msg) const;
  W084 Adjacent arguments have the same type
    55:    SsmFactory(Id fid, ProtocolId prid, const char* name);
C:/Users/gregu/Documents/rsc/rsc/sb/State.cpp
  W006 reinterpret_cast
    190:    auto fake = reinterpret_cast< const State* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    125: bool State::BindEventHandler(EventHandlerId ehid, EventId eid)
    157: bool State::BindMsgAnalyzer(EventHandlerId ehid, ServicePortId pid)
    237: EventHandlerId State::GetHandler(EventId eid) const
    245: EventHandlerId State::MsgAnalyzer(ServicePortId pid) const
C:/Users/gregu/Documents/rsc/rsc/sb/State.h
  W005 Functional cast
    54:    Id Stid() const { return Id(stid_.GetId()); }
  W020 Using statement in header
    31: using namespace NodeBase;
  W033 Unused function
    58:    ServiceId Sid() const { return sid_; }
  W055 Data could be const
    117:    ServiceId sid_;
  W067 Base class virtual destructor is not public
    91:    virtual ~State();
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TextTlvMessage.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W027 Unused class
    37: class TextTlvMessage : public TlvMessage
  W033 Unused function
    58:    explicit TextTlvMessage(SbIpBufferPtr& text);
    62:    TextTlvMessage(ProtocolSM* psm, MsgSize size);
    68:    bool Receive();
  W079 Virtual function has no overrides
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
  W092 Function could be const
    77:    virtual SbIpBufferPtr Parse() = 0;
    84:    virtual SbIpBufferPtr Build() = 0;
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.cpp
  W006 reinterpret_cast
    191:    auto fake = reinterpret_cast< const Timer* >(&local);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Timer.h
  W020 Using statement in header
    32: using namespace NodeBase;
  W039 Member hides inherited name
    54:    static ptrdiff_t LinkDiff();
  W044 Member could be private
    54:    static ptrdiff_t LinkDiff();
  W055 Data could be const
    136:    TimerId tid_;
    148:    Q2Link link_;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.cpp
  W006 reinterpret_cast
    119:    auto toi = reinterpret_cast< const TimeoutInfo* >(bytes);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TimerProtocol.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W113 Override of Object.Patch not found
    88: class TimeoutParameter : public TlvParameter
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.cpp
  W006 reinterpret_cast
    142:          auto psm = reinterpret_cast< const Base* >(t->Psm());
    154:          auto psm = reinterpret_cast< const Base* >(t->Psm());
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TimerRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.cpp
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    60: TraceStatus TimerThread::CalcStatus(bool dynamic) const
C:/Users/gregu/Documents/rsc/rsc/sb/TimerThread.h
  W020 Using statement in header
    28: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvIntParameter.h
  W020 Using statement in header
    36: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.cpp
  W004 C-style cast
    176:    auto pptr = (TlvParmPtr) (layout->bytes + layout->header.length);
    285:    return (Fence*) fence;
    443:    pit.pptr = (TlvParmPtr) &pit.mptr->bytes[nextIndex];
  W006 reinterpret_cast
    66:    auto encap = reinterpret_cast< const TlvMsgLayout* >(parm.bytes);
    511:    auto encap = reinterpret_cast< TlvMsgLayout* >(pptr->bytes);
  W017 Add #include directive
    1: "Debug.h"
  W022 Add using statement
    1: namespace NodeBase
  W058 Default constructor invoked: POD members not initialized
    193:    ParmIterator pit;
    316:    ParmIterator pit;
    336:    ParmIterator pit;
    397:    ParmIterator locpit;
C:/Users/gregu/Documents/rsc/rsc/sb/TlvMessage.h
  W005 Functional cast
    225:       return MsgSize(Memory::Align(size, Log2Align));
  W006 reinterpret_cast
    266:       { return reinterpret_cast< TlvMsgLayout* >(Buffer()->HeaderPtr()); }
  W018 Remove #include directive
    28: #include "Debug.h"
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    167:    size_t AllParms(TlvParmArray ptab, size_t size) const;
    173:    size_t FindParms(ParameterId pid, TlvParmArray ptab, size_t size) const;
    187:    TlvParmPtr AddBytes(const byte_t* src, MsgSize size, ParameterId pid);
    193:    TlvParmPtr CopyParm(const TlvParmLayout& src, ParameterId pid = NIL_ID);
    197:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    249:    byte_t* FindBytes(MsgSize& size, ParameterId pid) const;
    256:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    271:    int ParmOffset(ParmIterator& pit) const;
  W044 Member could be private
    156:    TlvParmPtr FirstParm(ParmIterator& pit) const;
    161:    TlvParmPtr NextParm(ParmIterator& pit) const;
    182:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    243:    typedef uint16_t Fence;
    261:    virtual void AddFence();
    265:    TlvMsgLayout* TlvLayout() const
    276:    Fence* FencePtr() const;
    280:    void CheckFence() const;
  W062 Base class constructor is public
    50:    explicit TlvMessage(SbIpBufferPtr& buff);
    54:    TlvMessage(ProtocolSM* psm, MsgSize size);
    62:    TlvMessage(const TlvParmLayout& parm, ProtocolSM* psm);
    67:    TlvMessage(const Message& msg, ProtocolSM* psm);
  W077 Virtual function is public
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    182:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    197:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    201:    virtual void DeleteParm(TlvParmLayout& parm);
  W079 Virtual function has no overrides
    76:    virtual TlvParmPtr Wrap(const TlvMessage& msg, ParameterId pid);
    182:    virtual TlvParmPtr AddParm(ParameterId pid, MsgSize plen);
    197:    virtual TlvParmPtr ExpandParm(TlvParmLayout& parm, MsgSize plen);
    201:    virtual void DeleteParm(TlvParmLayout& parm);
    256:    virtual bool MatchParm(TlvParmPtr pptr, ParmIterator& pit, bool& last) const;
    261:    virtual void AddFence();
  W084 Adjacent arguments have the same type
    113:    template< typename T > T* CopyType
  W090 Argument could be const
    201/1:    virtual void DeleteParm(TlvParmLayout& parm);
  W094 Function could be free
    223:    static MsgSize Pad(MsgSize size)
    300:    inline static fn_name TlvMessage_FindType()
    302:    inline static fn_name TlvMessage_AddType()
    304:    inline static fn_name TlvMessage_CopyType()
    306:    inline static fn_name TlvMessage_VerifyParm()
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.cpp
  W007 Cast down the inheritance hierarchy
    73:    auto& tmsg = static_cast< const TlvMessage& >(msg);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TlvParameter.h
  W019 Header relies on using statement via #include
    1:  
  W022 Add using statement
    1: namespace NodeBase
  W033 Unused function
    70:    static Id ExtractPid(const TlvParmLayout& parm);
  W046 Typedef of pointer type
    57: typedef TlvParmLayout* TlvParmPtr;  // pointer to a parameter
    58: typedef TlvParmPtr* TlvParmArray;   // array of pointers to parameters
  W094 Function could be free
    70:    static Id ExtractPid(const TlvParmLayout& parm);
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.cpp
  W006 reinterpret_cast
    69:       auto pptr = reinterpret_cast< TlvParmPtr >(&bytes[index]);
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/TlvProtocol.h
  W033 Unused function
    39:    virtual SignalId ExtractSignal(const SbIpBuffer& buff) const override;
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sb/Trigger.h
  W020 Using statement in header
    36: using namespace NodeBase;
  W044 Member could be private
    74:    static bool IsValidId(Id tid)
  W055 Data could be const
    118:    Id tid_;
  W067 Base class virtual destructor is not public
    99:    virtual ~Trigger();
  W094 Function could be free
    74:    static bool IsValidId(Id tid)
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.cpp
  W007 Cast down the inheritance hierarchy
    61:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    64:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    101:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    117:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    119:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    139:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    154:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    155:    auto& ode = static_cast< BcOriginationDeniedEvent& >(currEvent);
    170:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    172:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    178:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    199:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    226:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    256:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    273:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    297:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    312:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    326:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    341:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    356:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    358:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    377:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    398:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    413:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    429:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    446:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    447:    auto& rre = static_cast< BcRemoteReleaseEvent& >(currEvent);
    464:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    478:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    480:    auto cmsg = static_cast< CipMessage* >(npsm->FirstRcvdMsg());
    510:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    525:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    526:    auto& tde = static_cast< BcTerminationDeniedEvent& >(currEvent);
    541:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    542:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    563:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    582:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    597:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    599:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    624:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    653:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    668:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    684:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    700:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    702:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    723:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    738:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    754:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    756:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    773:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    799:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    818:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    833:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    852:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    867:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    883:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    885:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    894:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    921:    auto& ate = static_cast< BcApplyTreatmentEvent& >(currEvent);
    922:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    960:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    976:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    992:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    993:    auto& lre = static_cast< BcLocalReleaseEvent& >(currEvent);
    1008:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    1009:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1043:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    1064:    auto& rue = static_cast< ProxyBcReleaseUserEvent& >(currEvent);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcHandlers.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcService.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcSsm.cpp
  W007 Cast down the inheritance hierarchy
    73:          auto& ppsm = static_cast< PotsCallPsm& >(psm);
    78:          auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    86:       SetNPsm(static_cast< CipPsm& >(psm));
    90:       SetUPsm(static_cast< MediaPsm& >(psm));
    130:    auto pmsg = static_cast< PotsMessage* >(ame.Msg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    385: PotsProfile* PotsBcSsm::Profile() const
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBcStates.cpp
  W022 Add using statement
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBicService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.cpp
  W007 Cast down the inheritance hierarchy
    84:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsBocService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallFactory.cpp
  W007 Cast down the inheritance hierarchy
    112:    auto& pmsg = static_cast< const Pots_UN_Message& >(msg);
    193:       auto pmsg = static_cast< const PotsMessage* >(msg);
    195:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    199:       auto ppsm = static_cast < const PotsCallPsm* >(port.Upper());
    200:       cct = static_cast< PotsCircuit* >(tsw->GetCircuit(ppsm->TsPort()));
    263:    auto& icmsg = static_cast< const PotsMessage& >(msg1);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallHandler.cpp
  W006 reinterpret_cast
    96:    auto pptr = reinterpret_cast< TlvParmPtr >(sbuff->PayloadPtr());
    97:    auto phi = reinterpret_cast< PotsHeaderInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    94:    auto sbuff = static_cast< SbIpBuffer* >(buff.get());
    115:    auto prof = static_cast< PotsCircuit* >(cct)->Profile();
  W022 Add using statement
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallIpService.cpp
  W005 Functional cast
    108: ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    98: Faction PotsCallIpService::GetFaction() const { return PayloadFaction; }
    108: ipport_t PotsCallIpService::Port() const { return ipport_t(port_); }
    112: size_t PotsCallIpService::RxSize() const { return IoThread::MaxRxBuffSize; }
    116: size_t PotsCallIpService::TxSize() const { return IoThread::MaxTxBuffSize; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCallPsm.cpp
  W007 Cast down the inheritance hierarchy
    105:       return static_cast< PotsCallPsm* >(psm);
    177:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    212:    auto& pmsg = static_cast< Pots_NU_Message& >(msg);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.cpp
  W007 Cast down the inheritance hierarchy
    206:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    266:       auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    289:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    305:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCcwService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfbp = static_cast< PotsCfbFeatureProfile* >(prof->FindFeature(CFB));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfbService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfnService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.cpp
  W007 Cast down the inheritance hierarchy
    58:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    60:    auto cfup = static_cast< PotsCfuFeatureProfile* >(prof->FindFeature(CFU));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfuService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.cpp
  W007 Cast down the inheritance hierarchy
    293:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    298:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    300:       auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    321:    auto& cssm = static_cast< PotsCfxSsm& >(ssm);
    322:    auto& pssm = static_cast< PotsBcSsm& >(*cssm.Parent());
    374:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    401:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    483:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    485:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    498:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    520:          cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    534:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFU));
    540:       cfxp = static_cast< DnRouteFeatureProfile* >(prof->FindFeature(CFB));
    546:       cfnp = static_cast< PotsCfnFeatureProfile* >(prof->FindFeature(CFN));
    580:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    583:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    638:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    645:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    660:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    668:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    686:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCfxService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    42: using namespace SessionBase;
    43: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
  W026 Unused argument
    60/1:    explicit PotsCfxSsm(ServiceId sid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwmService.cpp
  W006 reinterpret_cast
    1465:          auto ring = reinterpret_cast< PotsRingInfo* >(pptr->bytes);
  W007 Cast down the inheritance hierarchy
    447:    PotsMuxSsm* Mux() const { return static_cast< PotsMuxSsm* >(Parent()); }
    1166:    auto hldNPsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1203:          auto bcUPsm = static_cast< PotsCallPsm* >(psm);
    1273:    auto msg = static_cast< PotsMessage* >(Context::ContextMsg());
    1300:    auto npsm = static_cast< PotsMuxPsm* >(Context::ContextPsm());
    1314:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    1380:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1424:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    1973:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1974:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    2004:    auto& mux = static_cast< PotsCwmSsm& >(ssm);
    2019:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2021:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2028:          auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    2125:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2127:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    2128:    auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    2129:    auto npsm = static_cast< PotsMuxPsm* >(pmsg->Psm());
    2224:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2238:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2252:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2266:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2282:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2297:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2311:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2326:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2341:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2342:    auto& are = static_cast< PotsCwmActiveReleaseEvent& >(currEvent);
    2357:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2358:    auto& ire = static_cast< PotsCwmInactiveReleaseEvent& >(currEvent);
    2372:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
    2394:    auto& cwt = static_cast< PotsCwmSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    434/2:    EventHandler::Rc ReleaseInactive(Cause::Ind cause, Event*& nextEvent);
  W055 Data could be const
    185:    Cause::Ind cause_;
  W094 Function could be free
    454:    static EventHandler::Rc SendFacilityNack
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.cpp
  W007 Cast down the inheritance hierarchy
    290:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    617:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    622:       auto pssm = static_cast< PotsBcSsm* >(Parent());
    623:       auto ate = static_cast< BcApplyTreatmentEvent* >(sap.CurrEvent());
    640:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    648:       auto& snp = static_cast< AnalyzeSnpEvent& >(currEvent);
    686:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    716:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    811:    auto& init = static_cast< InitiationReqEvent& >(currEvent);
    813:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    908:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    930:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    961:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    963:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    969:          auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    994:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    1019:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1020:    auto& pssm = static_cast< PotsBcSsm& >(*ssm.Parent());
    1040:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1041:    auto& cwtssm = static_cast< PotsCwbSsm& >(ssm);
    1045:       auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1064:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1066:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1070:       auto pmsg = static_cast< Pots_UN_Message* >(ame.Msg());
    1110:    auto& cwtssm = static_cast< PotsCwtSsm& >(ssm);
    1111:    auto& relevt = static_cast< PotsCwtReleaseEvent& >(currEvent);
    1113:    auto pssm = static_cast< PotsBcSsm* >(cwtssm.Parent());
    1159:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
  W044 Member could be private
    252:    void StartTimer(TimerId tid, secs_t duration);
  W055 Data could be const
    147:    Facility::Ind ind_;
  W077 Virtual function is public
    257:    virtual void Cancel() override;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsCwtService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsDiscService.cpp
  W007 Cast down the inheritance hierarchy
    131:    auto& pssm = static_cast< BcSsm& >(*Parent());
    133:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.cpp
  W007 Cast down the inheritance hierarchy
    85:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    175:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    181:       auto htlp = static_cast< PotsHtlFeatureProfile* >(prof->FindFeature(HTL));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsHtlService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.cpp
  W007 Cast down the inheritance hierarchy
    195:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    246:    auto& pmsg = static_cast< const PotsMessage& >(msg);
    249:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(phi->port));
    361:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    414:    auto& pmsg = static_cast< Pots_UN_Message& >(msg);
    747:    auto& npsm = static_cast< PotsMuxPsm& >(psm);
    750:    auto cct = static_cast< PotsCircuit* >(tsw->GetCircuit(port));
    823:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    891:    auto pmsg = static_cast< PotsMessage* >(Context::ContextMsg());
    998:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    999:    auto pmsg = static_cast< Pots_NU_Message* >(ame.Msg());
    1021:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1052:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
    1053:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    1076:    auto& mux = static_cast< PotsMuxSsm& >(ssm);
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsMultiplexer.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    45: using namespace MediaBase;
    46: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W026 Unused argument
    157/1:    PotsMuxSsm(const Message& msg, ProtocolSM& psm);
  W033 Unused function
    76:    PotsMuxPsm(ProtocolLayer& adj, bool upper, Switch::PortId port);
  W044 Member could be private
    159:    void SetProfile(PotsProfile* prof) { prof_ = prof; }
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.cpp
  W007 Cast down the inheritance hierarchy
    55:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    56:    auto msg = static_cast< CipMessage* >(ame.Msg());
    58:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    91:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    108:    auto msg = static_cast< CipMessage* >(Context::ContextMsg());
    110:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    134:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    135:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    137:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    174:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    184:    auto upsm = static_cast< ProxyBcPsm* >(pssm.UPsm());
    208:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    226:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    245:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    246:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    248:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    295:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    313:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    314:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    316:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    358:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    359:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    361:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    412:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    430:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    448:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    466:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    484:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    517:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    518:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    548:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    567:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    568:    auto upsm = static_cast< MediaPsm* >(Context::ContextPsm());
    598:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
    618:    auto& cte = static_cast< BcReleaseCallEvent& >(currEvent);
    619:    auto& pssm = static_cast< PotsBcSsm& >(ssm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W101 Line contains adjacent spaces
    134:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    135:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    136:    auto          sid = msg->GetSignal();
    137:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    139:    CauseInfo*    cci;
    245:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    246:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    247:    auto          sid = msg->GetSignal();
    248:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    250:    CauseInfo*    cci;
    313:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    314:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    315:    auto          sid = msg->GetSignal();
    316:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    318:    CauseInfo*    cci;
    358:    auto&         ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    359:    auto          msg = static_cast< CipMessage* >(ame.Msg());
    360:    auto          sid = msg->GetSignal();
    361:    auto&         pssm = static_cast< PotsBcSsm& >(ssm);
    363:    CauseInfo*    cci;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxyHandlers.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.cpp
  W022 Add using statement
    1: namespace CallBase
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsProxySessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    28: using namespace CallBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    44: using namespace CallBase;
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W033 Unused function
    74:    virtual CliText* CreateText() const override;
  W044 Member could be private
    419:    ProtocolSM* TimerPsm(TimerId tid) const;
  W094 Function could be free
    135:    static void SendRelease(const Message& msg1);
  W112 Override of Base.Display not found
    52: class PotsCallIpService : public UdpIpService
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsStatistics.h
  W020 Using statement in header
    30: using namespace NodeBase;
    31: using namespace CallBase;
  W044 Member could be private
    45:    typedef uint8_t Id;
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.cpp
  W007 Cast down the inheritance hierarchy
    83:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsSusService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    30: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.cpp
  W022 Add using statement
    1: namespace CallBase::Cause
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    119: void PotsTreatmentRegistry::SetCauseToTreatmentQ
    201: PotsTreatmentQueue* PotsTreatmentRegistry::TreatmentQ
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatmentRegistry.h
  W020 Using statement in header
    31: using namespace NodeBase;
    32: using namespace CallBase;
  W044 Member could be private
    57:    void SetCauseToTreatmentQ(Cause::Ind cause, PotsTreatmentQueue::QId qid);
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.cpp
  W006 reinterpret_cast
    85:    auto fake = reinterpret_cast< const PotsTreatmentQueue* >(&local);
    206:    auto fake = reinterpret_cast< const PotsTreatment* >(&local);
  W007 Cast down the inheritance hierarchy
    255:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    299:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
    329:    auto pssm = static_cast< PotsBcSsm* >(ate.Owner());
  W022 Add using statement
    1: namespace CallBase
    1: namespace MediaBase
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsTreatments.h
  W020 Using statement in header
    45: using namespace NodeBase;
    46: using namespace SessionBase;
    47: using namespace MediaBase;
    48: using namespace CallBase;
  W055 Data could be const
    161:    PotsTreatmentQueue::QId qid_;
    165:    Q1Link link_;
    194:    Tone::Id tone_;
    198:    secs_t duration_;
  W077 Virtual function is public
    137:    virtual EventHandler::Rc ApplyTreatment
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.cpp
  W007 Cast down the inheritance hierarchy
    193:    auto& pssm = static_cast< const PotsBcSsm& >(parentSsm);
    195:    auto wmlp = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    438:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    465:    auto& ire = static_cast< InitiationReqEvent& >(currEvent);
    467:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    472:    wmlp_ = static_cast< PotsWmlFeatureProfile* >(prof->FindFeature(WML));
    544:    auto& sap = static_cast< AnalyzeSapEvent& >(currEvent);
    547:    auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    607:       auto& pssm = static_cast< PotsBcSsm& >(*Parent());
    627:    auto pssm = static_cast< PotsBcSsm* >(Parent());
    664:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    669:       auto tmsg = static_cast< TlvMessage* >(ame.Msg());
    671:       auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    692:    auto& wssm = static_cast< PotsWmlSsm& >(ssm);
    693:    auto& pssm = static_cast< PotsBcSsm& >(*wssm.Parent());
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/sn/PotsWmlService.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnIncrement.h
  W020 Using statement in header
    27: using namespace NodeBase;
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/sn/SnModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.cpp
  W006 reinterpret_cast
    89:    auto fake = reinterpret_cast< const MscAddress* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W060 Default copy constructor invoked
    41:    locAddr_(mt.LocAddr()),
    42:    remAddr_(NilLocalAddress),
  W108 Function does not invoke Debug::ft
    77: bool MscAddress::ExternalFid(FactoryId& fid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscAddress.h
  W020 Using statement in header
    41: using namespace NodeBase;
    42: using namespace SessionBase;
  W055 Data could be const
    128:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.cpp
  W007 Cast down the inheritance hierarchy
    151:          tt = static_cast< const TransTrace* >(rec);
    159:          auto mt = static_cast< const MsgTrace* >(rec);
    712:    auto rxnet = static_cast< const TransTrace* >(events_[index]);
    729:             trans = static_cast< const TransTrace* >(rec);
    741:             return static_cast< const MsgTrace* >(rec);
    758:    auto txmsg = static_cast< const MsgTrace* >(events_[index]);
    779:             trans = static_cast< const TransTrace* >(rec);
    786:             auto rxmsg = static_cast< const MsgTrace* >(rec);
    947:          tt = static_cast< const TransTrace* >(rec);
    983:             mt = static_cast< const MsgTrace* >(rec);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/MscBuilder.h
  W020 Using statement in header
    54: using namespace NodeBase;
    55: using namespace SessionBase;
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.cpp
  W006 reinterpret_cast
    100:    auto fake = reinterpret_cast< const MscContext* >(&local);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
  W108 Function does not invoke Debug::ft
    89: bool MscContext::IsEqualTo(const void* rcvr, uint16_t cid) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContext.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W055 Data could be const
    144:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.cpp
  W006 reinterpret_cast
    92:    auto fake = reinterpret_cast< const MscContextPair* >(&local);
  W022 Add using statement
    1: namespace NodeBase
  W108 Function does not invoke Debug::ft
    56: void MscContextPair::Contexts(MscContext*& ctx1, MscContext*& ctx2) const
C:/Users/gregu/Documents/rsc/rsc/st/MscContextPair.h
  W020 Using statement in header
    34: using namespace NodeBase;
  W055 Data could be const
    85:    Q1Link link_;
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.cpp
  W007 Cast down the inheritance hierarchy
    140:    auto ctx = static_cast< Context* >(pool->FirstUsed(bid));
  W022 Add using statement
    1: namespace NodeBase
    1: namespace NodeTools
  W049 Data is init-only
    455:    FunctionGuard guard(FunctionGuard::MakePreemptable, yield);
C:/Users/gregu/Documents/rsc/rsc/st/StIncrement.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    29: using namespace NodeTools;
  W022 Add using statement
    1: namespace NodeBase
  W062 Base class constructor is public
    40:    StSizesCommand() { }
C:/Users/gregu/Documents/rsc/rsc/st/StModule.cpp
  W022 Add using statement
    1: namespace NodeBase
C:/Users/gregu/Documents/rsc/rsc/st/StModule.h
  W020 Using statement in header
    28: using namespace NodeBase;
  W049 Data is init-only
    62:    static bool Registered;
  W094 Function could be free
    58:    static bool Register();
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.cpp
  W007 Cast down the inheritance hierarchy
    69:    return static_cast< StTestData* >(data);
  W022 Add using statement
    1: namespace NodeBase
    1: namespace SessionBase
C:/Users/gregu/Documents/rsc/rsc/st/StTestData.h
  W020 Using statement in header
    32: using namespace NodeBase;
    33: using namespace SessionBase;
  W084 Adjacent arguments have the same type
    70:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W094 Function could be free
    47:    static StTestData* Access(CliThread& cli);
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.cpp
  W007 Cast down the inheritance hierarchy
    509:    auto tpsm = static_cast< TestPsm* >(Psm());
    526:    auto tssm = static_cast< TestSsm* >(RootSsm());
    580:       if(p->GetFactory() == TestFactoryId) return static_cast< TestPsm* >(p);
    858:       SetTestPsm(static_cast< TestPsm* >(&psm));
    986:    auto& ame = static_cast< AnalyzeMsgEvent& >(currEvent);
    987:    auto tmsg = static_cast< TestMessage* >(ame.Msg());
    1025:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1034:    auto apsm = static_cast< SsmFactory* >(afac)->AllocOgPsm(*amsg);
    1045:    auto& tssm = static_cast< TestSsm& >(ssm);
    1063:    auto& tssm = static_cast< TestSsm& >(ssm);
    1082:    auto tmsg = static_cast< TestMessage* >(Context::ContextMsg());
    1083:    auto& tssm = static_cast< TestSsm& >(ssm);
  W022 Add using statement
    1: namespace NetworkBase
    1: namespace NodeBase
    1: namespace SessionBase
  W061 Default assignment operator invoked
    419:       addr = GlobalAddress(addr, dest->EnsurePort()->LocAddr().SbAddr());
C:/Users/gregu/Documents/rsc/rsc/st/TestSessions.h
  W019 Header relies on using statement via #include
    1:  
  W020 Using statement in header
    43: using namespace SessionBase;
  W022 Add using statement
    1: namespace NodeBase
  W044 Member could be private
    264:    void UpdateTestPsm();
    340:    TestPsm* GetTestPsm() const { return testPsm_; }
  W084 Adjacent arguments have the same type
    346:    Message* NextIcMsg(FactoryId fid, SignalId sid, SkipInfo& skip);
  W092 Function could be const
    264:    void UpdateTestPsm();
