//==============================================================================
//
//  mutex
//
#ifndef MUTEX_INCLUDED
#define MUTEX_INCLUDED

#include "chrono"

namespace std
{
class mutex
{
public:
   mutex();
   ~mutex();
   mutex(const mutex& that) = delete;
   mutex& operator=(const mutex& that) = delete;
   void lock();
   void unlock();
};

class timed_mutex
{
public:
   timed_mutex();
   ~timed_mutex();
   timed_mutex(const timed_mutex& that) = delete;
   timed_mutex& operator=(const timed_mutex& that) = delete;
   template<typename Numeric, typename Ratio> bool try_lock_for(const chrono::duration< Numeric, Ratio >& dur);
   void unlock();
};

template < class Mutex > class unique_lock
{
public:
   explicit unique_lock(Mutex& lock);
};
}
#endif
