//==============================================================================
//
//  algorithm
//
#ifndef ALGORITHM_INCLUDED
#define ALGORITHM_INCLUDED

#include "iterator"

namespace std
{
   template< typename T > const T& min(const T& a, const T& b);
   template< typename T > const T& max(const T& a, const T& b);

   template< typename T > void sort
      (iterator_t< T >& begin, iterator_t< T >& end, bool(*sorted)(T& first, T& second));

   template< typename T > iterator_t< T > set_difference
      (const iterator_t< T >& src1beg, const iterator_t< T >& src1end,
      const iterator_t< T >& src2beg, const iterator_t< T >& src2end,
      iterator_t< T >& dstbeg);
   template< typename T > iterator_t< T > set_difference
      (const iterator_t< T >& src1beg, const iterator_t< T >& src1end,
      const iterator_t< T >& src2beg, const iterator_t< T >& src2end,
      iterator_t< T >& dstbeg, bool (*sorted)(T& first, T& second));

   template< typename T > iterator_t< T > set_intersection
      (const iterator_t< T >& src1beg, const iterator_t< T >& src1end,
      const iterator_t< T >& src2beg, const iterator_t< T >& src2end,
      iterator_t< T >& dstbeg);
   template< typename T > iterator_t< T > set_intersection
      (const iterator_t< T >& src1beg, const iterator_t< T >& src1end,
      const iterator_t< T >& src2beg, const iterator_t< T >& src2end,
      iterator_t< T >& dstbeg, bool (*sorted)(T& first, T& second));

   template< typename T > iterator_t< T > set_union
      (const iterator_t< T >& src1beg, const iterator_t< T >& src1end,
      const iterator_t< T >& src2beg, const iterator_t< T >& src2end,
      iterator_t< T >& dstbeg);
   template< typename T > iterator_t< T > set_union
      (const iterator_t< T >& src1beg, const iterator_t< T >& src1end,
      const iterator_t< T >& src2beg, const iterator_t< T >& src2end,
      iterator_t< T >& dstbeg, bool (*sorted)(T& first, T& second));
}

#endif