//==============================================================================
//
//  iterator
//
#ifndef ITERATOR_INCLUDED
#define ITERATOR_INCLUDED

#include "cstddef"

namespace std
{
   template< typename T > struct iterator_t
   {
      iterator_t();
      iterator_t(const iterator_t& that);
      iterator_t& operator=(const iterator_t& that);
      iterator_t& operator++();
      iterator_t& operator++(int);
      iterator_t& operator--();
      iterator_t& operator--(int);
      T& operator*() const;
      T* operator->() const;
   };

   template< typename T > iterator_t< T > next(const iterator_t< T > iter, size_t diff = 1);
   template< typename T > iterator_t< T > prev(const iterator_t< T > iter, size_t diff = 1);
   template< typename T > ptrdiff_t distance(const iterator_t< T > iter1, const iterator_t< T > iter2);
}

#endif