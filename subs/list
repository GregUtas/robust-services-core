//==============================================================================
//
//  list
//
#ifndef LIST_INCLUDED
#define LIST_INCLUDED

#include "iterator"

namespace std
{
   template< typename T > class list
   {
   public:
      typedef iterator_t< const T > iterator;
      list();
      list(const list& that);
      ~list();
      const T& back() const;
      iterator begin();
      iterator cbegin() const;
      iterator cend() const;
      void clear();
      iterator crbegin() const;
      iterator crend() const;
      bool empty() const;
      iterator end();
      iterator erase(iterator& where);
      iterator erase(iterator& first, iterator& last);
      const T& front() const;
      iterator insert(iterator& where, const T& value);
      void pop_back();
      void pop_front();
      void push_back(const T& value);
      void push_front(const T& value);
      iterator rbegin();
      iterator rend();
      size_t size() const;
      void sort();
      void sort(const bool (*sorted)(T& first, T& second));
      void swap(list& that);
   };
}

#endif