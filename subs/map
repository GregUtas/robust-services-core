//==============================================================================
//
//  map
//
#ifndef MAP_INCLUDED
#define MAP_INCLUDED

#include "cstddef"
#include "iterator"
#include "utility"

namespace std
{
   template< typename T1, typename T2 > class map
   {
   public:
      typedef pair< T1, T2 > entry;
      typedef iterator_t< entry > iterator;
      typedef iterator_t< const entry > const_iterator;
      map();
      ~map();
      iterator begin();
      const_iterator cbegin() const;
      const_iterator cend() const;
      void clear();
      size_t count(const T1& key) const;
      const_iterator crbegin() const;
      const_iterator crend() const;
      bool empty() const;
      iterator end();
      iterator erase(iterator pos);
      size_t erase(const T1& key);
      iterator find(const T1& key) const;
      iterator find(const T1& key);
      pair< iterator, bool > insert(entry& item);
      iterator lower_bound(const T1& key) const;
      iterator lower_bound(const T1& key);
      const_iterator rbegin();
      const_iterator rend();
      size_t size() const;
      iterator upper_bound(const T1& key) const;
      iterator upper_bound(const T1& key);
   };
}

#endif