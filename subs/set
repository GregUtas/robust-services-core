//==============================================================================
//
//  set
//
#ifndef SET_INCLUDED
#define SET_INCLUDED

#include "cstddef"
#include "iterator"
#include "utility"

namespace std
{
   template< typename T > class set
   {
   public:
      typedef iterator< T > const_iterator;
      set();
      set(const set& that);
      ~set();
      const_iterator begin() const;
      const_iterator cbegin() const;
      const_iterator cend() const;
      void clear();
      size_t count(const T& key) const;
      const_iterator crbegin() const;
      const_iterator crend() const;
      bool empty() const;
      const_iterator end() const;
      const_iterator erase(const_iterator& where);
      size_t erase(const T& key);
      const_iterator find(const T& key) const;
      const_iterator find(const T& key);
      pair< const_iterator, bool > insert(const T& key);
      const_iterator rbegin() const;
      const_iterator rend() const;
      size_t size() const;
      void swap(set& that);
   };

   template< typename T > iterator< T > inserter(set< T >& items, iterator< T >& iter);
}

#endif