//==============================================================================
//
//  string
//
#ifndef STRING_INCLUDED
#define STRING_INCLUDED

#include "cstddef"
#include "cstdint"
#include "istream"
#include "memory"
#include "ostream"

namespace std
{
   template <typename T> class char_traits { };

   template <typename charT, class traits = char_traits<charT>,
      class alloc = allocator<charT>> class basic_string
   {
   public:
      static const size_t npos = SIZE_MAX;
      basic_string();
      basic_string(const basic_string& that);
      basic_string(const charT* that);
      basic_string(size_t count, charT c);
      basic_string(const charT* begin, const charT* end);
      ~basic_string();
      basic_string& operator=(const basic_string& s);
      basic_string& operator=(const charT* s);
      basic_string& operator=(charT c);
      basic_string& operator+=(const basic_string& s);
      basic_string& operator+=(const charT* s);
      basic_string& operator+=(charT c);
      const charT& operator[](size_t pos) const;
      charT& operator[](size_t pos);
      basic_string& append(const basic_string& s);
      basic_string& append(const charT* s);
      basic_string& append(size_t count, charT c);
      const charT& at(size_t pos) const;
      charT& at(size_t pos);
      const charT& back() const;
      charT& back();
      const charT* begin() const;
      const charT* c_str() const;
      size_t capacity() const;
      void clear();
      int compare(const basic_string& s) const;
      int compare(const charT* s) const;
      int compare(size_t p, size_t n, const basic_string& s) const;
      int compare(size_t p1, size_t n1, const basic_string& s, size_t p2, size_t n2) const;
      bool empty() const;
      const charT* end() const;
      basic_string& erase(size_t pos = 0, size_t num = npos);
      size_t find(const basic_string& s, size_t pos = 0) const;
      size_t find(const charT* s, size_t pos = 0) const;
      size_t find(charT c, size_t pos = 0) const;
      size_t find_first_not_of(const basic_string& s, size_t pos = 0) const;
      size_t find_first_not_of(const charT* s, size_t pos = 0) const;
      size_t find_first_not_of(charT c, size_t pos = 0) const;
      size_t find_first_of(const basic_string& s, size_t pos = 0) const;
      size_t find_first_of(const charT* s, size_t pos = 0) const;
      size_t find_first_of(charT c, size_t pos = 0) const;
      size_t find_last_not_of(const basic_string& s, size_t pos = 0) const;
      size_t find_last_not_of(const charT* s, size_t pos = 0) const;
      size_t find_last_not_of(charT c, size_t pos = 0) const;
      size_t find_last_of(const basic_string& s, size_t pos = 0) const;
      size_t find_last_of(const charT* s, size_t pos = 0) const;
      size_t find_last_of(charT c, size_t pos = 0) const;
      const charT& front() const;
      charT& front();
      basic_string& insert(size_t pos, const basic_string& s);
      basic_string& insert(size_t pos, const charT* s);
      basic_string& insert(size_t pos, size_t count, charT c);
      size_t length() const;
      void pop_back();
      void push_back(charT c);
      basic_string& replace(size_t pos, size_t num, const basic_string& s);
      basic_string& replace(size_t pos, size_t num, const charT* s);
      basic_string& replace(size_t pos, size_t num, size_t count, charT c);
      size_t rfind(const basic_string& s, size_t pos = npos) const;
      size_t rfind(const charT* s, size_t pos = npos) const;
      size_t rfind(charT c, size_t pos = npos) const;
      void shrink_to_fit();
      size_t size() const;
      basic_string& substr(size_t pos = 0, size_t num = npos) const;
   };

   template <typename C, typename T, typename A> basic_string<C, T, A> operator+
      (const basic_string<C, T, A>& s, const basic_string<C, T, A>& t);
   template <typename C, typename T, typename A> basic_string<C, T, A> operator+
      (const basic_string<C, T, A>& s, const C c);
   template <typename C, typename T, typename A> basic_string<C, T, A> operator+
      (const C c, const basic_string<C, T, A>& s);
   template <typename C, typename T, typename A> basic_string<C, T, A> operator+
      (const basic_string<C, T, A>& s, const C* pc);
   template <typename C, typename T, typename A> basic_string<C, T, A> operator+
      (const C* pc, const basic_string<C, T, A>& s);

   template <typename C, typename T, typename A> basic_istream& getline
      (basic_istream& i, basic_string<C, T, A>& s);
   template <typename C, typename T, typename A> basic_ostream& operator<<
      (basic_ostream& o, const basic_string<C, T, A>& s);
   template <typename C, typename T, typename A> basic_istream& operator>>
      (basic_istream& i, const basic_string<C, T, A>& s);

   using string = basic_string<char, char_traits<char>, allocator<char>>;
   using wstring = basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
   using u16string = basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>;
   using u32string = basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>;

   string to_string(int n);
   string to_string(unsigned int n);
   string to_string(long n);
   string to_string(unsigned long n);
   string to_string(long long n);
   string to_string(unsigned long long n);
   string to_string(float n);
   string to_string(double n);
   string to_string(long double n);

   int stoi(const string& s, size_t* len = nullptr, int base = 10);
   long stol(const string& s, size_t* len = nullptr, int base = 10);
   unsigned long stoul(const string& s, size_t* len = nullptr, int base = 10);
   long long stoll(const string& s, size_t* len = nullptr, int base = 10);
   unsigned long long stoull(const string& s, size_t* len = nullptr, int base = 10);
   float stof(const string& s, size_t* len = nullptr);
   double stod(const string& s, size_t* len = nullptr);
   long double stold(const string& s, size_t* len = nullptr);
}

#endif