//==============================================================================
//
//  unordered_map
//
#ifndef UNORDERED_MAP_INCLUDED
#define UNORDERED_MAP_INCLUDED

#include "cstddef"
#include "utility"

namespace std
{
   template< typename T1, typename T2 > class unordered_map
   {
   public:
      typedef pair< T1, T2 > entry;
      unordered_map();
      ~unordered_map();
      entry* begin();
      size_t bucket_count() const;
      entry* cbegin() const;
      entry* cend() const;
      void clear();
      size_t count(const T1& key) const;
      entry* crbegin() const;
      entry* crend() const;
      bool empty() const;
      entry* end();
      size_t erase(const T1& key);
      entry* find(const T1& key) const;
      entry* find(const T1& key);
      pair< entry*, bool > insert(entry& item);
      entry* lower_bound(const T1& key) const;
      entry* lower_bound(const T1& key);
      entry* rbegin();
      entry* rend();
      size_t size() const;
      entry* upper_bound(const T1& key) const;
      entry* upper_bound(const T1& key);
   };

   template< typename T1, typename T2 > class unordered_multimap
   {
   public:
      typedef pair< T1, T2 > entry;
      unordered_multimap();
      ~unordered_multimap();
      entry* begin();
      size_t bucket_count() const;
      entry* cbegin() const;
      entry* cend() const;
      void clear();
      size_t count(const T1& key) const;
      entry* crbegin() const;
      entry* crend() const;
      bool empty() const;
      entry* end();
      size_t erase(const T1& key);
      size_t erase(entry* item);
      entry* find(const T1& key) const;
      pair< entry*, bool > insert(entry& item);
      entry* lower_bound(const T1& key) const;
      entry* rbegin();
      entry* rend();
      size_t size() const;
      entry* upper_bound(const T1& key) const;
   };
}

#endif