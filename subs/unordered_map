//==============================================================================
//
//  unordered_map
//
#ifndef UNORDERED_MAP_INCLUDED
#define UNORDERED_MAP_INCLUDED

#include "cstddef"
#include "iterator"
#include "utility"

namespace std
{
   template< typename T1, typename T2 > class unordered_map
   {
   public:
      typedef pair< T1, T2 > value_type;
      typedef iterator_t< value_type > iterator;
      typedef iterator_t< const value_type > const_iterator;
      unordered_map();
      ~unordered_map();
      iterator begin();
      iterator end();
      iterator rbegin();
      iterator rend();
      const_iterator begin() const;
      const_iterator cbegin() const;
      const_iterator cend() const;
      const_iterator crbegin() const;
      const_iterator crend() const;
      const_iterator end() const;
      const_iterator rbegin() const;
      const_iterator rend() const;
      size_t bucket_count() const;
      void clear();
      size_t count(const T1& key) const;
      bool empty() const;
      pair< const_iterator, const_iterator > equal_range(const T1& key) const;
      pair< iterator, iterator > equal_range(const T1& key);
      size_t erase(const T1& key);
      size_t erase(iterator item);
      const_iterator find(const T1& key) const;
      iterator find(const T1& key);
      pair< iterator, bool > insert(value_type& item);
      size_t size() const;
   };

   template< typename T1, typename T2 > class unordered_multimap
   {
   public:
      typedef pair< T1, T2 > value_type;
      typedef iterator_t< value_type > iterator;
      typedef iterator_t< const value_type > const_iterator;
      unordered_multimap();
      ~unordered_multimap();
      iterator begin();
      iterator end();
      iterator rbegin();
      iterator rend();
      const_iterator begin() const;
      const_iterator cbegin() const;
      const_iterator cend() const;
      const_iterator crbegin() const;
      const_iterator crend() const;
      const_iterator end() const;
      const_iterator rbegin() const;
      const_iterator rend() const;
      size_t bucket_count() const;
      void clear();
      size_t count(const T1& key) const;
      bool empty() const;
      pair< const_iterator, const_iterator > equal_range(const T1& key) const;
      pair< iterator, iterator > equal_range(const T1& key);
      size_t erase(const T1& key);
      size_t erase(iterator item);
      const_iterator find(const T1& key) const;
      iterator find(const T1& key);
      pair< iterator, bool > insert(value_type& item);
      size_t size() const;
   };
}

#endif
